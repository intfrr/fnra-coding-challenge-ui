{"version":3,"sources":["../../../projects/igniteui-angular/src/lib/animations/easings.ts","../../../projects/igniteui-angular/src/lib/animations/fade/index.ts","../../../projects/igniteui-angular/src/lib/animations/flip/index.ts","../../../projects/igniteui-angular/src/lib/animations/rotate/index.ts","../../../projects/igniteui-angular/src/lib/animations/misc/shake.ts","../../../projects/igniteui-angular/src/lib/animations/misc/pulsate.ts","../../../projects/igniteui-angular/src/lib/animations/scale/index.ts","../../../projects/igniteui-angular/src/lib/animations/slide/index.ts","../../../projects/igniteui-angular/src/lib/animations/swing/index.ts","../../../projects/igniteui-angular/src/lib/animations/grow/index.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/igniteui-angular/src/lib/core/navigation/nav.service.ts","../../../projects/igniteui-angular/src/lib/core/navigation/directives.ts","../../../projects/igniteui-angular/src/lib/core/setImmediate.ts","../../../projects/igniteui-angular/src/lib/core/utils.ts","../../../projects/igniteui-angular/src/lib/data-operations/sorting-expression.interface.ts","../../../projects/igniteui-angular/src/lib/data-operations/operations.ts","../../../projects/igniteui-angular/src/lib/data-operations/sorting-strategy.ts","../../../projects/igniteui-angular/src/lib/data-operations/paging-state.interface.ts","../../../projects/igniteui-angular/src/lib/data-operations/filtering-expression.interface.ts","../../../projects/igniteui-angular/src/lib/data-operations/filtering-expressions-tree.ts","../../../projects/igniteui-angular/src/lib/data-operations/grouping-strategy.ts","../../../projects/igniteui-angular/src/lib/data-operations/filtering-strategy.ts","../../../projects/igniteui-angular/src/lib/services/transaction/transaction.ts","../../../projects/igniteui-angular/src/lib/data-operations/data-util.ts","../../../projects/igniteui-angular/src/lib/services/exporter-common/export-utilities.ts","../../../projects/igniteui-angular/src/lib/grids/api.service.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","../../../projects/igniteui-angular/src/lib/services/exporter-common/base-export-service.ts","../../../projects/igniteui-angular/src/lib/services/csv/csv-exporter-options.ts","../../../projects/igniteui-angular/src/lib/services/csv/char-separated-value-data.ts","../../../projects/igniteui-angular/src/lib/services/exporter-common/exporter-options-base.ts","../../../projects/igniteui-angular/src/lib/services/excel/excel-enums.ts","../../../projects/igniteui-angular/src/lib/services/csv/csv-exporter.ts","../../../projects/igniteui-angular/src/lib/services/excel/excel-strings.ts","../../../projects/igniteui-angular/src/lib/services/excel/excel-files.ts","../../../projects/igniteui-angular/src/lib/services/excel/excel-folders.ts","../../../projects/igniteui-angular/src/lib/services/excel/excel-elements-factory.ts","../../../projects/igniteui-angular/src/lib/services/excel/worksheet-data-dictionary.ts","../../../projects/igniteui-angular/src/lib/services/excel/worksheet-data.ts","../../../projects/igniteui-angular/src/lib/services/excel/excel-exporter.ts","../../../projects/igniteui-angular/src/lib/services/overlay/utilities.ts","../../../projects/igniteui-angular/src/lib/services/excel/excel-exporter-options.ts","../../../projects/igniteui-angular/src/lib/core/deprecateDecorators.ts","../../../projects/igniteui-angular/src/lib/services/overlay/position/connected-positioning-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/position/global-position-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/scroll/scroll-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/scroll/NoOpScrollStrategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/position/container-position-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/position/base-fit-position-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/position/elastic-position-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/position/auto-position-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/overlay.ts","../../../projects/igniteui-angular/src/lib/services/overlay/scroll/absolute-scroll-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/scroll/block-scroll-strategy.ts","../../../projects/igniteui-angular/src/lib/services/overlay/scroll/close-scroll-strategy.ts","../../../projects/igniteui-angular/src/lib/services/transaction/base-transaction.ts","../../../projects/igniteui-angular/src/lib/services/transaction/igx-transaction.ts","../../../projects/igniteui-angular/src/lib/services/transaction/igx-hierarchical-transaction.ts","../../../projects/igniteui-angular/src/lib/directives/toggle/toggle.directive.ts","../../../projects/igniteui-angular/src/lib/drop-down/drop-down.common.ts","../../../projects/igniteui-angular/src/lib/core/selection.ts","../../../projects/igniteui-angular/src/lib/drop-down/drop-down-group.component.ts","../../../projects/igniteui-angular/src/lib/drop-down/drop-down-item.base.ts","../../../projects/igniteui-angular/src/lib/drop-down/drop-down-item.component.ts","../../../projects/igniteui-angular/src/lib/core/displayDensity.ts","../../../projects/igniteui-angular/src/lib/drop-down/drop-down.base.ts","../../../projects/igniteui-angular/src/lib/directives/for-of/display.container.ts","../../../projects/igniteui-angular/src/lib/directives/for-of/base.helper.component.ts","../../../projects/igniteui-angular/src/lib/directives/for-of/horizontal.virtual.helper.component.ts","../../../projects/igniteui-angular/src/lib/directives/for-of/virtual.helper.component.ts","../../../projects/igniteui-angular/src/lib/directives/scroll-inertia/scroll_inertia.directive.ts","../../../projects/igniteui-angular/src/lib/directives/for-of/for_of.sync.service.ts","../../../projects/igniteui-angular/src/lib/directives/for-of/for_of.directive.ts","../../../projects/igniteui-angular/src/lib/drop-down/drop-down.component.ts","../../../projects/igniteui-angular/src/lib/drop-down/drop-down-navigation.directive.ts","../../../projects/igniteui-angular/src/lib/directives/hint/hint.directive.ts","../../../projects/igniteui-angular/src/lib/drop-down/public_api.ts","../../../projects/igniteui-angular/src/lib/directives/input/input.directive.ts","../../../projects/igniteui-angular/src/lib/input-group/input-group.common.ts","../../../projects/igniteui-angular/src/lib/directives/label/label.directive.ts","../../../projects/igniteui-angular/src/lib/directives/prefix/prefix.directive.ts","../../../projects/igniteui-angular/src/lib/directives/suffix/suffix.directive.ts","../../../projects/igniteui-angular/src/lib/input-group/inputGroupType.ts","../../../projects/igniteui-angular/src/lib/input-group/input-group.component.ts","../../../projects/igniteui-angular/src/lib/directives/autocomplete/autocomplete.directive.ts","../../../projects/igniteui-angular/src/lib/directives/button/button.directive.ts","../../../projects/igniteui-angular/src/lib/directives/divider/divider.directive.ts","../../../projects/igniteui-angular/src/lib/directives/drag-drop/drag-drop.directive.ts","../../../projects/igniteui-angular/src/lib/directives/drag-drop/drag-drop.strategy.ts","../../../projects/igniteui-angular/src/lib/directives/filter/filter.directive.ts","../../../projects/igniteui-angular/src/lib/directives/focus/focus.directive.ts","../../../projects/igniteui-angular/src/lib/directives/layout/layout.directive.ts","../../../projects/igniteui-angular/src/lib/directives/mask/mask-parsing.service.ts","../../../projects/igniteui-angular/src/lib/directives/mask/mask.directive.ts","../../../projects/igniteui-angular/src/lib/radio/radio.component.ts","../../../projects/igniteui-angular/src/lib/directives/ripple/ripple.directive.ts","../../../projects/igniteui-angular/src/lib/directives/radio/radio-group.directive.ts","../../../projects/igniteui-angular/src/lib/directives/text-highlight/text-highlight.directive.ts","../../../projects/igniteui-angular/src/lib/directives/text-selection/text-selection.directive.ts","../../../projects/igniteui-angular/src/lib/directives/tooltip/tooltip.directive.ts","../../../projects/igniteui-angular/src/lib/directives/date-time-editor/date-time-editor.common.ts","../../../projects/igniteui-angular/src/lib/date-picker/date-picker.utils.ts","../../../projects/igniteui-angular/src/lib/directives/date-time-editor/date-time-editor.directive.ts","../../../projects/igniteui-angular/src/lib/data-operations/filtering-condition.ts","../../../projects/igniteui-angular/src/lib/data-operations/filtering-state.interface.ts","../../../projects/igniteui-angular/src/lib/data-operations/groupby-record.interface.ts","../../../projects/igniteui-angular/src/lib/action-strip/grid-actions/grid-action-button.component.ts","../../../projects/igniteui-angular/src/lib/checkbox/checkbox.component.ts","../../../projects/igniteui-angular/src/lib/grids/selection/selection.service.ts","../../../projects/igniteui-angular/src/lib/grids/row.directive.ts","../../../projects/igniteui-angular/src/lib/icon/icon.service.ts","../../../projects/igniteui-angular/src/lib/action-strip/grid-actions/grid-actions-base.directive.ts","../../../projects/igniteui-angular/src/lib/action-strip/grid-actions/grid-editing-actions.component.ts","../../../projects/igniteui-angular/src/lib/action-strip/grid-actions/grid-pinning-actions.component.ts","../../../projects/igniteui-angular/src/lib/action-strip/action-strip.component.ts","../../../projects/igniteui-angular/src/lib/icon/icon.component.ts","../../../projects/igniteui-angular/src/lib/icon/public_api.ts","../../../projects/igniteui-angular/src/lib/action-strip/action-strip.module.ts","../../../projects/igniteui-angular/src/lib/avatar/avatar.component.ts","../../../projects/igniteui-angular/src/lib/badge/badge.component.ts","../../../projects/igniteui-angular/src/lib/expansion-panel/expansion-panel.common.ts","../../../projects/igniteui-angular/src/lib/expansion-panel/expansion-panel-body.component.ts","../../../projects/igniteui-angular/src/lib/expansion-panel/expansion-panel.directives.ts","../../../projects/igniteui-angular/src/lib/expansion-panel/expansion-panel-header.component.ts","../../../projects/igniteui-angular/src/lib/expansion-panel/expansion-panel.component.ts","../../../projects/igniteui-angular/src/lib/expansion-panel/expansion-panel.module.ts","../../../projects/igniteui-angular/src/lib/banner/banner.directives.ts","../../../projects/igniteui-angular/src/lib/banner/banner.component.ts","../../../projects/igniteui-angular/src/lib/buttonGroup/buttonGroup.component.ts","../../../projects/igniteui-angular/src/lib/core/dates/dateRange.ts","../../../projects/igniteui-angular/src/lib/calendar/calendar.ts","../../../projects/igniteui-angular/src/lib/calendar/calendar-base.ts","../../../projects/igniteui-angular/src/lib/calendar/calendar.directives.ts","../../../projects/igniteui-angular/src/lib/calendar/month-picker-base.ts","../../../projects/igniteui-angular/src/lib/calendar/months-view/months-view.component.ts","../../../projects/igniteui-angular/src/lib/calendar/years-view/years-view.component.ts","../../../projects/igniteui-angular/src/lib/calendar/days-view/daysview-navigation.service.ts","../../../projects/igniteui-angular/src/lib/calendar/days-view/day-item.component.ts","../../../projects/igniteui-angular/src/lib/calendar/days-view/days-view.component.ts","../../../projects/igniteui-angular/src/lib/calendar/calendar.component.ts","../../../projects/igniteui-angular/src/lib/calendar/month-picker/month-picker.component.ts","../../../projects/igniteui-angular/src/lib/calendar/months-view.pipe.ts","../../../projects/igniteui-angular/src/lib/calendar/calendar.module.ts","../../../projects/igniteui-angular/src/lib/card/card.component.ts","../../../projects/igniteui-angular/src/lib/carousel/carousel.directives.ts","../../../projects/igniteui-angular/src/lib/carousel/slide.component.ts","../../../projects/igniteui-angular/src/lib/core/i18n/date-range-picker-resources.ts","../../../projects/igniteui-angular/src/lib/core/i18n/resources.ts","../../../projects/igniteui-angular/src/lib/core/i18n/grid-resources.ts","../../../projects/igniteui-angular/src/lib/core/i18n/paginator-resources.ts","../../../projects/igniteui-angular/src/lib/core/i18n/time-picker-resources.ts","../../../projects/igniteui-angular/src/lib/core/i18n/carousel-resources.ts","../../../projects/igniteui-angular/src/lib/core/i18n/list-resources.ts","../../../projects/igniteui-angular/src/lib/carousel/carousel.component.ts","../../../projects/igniteui-angular/src/lib/chips/chip.component.ts","../../../projects/igniteui-angular/src/lib/chips/chips-area.component.ts","../../../projects/igniteui-angular/src/lib/chips/chips.module.ts","../../../projects/igniteui-angular/src/lib/combo/combo.directives.ts","../../../projects/igniteui-angular/src/lib/combo/combo.api.ts","../../../projects/igniteui-angular/src/lib/combo/combo-item.component.ts","../../../projects/igniteui-angular/src/lib/combo/combo.common.ts","../../../projects/igniteui-angular/src/lib/combo/combo-add-item.component.ts","../../../projects/igniteui-angular/src/lib/combo/combo-dropdown.component.ts","../../../projects/igniteui-angular/src/lib/combo/combo.pipes.ts","../../../projects/igniteui-angular/src/lib/combo/combo.component.ts","../../../projects/igniteui-angular/src/lib/date-picker/date-picker.common.ts","../../../projects/igniteui-angular/src/lib/date-picker/date-picker.pipes.ts","../../../projects/igniteui-angular/src/lib/date-picker/date-picker.directives.ts","../../../projects/igniteui-angular/src/lib/core/enums.ts","../../../projects/igniteui-angular/src/lib/date-picker/calendar-container.component.ts","../../../projects/igniteui-angular/src/lib/date-picker/date-picker.component.ts","../../../projects/igniteui-angular/src/lib/dialog/dialog.directives.ts","../../../projects/igniteui-angular/src/lib/dialog/dialog.component.ts","../../../projects/igniteui-angular/src/lib/directives/template-outlet/template_outlet.directive.ts","../../../projects/igniteui-angular/src/lib/progressbar/progressbar.common.ts","../../../projects/igniteui-angular/src/lib/services/direction/directionality.ts","../../../projects/igniteui-angular/src/lib/progressbar/progressbar.component.ts","../../../projects/igniteui-angular/src/lib/select/select-item.component.ts","../../../projects/igniteui-angular/src/lib/select/select-positioning-strategy.ts","../../../projects/igniteui-angular/src/lib/select/select.component.ts","../../../projects/igniteui-angular/src/lib/select/select-navigation.directive.ts","../../../projects/igniteui-angular/src/lib/select/select-group.component.ts","../../../projects/igniteui-angular/src/lib/select/select.module.ts","../../../projects/igniteui-angular/src/lib/grids/watch-changes.ts","../../../projects/igniteui-angular/src/lib/grids/summaries/grid-summary.ts","../../../projects/igniteui-angular/src/lib/grids/columns/templates.directive.ts","../../../projects/igniteui-angular/src/lib/grids/moving/moving.service.ts","../../../projects/igniteui-angular/src/lib/grids/columns/column.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid.common.ts","../../../projects/igniteui-angular/src/lib/grids/common/enums.ts","../../../projects/igniteui-angular/src/lib/grids/column-actions/column-actions.component.ts","../../../projects/igniteui-angular/src/lib/grids/column-actions/column-actions-base.directive.ts","../../../projects/igniteui-angular/src/lib/grids/column-actions/column-hiding.directive.ts","../../../projects/igniteui-angular/src/lib/grids/column-actions/column-pinning.directive.ts","../../../projects/igniteui-angular/src/lib/grids/toolbar/grid-toolbar.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid.rowEdit.directive.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid-navigation.service.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-position-strategy.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/grid-filtering.service.ts","../../../projects/igniteui-angular/src/lib/grids/resizing/resizing.service.ts","../../../projects/igniteui-angular/src/lib/grids/headers/grid-header.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/base/grid-filtering-cell.component.ts","../../../projects/igniteui-angular/src/lib/grids/headers/grid-header-group.component.ts","../../../projects/igniteui-angular/src/lib/grids/summaries/grid-summary.service.ts","../../../projects/igniteui-angular/src/lib/grids/summaries/summary-cell.component.ts","../../../projects/igniteui-angular/src/lib/grids/selection/drag-select.directive.ts","../../../projects/igniteui-angular/src/lib/grids/summaries/summary-row.component.ts","../../../projects/igniteui-angular/src/lib/list/list.common.ts","../../../projects/igniteui-angular/src/lib/core/touch.ts","../../../projects/igniteui-angular/src/lib/list/list-item.component.ts","../../../projects/igniteui-angular/src/lib/list/list.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-search.component.ts","../../../projects/igniteui-angular/src/lib/grids/resizing/resizer.directive.ts","../../../projects/igniteui-angular/src/lib/grids/resizing/resizer.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/base/grid-filtering-row.component.ts","../../../projects/igniteui-angular/src/lib/grids/moving/moving.drag.directive.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid.directives.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/advanced-filtering/advanced-filtering-dialog.component.ts","../../../projects/igniteui-angular/src/lib/grids/selection/row-selectors.ts","../../../projects/igniteui-angular/src/lib/grids/toolbar/toolbar.directive.ts","../../../projects/igniteui-angular/src/lib/grids/columns/column-group.component.ts","../../../projects/igniteui-angular/src/lib/grids/row-drag.directive.ts","../../../projects/igniteui-angular/src/lib/snackbar/snackbar.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid-base.directive.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid-api.service.ts","../../../projects/igniteui-angular/src/lib/grids/grid/groupby-row.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid-mrl-navigation.service.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid.component.ts","../../../projects/igniteui-angular/src/lib/grids/state.directive.ts","../../../projects/igniteui-angular/src/lib/grids/common/shared.module.ts","../../../projects/igniteui-angular/src/lib/grids/column-chooser-item-base.ts","../../../projects/igniteui-angular/src/lib/grids/hiding/column-hiding-item.directive.ts","../../../projects/igniteui-angular/src/lib/grids/column-chooser-base.ts","../../../projects/igniteui-angular/src/lib/grids/hiding/column-hiding.component.ts","../../../projects/igniteui-angular/src/lib/grids/hiding/hiding.module.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-clear-filters.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-conditional-filter.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-header.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-hiding.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-moving.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-pinning.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-selecting.component.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","../../../projects/igniteui-angular/src/lib/grids/cell.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid-footer/grid-footer.component.ts","../../../projects/igniteui-angular/src/lib/paginator/paginator.component.ts","../../../projects/igniteui-angular/src/lib/grids/common/pipes.ts","../../../projects/igniteui-angular/src/lib/grids/common/grid-pipes.module.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","../../../projects/igniteui-angular/src/lib/grids/selection/selection.module.ts","../../../projects/igniteui-angular/src/lib/grids/resizing/resize-handle.directive.ts","../../../projects/igniteui-angular/src/lib/grids/resizing/resize.module.ts","../../../projects/igniteui-angular/src/lib/grids/moving/moving.drop.directive.ts","../../../projects/igniteui-angular/src/lib/grids/moving/moving.module.ts","../../../projects/igniteui-angular/src/lib/grids/summaries/grid-root-summary.pipe.ts","../../../projects/igniteui-angular/src/lib/grids/summaries/summary.module.ts","../../../projects/igniteui-angular/src/lib/grids/pinning/pinning.directive.ts","../../../projects/igniteui-angular/src/lib/grids/pinning/column-pinning.component.ts","../../../projects/igniteui-angular/src/lib/grids/pinning/pinning.module.ts","../../../projects/igniteui-angular/src/lib/grids/column-actions/column-actions.module.ts","../../../projects/igniteui-angular/src/lib/grids/toolbar/toolbar.module.ts","../../../projects/igniteui-angular/src/lib/grids/columns/column-layout.component.ts","../../../projects/igniteui-angular/src/lib/grids/columns/column.module.ts","../../../projects/igniteui-angular/src/lib/grids/filtering/base/filtering.module.ts","../../../projects/igniteui-angular/src/lib/grids/headers/sorting-index.pipe.ts","../../../projects/igniteui-angular/src/lib/grids/headers/headers.module.ts","../../../projects/igniteui-angular/src/lib/grids/grid-common.module.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid.pipes.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid-row.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid.summary.pipe.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid.details.pipe.ts","../../../projects/igniteui-angular/src/lib/grids/grid/expandable-cell.component.ts","../../../projects/igniteui-angular/src/lib/grids/grid/grid.module.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid-api.service.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid.directives.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid.component.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid-row.component.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid.pipes.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-cell.component.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid.summary.pipe.ts","../../../projects/igniteui-angular/src/lib/grids/tree-grid/tree-grid.module.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/child-grid-row.component.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid-base.directive.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/row-island-api.service.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/row-island.component.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-row.component.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","../../../projects/igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","../../../projects/igniteui-angular/src/lib/navbar/navbar.component.ts","../../../projects/igniteui-angular/src/lib/navigation-drawer/navigation-drawer.directives.ts","../../../projects/igniteui-angular/src/lib/navigation-drawer/navigation-drawer.component.ts","../../../projects/igniteui-angular/src/lib/navigation-drawer/navigation-drawer.module.ts","../../../projects/igniteui-angular/src/lib/slider/slider.common.ts","../../../projects/igniteui-angular/src/lib/slider/thumb/thumb-slider.component.ts","../../../projects/igniteui-angular/src/lib/slider/label/thumb-label.component.ts","../../../projects/igniteui-angular/src/lib/slider/ticks/ticks.component.ts","../../../projects/igniteui-angular/src/lib/slider/ticks/tick.pipe.ts","../../../projects/igniteui-angular/src/lib/slider/slider.component.ts","../../../projects/igniteui-angular/src/lib/switch/switch.component.ts","../../../projects/igniteui-angular/src/lib/tabbar/tabbar.component.ts","../../../projects/igniteui-angular/src/lib/tabs/tabs.directives.ts","../../../projects/igniteui-angular/src/lib/tabs/tabs.common.ts","../../../projects/igniteui-angular/src/lib/tabs/tab-item.component.ts","../../../projects/igniteui-angular/src/lib/tabs/tabs-group.component.ts","../../../projects/igniteui-angular/src/lib/tabs/tabs.component.ts","../../../projects/igniteui-angular/src/lib/time-picker/time-picker.common.ts","../../../projects/igniteui-angular/src/lib/time-picker/time-picker.directives.ts","../../../projects/igniteui-angular/src/lib/time-picker/time-picker.pipes.ts","../../../projects/igniteui-angular/src/lib/time-picker/time-picker.component.ts","../../../projects/igniteui-angular/src/lib/toast/toast.component.ts","../../../projects/igniteui-angular/src/lib/splitter/splitter.component.ts","../../../projects/igniteui-angular/src/lib/splitter/splitter-pane/splitter-pane.component.ts","../../../projects/igniteui-angular/src/lib/splitter/splitter-bar/splitter-bar.component.ts","../../../projects/igniteui-angular/src/lib/splitter/splitter.module.ts","../../../projects/igniteui-angular/src/lib/date-range-picker/date-range-picker-inputs.common.ts","../../../projects/igniteui-angular/src/lib/date-range-picker/date-range-picker.component.ts","../../../projects/igniteui-angular/src/lib/date-range-picker/date-range-picker.module.ts"],"names":["EaseIn","EaseOut","EaseInOut","base","style","opacity","animate","baseParams","delay","duration","easing","sine","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","quad","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","Object","assign","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","back","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","push","__values","o","s","m","__read","ar","error","__spread","concat","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","Injectable","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","NgModule","declarations","exports","providers","queue","counter","eventListenerAdded","run","fn","listener","event","data","cloneArray","array","deep","arr","cloneValue","cloneHierarchicalArray","childDataKey","array_1","array_1_1","item","clonedItem","isArray","mergeObjects","obj1","obj2","merge","isDate","Date","getTime","Map","Set","isObject","_c","keys","_d","toString","parseDate","isNaN","isEqual","getNodeSizeViaRange","range","node","overflow","isFirefox","selectNodeContents","width","getBoundingClientRect","isIE","navigator","appVersion","indexOf","isEdge","test","userAgent","platformId","isBrowser","isPlatformBrowser","isIOS","window","isLeftClick","button","flatten","forEach","el","children","toArray","providedIn","type","Inject","PLATFORM_ID","SortingDirection","HORIZONTAL_NAV_KEYS","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","ROW_ADD_KEYS","SUPPORTED_KEYS","from","HEADER_KEYS","resizeObservable","Observable","observer","instance","ResizeObserver","entries","observe","disconnect","compareMaps","map1","map2","size","match","keys_1","keys_1_1","has","resolveNestedPath","obj","path","parts","current","shift","prop","reverseMapper","mapping","_prop","yieldingLoop","count","chunkSize","callback","chunk","end","Math","min","cb","setImmediate","addEventListener","Function","undefined","windowLocation","location","postMessage","protocol","host","isHierarchyMatch","h1","h2","every","level","index","fieldName","getHierarchy","gRow","hierarchy","expression","groupParent","unshift","DATE_TYPE","DefaultSortingStrategy","_instance","sort","dir","ignoreCase","valueResolver","_this","reverse","Desc","arraySort","compareObjects","compareValues","a","bn","toLowerCase","compareFn","NoopSortingStrategy","expressions","PagingError","FilteringLogic","FilteringExpressionsTreeType","IgxSorting","grid","sortDataRecursive","groupedRecordsByExpression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","getColumnByName","dataType","groupDataRecursive","parent","metadata","groupsRecords","fullResult","expansion","column","group","this_1","groupRow","records","groups","renderedRowHeight","expandState","find","expanded","defaultExpanded","recursiveResult","group_1","e_1","group_1_1","groupItem","slice","IgxDataRecordSorting","_super","IgxGrouping","groupBy","FilteringExpressionsTree","operator","filteringOperands","empty","expressionTree","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","NoopFilteringStrategy","filter","advancedExpressionsTree","TransactionType","TransactionEventOrigin","BaseFilteringStrategy","findMatchByExpression","rec","cond","condition","val","logic","searchVal","matchRecord","matchOperand","operand","And","Or","FilteringStrategy","_instace","DataType","String","Number","Boolean","DataUtil","sorting","treeGridSort","hierarchicalData","hr","cloneTreeGridRecord","hierarchicalRecord","rowID","isFilteredOutParent","grouping","splice","page","dataLength","recordsPerPage","countPages","countRecords","None","IncorrectPageIndex","IncorrectRecordsPerPage","ceil","correctPagingState","maxPage","mergeTransactions","transactions","primaryKey","deleteRows","rowId","transaction","UPDATE","newValue","DELETE","ADD","map","mergeHierarchicalTransactions","findParentFromPath","collection","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","parseValue","parseFloat","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","GridBaseAPIService","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","hasPinnedRecords","_filteredUnpinnedData","enabled","getAggregatedChanges","getTransactionLog","getRowData","get_all_data","get_row_index_in_data","dataCollection","record","recordRef","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","cell","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","crudService","update_cell","editValue","cellEditingBlocked","cancel","exitCellEdit","submit_add_value","update_add_cell","endAddRow","createEditEventArgs","oldValue","cellEdit","emit","doneArgs","createDoneEditEventArgs","cellEditDone","summaryService","clearSummaryCache","updateData","selectionService","isRowSelected","deselectRow","selectRowById","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","_update_row","rowInEditMode","newData","transactionState","getState","update_row","selected","hasSummarized","rowEdit","cachedRowData","hasChanges","endPending","newId","rowEditDone","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","fieldFilterIndex","prepare_filtering_expression","filter_global","_b","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","myExpr","clear_groupby","should_apply_number_style","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","parentRowID","deleteRowFromData","deleteRowById","hasRowInNonDeletedState","onRowDeleted","clearHeaderCBState","notifyChanges","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","get_row_expansion_state","states","expansionStates","getDefaultExpandState","set_row_expansion_state","expandedStates","allow_expansion_state_change","onRowToggle","set","get_rec_by_id","isToggleKey","TreeGridFilteringStrategy","filterImpl","filteredChildren","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","filterStrategy","advancedFilteringExpressionsTree","pipeTrigger","filteringPipeTrigger","pinned","resetFilteredOutProperty","setFilteredData","expandAllRecursive","updateNonProcessedRecord","Pipe","pure","CsvFileTypes","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onExportEnded","EventEmitter","onRowExport","onColumnExport","_columnWidthList","export","options","Error","_columnList","hidden","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnWidth","columnInfo","skip","formatter","skipFormatter","max","hiddenColumn","prepareData","exportData","k","fill","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","prepareDataAsync","processDataRecordsAsync","dr","processField","escapeChars","safeValue","some","includes","recordData","keyName","processRecord","join","currentData","dataRecords","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","getExtensionFromFileType","setFileType","fType","extension","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","newName","replace","ExcelFolderTypes","ExcelFileTypes","IgxCsvExporterService","_stringData","saveFile","csvData","exportFile","Blob","Output","ExcelStrings","getRels","XML_STRING","getApp","worksheetName","getCore","getTheme","getStyles","hasNonStringValues","cellXFCount","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","tableParts","sheetOutlineProp","sOutlineLevel","getSharedStringXML","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","RootRelsFile","writeElement","folder","worksheetData","file","AppFile","CoreFile","WorkbookRelsFile","isEmpty","ThemeFile","WorksheetFile","maxOutlineLevel","rowHeight","dictionary","dataDictionary","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","writeElementAsync","rows","firstCell","rowDataArr","processRow","originalData","columnName","cellValue","savedValue","isSavedAsString","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","TablesFile","lastColumn","values","sortString","sortingExpression","sc","WorksheetRelsFile","RootExcelFolder","childFiles","childFolders","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","TablesExcelFolder","WorksheetsRelsExcelFolder","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","columnWidthsList","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_columnWidths","_columnTypeInfo","isHeader","isFinite","sanitizedValue","sanitizeValue","getValue","_keysAreValid","_keys","getTextWidth","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolderAsync","zip","childFolder","folderInstance","zipFolder","folderName","_g","childFile","fileInstance","maxLevel_1","columnWidthList","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","xlsx","atob","compression","HorizontalAlignment","VerticalAlignment","RelativePositionStrategy","RelativePosition","AbsolutePosition","IgxExcelExporterOptions","_columnWidth","_rowHeight","_worksheetName","DeprecateClass","message","isMessageShown","originalClass","class_1","targetName","showMessage","DeprecateMethod","descriptor","originalMethod_1","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","Util","getTargetRect","targetRect","bottom","left","right","top","HTMLElement","Point","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","settings","ConnectedPositioningStrategy","_defaultSettings","horizontalDirection","Right","verticalDirection","Bottom","horizontalStartPoint","Left","verticalStartPoint","openAnimation","closeAnimation","minSize","calculateElementRectangles","contentElement","elementRect","position","initialCall","targetElement","rects","setStyle","clone","element","connectedFit","horizontalOffset","verticalOffset","startPoint","wrapperRect","parentElement","round","Center","Top","Middle","GlobalPositionStrategy","classList","setPosition","justifyContent","alignItems","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","ScrollStrategy","ContainerPositionStrategy","BaseFitPositionStrategy","contentElementRect","_initialSettings","viewPortRect","updateViewPortFit","shouldFitInViewPort","fitInViewport","calculateLeft","fitHorizontal","forward","calculateTop","fitVertical","ElasticPositionStrategy","transformString","maxReduction","leftExtend","rightExtend","reduction","translation","topExtend","bottomExtend","AutoPositionStrategy","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","abs","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","platformUtil","_componentId","_overlayInfos","destroy$","Subject","_cursorStyleIsSet","excludeFromOutsideClick","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","closeOnEscape","onOpening","onAppended","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","target_1","overlayElement","elementRef","nativeElement","contains","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","createAbsoluteOverlaySettings","outlet","positionSettings","createAbsolutePositionSettings","createRelativeOverlaySettings","createRelativePositionSettings","createPositionStrategy","Above","Below","After","Before","Default","Connected","Elastic","Auto","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","setOffset","deltaX","deltaY","transformX","transformY","translate","eventArgs","componentRef","detachView","hostView","destroy","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","addCloseOnEscapeListener","wrapperElement","applyAnimationParams","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","insertBefore","getWrapperElement","getContentElement","getOverlayElement","wrapper","content","stopPropagation","_overlayElement","cleanUp","removeCloseOnEscapeListener","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","fromEvent","pipe","takeUntil","subscribe","_cursorOriginalValue","cursor","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","_keyPressEventListener","targetOverlay","unsubscribe","ngOnDestroy","complete","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","DOCUMENT","NgZone","PlatformUtil","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_id","_scrollContainer","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","_initialScrollTop","_initialScrollLeft","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","getAggregatedValue","updateValue","commit","clear","startPending","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","actions","origin","pending","pendingState","pendingChange","change","aggregatedValue","originalValue","END","updateRecord","delete","CLEAR","lastActions","currentActions","currentActions_1","e_3","currentActions_1_1","UNDO","actions_1","actions_1_1","action","REDO","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","primaryKeyOrId","IgxToggleDirective","cdr","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","closedEventArgs","owner","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayAppendedSub","appendedEventArgs","_overlayOpenedSub","openedEventArgs","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","IgxOverlayOutletDirective","Navigate","DropDownActionKey","ESCAPE","ENTER","SPACE","IGX_DROPDOWN_BASE","InjectionToken","IgxSelectionAPIService","selection","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_item","select_items","delete_item","delete_items","deselectedItem","deselect_item","deselect_items","is_item_selected","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBaseDirective","dropDown","_focused","_selected","_index","_disabled","selectedChange","itemIndex","displayDensity","isSelectable","items","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","ensureItemFocus","allowItemsFocus","focusedItem","focused","focus","preventScroll","clicked","IgxDropDownItemComponent","focusedState","focusedIndex","DisplayDensity","comfortable","cosy","compact","DisplayDensityToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","IgxDropDownBaseDirective","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Down","navigateLast","Up","navigateNext","navigatePrev","parentRect","_viewContainer","notVirtual","ViewContainerRef","ViewChild","read","static","VirtualHelperBaseDirective","scrollAmount","_size","_afterViewInit","_detached","_scrollNativeSize","calculateScrollNativeSize","ngAfterViewInit","delayTime","throttleTime","handleMutations","destroyed","hasSize","contentRect","isAttachedToDom","restoreScroll","div","scrollWidth","offsetWidth","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","scrollNativeSize","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","baseDeltaMultiplier","firefoxDeltaMultiplier","targetElem","evt","onWheel","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","ctrlKey","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","deltaScaledX","deltaMode","calcAxisCoords","wheelDeltaY","deltaScaledY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","IgxForOfScrollSyncService","_masterScroll","setScrollMaster","scroll","getScrollMaster","IgxForOfContext","$implicit","even","IgxForOfDirective","_template","_differs","resolver","syncScrollService","_totalItemCount","onChunkLoad","onScrollbarVisibilityChanged","onContentSizeChange","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","contentResizeNotify","totalItemCount","newSize","initSizesCache","igxForOf","sizeDiff","scrollComponent","_adjustScrollPositionAfterSizeChange","dc","getScroll","igxForContainerSize","removeScrollEventListeners","func","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","DisplayContainerComponent","createComponent","scrollDirection","touchAction","_calculateChunkSize","getIndexAt","input","embeddedView","_vcr","createEmbeddedView","getContextIndex","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","destructor","leading","trailing","runTask","updateSizes","onHScroll","hvFactory","_updateHScrollOffset","contentObserver","ngOnChanges","changes","forOf","currentValue","igxForTrackBy","getTypeNameForDebugging","defaultItemSize","firstChange","_applyChanges","containerSize","_recalcOnContainerChange","diff","_updateSizeCache","markForCheck","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollNativeSize","getScrollForIndex","_calcVirtualScrollTop","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","l","rNodes","rootNodes","nodeType","Node","ELEMENT_NODE","nextElementSibling","rNode","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","start","container","embView","scrollFocus","updateTemplateContext","context","insert","activeElement","blur","_trackByFn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","_calcMaxChunkSize","getElement","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","resetScrollPosition","scrollable","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","currentScrollTop","realPercentScrolled","dim","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","onStable","_updateViews","entryComponents","IgxScrollInertiaModule","IgxDropDownComponent","virtDir","toggleDirective","scrollContainerRef","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","focusItem","updateItemFocus","onToggleOpening","_scrollPosition","onToggleContentAppended","scrollToItem","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","isSelectionValid","provide","useExisting","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxHintPosition","IgxToggleModule","IgxHintDirective","_element","_position","START","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","IgxInputState","nativeValidationAttributes","IgxInputDirective","inputGroup","ngModel","formControl","_valid","INITIAL","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","INVALID","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","VALID","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","IgxInputGroupBase","NgModel","FormControlName","defaultClass","IgxPrefixDirective","IgxInputGroupEnum","IgxSuffixDirective","IgxInputGroupThemeEnum","IGX_INPUT_GROUP_TYPE","IgxInputGroupComponent","_inputGroupType","_type","_filled","_variant","suppressInputAutofocus","hasWarning","hintClickHandler","ngAfterContentInit","variant","getComputedStyle","getPropertyValue","hints","IgxLabelDirective","IgxPrefixModule","IgxSuffixModule","IgxAutocompleteDirective","_shouldBeOpen","onItemSelected","autofill","select","model","setValue","highlightFirstItem","defaultSettings","autocompleteSettings","listId","onArrowDown","onTab","IgxDropDownModule","IgxButtonDirective","_defaultType","_cssClassPrefix","buttonClick","removeClass","addClass","_color","color","_backgroundColor","_label","setAttribute","Renderer2","IgxDividerType","SOLID","DASHED","IgxDividerDirective","_inset","middle","vertical","baseMargin","DragDirection","IgxDefaultDropStrategy","dropAction","drag","drop","atIndex","IgxAppendDropStrategy","dragElement","dropAreaElement","IgxPrependDropStrategy","IgxInsertDropStrategy","_pageX","_pageY","baseClass","IgxDragDirective","viewContainer","zone","renderer","ghostContext","dragTolerance","dragDirection","BOTH","ghost","ghostClass","dragStart","dragMove","dragEnd","dragClick","ghostCreate","ghostDestroy","transitioned","selectDisabled","defaultReturnDuration","animInProgress","_lastX","_lastY","_dragStarted","_ghostHostX","_ghostHostY","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","_offsetX","_defaultOffsetX","_offsetY","_defaultOffsetY","IgxDragLocation","baseOriginLeft","baseOriginTop","PointerEvent","ghostElement","ghostLeft","baseLeft","ghostTop","baseTop","getTransformX","getTransformY","ghostMarginLeft","ghostMarginTop","dragHandles","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","onPointerLost","touchEventsEnabled","onTransitionEnd","setLocation","newLocation","offsetHostX","ghostHost","ghostHostOffsetLeft","offsetHostY","ghostHostOffsetTop","getWindowScrollLeft","getWindowScrollTop","setTransformXY","transitionToOrigin","customAnimArgs","startLocation","_ghostStartX","_ghostStartY","createGhost","transitionProperty","timingFunction","transitionDelay","transitionTo","movedElem","targetRects","dragIgnoredElems","handleFound","handle","currentTarget","setPointerCapture","ghostOffsetX","ghostOffsetY","totalMovedX","totalMovedY","dragStartArgs_1","originalEvent","startX","startY","moveArgs","nextPageX","nextPageY","setPageX","setPageY","updatedTotalMovedX","VERTICAL","updatedTotalMovedY","HORIZONTAL","lastMovedX","lastMovedY","translateX","translateY","dispatchDragEvents","dispatchDropEvent","dynamicGhostRef","ghostTemplate","cloneNode","createEventArgs","topDropArea","customEventArgs","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","ghostDestroyArgs","viewPortX","pageXOffset","viewPortY","pageYOffset","elements","eventName","dragLeaveEvent","createEvent","initCustomEvent","posX","matrix","posY","ghostPosition","offsetParent","IgxDragHandleDirective","IgxDragIgnoreDirective","IgxDropDirective","enter","over","leave","dropped","droppable","dragover","_dropStrategy","classRef","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","dragData","isDragLinked","onDragDrop","elementsAtPoint","insertIndex","getInsertIndexAt","dragLinkArray","dragChannel","dropLinkArray","dropChannel","dropLinks","dragLinks","draggedDir","dropChildren","childUnder","draggedElemIndex","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","MASK_FLAGS","MaskParsingService","applyMask","inputVal","maskOptions","outputVal","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndices","getNonLiteralIndices","literalValues","mask_1","mask_1_1","promptChar","replaceCharAt","nonLiteralValues","getNonLiteralValues","validateCharOnPosition","pos","nonLiteralValues_1","nonLiteralValues_1_1","parseValueFromMask","maskedValue","maskedValue_1","maskedValue_1_1","replaceInMask","literalsPositions","chars","strValue","substring","inputChar","isValid","charAt","RegExp","nonLiteralsIndices","value_1","value_1_1","noop","IgxMaskDirective","maskParser","onValueChange","_end","_start","_oldText","_dataValue","_onTouchedCallback","_onChangeCallback","selectionStart","selectionEnd","_hasDropAction","_droppedData","ngAfterViewChecked","onKeyDown","keyCode","charCode","_stopPropagation","_key","onInputChanged","valueToParse","replacedData","setSelectionRange","rawVal","includeLiterals","formattedValue","afterInput","onPaste","showMask","showDisplayValue","onDrop","dataTransfer","getData","focusedValuePipe","displayValuePipe","writeValue","registerOnChange","registerOnTouched","multi","RadioLabelPosition","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","_onLabelClick","radio","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","clientX","clientY","dimensions","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","_initRadioButtons","radioButtons","props_1","_selectedRadioButtonChanged","IgxRippleModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","_defaultCssClass","_defaultActiveCssClass","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextSelectionDirective","selectionState","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","useAnimation","hidingArgs","tooltip","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","DatePart","DATE_CHARS","TIME_CHARS","DatePickerUtil","inputData","dateTimeParts","dp","getCleanVal","Month","Year","daysInMonth","Hours","Minutes","Seconds","parseDateTimeFormat","locale","DEFAULT_LOCALE","getDefaultInputFormat","formatArray","currentPart","determineDatePart","ensureLeadingZero","Intl","DateTimeFormat","formatToParts","SHORT_DATE_MASK","getDefaultLocaleMask","SEPARATOR","formatType","getMask","formatDate","timezone","formattedDate","logMissingLocaleSettings","getLocaleDateFormat","displayFormat","targetKey","FormatWidth","isDateOrTimeChar","spinDate","delta","newDate","isSpinLoop","maxDate","getFullYear","getMonth","date","getDate","setDate","spinMonth","month","setMonth","spinYear","setFullYear","spinHours","hours","getHours","setHours","spinMinutes","minutes","getMinutes","setMinutes","spinSeconds","seconds","getSeconds","setSeconds","spinAmPm","currentDate","amPmFromMask","greaterThanMaxValue","maxValue","includeTime","includeDate","_maxValue","lessThanMinValue","minValue","_minValue","part","repeat","datePart","trimEmptyPlaceholders","AmPm","Literal","parseDateFormat","maskValue","dateStruct","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","fillDatePartsPositions","getInputMask","inputMask","parseDateArray","dateFormatParts","prevDateValue","year","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","yearFormat","getDateFormatPart","day","originalYear","fullYear","NaN","maskToPromptChars","PROMPT_CHAR","getModifiedDateInput","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","isValidDate","parse","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","DEFAULT_INPUT_FORMAT","IgxDateTimeEditorDirective","_locale","valueChange","validationFailed","onTouchCallback","onChangeCallback","onValidatorChange","_format","inputFormat","updateMask","_inputDateParts","updateInputFormat","_inputFormat","increment","targetDatePart","spinValue","decrement","validate","inputIsComplete","maxValueAsDate","minValueAsDate","hasTimeParts","hasDateParts","registerOnValidatorChange","setDisabledState","isDisabled","parsedDate","userInput","altKey","moveCursor","spin","_isFocused","emptyMask","getMaskedValue","toLocaleString","targetValue","getPartValue","defPlaceholder","valueInRange","formatPart","_oldValue","toTwelveHourFormat","hour","datePartInfo","partLength","prependValue","prependChar","getNewPosition","cursorPos","NG_VALIDATORS","LOCALE_ID","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","now","td","yesterday","dateFormat","milliseconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxGridActionButtonComponent","onActionClick","asMenuItem","classNames","handleClick","preventEvent","LabelPosition","IgxCheckboxComponent","indeterminate","readonly","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxRow","includeNewValue","isAddRow","updatedData","IgxCell","castToNumber","inlineEditorTemplate","cellID","IgxGridCRUDService","isInCompositionMode","_cellEditingBlocked","_rowEditingBlocked","createCell","createRow","sameRow","sameCell","columnID","enterEditMode","cellInEditMode","tbody","addRow","beginAddRow","newCell","rowEditing","beginRowEdit","beginCellEdit","rowEditingBlocked","endRowEdit","rowEditEnter","endEditMode","openRowOverlay","exitRowEdit","rowEditingOverlay","endRowTransaction","enterAddMode","cellEditEnter","endCellEdit","cellEditExit","closeRowEditingOverlay","targetInEdit","IgxGridSelectionService","dragMode","keyboardState","pointerState","columnsState","temp","_ranges","rowSelection","columnSelection","initPointerState","initKeyboardState","initColumnsState","addKeyboardRange","ranges","isCellSelectable","generateRange","primaryButton","active","ctrl","addToRange","isActiveNode","isInMap","isActive","hasColumnLayouts","layout","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","navigation","isDataRow","keyboardStateOnFocus","emitter","dom","kbState","isChromium","_moveSelectionChrome","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","selectRange","mergeMap","source","pair","newValue_1","pointerEnter","buttons","pointerUp","restoreTextSelection","clearAcriveEl","getSelection","rangeCount","_selectionRange","getRangeAt","collapse","removeAllRanges","addRange","createRange","Range","selectNode","getSelectedRows","clearRowSelection","removedRec","isFilteringApplied","getRowIDs","allData","rID","emitRowSelectionEvent","selectAllRows","addedRows","clearPrevSelection","isRowSelectable","isRowDeleted","isMultiRowSelectionEnabled","removed","selectRowsWithNoEvent","rowIDs","allRowsSelected","deselectRowsWithNoEvent","selectMultipleRows","gridData","lastRowID","currIndex","getRowDataById","added","areAllRowSelected","dataItemsID","hasSomeRowSelected","currSelection","areEqualCollections","onRowSelectionChange","clearAllSelectedRows","pinnedRecordsCount","_filteredSortedUnpinnedData","filteredSortedData","rData","getSelectedColumns","isColumnSelected","selectColumn","selectColumnsRange","stateColumn","colField","emitColumnSelectionEvent","selectColumns","fields","filedStart","columnToVisibleIndex","columnsFields","visibleColumns","columnGroup","selectable","oldAdded","selectColumnsWithNoEvent","deselectColumn","deselectColumnsWithNoEvent","deselectColumns","onColumnSelectionChange","clearAllSelectedColumns","vendor","IgxRowDirective","animateAdd","onAnimationEnd","defaultCssClass","inEditMode","_rowData","isRecordPinned","pinRow","unpinRow","_addRow","multiRowLayoutRowSize","QueryList","_cells","cList","item1","item2","resolveClasses","groupingExpressions","pinnedColumns","unpinnedColumns","showRowSelectors","rowDraggable","dragRowID","editRowState","deleted","shiftKey","showActionStrip","actionStrip","onRowSelectorClick","update","isCellActive","activeNode","pin","unpin","shouldDisplayPinnedChip","animationEndHandler","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","dragClass","dragging","defaultDragIndicatorCssClass","rowDragging","beginAddRowByIndex","ViewChildren","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","_iconLoaded","iconLoaded","asObservable","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxGridActionsBaseDirective","iconService","differs","asMenuItems","strip","isRow","IgxGridEditingActionsComponent","iconsRendered","addChild","registerIcons","startEdit","firstEditable","editable","hasEditableColumns","deleteRow","addRowHandler","asChild","isRoot","hasChildren","IgxGridPinningActionsComponent","registerSVGIcons","isRowPinningToTop","scrollToRow","pinLeft","unpinLeft","jumpDown","jumpUp","templateRef","IgxActionStripComponent","_hidden","menuOverlaySettings","classes","hostClass","actionButtons","_menuItems","menu","$event","allButtons","closeMenu","IgxActionStripMenuItemDirective","IgxIconComponent","_el","ref","ariaHidden","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxButtonModule","IgxIconModule","IgxAvatarSize","SMALL","MEDIUM","LARGE","IgxAvatarType","INITIALS","IMAGE","ICON","CUSTOM","IgxAvatarComponent","roundShape","src","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxBadgeType","PRIMARY","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","setClasses","_e","IGX_EXPANSION_PANEL_COMPONENT","IgxExpansionPanelBodyComponent","panel","_labelledBy","ICON_POSITION","LEFT","NONE","RIGHT","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","onInteraction","renderedTemplate","customIconRef","defaultIconRef","onAction","openPanel","expand","closePanel","Host","IgxExpansionPanelIconDirective","IgxExpansionPanelComponent","animationSettings","collapsedChange","onCollapsed","onExpanded","labelledBy","headerId","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelTitleDirective","IgxAvatarModule","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerActionsDirective","ButtonGroupAlignment","IgxExpansionPanelModule","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","zIndex","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","_isVertical","horizontal","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","DateRangeType","TimeDeltaInterval","WEEKDAYS","MDAYS","stop","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","dRange","datesInMs","datesInMs_1","e_2","datesInMs_1_1","ScrollMonth","Calendar","firstWeekDay","SUNDAY","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","e_4","monthdatescalendar","dates","units","ret","checkRollover","setTime","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","getFirstViewDate","activeViewIdx","getNextMonth","getPrevMonth","getNextYear","getPrevYear","getWeekNumber","firstJan","dayOfYear","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","CalendarSelection","SINGLE","MULTI","RANGE","IgxCalendarBaseDirective","hideOutsideDays","viewDateChanged","activeViewChanged","_selection","rangeStarted","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectedDatesWithoutFocus","valueDate","getDateOnly","selectDate","_viewDate","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","newDates","selDates","valueDateOnly_1","isDateDisabled","valueOf","excludeDisabledDates","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectMultipleInMonth","valueDateOnly","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","CalendarView","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","IgxMonthPickerBaseDirective","_activeView","DEFAULT","DECADE","changeYear","previousViewDate","activeView","yearsBtns","idx","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_date","_monthFormat","initMonthFormatter","_calendarModel","activeMonth","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","monthsRef","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","resetActiveMonth","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","generateYearRange","yearTracker","calendarDir","previousElementSibling","currentYear","HAMMER_GESTURE_CONFIG","useClass","Direction","IgxDayItemComponent","isLastInRange","isFirstInRange","isWithinRange","onDateSelection","isInactive","today","outOfRangeDates","isHidden","isOutOfRange","isSingleSelection","specialDates","isWeekend","IgxDaysViewNavigationService","focusNextDate","nextView","childElementCount","nextDate","monthView","isFocusable","dayIsNextMonth","nextMonthView","prevMonthView","daysNavService","changeDaysView","monthAction","NEXT","PREV","onViewChanging","focusHomeDate","focusFirstDay","focusEndDate","focusLastDay","IgxDaysViewComponent","activeDateChange","monthsViewBlur","shouldResetDate","_activeDate","toLocaleDateString","isToday","activeDate","disableOutOfRangeDates","tabIndex","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","isSelected","checkForRange","Between","focusActiveDate","selectDay","Specific","getFirstMonthView","getLastMonthView","onKeydownArrow","IgxCalendarComponent","hasHeader","showWeekNumbers","animationAction","isKeydownTrigger","_monthsViewNumber","startPrevMonthScroll","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","daysView","prevMonthBtn","nextMonthBtn","resetActiveDate","YEAR","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","setSiblingMonths","monthViews","_monthViewsChanges$","switchMap","skipLast","suppressBlur","onActiveViewDecade","dacadeView","onActiveViewDecadeKB","getFormattedDate","monthday","childClicked","deselectDateInMonthViews","viewChanging","changeMonth","monthsBtns","onActiveViewYear","monthsView","focusMonth","attributes","onActiveViewYearKB","getViewDate","animationDone","fromState","toState","viewRendered","mv","onKeydownPageDown","isPageDown","dayItem","onKeydownShiftPageUp","yearView","getMonthView","animations","transition","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxMonthPickerComponent","yearAction","nextYear","previousYear","changeYearKB","yearsBtn","IgxMonthViewSlotsCalendar","IgxGetViewDateCalendar","calendar","wholeDate","FormsModule","IgxCardType","ELEVATED","OUTLINED","IgxCardComponent","IgxCardActionsLayout","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","IgxCardHeaderComponent","IgxCardMediaDirective","IgxCardContentDirective","IgxCardFooterDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardThumbnailDirective","IgxSlideComponent","_active","_destroy$","previous","activeChange","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_filter_operator_and","igx_grid_filter_operator_or","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_select_all","igx_grid_excel_select_all_search_results","igx_grid_excel_add_to_filter","igx_grid_excel_blanks","igx_grid_excel_hide","igx_grid_excel_show","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_select","igx_grid_excel_text_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_boolean_filter","igx_grid_excel_custom_filter","igx_grid_advanced_filter_title","igx_grid_advanced_filter_and_group","igx_grid_advanced_filter_or_group","igx_grid_advanced_filter_end_group","igx_grid_advanced_filter_create_and_group","igx_grid_advanced_filter_create_or_group","igx_grid_advanced_filter_and_label","igx_grid_advanced_filter_or_label","igx_grid_advanced_filter_add_condition","igx_grid_advanced_filter_ungroup","igx_grid_advanced_filter_delete","igx_grid_advanced_filter_delete_filters","igx_grid_advanced_filter_initial_text","igx_grid_advanced_filter_column_placeholder","igx_grid_advanced_filter_value_placeholder","igx_grid_pinned_row_indicator","igx_grid_hiding_check_all_label","igx_grid_hiding_uncheck_all_label","igx_grid_pinning_check_all_label","igx_grid_pinning_uncheck_all_label","igx_grid_toolbar_actions_filter_prompt","igx_grid_snackbar_addrow_label","igx_grid_snackbar_addrow_actiontext","igx_grid_actions_edit_label","igx_grid_actions_add_label","igx_grid_add_row_label","igx_grid_actions_add_child_label","igx_grid_actions_delete_label","igx_grid_actions_pin_label","igx_grid_actions_unpin_label","igx_grid_actions_jumpUp_label","igx_grid_actions_jumpDown_label","PaginatorResStrings","igx_paginator_label","igx_paginator_pager_text","igx_paginator_first_page_button_text","igx_paginator_previous_page_button_text","igx_paginator_last_page_button_text","igx_paginator_next_page_button_text","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","DateRangePickerResStrings","igx_date_range_picker_date_separator","CarouselResStrings","igx_carousel_of","ListResStrings","igx_list_no_items","igx_list_loading","updateResourceStrings","currentStrings","newStrings","CarouselIndicatorsOrientation","CarouselAnimationType","none","slide","fade","CarouselHammerConfig","DIRECTION_HORIZONTAL","IgxCarouselComponent","iterableDiffers","loop","pause","keyboardSupport","gesturesSupport","maximumIndicatorsCount","indicatorsOrientation","indicatorTemplate","nextButtonTemplate","prevButtonTemplate","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","_resourceStrings","differ","animationDuration","animationPosition","newDuration","_interval","restartInterval","slides","initSlides","lastInterval","clearInterval","unsubscriber","isDestroyed","onSlideActivated","currentSlide","previousSlide","animationStarted","leaveAnimationPlayer","enterAnimationPlayer","resetAnimations","playAnimations","carousel","playLeaveAnimation","playEnterAnimation","finishAnimations","getAnimation","trans","enterAnimation","leaveAnimation","any","ind","forEachAddedItem","total","updateSlidesSelection","defaultIndicator","defaultNextButton","defaultPrevButton","setAriaLabel","resourceStrings","getNextIndex","getPrevIndex","playing","newSlides","notifyOnChanges","prev","stoppedByInteraction","resetInterval","setInterval","tick","onTap","isPlaying","last","onPanLeft","onPanRight","resetSlideStyles","slideWidth","panOffset","isFinal","incomingSlide","onPanEnd","velocity","IgxCarouselIndicatorDirective","IgxCarouselNextButtonDirective","IgxCarouselPrevButtonDirective","CHIP_ID","IgxChipComponent","draggable","animateOnRelease","hideBaseOnDrag","removable","class","onMoveStart","onMoveEnd","onRemove","onSelectionDone","hideBaseElement","_tabIndex","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","selectContainer","propertyName","onSelectTransitionDone","onChipKeyDown","keyDownArgs","keyEvent","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipGhostCreate","onChipGhostDestroy","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","chipsList","selectedChips","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxDragDropModule","IgxComboAPIService","register","combo","valueKey","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","disableCheck","IGX_COMBO_COMPONENT","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboFilteringPipe","searchValue","displayKey","shouldFilter","filteringOptions","searchTerm_1","DataTypes","IgxComboGroupingPipe","groupKey","sorted","Asc","inserts","currentHeader","insertFlag","IgxComboState","ItemHeights","diffInSets","set1","set2","results","entry","IgxComboComponent","_iconService","customValueFlag","defaultFallbackGroup","filterValue","stringFilters","booleanFilters","_groupKey","_prevInputValue","_dataType","_searchValue","_filteredData","_itemHeight","_itemsMaxHeight","_remoteSelection","searchInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","showSearchCaseIcon","filterable","autoFocusSearch","manageRequiredAsterisk","_displayKey","comboInput","onInputClick","checkMatch","handleKeyUp","itemMatch","handleInputChange","COMPLEX","PRIMITIVE","registerRemoteEntries","ids","getValueDisplayPairs","selection_1","selection_1_1","ids_1","ids_1_1","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","NgControl","_overlaySettings","selectedItems","createDisplayText","complexTemplate","primitiveTemplate","handleClearItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","newSelectionAsArray","oldSelectionAsArray","displayText","concatDisplayText","convertKeysToItems","removedItems","addedItems","handleOpening","handleOpened","handleClosing","handleClosed","toggleCaseSensitive","IgxComboItemDirective","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboEmptyDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxInputGroupModule","ReactiveFormsModule","IgxForOfModule","IgxCheckboxModule","IGX_DATE_PICKER_COMPONENT","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","_getEditorDate","InteractionMode","IgxCalendarContainerComponent","mode","Dialog","onClose","onTodaySelection","DropDown","onEscape","closeCalendar","triggerTodaySelection","PredefinedFormatOptions","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","monthsViewNumber","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","_onOpen","_onClose","_ngControl","_onValidatorChange","_modalOverlay","_dropDownOverlaySettings","_defaultDropDownOverlaySettings","_customFormatChecker","_transformedDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","dateIsDisabled","onSpaceClick","inputDirectiveElementRef","_inputElementRef","_inputUserTemplateElementRef","_inputGroup","_inputGroupUserTemplate","_inputDirective","_inputDirectiveUserTemplates","_labelDirective","_labelDirectiveUserTemplate","_positionSettings","inputGroupElement","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","_updateValidityOnBlur","attachTemplateBlur","_templateInputBlur$","labelDirective","inputDirective","handleSelection","emitValueChangeEvent","modalOverlay","modalOverlaySettings","dropDownOverlaySettings","_setCursorPosition","setMilliseconds","onOpenClick","calcDate","_isInEditMode","calculateDate","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","changedValue","NgModuleRef","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","IgxCalendarModule","IgxMaskModule","IgxTextSelectionModule","defaultStyle","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","isOpenChange","_closeOnOutsideSelect","_closeOnEscape","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogTitleDirective","IgxDialogActionsDirective","IgxFocusModule","TemplateOutletAction","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","onBeforeViewDetach","_getActionType","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","propName","ctx","movedView","shouldRecreate","DIR_DOCUMENT","DIR_DOCUMENT_FACTORY","inject","IgxDirectionality","bodyDir","htmlDir","extractedDir","_dir","IgxTextAlign","CENTER","IgxProgressType","BaseProgressDirective","requestAnimationId","_initValue","_contentInit","_valueInPercent","_max","_newVal","_animate","onProgressChanged","_step","maxNum","triggerProgressTransition","changedValues","stepDirection","directionFlow","runAnimation","updateProgressDirectly","updateProgressSmoothly","passedValue","toPercent","progressValue","valueInPercent","isInLimitRange","updateProgress","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","NEXT_GRADIENT_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","textVisibility","textTop","valInRange","IgxCircularProgressBarComponent","_directionality","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","gradientId","_circleRadius","_circumference","PI","_svgCircle","FRAMES","strokeDashoffset","getProgress","strokeOpacity","percentage","rtl","IgxProcessBarTextTemplateDirective","IgxProgressBarGradientDirective","IgxSelectItemComponent","_text","SelectPositioningStrategy","_selectDefaultSettings","global_yOffset","global_xOffset","global_styles","selectFit","styles","scrollContainerRect","itemElement","getInteractionItemElement","itemRect","calculateStyles","calculateScrollAmount","calculateYoffset","calculateXoffset","itemElementRect","footer","lastItemFitSize","itemTextToInputTextDiff","firstItemFitSize","contentElementNewWidth","inputElementStyles","itemElementStyles","numericInputFontSize","fontSize","numericItemFontSize","inputTextToInputTop","itemTextToItemTop","negateInputPaddings","paddingTop","paddingBottom","numericLeftPadding","paddingLeft","numericTextIndent","textIndent","itemTextPadding","itemTextIndent","getFirstItemElement","IgxSelectComponent","itemText","inputGroupClick","hintElement","changes$","hasRequiredHTMLAttribute","mousedownHandler","IgxSelectToggleIconDirective","IgxSelectHeaderDirective","IgxSelectFooterDirective","IgxSelectItemNavigationDirective","inputStream","clearStream$","Subscription","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","nextItem","IgxSelectGroupComponent","WatchChanges","propDesc","privateKey","originalSetter","_init","SimpleChange","WatchColumnChanges","onColumnChange","repaint","IgxSummaryOperand","operate","summaryResult","DecimalPipe","IgxNumberSummaryOperand","average","pipeArgs","digitsInfo","IgxDateSummaryOperand","latest","earliest","DatePipe","DropPosition","IgxColumnMovingService","_column","_icon","IgxColumnComponent","sortable","groupable","resizable","hiddenChange","expandedChange","collapsibleChange","visibleWhenCollapsedChange","disableHiding","disablePinning","movable","widthChange","_calcWidth","_applySelectableClass","headerClasses","headerGroupClasses","cellStyles","sortingIgnoreCase","pinnedChange","searchable","_columnPipeArgs","_pinned","_summaries","_filters","_sortStrategy","_disablePinning","_defaultMinWidth","_hasSummary","_collapsible","_expanded","_selectable","_vIndex","hasTransactions","isPrimaryColumn","_editable","resetSummaryHeight","columnLayoutChild","filteringService","refreshExpressions","hideFilteringRowOnColumnVisibilityChange","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","getCalcWidth","gridAvailableSize","calcWidth","maxWidth","minWidth","defaultMinWidth","minVal","_unpinnedIndex","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","vIndex","allChildren","childrenVisibleIndexes","indexInCollection","isPinningToStart","columnLayout","ptr","lvl","pinnedCols","pinnedWidth","headerFeaturesWidth","colEnd","colStart","_visibleWhenCollapsed","setExpandCollapseState","resetCaches","cellTemplate","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","rowsCount","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","gridColumnSpan","bothWidthsSet","bothWidthsNotSet","columnWidthSetByUser","getFilledChildColumnSizes","getPossibleColumnWidth","getResizableColUnderEnd","spanUsed","columnSized","targets","targetsSquashed","topLevelParent","pinnable","_unpinnedColumns","rootPinnedCols","_pinnedColumns","targetColumn","isPinned","onColumnPinning","hasColumnGroups","allPinned_1","childrenCount","_moveColumns","reinitPinStates","populateVisibleIndexes","moveColumn","move","li","isPreceding","calcChildren","AfterDropTarget","BeforeDropTarget","headerCellList","filterCellList","filterCell","headerGroupsList","headerGroup","autosize","byHeader","getAutoSize","reflow","newWidth","getHeaderCellWidths","getLargestCellWidth","headerWidth","headerCell","headerStyle","headerPadding","paddingRight","borderRightWidth","headerGroupStyle","borderSize","borderLeftWidth","padding","largest","cellsContentWidths_1","calculateSizeToFit","cellStyle","cellPadding","headerCellWidths","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","visibleWhenCollapsed","collapsible","checkCollapsibleState","changeDetection","ChangeDetectionStrategy","OnPush","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellEditorTemplateDirective","IgxFilterCellTemplateDirective","IgxCollapsibleIndicatorTemplateDirective","ColumnPinningPosition","RowPinningPosition","GridPagingMode","RowEditPositionStrategy","isTop","isTopInitialPosition","FilterMode","quickFilter","excelStyleFilter","GridSummaryPosition","GridSummaryCalculationMode","rootLevelOnly","childLevelsOnly","rootAndChildLevels","GridSelectionMode","single","multiple","ColumnDisplayOrder","Alphabetical","DisplayOrder","IgxColumnActionsComponent","actionableColumns","filteredColumns","_filterColumnsPrompt","hideFilter","_filterCriteria","_columnDisplayOrder","columnsAreaMaxHeight","indentation","onColumnToggled","trackChanges","actionsDirective","actionEnabledColumnsFilter","_uncheckAllText","uncheckAllLabel","_checkAllText","checkAllLabel","columnChecked","uncheckAllColumns","uncheckAll","checkAllColumns","checkAll","toggleColumn","IgxColumnHidingDirective","columnActions","IgxColumnActionsBaseDirective","IgxColumnPinningDirective","IgxGridToolbarComponent","excelExporter","csvExporter","_isExporting","gridHeight","totalHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","setIsExporting","isExporting","exp","exportType","exporter","onToolbarExporting","exportEnded","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","showAdvancedFilteringUI","openAdvancedFilteringDialog","toolbar","toolbarCustomContentTemplate","onClosingColumnHiding","activeElem","onClosingColumnPinning","IgxRowEditTabStopDirective","api","handleTab","rowEditTabs","handleEscape","currentCellIndex","lastEditableColumnIndex","firstEditableColumnIndex","navigateTo","isSpecial","isBlanks","IgxGridExcelStyleFilteringComponent","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","expressionsList","listData","uniqueValues","inline","loadingStart","loadingEnd","initialized","sortingChanged","columnChange","listDataLoaded","_columnPinning","_columnVisibilityChanged","_sortingChanged","_filteringChanged","_densityChanged","_columnMoved","onColumnVisibilityChanged","sortingExpressionsChange","filteringExpressionsTreeChange","onColumnMovingEnd","_minHeight","minHeight","generateExpressionsList","populateColumnData","overlayComponentId","_originalDisplay","onColumnMoving","closeDropdown","onPin","columnSelectable","onHideToggle","areExpressionsSelectable","beforeOperator","afterOperator","areExpressionsValuesInTheList","firstValue","uniqueColumnValuesStrategy","renderColumnValuesRemotely","renderColumnValuesFromData","getColumnFilterExpressionsTree","prevColumn","colVals","columnValues","getFilterItemLabel","renderValues","columnField","generateUniqueValues","generateFilterValues","generateListData","filteredUniqueValues","cache","uniqueDates","isDateColumn","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","gridExpressionsTree","_f","filterListItem","FilterListItem","isFiltered","getFilterItemValue","selectAll","blanks","valueA","valueB","datePipe","decimalPipe","IgxExcelStyleColumnOperationsTemplateDirective","IgxExcelStyleFilterOperationsTemplateDirective","IgxGridNavigationService","_activeNode","pendingNavigation","handleNavigation","emitKeyDown","handleAlt","getNextPosition","navigateInBody","verticalScrollContainer","editCell_1","handleEditing","findLastDataRowIndex","lastColumnIndex","findFirstDataRowIndex","getCellByColumnVisibleIndex","rowObj","getRowByIndex","summaryNav","horizontalNav","dataView","headerNavigation","alt","performHeaderKeyCombination","currentActiveColumn","handleMCHeaderNav","tag","newActiveNode","mchCache","getColumnByVisibleIndex","setActiveNode","performHorizontalScrollToCell","focusTbody","gridRows","clearCellSelection","focusFirstCell","parentVirtDir","headerContainer","isColumnFullyVisible","isColumnPinned","forOfDir","getColumnUnpinnedIndex","displayContainerWidth","displayContainerScrollLeft","virtDirRow","isAddKey","treeRow","beginAddChild","getPreviousCell","getNextCell","shouldPerformHorizontalScroll","visibleColIndex","detailsData","shouldPerformVerticalScroll","targetRowIndex","isRecordPinnedByViewIndex","scrollRowIndex","pinnedDataView","targetRow","getRowElementByIndex","containerHeight","calcHeight","endTopOffset","offsetTop","containerTopOffset","isValidPosition","performVerticalScrollToCell","includeSummary","curRow","isGroupByRecord","isDetailRecord","childGridsData","isActiveNodeChanged","currRow","activeNodeChange","isChanged","checkInnerProp","aciveNode","props","getOwnPropertyNames","summariesRowList","keydownArgs","targetType","summaryCells","onGridKeydown","hasDetails","clearGrouping","hideGroupedColumns","handleMCHExpandCollapse","handleColumnSelection","allowAdvancedFiltering","allowFiltering","filterMode","headerEl","toggleFilterDropdown","filteredColumn","isFilterRowVisible","newHeaderNode","activeCol","lastGroupIndex","nextCol","getNextColumnMCH","nextVIndex","columnsToSelect","rIndex","cIndex","ExcelStylePositionStrategy","ExpressionUI","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","selectedExpression","columnToMoreIconHidden","activeFilterCell","_componentOverlayId","initFilteringSettings","filterIcon","filterIconTarget","_filterMenuOverlaySettings","excelStyleFilteringComponent","_filterMenuPositionSettings","lastActiveNode","theadRow","hideExcelFiltering","subscribeToEvents","onColumnResized","updateFilteringCell","updateFilterCellArea","filteringRow","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","editor","columnId","expressionUIs","isFilteringTreeComplex","removeExpression","indexToRemove","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","getChipLabel","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","prevExprUI","isFilteringExpressionsTreeEmpty","exprTree","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","actualWidth","minWidthPx","maxWidthPx","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","maxWidthPercent","minWidthPercent","prevWidth","resizeColumn","startResizePos","resizeColumnLayoutFor","_handlePercentageResize","_handlePixelResize","isColumnResizing","colMinWidth","colMaxWidth","currentPercentWidth","diffPercentage","getColMinWidth","actualMinWidth","relativeColumns","combinedSpan","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","resizeScaled","IgxGridHeaderComponent","colResizingService","hostRole","sortDirection","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--selectable","igx-grid__th--filtrable","igx-grid__th--sorted","igx-grid__th--selected","klass","maxLevelHeaderDepth","defaultRowHeight","_baseFontSize","applySelectableClass","gridID","getSortDirection","filterCellTemplate","rangeSelection","onFilteringIconClick","onSortingIconClick","triggerSort","sortDir","onPinterEnter","onPointerLeave","IgxGridFilteringCellComponent","moreFiltersCount","isChipVisible","updateVisibleFilters","complexFilter","defaultFilter","emptyFilter","onChipClicked","onChipRemoved","clearFiltering","filteringIndicatorClass","isMoreIconHidden","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","IgxGridHeaderGroupComponent","gridRowSpan","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","isLastPinned","igx-grid__th--pinned-first","isFirstPinned","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","draggedColumn","selectableChildren","groupClicked","selectedFields","toggleExpandState","pointerdown","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","recalculateSummaries","rootSummariesEnabled","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","currNode","isSummaryRow","translateSummary","summary","DragScrollDirection","IgxSummaryRowComponent","_summaryCells","isConnected","getColumnSummaries","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","clientRect","RATIO","trunc","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","TOP","BOTTOM","IgxListPanState","IgxListBaseDirective","HammerGesturesManager","doc","hammerOptions","_hammerManagers","platformBrowser","inputClass","TouchInput","recognizers","Pan","Swipe","Tap","taps","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","IgxListItemComponent","list","_panState","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListComponent","isLoading","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxExcelStyleSearchComponent","esf","displayedListData","refreshSize","clearInput","filterListData","_addToCurrentFilter","addToCurrentFilterItem","_isLoading","excelStyleLoadingValuesTemplateDirective","defaultExcelStyleLoadingValuesTemplate","onCheckboxChange","selectedIndex","selectAllBtn","addToCurrentFilter","indexToStartSlicing","slicedArray","itemSize","onInputKeyDown","applyFilter","searchAllBtn","anyFiltered","anyUnfiltered","it","filterTree","filterOptimizationThreshold","createCondition","blanksItemIndex","blanksItem","conditionName","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","onMousedown","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onKeydownHandler","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","stopImmediatePropagation","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","getCondition","translateCondition","getIconName","conditions","isConditionSelected","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","condToRemove","onDateSelected","inputGroupPrefixClick","toggleOperatorsDropDown","dropDownOperators","onConditionsChanged","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","toggleChip","onLeftArrowKeyDown","scrollChipsOnRemove","onLogicOperatorChanged","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","IgxColumnMovingDragDirective","cms","_ghostClass","ghostImgIconClass","ghostImgIconGroupClass","columnSelectedClass","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","flexBasis","createTextNode","childNodes","IgxGroupAreaDropDirective","hovered","columnBelongsToGrid","isGrouped","innerText","column_1","closestParentByAttr","attr","closestGridID","ExpressionItem","ExpressionGroupItem","ExpressionOperandItem","IgxAdvancedFilteringDialogComponent","selectedExpressions","selectedGroups","columnSelectOverlaySettings","conditionSelectOverlaySettings","_dblClickDelay","_preventChipClick","_editingInputsContainer","scrollElementIntoView","_addModeContainer","_currentGroupButtonsContainer","overlayOutlet","_selectedColumn","selectedCondition","_grid","_filteringChange","advancedFilteringExpressionsTreeChange","dragArgs","_overlayComponentId","contextMenuToggle","calculateContextMenuTarget","onDragMove","addCondition","afterExpression","cancelOperandAdd","operandItem","enterExpressionEdit","addAndGroup","addGroup","addOrGroup","endGroup","currentGroup","commitOperandEdit","editedExpression","selectedColumn","addModeExpression","inAddMode","cancelOperandEdit","deleteItem","operandCanBeCommitted","exitOperandEdit","isExpressionGroup","rootGroup","createExpressionGroupItem","filteringExpr","exprCopy","createExpressionsTreeFromGroupItem","subTree","onChipRemove","expressionItem","_clickTimer","onToggleExpression","onChipDblClick","columnSelect","conditionSelect","searchValueInput","toggleContextMenu","enterExpressionAdd","toggleExpression","deselectParentRecursive","contextMenuClosed","contextualGroup","findSingleSelectedGroup","filteringLogics","isInsideGroup","closeDialog","createAndGroup","createGroup","createOrGroup","chips","minIndex","MAX_VALUE","firstExpression","deleteFilters","onGroupClick","toggleGroup","toggleGroupRecursive","operandExpression","expressionsContainer","minTop","targetOffset","ungroup","selectedGroup","deleteGroup","selectFilteringLogic","getConditionFriendlyName","onExpressionsScrolled","invokeClick","onOutletPointerDown","getConditionList","getFormat","getTimezone","setAddButtonFocus","addRootAndGroupButton","addConditionButton","onClearButtonClick","applyChanges","cancelChanges","onApplyButtonClick","onChipSelectionEnd","IgxColumnGroupComponent","collapseIndicatorTemplate","collapsibleIndicatorTemplate","visibleChildren","fi","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","onRowDragStart","onRowDragEnd","dropArea","expander","expanderWidth","gridRect","rowRect","ghostCells","IgxDragIndicatorIconDirective","IgxRowDragGhostDirective","IgxSnackbarComponent","autoHide","displayTime","snackbarMessage","triggerAction","snackbarAnimationStarted","snackbarAnimationDone","toOpacity","FAKE_ROW_ID","MINIMUM_COLUMN_WIDTH","IgxGridTransaction","IgxGridBaseDirective","viewRef","localeId","_cdrRequests","_cdrRequestRepaint","_emptyGridMessage","_emptyFilteredGridMessage","_destroyed","overlayIDs","_pinning","Start","_advancedFilteringPositionSettings","_advancedFilteringOverlaySettings","snackbarDisplayTime","autoGenerate","cancelAddMode","pageChange","perPageChange","addRowParent","columnHidingTitle","columnPinningTitle","onCellClick","rowEditExit","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onContextMenu","onDoubleClick","onGridCopy","expansionStatesChange","onRowPinning","tmpOutlets","rowExpandedIndicatorTemplate","rowCollapsedIndicatorTemplate","headerExpandIndicatorTemplate","headerCollapseIndicatorTemplate","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","clipboardOptions","copyHeaders","copyFormatters","separator","snackbarActionText","snackbarLabel","onRangeSelection","chipsGoupingExpressions","lastSearchInfo","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_pagingMode","local","_totalRecords","_hideRowSelectors","_rowDrag","_filteringPipeTrigger","_columns","_filteringExpressionsTree","_sortingExpressions","_maxLevelHeaderDepth","_columnHiding","_pinnedRecordIDs","_allowFiltering","_allowAdvancedFiltering","_filterMode","resizeNotify","_hiddenColumnsText","_pinnedColumnsText","_height","_horizontalForOfs","_multiRowLayoutRowSize","_expansionStates","_defaultExpandState","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_autoGeneratedCols","_headerFeaturesWidth","_defaultTargetRecordNumber","_summaryPosition","_summaryCalculationMode","_showSummaryOnCollapse","_cellSelectionMode","_rowSelectionMode","_columnSelectionMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","paginatorSettings","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","vfor","preventContainerScroll","rowEditingWheelHandler","Regular","_advancedFilteringExpressionsTree","Advanced","totalPages","hasVisibleColumns","refreshGridState","_hostWidth","evaluateLoadingState","calcGridHeadRow","_filteringStrategy","_sortingStrategy","selectRows","deselectAllRows","excelStyleFilteringComponents","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","headSelectorsTemplates","pinning","End","rowSelectorsTemplates","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","_customDragIndicatorIconTemplate","dragIndicatorIconTemplates","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","selectionMode","isGhostRecord","ghostRecord","isAddRowRecord","getDataViewIndex","unpinnedDataView","overlayID","isRecordPinnedByIndex","_filteredSortedPinnedData","getInitialPinnedIndex","_setupServices","_setupListeners","tfoot","_advancedFilteringOverlayId","overlayId","isPercentHeight","getDataBasedBodyHeight","calculateGridHeight","calculateGridSizes","rowListDiffer","columnListDiffer","shouldGenerate","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","generateRowID","primaryColumn","uuidv4","resetForOfCache","firstVirtRow","_filteredPinnedData","filteredUnpinned","resetColumnCollections","resetCachedWidths","recalcFeatureWidth","setFilteredSortedData","pinnedRecords","_setupRowObservers","elementFilter","isDefined","extractForOfs","rowListObserver","summaryRowObserver","resetHorizontalForOfs","_zoneBegoneListeners","hideActionStrip","initPinning","reattach","displayContainer","_pinnedRowList","onPinnedRowsChanged","addRowSnackbar","lastAddedRowIndex","resetNotifyChanges","getDragGhostCustomTemplate","dragGhostCustomTemplates","tmplOutlet","vertScrDC","toggleColumnVisibility","expandAll","collapseAll","expandRow","collapseRow","toggleRow","resolveOutlet","_userOutletDirective","_outletDirective","paginatorClassName","getPinnedWidth","getUnpinnedWidth","unpinnedWidth","featureColumnsWidth","rowSelectArea","headerSelectorContainer","rowDragArea","headerDragContainer","groupableArea","headerGroupContainer","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","getCellByKey","pagingState","nextPage","isLastPage","previousPage","isFirstPage","hideRowSelectors","hiddenColumnsCount","to","_reorderColumns","newList","_resetColumnList","columnCollection","inGroup","fromIndex","childColumnsCount","dropIndex","_moveChildColumns","buffer","_columnsReordered","paginate","isInPinnedArea","pinIndex","unpinIndex","getUnpinnedIndexById","newRowIndex","setEditMode","updateCell","updateRow","editableCell","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","clearSort","pinColumn","unpinColumn","pinContainer","pinnedRowHeight","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","_hasVisibleColumns","_derivePossibleWidth","columnWidthCombined","allItems","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getComputedHeight","getFooterHeight","getTheadRowHeight","getFilterCellHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingFooterHeight","pagingHeight","headerGroupNativeEl","filterCellNativeEl","actualTheadRow","footerHeight","renderedHeight","computed","_shouldAutoSize","bodyHeight","defaultTargetBodyHeight","checkContainerSizeChange","origHeight","hasVerticalScroll","scrollSize","baseWidth","computedWidth","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","isPercentWidth","getColumnWidthSum","colSum","added_1","removed_1","hasScroll","repositionRowEditingOverlay","isStable","_applyWidthHostBinding","currentWidth","takeHidden","fc","fc_1","fc_1_1","hostWidth","summaryOperand","customSummary","resolveDataTypes","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","isColumnGrouped","onHeaderSelectorClick","unpinnedRecords","deselectRows","onlyFilterData","dragScroll","arg","startNode","endNode","getSelectedRanges","extractDataFromSelection","formatters","selectedData","activeEl","totalItems","selectionMap","tuple","cellSelection","virtualizationState","temp_1","temp_1_1","getSelectableColumnsAt","selectionMap_1","selectionMap_1_1","colLayout","getSelectedData","selectedColumns","fieldToSelect","fieldToDeselect","deselectAllColumns","selectAllColumns","extractDataFromColumnsSelection","getSelectedColumnsData","copyHandler","clipboardData","setData","showSnackbarFor","actionText","shouldScrollVertically","shouldScrollHorizontally","executeCallback","currRowIndex","curVisibleColIndex","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","prevCellIndex","cbArgs","getNavigationArguments","currentRowIndex","nextRowIndex","findPrevEditableDataRowIndex","isEditableDataRecordAtIndex","dataViewIndex","isGhostRecordAtIndex","trackColumnChanges","rebuildCache","highlightText","matchInfo","inCollection","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","columnItems","c1","c2","dataRow","occurenceIndex","searchIndex","isExpandedGroup","_group","toggleRowEditingOverlay","shouldOverlayLoading","loadingOutlet","_loadingId","loadingOverlay","configureRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","pinnedRows","rowChanges","writeToData","rowEditArgs","nonCancelableArgs","gridOutletKeyboardHandler","canceled","endAdd","activeCell","cancelable","pinnedIndex","viewIndex","findRecordIndexInView","dataIndex","showIndex","parentId","_getParentRecordId","triggerPipes","hasZeroResultFilter","hasNoData","loadingGridTemplate","loadingGridDefaultTemplate","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","hasHorizontalScroll","_restoreVirtState","rowForOf","gridScrLeft","cachedViewLoaded","tmplId_1","templateID","index_1","summaryRow","sr","dataRowIndex","rootGrid","closeAdvancedFilteringDialog","advancedFilteringDialog","getEmptyRecordObjectFor","IgxGridColumnResizerComponent","IgxExcelStyleLoadingValuesTemplateDirective","IgxGridToolbarCustomContentDirective","IgxHeadSelectorDirective","IgxRowSelectorDirective","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowExpandedIndicatorDirective","IgxRowCollapsedIndicatorDirective","IgxHeaderExpandIndicatorDirective","IgxHeaderCollapseIndicatorDirective","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","newExpandState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","groupsExpanded","groupBy_fully_expand_group","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","grRowExpr","defaultGroupByExpandedTemplate","defaultGroupByCollapsedTemplate","IgxGridMRLNavigationService","lastColIndexPerMRLBlock","lastIndexPerRow","firstIndexPerRow","getNextHorizontalCellPosition","prevPos","getNextVerticalPosition","nextPos","nextLayout","newLayout","scrollPos","getVerticalScrollPositions","topOffset","rowBottom","targetCol","isParentColumnFullyVisible","getChildColumnScrollPositions","rightScroll","leftScroll","parentVIndex","rowSpan","rowTop","parentByChildIndex","hasNextHorizontalPosition","hasNextVerticalPosition","currentRowStart","nextBlock","lastRowStartPerBlock","nextRI","getPreviousRowIndex","getNextRowIndex","co","lastLayoutIndex","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","_showGroupArea","childDetailTemplates","groupingExpressionsChange","groupingExpansionStateChange","onGroupingDone","detailTemplate","oldExpressions","_gridAPI","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","getDetailsContext","detailsViewFocused","gridDetailsTemplate","getRowTemplate","defaultGroupTemplate","summaryTemplate","detailTemplateContainer","recordTemplate","isDetailActive","_groupRowTemplate","_groupAreaTemplate","checkIfNoColumnField","preventHeaderScroll","_getStateForGroupRow","_toggleGroup","fullyExpandGroup","_fullyExpandGroup","toggleAllGroupRows","cachedData","tmlpOutlet","moveView","viewCreatedHandler","viewMovedHandler","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","groupingResult","groupByRecord","groupingMetadata","groupingFlatResult","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","defaultExpandedTemplate","defaultCollapsedTemplate","getColumnGroupable","groupTemplate","_setupNavigationService","dataLoading","source_1","expression_1","expression_1_1","IgxGroupByRowTemplateDirective","IgxGridDetailTemplateDirective","IgxGridStateDirective","featureKeys","_options","advancedFiltering","rowPinning","rowIslands","FEATURES","getFeatureState","currGrid","restoreFeatureState","createExpressionsTreeFromObject","newColumns","colState","selectedRows","pinningConfig","childGridStates","allLayoutList","rowIsland","rowIslandAPI","getChildGrids","chGrid","getParentRowID","childGridState","buildState","st","restoreGridState","childGrid","childRow","hgridAPI","getParentRowId","serialize","features","stringifyCallback","setState","applyFeatures","gridState","featureState","getFeature","exprTreeObject","expr_1","generateFilteringCondition","IgxDatePickerModule","IgxTemplateOutletModule","IgxTextHighlightModule","IgxBadgeModule","IgxChipsModule","IgxButtonGroupModule","IgxProgressBarModule","IgxSelectModule","IgxGridStateModule","IgxSnackbarModule","ItemPropertyValueChangedDirective","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBaseDirective","IgxColumnHidingItemDirective","CustomFilteringStrategy","ColumnChooserBaseDirective","disableFilter","_currentColumns","_gridColumns","_rawColumns","_title","createColumnItems","filterCriteria","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","hidableColumns","onVisibilityChanged","showAllColumns","collection_1","collection_1_1","hideAllColumns","collection_2","collection_2_1","IgxGridSharedModules","IgxExcelStyleClearFiltersComponent","clearFilterClass","selectAllFilterItems","onClearFilterKeyDown","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","expressionUI","inputValuesDirective","dropdownConditions","inputValuesElement","onValuesInput","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","IgxExcelStyleDateExpressionComponent","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","expressionDateComponents","firstExprUI","secondExprUI","IgxExcelStyleConditionalFilterComponent","shouldOpenSubMenu","_subMenuPositionSettings","_subMenuOverlaySettings","onTextFilterKeyDown","onTextFilterClick","dropdownRect","mainDropdown","x1","subMenu","onSubMenuSelection","customDialog","onSubMenuClosed","showCustomFilterItem","IgxExcelStyleMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxExcelStyleSortingComponent","updateSelectedButtons","sortIndex","sortButtonGroup","onSortButtonClicked","IgxGridCellComponent","touchManager","highlightClass","activeHighlightClass","lastPinned","firstPinned","editMode","displayPinnedChip","_cellSelection","cellSelectionMode","selectionNode","pointerenter","pointerup","addRowCellTemplate","defaultCellTemplate","pinnedIndicator","defaultPinnedIndicator","addPointerListeners","removePointerListeners","_highlight","compositionStartHandler","compositionEndHandler","cssProps","_updateCRUDStatus","crud","isCellSelected","shouldEmitSelection","meta","IgxPaginatorComponent","defaultSelectValues","pagerEnabled","pagerHidden","dropdownEnabled","dropdownHidden","selectLabel","prepositionPage","_selectOptions","sortUniqueOptions","totalRecords","newOption","paginatorSelectDisplayDensity","IgxGridCellStyleClassesPipe","callbackOrValue","IgxGridCellStylesPipe","css","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPaginatorOptionsPipe","IgxHasVisibleColumnsPipe","IgxGridRowPinningPipe","rec1","rec2","IgxColumnActionEnabledPipe","actionFilter","copy","IgxFilterActionColumnsPipe","filterFunc_1","filterText","toLocaleLowerCase","IgxSortActionColumnsPipe","displayOrder","IgxGridDataMapperPipe","IgxStringReplacePipe","replacement","IgxGridTransactionStatePipe","row_id","___","rowCurrentState","IgxColumnFormatterPipe","IgxGridAddRowPipe","parentIndex","IgxExcelStyleHeaderComponent","IgxExcelStylePinningComponent","IgxExcelStyleHidingComponent","IgxExcelStyleSelectingComponent","IgxGridPipesModule","IgxFilterModule","IgxListModule","IgxResizeHandleDirective","_dblClick","DEBOUNCE_TIME","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMouseOver","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","_hVirtDir","hasMovableColumns","isDropTarget","_dropPos","lastElementChild","horizontalScroll","IgxSummaryDataPipe","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","pinningDisabled","IgxColumnHidingModule","IgxColumnPinningModule","IgxColumnActionsModule","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","orderedCols","rs","IgxCellFooterTemplateDirective","SortingIndexPipe","IgxGridFilteringModule","IgxColumnMovingModule","IgxGridResizingModule","IgxGridBodyDirective","IgxGridFooterComponent","IgxGridColumnModule","IgxGridHeadersModule","IgxGridExcelStyleFilteringModule","IgxRowDragModule","IgxPaginatorModule","IgxGridSelectionModule","IgxGridSummaryModule","IgxGridToolbarModule","IgxGridSortingPipe","IgxGridGroupingPipe","IgxGridPagingPipe","pagingMode","IgxGridFilteringPipe","IgxGridRowComponent","getContextMRL","IgxGridSummaryPipe","summaryPosition","showSummary","summaryPipeTrigger","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","skipAdd","removeDeletedRecord","summaryRecord","groupRecords","groupRecord","groupRecordId","showSummaries","lastChild","lastChildId","IgxGridDetailsPipe","addDetailRows","detailsObj","IgxGridExpandableCellComponent","onIndicatorFocus","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","isGhost","IgxGridCommonModule","schemas","CUSTOM_ELEMENTS_SCHEMA","IgxTreeGridAPIService","flatData","processedRootRecords","loadChildrenOnDemand","hasChildrenKey","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","parentRecord","parentData","childKey","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","loadingRows","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","deselectChildren","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","pid","cloneMap","mapIn","mapCloned","mapObj","spawnedForRecord","processedExpandedFlatData","nonColumnLayoutColumns","recordID","rowToDeselect","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridRowComponent","_treeRow","treeRec","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","IgxTreeGridNormalizeRecordsPipe","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onLoadingDblClick","IgxTreeGridSummaryPipe","showSummaryOnCollapse","cellIndentation","isExpanded","childRecord","deletedRows","lenght","IgxChildGridRowComponent","parentGrid","onLayoutChange","ch","_handleLayoutChanges","initialChanges","hGrid","parentIsland","setupEventEmitters","onGridCreated","childLayoutList","registerChildRowIsland","registerChildGrid","onGridInitialized","inputNames","inputs","outputs","matchingInputPropName","output","IgxHierarchicalGridNavigationService","_pendingNavigation","getClosestElemByTag","isChildGridRecord","inView","isNext_1","targetLayoutIndex_1","childLayoutKeys","_moveToChild","isLast","isNext_2","_handleScrollInChild","nextSiblingIndex","_moveToParent","isNext","targetRec","currScroll","layoutKey","layoutIndex","nextIndex","positionInParent","positionInfo","getPositionInfo","scrollableGrid","getNextScrollableDown","getNextScrollableUp","parentRowIndex","childLayoutIndex","ri","pathSegment","rowIslandKey","getChildGrid","targetLayoutIndex","childGridNav","clearActivation","lastVisibleIndex","indexInParent","hasNextTarget","nextColumnIndex","rowElem","riKey","gridBottom","_getMinBottom","diffBottom","gridTop","_getMaxTop","diffTop","hasTargetRecordInParent","sourceElem","targetTag","pinnedRowsHeight","nonScrollable","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseDirective","transactionFactory","showExpandAll","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","childRowIslands","childGrids","unsetChildRowIsland","getChildRowIsland","currPath","pathElem","childrenForLayout","inDepth","layoutMap","getChildGridByID","IgxRowIslandAPIService","unset","oldId","IgxRowIslandComponent","childColumns","layout_id","isInit","expandChildren","updateOnRender","pId","ri_columnListDiffer","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","updateColumnList","actionStrips","cleanGridState","childGridTemplates","tmpl","IgxHierarchicalGridComponent","highlightedRowID","h_id","hg_verticalScrollHandler","hg_horizontalScrollHandler","dragIndicatorIconTemplate","headerHierarchyExpander","recalcColSizes","colLength","_clearSeletionHighlights","isRowHighlighted","isHierarchicalRecord","hasExpandedRecords","hasExpandableChildren","rootHeight","topDiff","toggleAll","hasExpandedEntry","relatedGrid","vScr","hScr","inDeph","onContainerScroll","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","IgxHierarchicalRowComponent","expanderClass","deselect","expanderClick","expandable","defaultEmptyTemplate","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxGridModule","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","titleContent","_triggerAction","IgxNavbarActionDirective","IgxNavbarTitleDirective","IgxNavDrawerItemDirective","activeClass","IgxNavigationDrawerComponent","_state","_touchManager","_isOpen","enableGestures","pinThreshold","disableAnimation","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","getDrawerWidth","IgxNavDrawerMiniTemplateDirective","IgxNavDrawerTemplateDirective","IgxSliderType","SliderHandle","TickLabelsOrientation","TicksOrientation","IgxSliderThumbComponent","_elementRef","_isActive","_isPressed","onThumbValueChange","onChange","onHoverChange","thumbBounderies","thumbCenter","FROM","TO","onPan","mouseX","updateThumbValue","onFocusListener","showThumbIndicators","toggleThumbIndicators","hideThumbIndicators","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","visible","continuous","deactiveState","IgxThumbLabelComponent","IgxTicksComponent","ticksClass","ticksOrientation","primaryTicks","tickLabelsOrientation","TopToBottom","BottomToTop","tickLabel","isPrimary","labels","secondaryTicks","hiddenTickLabels","primaryTickLabels","secondaryTickLabels","labelsViewEnabled","labelVal","ticksLength","toFixed","IgxTickLabelsPipe","IgxSliderComponent","_ngZone","_pMin","_pMax","_hasViewInit","_continuous","_primaryTicks","_secondaryTicks","_labels","SLIDER","_destroyer$","_indicatorsDestroyer$","thumbs","labelRefs","slierClass","thumbLabelVisibilityDuration","showTicks","Horizontal","thumb","lowerValue","upperValue","updateTrack","valueToFraction","upperBound","lowerBound","positionHandlersAndUpdateTrack","calculateStepDistance","setTickInterval","normalizeByStep","disable","changeThumbFocusableState","updateUpperBoundAndMaxTravelZone","updateLowerBoundAndMinTravelZone","_lowerBound","_upperBound","isRange","lower","upper","Mirror","findClosestThumb","thumbTo","thumbFrom","showSliderIndicators","releasePointerCapture","hideSliderIndicators","toggleSliderIndicators","onPanListener","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","positionHandler","labelFrom","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","thumbHandle","labelHandle","labelTo","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","renderCallbackExecution","ticks","_indicatorsTimer","positions","pMin","pMax","positionGap","trackLeftIndention","trackRef","validateInitialValue","isSliderWithDifferentValue","isRangeWithOneDifferentValue","triggerChange","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","IgxTickLabelTemplateDirective","SwitchLabelPosition","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxBottomNavComponent","_currentBottomNavId","onTabSelected","onTabDeselected","_itemStyle","hasContentTabs","contentTabs","viewTabs","tabs","setPanelsAttributes","_panelsChanges$","panels","panelsArray","tabPanels","getTabPanelId","getTabId","_selectedPanelHandler","tab","_deselectTab","_deselectPanel","selectedTab","aTab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_isSelected","relatedTab","changesCount","_tabTemplate","tabTemplate","IgxTabTemplateDirective","ariaDisabled","ariaSelected","_changesCount","relatedPanel","customTabTemplate","customTabTemplateDir","defaultTabTemplate","autoGenerated","ButtonStyle","IgxTabsBase","scrollElement","scrollRight","performSelectionChange","newTab","transformContentAnimation","transformIndicatorAnimation","IgxTabItemBase","setSelectedInternal","IgxTabsGroupBase","IgxRightButtonStyleDirective","getRightButtonStyle","VISIBLE","HIDDEN","NOT_DISPLAYED","viewPortWidth","viewPort","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemComponent","_tabs","_nativeTabItem","relatedGroup","onKeydown","tabsArray","finalIndex","nativeTabItem","IgxTabItemTemplateDirective","IgxTabsGroupComponent","IgxTabsType","FIXED","CONTENTFIT","NEXT_TABS_ID","IgxTabsComponent","_currentTabsId","selectedIndexChange","onTabItemDeselected","onTabItemSelected","_selectedIndex","iconLabelFoundInGroups","iconLabelFoundInTabs","performSelection","hideIndicator","tabsContainer","setGroupsAttributes","_groupChanges$","resetSelectionOnCollectionChanged","groupsArray","tabsGroup","getTabsGroupId","getTabItemId","currentTab","tabsArray_1","tabsArray_1_1","oldTab","selectedTabItem","performDeselection","oldTabRelatedGroup","newTabRelatedGroup","bringNewTabIntoView","tabNativeElement","viewPortOffsetWidth","contentOffset","contentsContainer","selectedIndicator","TimeParts","IGX_TIME_PICKER_COMPONENT","IgxItemListDirective","timePicker","nextHour","nextMinute","nextSeconds","nextAmPm","prevHour","prevMinute","prevSeconds","prevAmPm","listName","minuteList","secondsList","ampmList","hourList","okButtonClick","onKeydownEscape","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxSecondsItemDirective","isSelectedSeconds","selectedSeconds","scrollSecondsIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","TimeDisplayFormatPipe","amPM","maskAmPM","parseMask","sections","showHoursList","showMinutesList","showSecondsList","showAmPmList","prompt","regExp","hourVal","minutesVal","secondsVal","lastIndexOf","TimeInputFormatPipe","cleared","displayValue","leadZeroHour","leadZeroMinutes","leadZeroSeconds","TimePickerHammerConfig","IgxTimePickerComponent","timeParts","_hourItems","_minuteItems","_secondsItems","_ampmItems","isNotEmpty","_okButtonLabel","_cancelButtonLabel","_itemsDelta","_isHourListLoop","_isMinuteListLoop","_isSecondsListLoop","_hourView","_minuteView","_secondsView","_ampmView","_hoursPos","_minutesPos","_secondsPos","_amPmPos","_isValueValid","dispVal","_formatTime","_displayValue","setThroughUI","formatValue","trimMask","determineCursorPos","_dialogOverlaySettings","_dateFromModel","applyDisabledStyleForItem","period","minValueDate","convertMinMaxValue","maxValueDate","minute","Hour","Minute","_mask","secondsEntries","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateSeconds","_generateAmPm","spinOnEdit","_onDropDownClosed","onKeydownSpace","getInputGroupElement","onAltArrowDown","clearCursorPos","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","itemsCount","formattedSeconds","formattedMinute","formattedHour","_updateHourView","_updateMinuteView","_updateSecondsView","_updateAmPmView","_addEmptyItems","hourItemsCount","itemsDelta","minuteItemsCount","secondsItemsCount","_getSelectedTime","_isEntryValid","validH","validM","validS","re","validHourEntries","validMinuteEntries","validSecondsEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_spinSeconds","sDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedSeconds","_prevSelectedAmPm","_inputDirectiveUserTemplate","hourIntoView","minuteIntoView","secondsIntoView","ampmIntoView","time","hoursInView","minutesInView","secondsInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","isReset","mouseDown","displayVal","cursorOnHours","cursorOnMinutes","cursorOnSeconds","cursorOnAmPm","showHours","showMinutes","showSeconds","showAmPm","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","IgxToastPosition","IgxToastComponent","d$","_isVisible","onShowing","onShown","onHiding","onHidden","isVisibleChange","toastMessage","SplitterType","IgxSplitterPaneComponent","onToggle","_getSiblings","panes","siblings","sibling","IgxSplitterComponent","pane","assignFlexOrder","paneRect","initialPaneSize","siblingRect","initialSiblingSize","onMoving","maxSize","minSibling","maxSibling","paneSize","siblingSize","getPaneSiblingsByOrder","barIndex","SPLITTER_INTERACTION_KEYS","IgxSplitBarComponent","moveStart","moving","resizeDisallowed","Vertical","onCollapsing","onDragStart","prevSibling","nextSibling","DateRangePickerFormatPipe","appliedFormat","formatted","startDate","endDate","IgxDateRangeInputsBaseComponent","setFocus","updateInputValue","dateTimeEditor","updateInputValidity","IgxPickerToggleComponent","IgxDateRangeStartComponent","IgxDateRangeEndComponent","IgxDateRangePickerComponent","doneButtonText","rangeSelected","dateSeparator","$destroy","$toggleClickNotifier","getInputState","hasProjectedInputs","projectedInputs","setRequiredToInputs","updateCalendar","dialogOverlaySettings","dropdownOverlaySettings","updateInputs","errors","startInput","endInput","startValue","endValue","attachOnKeydown","subscribeToDateEditorEvents","configPositionStrategy","configOverlaySettings","cacheFocusedInput","attachOnTouched","subsToClicked","toggleComponents","updateDisabledState","initialSetValue","updateDisplayFormat","updateValidityOnBlur","_focusedInput","selectionData","extractRange","parseMinValue","parseMaxValue","swapEditorDates","_h","IgxDateRangeSeparatorDirective","IgxDateTimeEditorModule"],"mappings":"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","sourcesContent":["enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../interface';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { IToggleView } from './IToggleView';\nimport { Injectable } from '@angular/core';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\n@Injectable()\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","/* Copyright (c) 2014-2020 Denis Pushkarev\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE\n */\n\n// Note: Originally copied from core-js-pure package and modified. (https://github.com/zloirock/core-js)\n\nconst queue = {};\nlet counter = 0;\nlet eventListenerAdded = false;\n\nconst run = function (id) {\n    if (queue.hasOwnProperty(id)) {\n        const fn = queue[id];\n        delete queue[id];\n        fn();\n    }\n};\n\nconst listener = function (event) {\n    run(event.data);\n};\n\nexport function setImmediate(cb: any) {\n    if (window.setImmediate) {\n        return window.setImmediate(cb);\n    }\n\n    if (!eventListenerAdded) {\n        eventListenerAdded = true;\n        window.addEventListener('message', listener, false);\n    }\n\n    const args = [];\n    let i = 1;\n\n    while (arguments.length > i) {\n        args.push(arguments[i++]);\n    }\n\n    queue[++counter] = function () {\n        (typeof cb === 'function' ? cb : Function(cb)).apply(undefined, args);\n    };\n\n    const windowLocation = window.location;\n    window.postMessage(counter + '', windowLocation.protocol + '//' + windowLocation.host);\n\n    return counter;\n}\n\nexport function clearImmediate(id: any) {\n    if (window.clearImmediate) {\n        return window.clearImmediate(id);\n    }\n\n    delete queue[id];\n}\n","import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { setImmediate } from './setImmediate';\nimport merge from 'lodash.merge';\n\n/**\n * @hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    return merge(obj1, obj2);\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n * @hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n * @hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n * @hidden\n */\nexport function isDate(value: any): boolean {\n    return value instanceof Date;\n}\n\n/**\n * Parse provided input to Date.\n * @param value input to parse\n * @returns Date if parse succeed or null\n * @hidden\n */\nexport function parseDate(value: any): Date | null {\n    // if value is Invalid Date return null\n    if (isDate(value)) {\n        return !isNaN(value.getTime()) ? value : null;\n    }\n    return value ? new Date(value) : null;\n}\n\n/**\n * Returns an array with unique dates only.\n * @param columnValues collection of date values (might be numbers or ISO 8601 strings)\n * @returns collection of unique dates.\n * @hidden\n */\nexport function uniqueDates(columnValues: any[]) {\n    return columnValues.reduce((a, c) => {\n        if (!a.cache[c.label]) { a.result.push(c); }\n        a.cache[c.label] = true;\n        return a;\n      }, {result: [], cache: {}}).result;\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n * @hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9,\n    CTRL = 17,\n    Z = 90,\n    Y = 89,\n    X = 88,\n    BACKSPACE = 8,\n    DELETE = 46,\n    INPUT_METHOD = 229\n}\n\n/**\n * @hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab',\n    SEMICOLON = ';',\n    HOME = 'Home',\n    END = 'End'\n}\n\n/**\n * @hidden\n * Returns the actual size of the node content, using Range\n * ```typescript\n * let range = document.createRange();\n * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n *\n * let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n * ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (!isFirefox()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (!isFirefox()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n * @hidden\n * Returns the actual size of the node content, using Canvas\n * ```typescript\n * let ctx = document.createElement('canvas').getContext('2d');\n * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n *\n * let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n * ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n * @hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n * @hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n * @hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\n@Injectable({ providedIn: 'root' })\nexport class PlatformUtil {\n    public isBrowser: boolean = isPlatformBrowser(this.platformId);\n\n    public isIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    }\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return [\n        'down',\n        'up',\n        'left',\n        'right',\n        'arrowdown',\n        'arrowup',\n        'arrowleft',\n        'arrowright',\n        'home',\n        'end',\n        'space',\n        'spacebar',\n        ' '\n    ].indexOf(key) !== -1;\n}\n\n/**\n * @hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface IBaseEventArgs {\n    /**\n     * Provides reference to the owner component.\n     */\n    owner?: any;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport interface IBaseCancelableBrowserEventArgs extends CancelableBrowserEventArgs, IBaseEventArgs { }\n\nexport interface IBaseCancelableEventArgs extends CancelableEventArgs, IBaseEventArgs { }\n\nexport const HORIZONTAL_NAV_KEYS = new Set(['arrowleft', 'left', 'arrowright', 'right', 'home', 'end']);\n\nexport const NAVIGATION_KEYS = new Set([\n    'down',\n    'up',\n    'left',\n    'right',\n    'arrowdown',\n    'arrowup',\n    'arrowleft',\n    'arrowright',\n    'home',\n    'end',\n    'space',\n    'spacebar',\n    ' '\n]);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const ROW_ADD_KEYS = new Set(['+', 'add', '≠', '±', '=']);\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), ...Array.from(ROW_ADD_KEYS), 'enter', 'f2', 'escape', 'esc', 'pagedown', 'pageup']);\nexport const HEADER_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'escape', 'esc' , 'l',\n    /** This symbol corresponds to the Alt + L combination under MAC. */\n    '¬']);\n\n/**\n * @hidden\n * @internal\n *\n * Creates a new ResizeObserver on `target` and returns it as an Observable.\n * Run the resizeObservable outside angular zone, because it patches the MutationObserver which causes an infinite loop.\n * Related issue: https://github.com/angular/angular/issues/31712\n */\nexport function resizeObservable(target: HTMLElement): Observable<ResizeObserverEntry[]> {\n    return new Observable((observer) => {\n        const instance = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n            observer.next(entries);\n        });\n        instance.observe(target);\n        const unsubscribe = () => instance.disconnect();\n        return unsubscribe;\n    });\n}\n\n/**\n * @hidden\n * @internal\n *\n * Compares two maps.\n */\nexport function compareMaps(map1: Map<any, any>, map2: Map<any, any>): boolean {\n    if (!map2) {\n        return !map1 ? true : false;\n    }\n    if (map1.size !== map2.size) {\n        return false;\n    }\n    let match = true;\n    const keys = Array.from(map2.keys());\n    for (const key of keys) {\n        if (map1.has(key)) {\n            match = map1.get(key) === map2.get(key);\n        } else {\n            match = false;\n        }\n        if (!match) {\n            break;\n        }\n    }\n    return match;\n}\n\n/**\n *\n * Given a property access path in the format `x.y.z` resolves and returns\n * the value of the `z` property in the passed object.\n *\n * @hidden\n * @internal\n */\nexport function resolveNestedPath(obj: any, path: string) {\n    const parts = path?.split('.') ?? [];\n    let current = obj[parts.shift()];\n\n    parts.forEach(prop => {\n        if (current) {\n            current = current[prop];\n        }\n    });\n\n    return current;\n}\n\n\n/**\n *\n * Given a property access path in the format `x.y.z` and a value\n * this functions builds and returns an object following the access path.\n *\n * @example\n * ```typescript\n * console.log('x.y.z.', 42);\n * >> { x: { y: { z: 42 } } }\n * ```\n *\n * @hidden\n * @internal\n */\nexport function reverseMapper(path: string, value: any) {\n    const obj = {};\n    const parts = path?.split('.') ?? [];\n\n    let _prop = parts.shift();\n    let mapping: any;\n\n    // Initial binding for first level bindings\n    obj[_prop] = value;\n    mapping = obj;\n\n    parts.forEach(prop => {\n        // Start building the hierarchy\n        mapping[_prop] = {};\n        // Go down a level\n        mapping = mapping[_prop];\n        // Bind the value and move the key\n        mapping[prop] = value;\n        _prop = prop;\n    });\n\n    return obj;\n}\n\nexport function yieldingLoop(count: number, chunkSize: number, callback: (index: number) => void, done: () => void) {\n    let i = 0;\n    const chunk = () => {\n        const end = Math.min(i + chunkSize, count);\n        for (; i < end; ++i) {\n            callback(i);\n        }\n        if (i < count) {\n            setImmediate(chunk);\n        } else {\n            done();\n        }\n    };\n    chunk();\n}\n\nexport function mkenum<T extends { [index: string]: U }, U extends string>(x: T) { return x; }\n","import { ISortingStrategy } from './sorting-strategy';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression extends IBaseEventArgs {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\n\nexport function isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n    if (h1.length !== h2.length) {\n        return false;\n    }\n    return h1.every((level, index): boolean => {\n        return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n    });\n}\n\nexport function getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n    const hierarchy: Array<IGroupByKey> = [];\n    if (gRow !== undefined && gRow.expression) {\n        hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        while (gRow.groupParent) {\n            gRow = gRow.groupParent;\n            hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        }\n    }\n    return hierarchy;\n}\n","import { cloneArray, resolveNestedPath, parseDate } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByExpandState } from './groupby-expand-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\nimport { getHierarchy, isHierarchyMatch } from './operations';\nimport { GridType } from '../grids/common/grid.interface';\n\nconst DATE_TYPE = 'date';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string, isDate?: boolean) => any,\n           isDate?: boolean) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string, isDate?: boolean) => any,\n                isDate?: boolean) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver, isDate);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string, isDate?: boolean) => any,\n                             isDate: boolean = false) {\n        let a = valueResolver(obj1, key, isDate);\n        let b = valueResolver(obj2, key, isDate);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport interface IGridSortingStrategy {\n    sort(data: any[], expressions: ISortingExpression[], grid?: GridType): any[];\n}\n\nexport class NoopSortingStrategy implements IGridSortingStrategy {\n    private static _instance: NoopSortingStrategy = null;\n\n    private constructor() {  }\n\n    public static instance() {\n        return this._instance || (this._instance = new NoopSortingStrategy());\n    }\n\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return data;\n    }\n}\n\nexport class IgxSorting implements IGridSortingStrategy {\n    public sort(data: any[], expressions: ISortingExpression[], grid?: GridType): any[] {\n        return this.sortDataRecursive(data, expressions, 0, grid);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression,\n            isDate: boolean = false): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key, isDate);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key, isDate), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0,\n                                 grid: GridType): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        const isDate = grid && grid.getColumnByName(expr.fieldName) ?\n            grid.getColumnByName(expr.fieldName).dataType === DATE_TYPE : false;\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue, isDate);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr, isDate);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1, grid);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], state: IGroupingState, level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: GridType = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): T[] {\n        const expressions = state.expressions;\n        const expansion = state.expansion;\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const column = grid ? grid.getColumnByName(expressions[level].fieldName) : null;\n            const isDate = column?.dataType === DATE_TYPE;\n            const group = this.groupedRecordsByExpression(data, i, expressions[level], isDate);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: this.getFieldValue(group[0], expressions[level].fieldName, isDate),\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null,\n                column: column\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            const hierarchy = getHierarchy(groupRow);\n            const expandState: IGroupByExpandState = expansion.find((s) =>\n                isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : state.defaultExpanded;\n            let recursiveResult;\n            result.push(groupRow);\n            metadata.push(null);\n            fullResult.data.push(groupRow);\n            fullResult.metadata.push(null);\n            if (level < expressions.length - 1) {\n                recursiveResult = this.groupDataRecursive(group, state, level + 1, groupRow,\n                    expanded ? metadata : [], grid, groupsRecords, fullResult);\n                if (expanded) {\n                    result = result.concat(recursiveResult);\n                }\n            } else {\n                for (const groupItem of group) {\n                    fullResult.metadata.push(groupRow);\n                    fullResult.data.push(groupItem);\n                }\n                if (expanded) {\n                    metadata.push(...fullResult.metadata.slice(fullResult.metadata.length - group.length));\n                    result.push(...fullResult.data.slice(fullResult.data.length - group.length));\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string, isDate: boolean = false): any {\n        return isDate ? parseDate(resolveNestedPath(obj, key)) : resolveNestedPath(obj, key);\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n\n    protected getFieldValue(obj: any, key: string, isDate: boolean = false): any {\n        return isDate ? parseDate(resolveNestedPath(obj.data, key)) : resolveNestedPath(obj.data, key);\n    }\n}\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum FilteringExpressionsTreeType {\n    Regular,\n    Advanced\n}\n\nexport declare interface IFilteringExpressionsTree extends IBaseEventArgs {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n    type?: FilteringExpressionsTreeType;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    /**\n     * Sets/gets the type of the filtering expressions tree.\n     * ```typescript\n     *  gridExpressionTree.type = FilteringExpressionsTree.Advanced;\n     * ```\n     * ```typescript\n     * let type = expressionTree.type;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    type?: FilteringExpressionsTreeType;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n\n    /**\n     * Checks if filtering expressions tree is empty.\n     * @param expressionTree filtering expressions tree.\n     */\n    public static empty(expressionTree: IFilteringExpressionsTree): boolean {\n        return !expressionTree || !expressionTree.filteringOperands || !expressionTree.filteringOperands.length;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { IgxSorting } from './sorting-strategy';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], state: IGroupingState, grid?: any,\n        groupsRecords?: any[], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, state, 0, null, metadata, grid, groupsRecords, fullResult);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { resolveNestedPath, parseDate } from '../core/utils';\nimport { GridType } from '../grids/common/grid.interface';\n\nconst DateType = 'date';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree,\n        grid?: GridType): any[];\n}\n\nexport class NoopFilteringStrategy implements IFilteringStrategy {\n    private static _instance: NoopFilteringStrategy = null;\n\n    private constructor() {  }\n\n    public static instance() {\n        return this._instance || (this._instance = new NoopFilteringStrategy());\n    }\n\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[] {\n        return data;\n    }\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree, grid?: GridType): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string, isDate?: boolean): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression, isDate?: boolean): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName, isDate);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression, grid?: GridType): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand, grid);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                const isDate = grid && grid.getColumnByName(expression.fieldName) ?\n                    grid.getColumnByName(expression.fieldName).dataType === DateType : false;\n                return this.findMatchByExpression(rec, expression, isDate);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    private static _instace: FilteringStrategy = null;\n\n    public constructor() { super(); }\n\n    public static instance() {\n        return this._instace || (this._instace = new this());\n    }\n\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree: IFilteringExpressionsTree,\n        grid: GridType): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string, isDate: boolean = false): any {\n        let value = resolveNestedPath(rec, fieldName);\n        value = value && isDate ? parseDate(value) : value;\n        return value;\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport enum TransactionEventOrigin {\n    UNDO = 'undo',\n    REDO = 'redo',\n    CLEAR = 'clear',\n    ADD = 'add',\n    END = 'endPending'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path?: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\nexport interface Action<T extends Transaction> {\n    transaction: T;\n    recordRef: any;\n}\n\nexport interface StateUpdateEvent {\n    origin: TransactionEventOrigin;\n    actions: Action<Transaction>[];\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<StateUpdateEvent>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @param pending Should get pending state\n     * @returns State of the record if any\n     */\n    getState(id: any, pending?: boolean): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting, IGridSortingStrategy } from './sorting-strategy';\nimport { IgxGrouping } from './grouping-strategy';\nimport { IGroupByResult } from './grouping-result.interface';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid/public_api';\nimport { cloneValue, mergeObjects, mkenum } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\nimport { getHierarchy, isHierarchyMatch } from './operations';\nimport { GridType } from '../grids/common/grid.interface';\n\n/**\n * @hidden\n */\nexport const DataType = mkenum({\n    String: 'string',\n    Number: 'number',\n    Boolean: 'boolean',\n    Date: 'date'\n});\nexport type DataType = (typeof DataType)[keyof typeof DataType];\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IGridSortingStrategy = new IgxSorting(),\n        grid?: GridType): T[] {\n        return sorting.sort(data, expressions, grid);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        sorting: IGridSortingStrategy = new IgxDataRecordSorting(),\n        parent?: ITreeGridRecord,\n        grid?: GridType): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, sorting, rec, grid);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, sorting, grid);\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: GridType = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state, grid, groupsRecords, fullResult);\n    }\n\n    public static page<T>(data: T[], state: IPagingState, dataLength?: number): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = dataLength !== undefined ? dataLength : data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = dataLength !== undefined && state.recordsPerPage > dataLength ? dataLength : state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: len,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n\n    public static filter<T>(data: T[], state: IFilteringState, grid?: GridType): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree, grid);\n    }\n\n    public static correctPagingState(state: IPagingState, length: number) {\n        const maxPage = Math.ceil(length / state.recordsPerPage) - 1;\n        if (!isNaN(maxPage) && state.index > maxPage) {\n            state.index = maxPage;\n        }\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        return getHierarchy(gRow);\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        return isHierarchyMatch(h1, h2);\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    public static parseValue(dataType: DataType, value: any): any {\n        if (dataType === DataType.Number) {\n            value = parseFloat(value);\n        }\n\n        return value;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, reverseMapper, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxRowDirective } from './row.directive';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from './selection/selection.service';\nimport { GridType } from './common/grid.interface';\nimport { ColumnType } from './common/column.interface';\nimport { IGridEditEventArgs, IRowToggleEventArgs } from './common/events';\nimport {\n    ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS\n} from '../core/utils';\n\n/**\n * @hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseDirective & GridType> {\n\n    grid: T;\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): ColumnType {\n        return this.grid.columnList.find((col: ColumnType) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (data && grid.hasPinnedRecords) {\n           data = grid._filteredUnpinnedData;\n        }\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID, data);\n        return data[index];\n    }\n\n    public get_row_index_in_data(rowID: any, dataCollection?: any[]): number {\n        const grid = this.grid as IgxGridBaseDirective;\n        if (!grid) {\n            return -1;\n        }\n        const data = dataCollection ?? this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record.recordRef ? record.recordRef[grid.primaryKey] === rowID\n            : record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        if (!this.grid) {\n            return null;\n        }\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell) {\n            const args = this.update_cell(cell, cell.editValue);\n            this.grid.crudService.cellEditingBlocked = args.cancel;\n            if (args.cancel) {\n                return args.cancel;\n            }\n            this.grid.crudService.exitCellEdit();\n        }\n    }\n\n    public submit_add_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell) {\n            const args = this.update_add_cell(cell, cell.editValue);\n            if (args.cancel) {\n                this.grid.endAddRow();\n                return args.cancel;\n            }\n            return this.grid.crudService.exitCellEdit();\n        }\n    }\n\n    public update_add_cell(cell: IgxCell, value: any): IGridEditEventArgs  {\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.cellEdit.emit(args);\n        this.grid.crudService.cellEditingBlocked = args.cancel;\n        if (args.cancel) {\n            return args;\n        }\n\n        const data = cell.rowData;\n        mergeObjects(data, reverseMapper(cell.column.field, args.newValue));\n        this.grid.crudService.row.data = data;\n        const doneArgs = cell.createDoneEditEventArgs(args.newValue);\n        doneArgs.rowData = data;\n        this.grid.cellEditDone.emit(doneArgs);\n        return args;\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        cell.editValue = value;\n        const args = cell.createEditEventArgs();\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.cellEdit.emit(args);\n        this.grid.crudService.cellEditingBlocked = args.cancel;\n        if (args.cancel) {\n            return args;\n        }\n\n\n        this.grid.summaryService.clearSummaryCache(args);\n        const data = this.getRowData(cell.id.rowID);\n        this.updateData(this.grid, cell.id.rowID, data, cell.rowData, reverseMapper(cell.column.field, args.newValue));\n        if (this.grid.primaryKey === cell.column.field) {\n            if (this.grid.selectionService.isRowSelected(cell.id.rowID)) {\n                this.grid.selectionService.deselectRow(cell.id.rowID);\n                this.grid.selectionService.selectRowById(args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        const doneArgs = cell.createDoneEditEventArgs(args.newValue);\n        this.grid.cellEditDone.emit(doneArgs);\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ?? rowInEditMode.transactionState;\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const state = grid.transactions.getState(row.id);\n            row.data = state ? Object.assign({}, row.data, state.value) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selectionService.isRowSelected(row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id, data);\n        const hasSummarized = grid.hasSummarizedColumns;\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.rowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        const cachedRowData = { ... args.oldValue };\n        if (rowInEditMode) {\n            const hasChanges = grid.transactions.getState(args.rowID, true);\n            grid.transactions.endPending(false);\n            if (!hasChanges) {\n                return args;\n            }\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selectionService.deselectRow(row.id);\n            grid.selectionService.selectRowById(newId);\n        }\n        // make sure selection is handled prior to updating the row.id\n        row.id = newId;\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        const doneArgs = row.createDoneEditEventArgs(cachedRowData);\n        grid.rowEditDone.emit(doneArgs);\n        return args;\n    }\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        this.grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n    }\n\n    public should_apply_number_style(column: ColumnType): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid && grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any, parentRowID?) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        this.deleteRowFromData(rowId, index);\n\n        grid.selectionService.isRowSelected(rowId) ? grid.selectionService.deselectRow(rowId) : grid.selectionService.clearHeaderCBState();\n        (grid as any)._pipeTrigger++;\n        grid.notifyChanges();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        return this.grid.primaryKey ? rowData[this.grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public get_row_expansion_state(record: any): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const rowID = grid.primaryKey ? record[grid.primaryKey] : record;\n        const expanded = states.get(rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return grid.getDefaultExpandState(record);\n        }\n    }\n\n    public set_row_expansion_state(rowID: any, expanded: boolean, event?: Event) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        if (!this.allow_expansion_state_change(rowID, expanded)) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        expandedStates.set(rowID, expanded);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_rec_by_id(rowID) {\n        return  this.grid.primaryKey ? this.getRowData(rowID) : rowID;\n    }\n\n    public allow_expansion_state_change(rowID, expanded) {\n        return this.grid.expansionStates.get(rowID) !== expanded;\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { BaseFilteringStrategy, IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseDirective } from '../grid/public_api';\nimport { GridType } from '../common/grid.interface';\nimport { resolveNestedPath, parseDate } from '../../core/utils';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree, grid?: GridType): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined, grid);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord, grid?: GridType): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec, grid);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string, isDate: boolean = false): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        let value = resolveNestedPath(hierarchicalRecord.data, fieldName);\n        value = value && isDate ? parseDate(value) : value;\n        return value;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedFilteringExpressionsTree: IFilteringExpressionsTree, id: string,\n        pipeTrigger: number, filteringPipeTrigger: number, pinned?): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state: IFilteringState = {\n            expressionsTree: expressionsTree,\n            advancedExpressionsTree: advancedFilteringExpressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        if (filterStrategy) {\n            state.strategy = filterStrategy;\n        }\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            grid.setFilteredData(null, pinned);\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state, grid);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.setFilteredData(filteredData, pinned);\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec: any = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState, grid?: GridType): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree, grid);\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nimport { cloneValue, IBaseEventArgs, resolveNestedPath, yieldingLoop } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\nimport { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.pipe';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n * onColumnExport event arguments\n * ```typescript\n * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n * // set args properties here\n * });\n * ```\n */\nexport interface IColumnExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 8.43;\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n    private _columnWidthList: number[];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    public onExportEnded = new EventEmitter<IBaseEventArgs>();\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    public get columnWidthList() {\n        return this._columnWidthList;\n    }\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n        this._columnWidthList = new Array<any>(columns.filter(c => !c.hidden).length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n            const columnWidth = Number(column.width.slice(0, -2));\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                this._columnWidthList[index] = columnWidth;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn++;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n            this._columnWidthList = new Array<number>(keys.length).fill(DEFAULT_COLUMN_WIDTH);\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        yieldingLoop(data.length, 100, (i) => {\n            const row = data[i];\n            this.exportRow(dataToExport, row, i, isSpecialData);\n        }, () => {\n            this.exportDataImplementation(dataToExport, options);\n            this.resetDefaults();\n        });\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? resolveNestedPath(rowData.data, e.field) : resolveNestedPath(rowData, e.field);\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (((grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0) ||\n            (grid.advancedFilteringExpressionsTree &&\n            grid.advancedFilteringExpressionsTree.filteringOperands.length > 0)) &&\n            !options.ignoreFiltering) {\n            const filteringState: any = {\n                expressionsTree: grid.filteringExpressionsTree,\n                advancedExpressionsTree: grid.advancedFilteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                filteringState.strategy = (grid.filterStrategy) ? grid.filterStrategy : new TreeGridFilteringStrategy();\n                rootRecords = filteringState.strategy.filter(rootRecords,\n                    filteringState.expressionsTree, filteringState.advancedExpressionsTree);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                filteringState.strategy = grid.filterStrategy;\n                data = DataUtil.filter(data, filteringState, grid);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions, grid.sortStrategy);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions, grid.sortStrategy, grid);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { yieldingLoop } from '../../core/utils';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    public prepareDataAsync(done: (result: string) => void) {\n        if (!this._data || this._data.length === 0) {\n            done('');\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            done('');\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this.processDataRecordsAsync(this._data, keys, this._escapeCharacters, (dr) => {\n            done(this._headerRecord + dr);\n        });\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        const recordData = new Array(keys.length);\n        for (let index = 0; index < keys.length; index++) {\n            const value = (record[keys[index]] !== undefined) ? record[keys[index]] : this._isSpecialData ? record : '';\n            recordData[index] = this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.join('').slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        const dataRecords = new Array(currentData.length);\n\n        for (let i = 0; i < currentData.length; i++) {\n            const row = currentData[i];\n            dataRecords[i] = this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords.join('');\n    }\n\n    private processDataRecordsAsync(currentData, keys, escapeChars, done: (result: string) => void) {\n        const dataRecords = new Array(currentData.length);\n\n        yieldingLoop(currentData.length, 1000,\n            (i) => {\n                const row = currentData[i];\n                dataRecords[i] = this.processRecord(row, keys, escapeChars);\n            },\n            () => {\n                done(dataRecords.join(''));\n            });\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ICsvExportEndedEventArgs extends IBaseEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter-csv)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        csvData.prepareDataAsync((r) => {\n            this._stringData = r;\n            this.saveFile(options);\n            this.onExportEnded.emit({ csvData: this._stringData });\n        });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(worksheetName: string): string {\n        return ExcelStrings.XML_STRING + `<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>${worksheetName}</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>`;\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"游ゴシック Light\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"等线 Light\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"游ゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"等线\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(worksheetName: string): string {\n        return ExcelStrings.XML_STRING + `<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"${worksheetName}\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>`;\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>`;\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip';\nimport { yieldingLoop } from '../../core/utils';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp(worksheetData.options.worksheetName));\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.43;\n    private maxOutlineLevel = 0;\n    private dimension = '';\n    private freezePane = '';\n    private rowHeight = '';\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                let widthInTwips = worksheetData.options.columnWidth !== undefined ?\n                                        worksheetData.options.columnWidth :\n                                        Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n                if (!(widthInTwips > 0)) {\n                    widthInTwips = WorksheetFile.MIN_WIDTH;\n                }\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    public async writeElementAsync(folder: JSZip, worksheetData: WorksheetData) {\n        return new Promise(resolve => {\n            this.prepareDataAsync(worksheetData, (cols, rows) => {\n                const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n                folder.file('sheet1.xml', ExcelStrings.getSheetXML(\n                    this.dimension, this.freezePane, cols, rows, hasTable, worksheetData.isTreeGridData, this.maxOutlineLevel));\n                resolve();\n            });\n        });\n    }\n\n    private prepareDataAsync(worksheetData: WorksheetData, done: (cols: string, sheetData: string) => void) {\n        let sheetData = '';\n        let cols = '';\n        const dictionary = worksheetData.dataDictionary;\n\n        if (worksheetData.isEmpty) {\n            sheetData += '<sheetData/>';\n            this.dimension = 'A1';\n            done('', sheetData);\n        } else {\n            sheetData += '<sheetData>';\n            const height =  worksheetData.options.rowHeight;\n            this.rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n            sheetData += `<row r=\"1\"${this.rowHeight}>`;\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData += `<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`;\n            }\n            sheetData += '</row>';\n\n            this.dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n            cols += '<cols>';\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                let widthInTwips = worksheetData.options.columnWidth !== undefined ?\n                                        worksheetData.options.columnWidth :\n                                        Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n                if (!(widthInTwips > 0)) {\n                    widthInTwips = WorksheetFile.MIN_WIDTH;\n                }\n\n                cols += `<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`;\n            }\n\n            cols += '</cols>';\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                this.freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n\n            this.processDataRecordsAsync(worksheetData, (rows) => {\n                sheetData += rows;\n                sheetData += '</sheetData>';\n                done(cols, sheetData);\n            });\n        }\n    }\n\n    private processDataRecordsAsync(worksheetData: WorksheetData, done: (rows: string) => void) {\n        const rowDataArr = new Array(worksheetData.rowCount - 1);\n        const height =  worksheetData.options.rowHeight;\n        this.rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n        yieldingLoop(worksheetData.rowCount - 1, 1000,\n            (i) => {\n                rowDataArr[i] = this.processRow(worksheetData, i + 1);\n            },\n            () => {\n                done(rowDataArr.join(''));\n            });\n    }\n\n    private processRow(worksheetData: WorksheetData, i: number) {\n        const rowData = new Array(worksheetData.columnCount + 2);\n        if (!worksheetData.isTreeGridData) {\n            rowData[0] = `<row r=\"${(i + 1)}\"${this.rowHeight}>`;\n        } else {\n            const originalData = worksheetData.data[i - 1].originalRowData;\n            const sCollapsed = (!originalData.expanded) ? '' : (originalData.expanded === true) ? '' : ` collapsed=\"1\"`;\n            const sHidden = (originalData.parent && this.hasCollapsedParent(originalData)) ? ` hidden=\"1\"` : '';\n            const rowOutlineLevel = originalData.level ? originalData.level : 0;\n            const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n            this.maxOutlineLevel = this.maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : this.maxOutlineLevel;\n            rowData[0] = `<row r=\"${(i + 1)}\"${this.rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`;\n        }\n\n        for (let j = 0; j < worksheetData.columnCount; j++) {\n            const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n            rowData[j + 1] = cellData;\n        }\n        rowData[worksheetData.columnCount + 1] = '</row>';\n\n        return rowData.join('');\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook(worksheetData.options.worksheetName));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number, columnWidthsList: number[]) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (columnWidth) {\n            this._columnWidths.fill(columnWidth);\n        } else {\n            this._columnWidths = columnWidthsList;\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value !== 'number' && value !== Number(value) && !Number.isFinite(value);\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], private _columnWidths: number[], public options: IgxExcelExporterOptions,\n            public indexOfLastPinnedColumn, public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth, this._columnWidths);\n    }\n}\n","import * as JSZip from 'jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { WorksheetFile } from './excel-files';\n\nexport interface IExcelExportEndedEventArgs extends IBaseEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in Microsoft® Excel® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' } as JSZip.JSZipGeneratorOptions<'base64'>;\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static async populateFolderAsync(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData) {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderInstance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderInstance.folderName);\n            await IgxExcelExporterService.populateFolderAsync(folderInstance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            if (fileInstance instanceof WorksheetFile) {\n                await (fileInstance as WorksheetFile).writeElementAsync(zip, worksheetData);\n            } else {\n                fileInstance.writeElement(zip, worksheetData);\n            }\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData =\n            new WorksheetData(data, this.columnWidthList, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n\n        IgxExcelExporterService.populateFolderAsync(rootFolder, this._xlsx, worksheetData)\n        .then(() => {\n            this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n                this.saveFile(result, options.fileName);\n                this.onExportEnded.emit({ xlsx: this._xlsx });\n            });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue, IBaseEventArgs, mkenum } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\n/**\n * Defines the possible values of the overlays' position strategy.\n */\nexport enum RelativePositionStrategy {\n    Connected = 'connected',\n    Auto = 'auto',\n    Elastic = 'elastic'\n}\n\n/**\n * Defines the possible positions for the relative overlay settings presets.\n */\nexport enum RelativePosition {\n    Above = 'above',\n    Below = 'below',\n    Before = 'before',\n    After = 'after',\n    Default = 'default'\n}\n\n/**\n * Defines the possible positions for the absolute overlay settings presets.\n */\nexport enum AbsolutePosition {\n    Bottom = 'bottom',\n    Top = 'top',\n    Center = 'center'\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\n/** @hidden */\nexport interface OutOfViewPort {\n    /** Out of view port at Top or Left */\n    back: number;\n    /** Out of view port at Bottom or Right */\n    forward: number;\n}\n\nexport interface PositionSettings {\n    /**\n     * @deprecated Set the target point/element in the overlay settings instead.\n     * Attaching target for the component to show\n     */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Position strategy to use with these settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with these settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should close on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set if the overlay should close when `Esc` key is pressed */\n    closeOnEscape?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Elements to be excluded for closeOnOutsideClick.\n     * Clicking on the elements in this collection will not close the overlay when closeOnOutsideClick = true.\n     */\n    excludeFromOutsideClick?: HTMLElement[];\n}\n\nexport interface OverlayEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n    transformX?: number;\n    transformY?: number;\n}\n\n/** @hidden */\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: OutOfViewPort;\n    fitVertical?: OutOfViewPort;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n    horizontalOffset?: number;\n    verticalOffset?: number;\n}\n\n/** @hidden */\nexport class Util {\n    /**\n     * @hidden\n     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle\n     * if no target is provided\n     * @param settings Overlay settings for which to calculate target rectangle\n     */\n    static getTargetRect(target?: Point | HTMLElement): ClientRect {\n        let targetRect: ClientRect = {\n            bottom: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            top: 0,\n            width: 0\n        };\n\n        if (target instanceof HTMLElement) {\n            targetRect = (target as HTMLElement).getBoundingClientRect();\n        } else if (target instanceof Point) {\n            const targetPoint = target as Point;\n            targetRect = {\n                bottom: targetPoint.y,\n                height: 0,\n                left: targetPoint.x,\n                right: targetPoint.x,\n                top: targetPoint.y,\n                width: 0\n            };\n        }\n\n        return targetRect;\n    }\n\n    /** @hidden @internal */\n    static getViewportRect(document: Document): ClientRect {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n        const scrollPosition = Util.getViewportScrollPosition(document);\n\n        return {\n            top: scrollPosition.y,\n            left: scrollPosition.x,\n            right: scrollPosition.x + width,\n            bottom: scrollPosition.y + height,\n            width: width,\n            height: height,\n        };\n    }\n\n    /** @hidden @internal */\n    static getViewportScrollPosition(document: Document): Point {\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const horizontalScrollPosition =\n            -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n        return new Point(horizontalScrollPosition, verticalScrollPosition);\n    }\n\n    /** @hidden @internal */\n    static cloneInstance(object) {\n        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n        clonedObj.settings = cloneValue(clonedObj.settings);\n        return clonedObj;\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n    private _worksheetName: string;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified,\n     * the width of the column or the default width of the excel columns will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n\n    /**\n     * Gets the name of the worksheet in the exported excel file.\n     * ```typescript\n     * let worksheetName = this.exportOptions.worksheetName;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get worksheetName(): string {\n        if (this._worksheetName === undefined || this._worksheetName === null) {\n            return 'Sheet1';\n        }\n\n        return this._worksheetName;\n    }\n\n    /**\n     * Sets the name of the worksheet in the exported excel file.\n     * ```typescript\n     * this.exportOptions.worksheetName = \"Worksheet\";\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set worksheetName(value: string) {\n        this._worksheetName = value;\n    }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateClass(message: string) {\n    let isMessageShown = false;\n\n    return function<T extends new(...args: any[]) => {} >(originalClass: T) {\n        return class extends originalClass {\n            constructor(...args) {\n                const target: any = originalClass;\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}: ${message}`, isMessageShown);\n\n                super(...args);\n            }\n        };\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  Util,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\nimport { ConnectedFit } from '../utilities';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /**\n   * Obtains the ClientRect objects for the required elements - target and element to position\n   * @returns target and element ClientRect objects\n   */\n  protected calculateElementRectangles(contentElement, target: Point | HTMLElement): { targetRect: ClientRect, elementRect: ClientRect } {\n      return {\n          targetRect: Util.getTargetRect(target),\n          elementRect: contentElement.getBoundingClientRect() as ClientRect\n      };\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean, target?: Point | HTMLElement): void {\n    const targetElement = target || this.settings.target;\n    const rects =  this.calculateElementRectangles(contentElement, targetElement);\n    this.setStyle(contentElement, rects.targetRect, rects.elementRect, {});\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return Util.cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect, connectedFit: ConnectedFit) {\n      const horizontalOffset = connectedFit.horizontalOffset ? connectedFit.horizontalOffset : 0;\n      const verticalOffset = connectedFit.verticalOffset ? connectedFit.verticalOffset : 0;\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint + horizontalOffset,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint + verticalOffset\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, Util, OverlaySettings } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    protected _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        this.setPosition(contentElement, this.settings);\n    }\n\n    protected setPosition(contentElement: HTMLElement, settings: PositionSettings) {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return Util.cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { PositionSettings, Size } from '../utilities';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n/**\n * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class ContainerPositionStrategy extends GlobalPositionStrategy {\n    constructor(settings?: PositionSettings) {\n        super(settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex-container');\n        this.setPosition(contentElement, this.settings);\n    }\n}\n\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, Util, ConnectedFit, OutOfViewPort, Point } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean, target?: Point | HTMLElement): void {\n        const targetElement = target || this.settings.target;\n        const rects = super.calculateElementRectangles(contentElement, targetElement);\n        const connectedFit: ConnectedFit = {};\n        if (initialCall) {\n            connectedFit.targetRect = rects.targetRect;\n            connectedFit.contentElementRect = rects.elementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = Util.getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (this.shouldFitInViewPort(connectedFit)) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, rects.targetRect, rects.elementRect, connectedFit);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection,\n            connectedFit.horizontalOffset ? connectedFit.horizontalOffset : 0);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal = {\n                back: Math.round(connectedFit.left),\n                forward: Math.round(connectedFit.viewPortRect.width - connectedFit.right)\n            };\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection,\n            connectedFit.verticalOffset ? connectedFit.verticalOffset : 0);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical = {\n            back: Math.round(connectedFit.top),\n            forward: Math.round(connectedFit.viewPortRect.height - connectedFit.bottom)\n        };\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment, offset?: number):\n        number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction + offset;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment, offset?: number):\n        number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction + offset;\n    }\n\n    /**\n     * Returns whether the element should fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected shouldFitInViewPort(connectedFit: ConnectedFit) {\n        return connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0 ||\n            connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n","import { BaseFitPositionStrategy } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, ConnectedFit } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, -connectedFit.fitHorizontal.back);\n            const rightExtend = Math.max(0, -connectedFit.fitHorizontal.forward);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, -connectedFit.fitVertical.back);\n            const bottomExtend = Math.max(0, -connectedFit.fitVertical.forward);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, ConnectedFit } from './../utilities';\nimport { BaseFitPositionStrategy } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection, 0);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return 0 < leftBorder && rightBorder < connectedFit.viewPortRect.width;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection, 0);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return 0 < topBorder && bottomBorder < connectedFit.viewPortRect.height;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.width;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.height;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { AnimationAnimateRefMetadata, AnimationBuilder, AnimationMetadataType, AnimationReferenceMetadata } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    NgModuleRef,\n    NgZone, OnDestroy, Type\n} from '@angular/core';\nimport { fromEvent, Subject, Subscription } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport {\n    IAnimationParams, slideInTop, slideOutBottom, slideOutTop, slideInBottom, fadeIn, fadeOut,\n    scaleInVerTop, scaleOutVerTop, scaleOutVerBottom, scaleInVerBottom, scaleInHorRight, scaleOutHorRight,\n    scaleOutHorLeft, scaleInHorLeft\n} from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\nimport { PlatformUtil } from '../../core/utils';\nimport { IPositionStrategy } from './position/IPositionStrategy';\nimport { ConnectedPositioningStrategy } from './position/connected-positioning-strategy';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs, OverlayEventArgs,\n    OverlayInfo, OverlaySettings,\n    HorizontalAlignment, VerticalAlignment, Point,\n    PositionSettings, AbsolutePosition, RelativePosition, RelativePositionStrategy\n} from './utilities';\nimport { ContainerPositionStrategy } from './position/container-position-strategy';\nimport { ElasticPositionStrategy } from './position/elastic-position-strategy';\nimport { AutoPositionStrategy } from './position/auto-position-strategy';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\n\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay-main)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private _keyPressEventListener: Subscription;\n    private destroy$ = new Subject<boolean>();\n    private _cursorStyleIsSet = false;\n    private _cursorOriginalValue: string;\n\n    private _defaultSettings: OverlaySettings = {\n        excludeFromOutsideClick: [],\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true,\n        closeOnEscape: false\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is appended to the overlay, and before animations are started.\n     * ```typescript\n     * onAppended(event: OverlayEventArgs){\n     *     const onAppended = event;\n     * }\n     * ```\n     */\n    public onAppended = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    /**\n     * Creates overlay settings with global or container position strategy and preset position settings\n     * @param position Preset position settings. Default position is 'center'\n     * @param outlet The outlet container to attach the overlay to\n     * @returns Non-modal overlay settings based on Global or Container position strategy and the provided position.\n     */\n    public static createAbsoluteOverlaySettings(\n        position?: AbsolutePosition, outlet?: IgxOverlayOutletDirective | ElementRef): OverlaySettings {\n        const positionSettings = this.createAbsolutePositionSettings(position);\n        const strategy = outlet ? new ContainerPositionStrategy(positionSettings) : new GlobalPositionStrategy(positionSettings);\n        const overlaySettings: OverlaySettings = {\n            positionStrategy: strategy,\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: false,\n            closeOnOutsideClick: true,\n            outlet: outlet\n        };\n        return overlaySettings;\n    }\n\n    /**\n     * Creates overlay settings with auto, connected or elastic position strategy and preset position settings\n     * @param target Attaching target for the component to show\n     * @param strategy The relative position strategy to be applied to the overlay settings. Default is Auto positioning strategy.\n     * @param position Preset position settings. By default the element is positioned below the target, left aligned.\n     * @returns Non-modal overlay settings based on the provided target, strategy and position.\n     */\n    public static createRelativeOverlaySettings(\n        target: Point | HTMLElement,\n        position?: RelativePosition,\n        strategy?: RelativePositionStrategy):\n        OverlaySettings {\n        const positionSettings = this.createRelativePositionSettings(position);\n        const overlaySettings: OverlaySettings = {\n            target: target,\n            positionStrategy: this.createPositionStrategy(strategy, positionSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: false,\n            closeOnOutsideClick: true\n        };\n        return overlaySettings;\n    }\n\n    private static createAbsolutePositionSettings(position: AbsolutePosition): PositionSettings {\n        let positionSettings: PositionSettings;\n        switch (position) {\n            case AbsolutePosition.Bottom:\n                positionSettings = {\n                    horizontalDirection: HorizontalAlignment.Center,\n                    verticalDirection: VerticalAlignment.Bottom,\n                    openAnimation: slideInBottom,\n                    closeAnimation: slideOutBottom\n                };\n                break;\n            case AbsolutePosition.Top:\n                positionSettings = {\n                    horizontalDirection: HorizontalAlignment.Center,\n                    verticalDirection: VerticalAlignment.Top,\n                    openAnimation: slideInTop,\n                    closeAnimation: slideOutTop\n                };\n                break;\n            case AbsolutePosition.Center:\n            default:\n                positionSettings = {\n                    horizontalDirection: HorizontalAlignment.Center,\n                    verticalDirection: VerticalAlignment.Middle,\n                    openAnimation: fadeIn,\n                    closeAnimation: fadeOut\n                };\n        }\n        return positionSettings;\n    }\n\n    private static createRelativePositionSettings(position: RelativePosition): PositionSettings {\n        let positionSettings: PositionSettings;\n        switch (position) {\n            case RelativePosition.Above:\n                positionSettings = {\n                    horizontalStartPoint: HorizontalAlignment.Center,\n                    verticalStartPoint: VerticalAlignment.Top,\n                    horizontalDirection: HorizontalAlignment.Center,\n                    verticalDirection: VerticalAlignment.Top,\n                    openAnimation: scaleInVerBottom,\n                    closeAnimation: scaleOutVerBottom,\n                };\n                break;\n            case RelativePosition.Below:\n                positionSettings = {\n                    horizontalStartPoint: HorizontalAlignment.Center,\n                    verticalStartPoint: VerticalAlignment.Bottom,\n                    horizontalDirection: HorizontalAlignment.Center,\n                    verticalDirection: VerticalAlignment.Bottom,\n                    openAnimation: scaleInVerTop,\n                    closeAnimation: scaleOutVerTop\n                };\n                break;\n            case RelativePosition.After:\n                positionSettings = {\n                    horizontalStartPoint: HorizontalAlignment.Right,\n                    verticalStartPoint: VerticalAlignment.Middle,\n                    horizontalDirection: HorizontalAlignment.Right,\n                    verticalDirection: VerticalAlignment.Middle,\n                    openAnimation: scaleInHorLeft,\n                    closeAnimation: scaleOutHorLeft\n                };\n                break;\n            case RelativePosition.Before:\n                positionSettings = {\n                    horizontalStartPoint: HorizontalAlignment.Left,\n                    verticalStartPoint: VerticalAlignment.Middle,\n                    horizontalDirection: HorizontalAlignment.Left,\n                    verticalDirection: VerticalAlignment.Middle,\n                    openAnimation: scaleInHorRight,\n                    closeAnimation: scaleOutHorRight\n                };\n                break;\n            case RelativePosition.Default:\n            default:\n                positionSettings = {\n                    horizontalStartPoint: HorizontalAlignment.Left,\n                    verticalStartPoint: VerticalAlignment.Bottom,\n                    horizontalDirection: HorizontalAlignment.Right,\n                    verticalDirection: VerticalAlignment.Bottom,\n                    openAnimation: scaleInVerTop,\n                    closeAnimation: scaleOutVerTop,\n                };\n                break;\n        }\n        return positionSettings;\n    }\n\n    private static createPositionStrategy(strategy: RelativePositionStrategy, positionSettings: PositionSettings): IPositionStrategy {\n        switch (strategy) {\n            case RelativePositionStrategy.Connected:\n                return new ConnectedPositioningStrategy(positionSettings);\n            case RelativePositionStrategy.Elastic:\n                return new ElasticPositionStrategy(positionSettings);\n            case RelativePositionStrategy.Auto:\n            default:\n                return new AutoPositionStrategy(positionSettings);\n        }\n    }\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone,\n        protected platformUtil: PlatformUtil) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to an object containing Injector and ComponentFactoryResolver\n     * that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false,\n            overlayInfo.settings.target);\n    }\n\n    /**\n     * Offsets the content along the corresponding axis by the provided amount\n     * ```typescript\n     * this.overlay.setOffset(id, deltaX, deltaY);\n     * ```\n     */\n    setOffset(id: string, deltaX: number, deltaY: number) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            return;\n        }\n\n        info.transformX += deltaX;\n        info.transformY += deltaY;\n\n        const transformX = info.transformX;\n        const transformY = info.transformY;\n\n        const translate = `translate(${transformX}px, ${transformY}px)`;\n        info.elementRef.nativeElement.parentElement.style.transform = translate;\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n\n            this.onAppended.emit({ id: info.id, componentRef: info.componentRef });\n\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true,\n                info.settings.target);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler();\n        this.addCloseOnEscapeListener(info);\n\n        if (info.settings.modal) {\n            const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n            wrapperElement.classList.remove('igx-overlay__wrapper');\n            this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n            wrapperElement.classList.add('igx-overlay__wrapper--modal');\n        }\n\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler();\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone, transformX: 0, transformY: 0 };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        contentElement.appendChild(info.elementRef.nativeElement);\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n            this.removeCloseOnEscapeListener();\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                const target = ev.target;\n                const overlayElement = info.elementRef.nativeElement;\n                // check if the click is on the overlay element or on an element from the exclusion list, and if so do not close the overlay\n                const excludeElements = info.settings.excludeFromOutsideClick ?\n                    [...info.settings.excludeFromOutsideClick, overlayElement] : [overlayElement];\n                const isInsideClick: boolean = excludeElements.some(e => e.contains(target as Node));\n                if (isInsideClick) {\n                    return;\n                    //  if the click is outside click, but close animation has started do nothing\n                } else if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                    this._hide(info.id, ev);\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e: Event) => this._hide(info.id, e));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n\n                // click event is not fired on iOS. To make element \"clickable\" we are\n                // setting the cursor to pointer\n                if (this.platformUtil.isIOS && !this._cursorStyleIsSet) {\n                    this._cursorOriginalValue = this._document.body.style.cursor;\n                    this._document.body.style.cursor = 'pointer';\n                    this._cursorStyleIsSet = true;\n                }\n\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                if (this._cursorStyleIsSet) {\n                    this._document.body.style.cursor = this._cursorOriginalValue;\n                    this._cursorOriginalValue = '';\n                    this._cursorStyleIsSet = false;\n                }\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler() {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler() {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private addCloseOnEscapeListener(info: OverlayInfo) {\n        if (info.settings.closeOnEscape && !this._keyPressEventListener) {\n            this._keyPressEventListener = fromEvent(this._document, 'keydown').pipe(\n                filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc')\n            ).subscribe(() => {\n                const targetOverlay = this._overlayInfos[this._overlayInfos.length - 1];\n                if (targetOverlay.settings.closeOnEscape) {\n                    this.hide(targetOverlay.id);\n                }\n            });\n        }\n    }\n\n    private removeCloseOnEscapeListener() {\n        if (this._keyPressEventListener) {\n            this._keyPressEventListener.unsubscribe();\n            this._keyPressEventListener = null;\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = (e: Event) => {\n        const overlayInfo = this._overlayService.getOverlayById(this._id);\n        if (!overlayInfo) {\n            return;\n        }\n        if (!overlayInfo.elementRef.nativeElement.contains(e.target)) {\n            this._overlayService.reposition(this._id);\n        }\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.target) {\n            this._sourceElement = ev.target as Element;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State, StateUpdateEvent } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<StateUpdateEvent>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        if (isObject(first) || isObject(second)) {\n            return mergeObjects({...first }, second);\n        } else {\n            return second ? second : first;\n        }\n    }\n}\n","import { Transaction, State, TransactionType, StateUpdateEvent, TransactionEventOrigin, Action } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: Action<T>[][] = [];\n    protected _undoStack: Action<T>[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<StateUpdateEvent>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            const actions = [{ transaction, recordRef }];\n            this._undoStack.push(actions);\n            this._redoStack = [];\n            this.onStateUpdate.emit({ origin: TransactionEventOrigin.ADD, actions });\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any, pending: boolean = false): S {\n        return pending ? this._pendingStates.get(id) : this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: Action<T>[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit({ origin: TransactionEventOrigin.END, actions});\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit({ origin: TransactionEventOrigin.CLEAR, actions: []});\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: Action<T>[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit({ origin: TransactionEventOrigin.UNDO, actions: lastActions });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: Action<T>[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit({ origin: TransactionEventOrigin.REDO, actions });\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\nimport { HierarchicalTransactionService } from './hierarchical-transaction';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> implements HierarchicalTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    public commit(data: any[], primaryKeyOrId?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKeyOrId, true);\n            this.clear(id);\n        } else {\n            super.commit(data, primaryKeyOrId);\n        }\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport {\n    AbsoluteScrollStrategy,\n    ConnectedPositioningStrategy,\n    IPositionStrategy,\n    OverlayEventArgs,\n    OverlaySettings\n} from '../../services/public_api';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableBrowserEventArgs, IBaseEventArgs } from '../../core/utils';\n\nexport interface ToggleViewEventArgs extends IBaseEventArgs {\n    /** Id of the toggle view */\n    id: string;\n}\n\nexport interface ToggleViewCancelableEventArgs extends ToggleViewEventArgs, CancelableBrowserEventArgs { }\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n    private _overlayAppendedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<ToggleViewEventArgs>();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<ToggleViewCancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<ToggleViewEventArgs>();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<ToggleViewCancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle element is appended to the overlay container.\n     *\n     * ```typescript\n     * onAppended() {\n     *  alert(\"Content appended!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onAppended)='onToggleAppended()'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onAppended = new EventEmitter<ToggleViewEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: ToggleViewCancelableEventArgs = { cancel: false, owner: this, id: this._overlayId };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.unsubscribe();\n\n        this._overlayAppendedSub = this.overlayService.onAppended.pipe(...this._overlaySubFilter).subscribe(() => {\n            const appendedEventArgs: ToggleViewEventArgs = { owner: this, id: this._overlayId };\n            this.onAppended.emit(appendedEventArgs);\n        });\n\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            const openedEventArgs: ToggleViewEventArgs = { owner: this, id: this._overlayId };\n            this.onOpened.emit(openedEventArgs);\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: ToggleViewCancelableEventArgs = { cancel: false, event: e.event, owner: this, id: this._overlayId };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Returns the id of the overlay the content is rendered in.\n     * ```typescript\n     * this.myToggle.overlayId;\n     * ```\n     */\n    public get overlayId() {\n        return this._overlayId;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * Offsets the content along the corresponding axis by the provided amount\n     */\n    setOffset(deltaX: number, deltaY: number) {\n        this.overlayService.setOffset(this._overlayId, deltaX, deltaY);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        const closedEventArgs: ToggleViewEventArgs = { owner: this, id: this._overlayId };\n        this.onClosed.emit(closedEventArgs);\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n        this.clearSubscription(this._overlayAppendedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        const targetElement = this.element.nativeElement;\n        this._overlayDefaults = {\n            target: targetElement,\n            positionStrategy: new ConnectedPositioningStrategy(),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludeFromOutsideClick: [targetElement as HTMLElement]\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs, mkenum } from '../core/utils';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter, InjectionToken } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport const DropDownActionKey = mkenum({\n    ESCAPE: 'escape',\n    ENTER: 'enter',\n    SPACE: 'space'\n});\nexport type DropDownActionKey = (typeof DropDownActionKey)[keyof typeof DropDownActionKey];\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: IgxDropDownItemBaseDirective;\n    newSelection: IgxDropDownItemBaseDirective;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = new InjectionToken<IDropDownBase>('IgxDropDownBaseToken');\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBaseDirective[];\n    headers: IgxDropDownItemBaseDirective[];\n    focusedItem: IgxDropDownItemBaseDirective;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBaseDirective, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        // If primaryKey is 0, this should still map to the property\n        return primaryKey !== undefined && primaryKey !== null ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n     */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n     */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Directive, Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck, Output, EventEmitter } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\n@Directive({\n    selector: '[igxDropDownItemBase]'\n})\nexport class IgxDropDownItemBaseDirective implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBaseDirective: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-drop-down-item [(selected)]='model.isSelected'></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return this.isSelectable && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-drop-down-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n\n    /** Returns true if the items is not a header or disabled  */\n    protected get isSelectable(): boolean {\n        return  !(this.disabled || this.isHeader);\n    }\n\n    /** If `allowItemsFocus` is enabled, keep the browser focus on the active item */\n    protected ensureItemFocus() {\n        if (this.dropDown.allowItemsFocus) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (!focusedItem) { return; }\n            focusedItem.element.nativeElement.focus({ preventScroll: true });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event): void {\n    }\n}\n","import {\n    Component,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBaseDirective {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return this.isSelectable && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && this.isSelectable;\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event): void {\n        if (!this.isSelectable) {\n            this.ensureItemFocus();\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n}\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit, Directive, NgModule, Optional, Inject } from '@angular/core';\nimport { IBaseEventArgs, mkenum } from './utils';\n\n/**\n * Defines the possible values of the components' display density.\n */\nexport const DisplayDensity = mkenum({\n    comfortable: 'comfortable',\n    cosy: 'cosy',\n    compact: 'compact'\n});\nexport type DisplayDensity = (typeof DisplayDensity)[keyof typeof DisplayDensity];\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs extends IBaseEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\n@Directive({\n    selector: '[igxDisplayDensityBase]'\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n    /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [\n        DisplayDensityBase\n    ],\n    exports: [\n        DisplayDensityBase\n    ]\n})\nexport class IgxDisplayDensityModule {}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject, Directive\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBaseDirective`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\n@Directive()\nexport abstract class IgxDropDownBaseDirective extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     * Get dropdown's html element of its scroll container\n     */\n    public get scrollContainer(): HTMLElement {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBaseDirective>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBaseDirective[] {\n        const items: IgxDropDownItemBaseDirective[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBaseDirective[] {\n        const headers: IgxDropDownItemBaseDirective[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract readonly collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBaseDirective, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBaseDirective {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBaseDirective) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBaseDirective) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef, static: true })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import {\n    EventEmitter,\n    Output,\n    HostListener,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    Directive,\n    AfterViewInit,\n    Inject,\n    NgZone\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil, throttleTime } from 'rxjs/operators';\nimport { resizeObservable, isIE } from '../../core/utils';\n\n@Directive({\n    selector: '[igxVirtualHelperBase]'\n})\nexport class VirtualHelperBaseDirective implements OnDestroy, AfterViewInit {\n    public scrollAmount = 0;\n\n    public _size = 0;\n\n    public destroyed;\n\n    private _afterViewInit = false;\n    private _scrollNativeSize: number;\n    private _detached = false;\n    protected destroy$ = new Subject<any>();\n\n\n    ngAfterViewInit() {\n        this._afterViewInit = true;\n        const delayTime = isIE() ? 40 : 0;\n        this._zone.runOutsideAngular(() => {\n            resizeObservable(this.nativeElement).pipe(\n                throttleTime(delayTime),\n                takeUntil(this.destroy$)).subscribe((event) => this.handleMutations(event));\n        });\n    }\n\n    @HostListener('scroll', ['$event'])\n    onScroll(event) {\n        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;\n    }\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef, protected _zone: NgZone, @Inject(DOCUMENT) public document) {\n        this._scrollNativeSize = this.calculateScrollNativeSize();\n     }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public set size(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._size = value;\n        if (this._afterViewInit) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public get size() {\n        return this._size;\n    }\n\n    public get scrollNativeSize() {\n        return this._scrollNativeSize;\n    }\n\n    protected get isAttachedToDom(): boolean {\n        return this.document.body.contains(this.nativeElement);\n    }\n\n    protected handleMutations(event) {\n        const hasSize = !(event[0].contentRect.height === 0 && event[0].contentRect.width === 0);\n        if (!hasSize && !this.isAttachedToDom) {\n            // scroll bar detached from DOM\n            this._detached = true;\n        } else if (this._detached && hasSize && this.isAttachedToDom) {\n            // attached back now.\n            this.restoreScroll();\n        }\n    }\n\n    protected restoreScroll() {}\n\n    public calculateScrollNativeSize() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth ? scrollWidth + 1 : 1;\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, Inject, NgZone } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"size\"></div>'\n})\nexport class HVirtualHelperComponent extends VirtualHelperBaseDirective {\n    @ViewChild('horizontal_container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef, protected _zone: NgZone, @Inject(DOCUMENT) public document) {\n        super(elementRef, cdr, _zone, document);\n    }\n\n    protected restoreScroll() {\n        this.nativeElement.scrollLeft = this.scrollAmount;\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef,\n     ChangeDetectorRef, OnDestroy, OnInit, Inject, NgZone } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"size\"></div>'\n})\nexport class VirtualHelperComponent extends VirtualHelperBaseDirective implements OnInit, OnDestroy  {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @HostBinding('style.width.px')\n    public scrollWidth;\n\n    @ViewChild('container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public itemsLength: number;\n\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef, protected _zone: NgZone, @Inject(DOCUMENT) public document) {\n        super(elementRef, cdr, _zone, document);\n    }\n\n    ngOnInit() {\n        this.scrollWidth = this.scrollNativeSize;\n    }\n\n    protected restoreScroll() {\n        this.nativeElement.scrollTop = this.scrollAmount;\n    }\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n    private parentElement;\n    private baseDeltaMultiplier = 1 / 120;\n    private firefoxDeltaMultiplier = 1 / 30;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            this.parentElement = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            const targetElem = this.parentElement;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // if ctrl key is pressed and the user want to zoom in/out the page\n        if (evt.ctrlKey) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX * this.baseDeltaMultiplier;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            const deltaScaledX = evt.deltaX * (evt.deltaMode === 0 ?  this.firefoxDeltaMultiplier : 1);\n            scrollDeltaX = this.calcAxisCoords(deltaScaledX, -1, 1);\n        }\n\n        /** Get delta for the Y axis */\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY * this.baseDeltaMultiplier;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            const deltaScaledY = evt.deltaY * (evt.deltaMode === 0 ?  this.firefoxDeltaMultiplier : 1);\n            scrollDeltaY = this.calcAxisCoords(deltaScaledY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.parentElement;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.parentElement;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable, Component } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfScrollSyncService {\n    private _masterScroll: Map<string, VirtualHelperBaseDirective> = new Map<string, any>();\n    public setScrollMaster(dir: string, scroll: VirtualHelperBaseDirective) {\n        this._masterScroll.set(dir, scroll);\n    }\n\n    public getScrollMaster(dir: string) {\n        return this._masterScroll.get(dir);\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    AfterViewInit\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from './for_of.sync.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter, throttleTime, first } from 'rxjs/operators';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n *  @publicApi\n */\nexport class IgxForOfContext<T> {\n    constructor(\n       public $implicit: T,\n       public index: number,\n       public count: number\n    ) {}\n\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean { return this.index === 0; }\n\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean { return this.index === this.count - 1; }\n\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean { return this.index % 2 === 0; }\n\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean { return !this.even; }\n\n}\n\n@Directive({ selector: '[igxFor][igxForOf]',\nproviders: [ IgxForOfScrollSyncService ] })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy, AfterViewInit {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation = 'vertical';\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * Similar to the property totalItemCount, but this will allow setting the data count into the template.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data | async\" [igxForTotalItemCount]=\"count | async\"\n     *  [igxForContainerSize]=\"'500px'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    get igxForTotalItemCount(): number {\n        return this.totalItemCount;\n    }\n    set igxForTotalItemCount(value: number) {\n        this.totalItemCount = value;\n    }\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public get totalItemCount() {\n        return this._totalItemCount;\n    }\n\n    public set totalItemCount(val) {\n        if (this._totalItemCount !== val) {\n            this._totalItemCount = val;\n            // update sizes in case total count changes.\n            const newSize = this.initSizesCache(this.igxForOf);\n            const sizeDiff = this.scrollComponent.size - newSize;\n            this.scrollComponent.size = newSize;\n            const lastChunkExceeded = this.state.startIndex + this.state.chunkSize > val;\n            if (lastChunkExceeded) {\n                this.state.startIndex = val - this.state.chunkSize;\n            }\n            this._adjustScrollPositionAfterSizeChange(sizeDiff);\n        }\n    }\n\n    private _totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * @hidden @internal\n     * An event that is emitted when scrollbar visibility has changed.\n     */\n    @Output()\n    public onScrollbarVisibilityChanged = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after the rendered content size of the igxForOf has been changed.\n     */\n    @Output()\n    public onContentSizeChange = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected scrollComponent: VirtualHelperBaseDirective;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n\n    public get displayContainer(): HTMLElement | undefined {\n        return this.dc?.instance?._viewContainer?.element?.nativeElement;\n    }\n\n    public get virtualHelper() {\n        return this.scrollComponent.nativeElement;\n    }\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.getScroll().scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    protected contentResizeNotify = new Subject();\n    protected contentObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService) { }\n\n    /**\n     * @hidden\n     */\n    public get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     *\n     * Gets/Sets the scroll position.\n     * ```typescript\n     * const position = directive.scrollPosition;\n     * directive.scrollPosition = value;\n     * ```\n     */\n    public get scrollPosition(): number {\n        return this.scrollComponent.scrollAmount;\n    }\n    public set scrollPosition(val: number) {\n        if (val === this.scrollComponent.scrollAmount) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal' && this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollLeft = val;\n        } else if (this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent?.nativeElement?.removeEventListener('scroll', this.func)\n            );\n        } else {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent?.nativeElement?.removeEventListener('scroll', this.verticalScrollHandler)\n            );\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.scrollComponent.size > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.scrollComponent && !this.scrollComponent.destroyed) {\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.scrollComponent = vc.createComponent(factory).instance;\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.scrollComponent.size = this.igxForOf ? this._calcHeight() : 0;\n            this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.scrollComponent.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n            });\n            const destructor = takeUntil<any>(this.destroy$);\n            this.contentResizeNotify.pipe(destructor,\n            filter(() => this.igxForContainerSize && this.igxForOf && this.igxForOf.length > 0),\n            throttleTime(40, undefined, {leading: true, trailing: true}))\n            .subscribe(() => {\n                this._zone.runTask(() => {\n                    this.updateSizes();\n                });\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            if (!this.scrollComponent) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.scrollComponent = vc.createComponent(hvFactory).instance;\n                this.scrollComponent.size = totalSize;\n                this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.igxForScrollOrientation === 'vertical') {\n            this._zone.runOutsideAngular(() => {\n                this.contentObserver = new ResizeObserver(() => this.contentResizeNotify.next());\n                this.contentObserver.observe(this.dc.instance._viewContainer.element.nativeElement);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        if (this.contentObserver) {\n            this.contentObserver.disconnect();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n            this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.scrollComponent.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the scrollbar DOM element.\n     * This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.\n     * ```typescript\n     * dir.getScroll();\n     * ```\n     */\n    public getScroll() {\n        return this.scrollComponent?.nativeElement;\n    }\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * @hidden\n     * Function that is called to get the native scrollbar size that the browsers renders.\n     */\n    public getScrollNativeSize() {\n        return this.scrollComponent ? this.scrollComponent.scrollNativeSize : 0;\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n        if (!this._bScrollInternal) {\n            this._calcVirtualScrollTop(event.target.scrollTop);\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    protected updateSizes() {\n        this.recalcUpdateSizes();\n        this._applyChanges();\n        this._updateScrollOffset();\n        this.onContentSizeChange.emit();\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        const l = this._embeddedViews.length;\n        const rNodes = this._embeddedViews.map(view =>\n            view.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE) || view.rootNodes[0].nextElementSibling);\n        for (let i = 0; i < l; i++) {\n            const rNode = rNodes[i];\n            if (rNode) {\n                const h = rNode.offsetHeight || parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10) + totalDiff;\n                this.scrollComponent.nativeElement.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.scrollComponent.size = Math.min(this.scrollComponent.size + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.scrollComponent.destroyed) {\n                    this.scrollComponent.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    if (sumDiffs !== 0) {\n                        this.addScrollTop(sumDiffs);\n                    }\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n\n                // recalculate and apply page size.\n                if (diff && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    diff > 0 ? this.moveApplyScrollNext(prevStart) : this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        const end = start + this.state.startIndex - prevIndex;\n        const container = this.dc.instance._vcr as ViewContainerRef;\n\n        for (let i = start; i < end && this.igxForOf[i] !== undefined; i++) {\n            const embView = this._embeddedViews.shift();\n            this.scrollFocus(embView.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE)\n                || embView.rootNodes[0].nextElementSibling);\n            const view = container.detach(0);\n\n            this.updateTemplateContext(embView.context, i);\n            container.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        const container = this.dc.instance._vcr as ViewContainerRef;\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const embView = this._embeddedViews.pop();\n            this.scrollFocus(embView.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE)\n                || embView.rootNodes[0].nextElementSibling);\n            const view = container.detach(container.length - 1);\n\n            this.updateTemplateContext(embView.context, i);\n            container.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * Function which updates the passed context of an embedded view with the provided index\n     * from the view container.\n     * Often, called while handling a scroll event.\n     */\n    protected updateTemplateContext(context: any, index: number = 0): void {\n        context.$implicit = this.igxForOf[index];\n        context.index = this.getContextIndex(this.igxForOf[index]);\n        context.count = this.igxForOf.length;\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const embView = this._embeddedViews[j++];\n            this.updateTemplateContext(embView.context, i);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Clears focus inside the virtualized container on small scroll swaps.\n     */\n    protected scrollFocus(node?: HTMLElement): void {\n        const activeElement = document.activeElement as HTMLElement;\n\n        // Remove focus in case the the active element is inside the view container.\n        // Otherwise we hit an exception while doing the 'small' scrolls swapping.\n        // For more information:\n        //\n        // https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=432392\n        if (node && node.contains(document.activeElement)) {\n            activeElement.blur();\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(event.target.scrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const embView = embeddedViewCopy.shift();\n                this.updateTemplateContext(embView.context, i);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n        this._adjustScrollPositionAfterSizeChange(diff);\n    }\n\n    private _adjustScrollPositionAfterSizeChange(sizeDiff) {\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(sizeDiff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            const newSize = this.sizesCache[this.state.startIndex] - offset;\n            this.scrollPosition = newSize === this.scrollPosition ? newSize + 1 : newSize;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    /**\n     * @hidden\n     * Reset scroll position.\n     * Needed in case scrollbar is hidden/detached but we still need to reset it.\n     */\n    public resetScrollPosition() {\n        this.scrollPosition = 0;\n        this.scrollComponent.scrollAmount = 0;\n        this.state.startIndex = 0;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        const scrollable = this.isScrollable();\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.scrollComponent.nativeElement.style.width = this.igxForContainerSize + 'px';\n            this.scrollComponent.size = totalWidth;\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n               this.resetScrollPosition();\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.scrollComponent.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.scrollComponent.size = this._calcHeight();\n            if ( this.scrollComponent.size <= parseInt(this.igxForContainerSize, 10)) {\n                this.resetScrollPosition();\n            }\n        }\n        if (scrollable !== this.isScrollable()) {\n            // scrollbar visibility has changed\n            this.onScrollbarVisibilityChanged.emit();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.igxForScrollOrientation === 'horizontal') {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        // also detach from ViewContainerRef to make absolutely sure this is removed from the view container.\n        this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        let currentScrollTop = this.scrollPosition;\n        if (this._virtHeightRatio !== 1) {\n            this._calcVirtualScrollTop(this.scrollPosition);\n            currentScrollTop = this._virtScrollTop;\n        }\n        const vScroll =  this.scrollComponent.nativeElement;\n        scrollOffset = vScroll && this.scrollComponent.size ?\n        currentScrollTop - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n\n    protected _calcVirtualScrollTop(scrollTop: number) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = this.scrollComponent.size - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  scrollTop / maxRealScrollTop : 0;\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n        this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n    }\n\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset =  this.scrollComponent.nativeElement &&\n            this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState extends IBaseEventArgs {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs extends IBaseEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone, syncScrollService);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n             this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            return;\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            // TODO: This code can be removed. However tests need to be rewritten in a way that they wait for ResizeObserved to complete.\n            // So leaving as is for the moment.\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n        if (!this._bScrollInternal) {\n            this._calcVirtualScrollTop(event.target.scrollTop);\n        } else {\n            this._bScrollInternal = false;\n        }\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this._zone.onStable.pipe(first()).subscribe( () => {\n            this.recalcUpdateSizes();\n        });\n        this.cdr.markForCheck();\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.scrollComponent || !parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const embView = embeddedViewCopy.shift();\n                this.updateTemplateContext(embView.context, i);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent,\n         HVirtualHelperComponent, VirtualHelperBaseDirective],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnChanges,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { IBaseCancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { OverlaySettings } from '../services/public_api';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop-down)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBaseDirective implements IDropDownBase, OnChanges, AfterViewInit, OnDestroy {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    protected toggleDirective: IgxToggleDirective;\n\n    @ViewChild('scrollContainer', { static: true })\n    protected scrollContainerRef: ElementRef;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBaseDirective>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBaseDirective {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n                (this.children.find(e => e.index === this._focusedItem.index) || null) :\n                null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBaseDirective) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBaseDirective;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBaseDirective {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    /** @hidden @internal */\n    public get scrollContainer(): HTMLElement {\n        return this.scrollContainerRef.nativeElement;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBaseDirective;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBaseDirective;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBaseDirective;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getScroll().scrollTop = targetScroll;\n    }\n\n    protected focusItem(value: boolean) {\n        if (value || this._focusedItem) {\n            this._focusedItem.focused = value;\n        }\n    }\n\n    protected updateItemFocus() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this.focusItem(true);\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: IBaseCancelableBrowserEventArgs) {\n        // do not mutate passed event args\n        const eventArgs: IBaseCancelableBrowserEventArgs = Object.assign({}, e, { owner: this });\n        this.onOpening.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n        if (e.cancel) {\n            return;\n        }\n\n        if (this.virtDir) {\n            this.virtDir.scrollPosition = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleContentAppended() {\n        if (!this.virtDir && this.selectedItem) {\n           this.scrollToItem(this.selectedItem);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.updateItemFocus();\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: IBaseCancelableBrowserEventArgs) {\n        const eventArgs: IBaseCancelableBrowserEventArgs = Object.assign({}, e, { owner: this });\n        this.onClosing.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n        if (e.cancel) {\n            return;\n        }\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        this.focusItem(false);\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBaseDirective) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBaseDirective): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.id) {\n            // temp workaround until fix --> https://github.com/angular/angular/issues/34992\n            this.toggleDirective.id = changes.id.currentValue;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBaseDirective, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBaseDirective && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBaseDirective;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            if (this.isSelectionValid(args.newSelection)) {\n                this.selection.set(this.id, new Set([args.newSelection]));\n                if (!this.virtDir) {\n                    if (oldSelection) {\n                        oldSelection.selected = false;\n                    }\n                    if (args.newSelection) {\n                        args.newSelection.selected = true;\n                    }\n                }\n                if (event) {\n                    this.toggleDirective.close();\n                }\n            } else {\n                throw new Error('Please provide a valid drop-down item for the selection!');\n            }\n        }\n    }\n\n    /**\n     * Clears the selection of the dropdown\n     * ```typescript\n     * this.dropdown.clearSelection();\n     * ```\n     */\n    public clearSelection() {\n        const oldSelection = this.selectedItem;\n        const newSelection: IgxDropDownItemBaseDirective = null;\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n        if (this.selectedItem && !args.cancel) {\n            this.selectedItem.selected = false;\n            this.selection.clear(this.id);\n        }\n    }\n\n    /**\n     * Checks whether the selection is valid\n     * `null` - the selection should be emptied\n     * Virtual? - the selection should at least have and `index` and `value` property\n     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header\n     */\n    protected isSelectionValid(selection: any): boolean {\n        return selection === null\n        || (this.virtDir && selection.hasOwnProperty('value') && selection.hasOwnProperty('index'))\n        || (selection instanceof IgxDropDownItemComponent && !selection.isHeader);\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBaseDirective component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBaseDirective = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBaseDirective) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBaseDirective = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBaseDirective {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBaseDirective) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDropDownComponent,\n        IgxDropDownItemBaseDirective,\n        IgxDropDownItemComponent,\n        IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective\n    ],\n    exports: [\n        IgxDropDownComponent,\n        IgxDropDownItemComponent,\n        IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxToggleModule\n    ]\n})\nexport class IgxDropDownModule { }\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n/**\n * The `igxInput` directive creates single- or multiline text elements, covering common scenarios when dealing with form inputs.\n *\n * @igxModule IgxInputGroupModule\n *\n * @igxParent Data Entry & Display\n *\n * @igxTheme igx-input-group-theme\n *\n * @igxKeywords input, input group, form, field, validation\n *\n * @igxGroup presentation\n *\n * @example\n * ```html\n * <input-group>\n *  <label for=\"address\">Address</label>\n *  <input igxInput name=\"address\" type=\"text\" [(ngModel)]=\"customer.address\">\n * </input-group>\n * ```\n */\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef<HTMLInputElement>,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     *\n     * @example\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     */\n    @Input()\n    set value(value: any) {\n        this.nativeElement.value = value ?? '';\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` property.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     *\n     * @example\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     *\n     * @example\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     *\n     * @example\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     *\n     * @example\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     *\n     * @example\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     *\n     * @example\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     * @param event The event to invoke the handler\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onStatusChanged() {\n        // Enable/Disable control based on ngControl #7086\n        if (this.disabled !== this.ngControl.disabled) {\n            this.disabled = this.ngControl.disabled;\n        }\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                //  TODO: check the logic when control is touched or dirty\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previously but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else {\n                //  if control is untouched and pristine its state is initial. This is when user did not interact\n                //  with the input or when form/control is reset\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     *\n     * @example\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    /**\n     * @returns An indicator of whether the input has validator attributes or not\n     *\n     * @hidden\n     * @internal\n     */\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n\n    /**\n     * Gets whether the igxInput is focused.\n     *\n     * @example\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     *\n     * @example\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    /**\n     * A function to assign a validity property of an input.\n     *\n     * @hidden\n     * @internal\n     */\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { InjectionToken } from '@angular/core';\n\nenum IgxInputGroupEnum {\n    line,\n    box,\n    border,\n    search,\n}\n\n/**\n * Defines the InputGroupType DI token.\n */\n // Should this go trough Interface https://angular.io/api/core/InjectionToken\n export const IGX_INPUT_GROUP_TYPE = new InjectionToken<IgxInputGroupType>('InputGroupType');\n\n /**\n  * Determines the InputGroupType.\n  */\n export type IgxInputGroupType = keyof typeof IgxInputGroupEnum;\n","import { CommonModule, DOCUMENT } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional,\n    AfterContentInit\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport {\n    IgxInputDirective,\n    IgxInputState,\n} from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixModule } from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport {\n    DisplayDensity,\n    IDisplayDensityOptions,\n    DisplayDensityToken,\n    DisplayDensityBase,\n} from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxInputGroupType, IGX_INPUT_GROUP_TYPE } from './inputGroupType';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupThemeEnum {\n    'material',\n    'fluent',\n    'bootstrap',\n    'indigo-design',\n}\n\n/**\n * Determines the Input Group theme.\n */\nexport type IgxInputGroupTheme = keyof typeof IgxInputGroupThemeEnum;\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [\n        { provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }\n    ],\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase\n    implements IgxInputGroupBase, AfterContentInit {\n    private _type: IgxInputGroupType = null;\n    private _filled = false;\n    private _variant: IgxInputGroupTheme = 'material';\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     * ```typescript\n     *  @ViewChild(\"MyInputGroup\")\n     *  public inputGroup: IgxInputGroupComponent;\n     *  ngAfterViewInit(){\n     *  this.inputGroup.defaultClass = false;\n     * ```\n     * }\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * Prevents automatically focusing the input when clicking on other elements in the input group (e.g. prefix or suffix).\n     * @remarks Automatic focus causes software keyboard to show on mobile devices.\n     *\n     * @example\n     * ```html\n     * <igx-input-group [suppressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    @Input()\n    public suppressInputAutofocus = false;\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--filled')\n    public get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--cosy')\n    public get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--comfortable')\n    public get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /** @hidden */\n    @HostBinding('class.igx-input-group--compact')\n    public get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /** @hidden */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /** @hidden */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })\n    protected input: IgxInputDirective;\n\n    /** @hidden */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        if (\n            !this.isFocused &&\n            event.target !== this.input.nativeElement &&\n            !this.suppressInputAutofocus\n        ) {\n            this.input.focus();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown(event: PointerEvent) {\n        if (this.isFocused && event.target !== this.input.nativeElement) {\n            event.preventDefault();\n        }\n    }\n\n    hintClickHandler(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * Allowed values of type IgxInputGroupType.\n     * ```html\n     * <igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    public set type(value: IgxInputGroupType) {\n        this._type = value;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * The default is `line`.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     * }\n     * ```\n     */\n    public get type() {\n        return this._type || this._inputGroupType || 'line';\n    }\n\n    /** @hidden @internal */\n    public get theme(): IgxInputGroupTheme {\n        return this._variant;\n    }\n\n    /**\n     * @hidden\n     * @deprecated Use 'suppressInputAutofocus' instead.\n     */\n    @DeprecateProperty(`Deprecated. Use 'suppressInputAutofocus' instead.`)\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this.suppressInputAutofocus;\n    }\n\n    /**\n     * @hidden\n     * @deprecated Use 'suppressInputAutofocus' instead.\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this.suppressInputAutofocus = value;\n    }\n\n    constructor(\n        public element: ElementRef<HTMLElement>,\n        @Optional()\n        @Inject(DisplayDensityToken)\n        private _displayDensityOptions: IDisplayDensityOptions,\n        @Optional()\n        @Inject(IGX_INPUT_GROUP_TYPE)\n        private _inputGroupType: IgxInputGroupType,\n        @Inject(DOCUMENT)\n        private document: any\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    ngAfterContentInit() {\n        const variant = this.document.defaultView\n            .getComputedStyle(this.element.nativeElement)\n            .getPropertyValue('--igx-input-group-variant')\n            .trim();\n        this._variant = variant as IgxInputGroupTheme;\n    }\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     * }\n     * ```\n     */\n    public get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let inputBorder = this.inputGroup.hasBorder;\n     * }\n     * ```\n     */\n    public get hasBorder() {\n        return (\n            (this.type === 'line' || this.type === 'box') &&\n            this._variant === 'material'\n        );\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     * }\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return this.type === 'line' && this._variant === 'material';\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-input-group--box')\n    public get isTypeBox() {\n        return this.type === 'box' && this._variant === 'material';\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-input-group--border')\n    public get isTypeBorder() {\n        return this.type === 'border' && this._variant === 'material';\n    }\n\n    /**\n     * Returns true if the `IgxInputGroupComponent` theme is Fluent.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeFluent = this.inputGroup.isTypeFluent;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-input-group--fluent')\n    public get isTypeFluent() {\n        return this._variant === 'fluent';\n    }\n\n    /**\n     * Returns true if the `IgxInputGroupComponent` theme is Bootstrap.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeBootstrap = this.inputGroup.isTypeBootstrap;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-input-group--bootstrap')\n    public get isTypeBootstrap() {\n        return this._variant === 'bootstrap';\n    }\n\n    /**\n     * Returns true if the `IgxInputGroupComponent` theme is Indigo.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeIndigo = this.inputGroup.isTypeIndigo;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-input-group--indigo')\n    public get isTypeIndigo() {\n        return this._variant === 'indigo-design';\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     * @ViewChild(\"MyInputGroup1\")\n     * public inputGroup: IgxInputGroupComponent;\n     * ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-input-group--search')\n    public get isTypeSearch() {\n        return this.type === 'search';\n    }\n\n    /** @hidden */\n    public get filled() {\n        return this._filled;\n    }\n\n    /** @hidden */\n    public set filled(val) {\n        this._filled = val;\n    }\n}\n\n/** @hidden */\n@NgModule({\n    declarations: [\n        IgxInputGroupComponent,\n        IgxHintDirective,\n        IgxInputDirective,\n        IgxLabelDirective,\n    ],\n    exports: [\n        IgxInputGroupComponent,\n        IgxHintDirective,\n        IgxInputDirective,\n        IgxLabelDirective,\n        IgxPrefixModule,\n        IgxSuffixModule,\n    ],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule],\n})\nexport class IgxInputGroupModule {}\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    NgModule,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    AfterViewInit,\n    OnInit\n} from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs, IBaseEventArgs } from '../../core/utils';\nimport {\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    IPositionStrategy,\n    IScrollStrategy,\n    OverlaySettings\n} from '../../services/public_api';\nimport {\n    IgxDropDownComponent,\n    IgxDropDownItemNavigationDirective,\n    IgxDropDownModule,\n    ISelectionEventArgs\n} from '../../drop-down/public_api';\nimport { IgxInputGroupComponent } from '../../input-group/public_api';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy, AfterViewInit, OnInit {\n\n    private _shouldBeOpen = false;\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n        @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n        @Optional() protected group: IgxInputGroupComponent,\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n    private destroy$ = new Subject();\n\n    private defaultSettings: OverlaySettings;\n\n    protected id: string;\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        const target = settings.target || settings.positionStrategy.settings.target;\n        if (!target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public get target(): IgxDropDownComponent {\n        return this._target as IgxDropDownComponent;\n    }\n    public set target(v: IgxDropDownComponent) {\n        this._target = v;\n    }\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input')\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab')\n    @HostListener('keydown.Shift.Tab')\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        this._shouldBeOpen = false;\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        this._shouldBeOpen = true;\n        if (this.disabled || !this.collapsed || this.target.children.length === 0) {\n            return;\n        }\n        // if no drop-down width is set, the drop-down will be as wide as the autocomplete input;\n        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');\n        this.target.open(this.settings);\n        this.highlightFirstItem();\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden @internal */\n    public ngOnInit() {\n        const targetElement = this.parentElement;\n        this.defaultSettings = {\n            target: targetElement,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(),\n            excludeFromOutsideClick: [targetElement]\n        };\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public ngAfterViewInit() {\n        this.target.children.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            if (this.target.children.length) {\n                if (!this.collapsed) {\n                    this.highlightFirstItem();\n                } else if (this._shouldBeOpen) {\n                    this.open();\n                }\n            } else {\n                this.close();\n            }\n        });\n        this.target.onSelection.pipe(takeUntil(this.destroy$)).subscribe(this.select);\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n/**\n * The Button directive provides the Ignite UI Button functionality to every component that's intended to be used as a button.\n *\n * @igxModule IgxButtonModule\n *\n * @igxParent Data Entry & Display\n *\n * @igxTheme igx-button-theme\n *\n * @igxKeywords button, span, div, click\n *\n * @remarks\n * The Ignite UI Button directive is intended to be used by any button, span or div and turn it into a fully functional button.\n *\n * @example\n * ```html\n * <button igxButton=\"outlined\">A Button</button>\n * ```\n */\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _type: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _defaultType = 'flat';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _cssClassPrefix = 'igx-button';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _color: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _label: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _backgroundColor: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _disabled: boolean;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns the underlying DOM element.\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked.\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     *\n     * @example\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * let buttonRole = this.button.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'button';\n\n    /**\n     * Sets the type of the button.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"icon\"></button>\n     * ```\n     */\n    @Input('igxButton')\n    set type(value: string) {\n        const newValue = value ? value : this._defaultType;\n        if (this._type !== newValue) {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n            this._type = newValue;\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n        }\n    }\n\n    /**\n     * Sets the button text color.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n\n    /**\n     * Sets the background color of the button.\n     *\n     * @example\n     *  ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n\n    /**\n     * Sets the `aria-label` attribute.\n     *\n     * @example\n     *  ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n\n    /**\n     * Enables/disables the button.\n     *\n     * @example\n     * ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        this._disabled = val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.disabled')\n    public get disabledAttribute() {\n        return this._disabled ? this._disabled : null;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     */\n    @Input() public selected = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\nimport { mkenum } from '../../core/utils';\n\nexport const IgxDividerType = mkenum({\n    SOLID: 'solid',\n    DASHED: 'dashed'\n});\nexport type IgxDividerType = (typeof IgxDividerType)[keyof typeof IgxDividerType];\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.SOLID;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isSolid() {\n        return this.type === IgxDividerType.SOLID;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    AfterContentInit,\n    TemplateRef,\n    ContentChildren,\n    QueryList\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IDropStrategy, IgxDefaultDropStrategy } from './drag-drop.strategy';\n\nexport enum DragDirection {\n    VERTICAL,\n    HORIZONTAL,\n    BOTH\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IDropBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IDropDroppedEventArgs extends IDropBaseEventArgs {\n    /** Specifies if the default drop logic related to the event should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n}\n\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragMoveEventArgs extends IDragStartEventArgs {\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element X movement. */\n    nextPageX: number;\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element Y movement. */\n    nextPageY: number;\n}\n\n\nexport interface IDragGhostBaseEventArgs extends IBaseEventArgs {\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** Instance to the ghost element that is created when dragging starts. */\n    ghostElement: any;\n    /** Set if the ghost creation/destruction should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragCustomTransitionArgs {\n    duration?: number;\n    timingFunction?: string;\n    delay?: number;\n}\n\nexport class IgxDragLocation {\n    public pageX: number;\n    public pageY: number;\n\n    constructor(private _pageX, private _pageY) {\n        this.pageX = parseFloat(_pageX);\n        this.pageY = parseFloat(_pageY);\n    }\n}\n\n@Directive({\n    selector: '[igxDragHandle]'\n})\nexport class IgxDragHandleDirective {\n\n    @HostBinding('class.igx-drag__handle')\n    public baseClass = true;\n\n    constructor(public element: ElementRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxDragIgnore]'\n})\nexport class IgxDragIgnoreDirective {\n\n    @HostBinding('class.igx-drag__ignore')\n    public baseClass = true;\n\n    constructor(public element: ElementRef<any>) {}\n}\n\n@Directive({\n    exportAs: 'drag',\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements AfterContentInit, OnDestroy {\n\n    protected ghostContext: any = null;\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start.\n     * By default the drag starts after the draggable element is moved by 5px.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * An @Input property that indicates the directions that the element can be dragged.\n     * By default it is set to both horizontal and vertical directions.\n     * ```html\n     * <div igxDrag [dragDirection]=\"dragDir\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDir = DragDirection.HORIZONTAL;\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragDirection = DragDirection.BOTH;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.\n     * By default it is set to `true`.\n     * If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.\n     * ```html\n     * <div igxDrag [ghost]=\"false\">\n     *      <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghost = true;\n\n    /**\n     * Sets a custom class that will be added to the `ghostElement` element.\n     * ```html\n     * <div igxDrag [ghostClass]=\"'ghostElement'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostClass = '';\n\n\n    /**\n     * An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.\n     * By default a clone of the base element the igxDrag is instanced is created.\n     * ```html\n     * <div igxDrag [ghostTemplate]=\"customGhost\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * <ng-template #customGhost>\n     *      <div class=\"customGhostStyle\">\n     *          <span>I am being dragged!</span>\n     *      </div>\n     * </ng-template>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostHost;\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetX]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetX(value) {\n        this._offsetX = parseInt(value, 10);\n    }\n\n    public get ghostOffsetX() {\n        return this._offsetX !== undefined ? this._offsetX : this._defaultOffsetX;\n    }\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetY]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetY(value) {\n        this._offsetY = parseInt(value, 10);\n    }\n\n    public get ghostOffsetY() {\n        return this._offsetY !== undefined ? this._offsetY : this._defaultOffsetY ;\n    }\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element has been moved.\n     * ```html\n     * <div igxDrag  (dragMove)=\"onDragMove()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragMove(){\n     *      alert(\"The element has moved!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragMove = new EventEmitter<IDragMoveEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag (dragClick)=\"onDragClick()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragClick(){\n     *      alert(\"The element has been clicked!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragClick = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostCreate)=\"ghostCreated()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostCreated(){\n     *      alert(\"The ghost has been created!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostCreate = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostDestroy)=\"ghostDestroyed()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostDestroyed(){\n     *      alert(\"The ghost has been destroyed!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostDestroy = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag (transitioned)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public transitioned = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxDragHandleDirective, { descendants: true })\n    public dragHandles: QueryList<IgxDragHandleDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxDragIgnoreDirective, { descendants: true })\n    public dragIgnoredElems: QueryList<IgxDragIgnoreDirective>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag')\n    public baseClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag--select-disabled')\n    public selectDisabled = false;\n\n\n    /**\n     * Gets the current location of the element relative to the page.\n     */\n    public get location(): IgxDragLocation {\n        return new IgxDragLocation(this.pageX, this.pageY);\n    }\n\n    /**\n     * Gets the original location of the element before dragging started.\n     */\n    public get originLocation(): IgxDragLocation {\n        return new IgxDragLocation(this.baseOriginLeft, this.baseOriginTop);\n    }\n\n    /**\n     * @hidden\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageX() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostLeft;\n        }\n        return this.baseLeft;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageY() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostTop;\n        }\n        return this.baseTop;\n    }\n\n    protected get baseLeft(): number {\n        return this.element.nativeElement.getBoundingClientRect().left;\n    }\n\n    protected get baseTop(): number {\n        return this.element.nativeElement.getBoundingClientRect().top;\n    }\n\n    protected get baseOriginLeft(): number {\n        return this.baseLeft - this.getTransformX(this.element.nativeElement);\n    }\n\n    protected get baseOriginTop(): number {\n        return this.baseTop - this.getTransformY(this.element.nativeElement);\n    }\n\n    protected set ghostLeft(pageX: number) {\n        if (this.ghostElement) {\n            // We need to take into account marginLeft, since top style does not include margin, but pageX includes the margin.\n            const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n            // If ghost host is defined it needs to be taken into account.\n            this.ghostElement.style.left = (pageX - ghostMarginLeft - this._ghostHostX) + 'px';\n        }\n    }\n\n    protected get ghostLeft() {\n        return parseInt(this.ghostElement.style.left, 10) + this._ghostHostX;\n    }\n\n    protected set ghostTop(pageY: number) {\n        if (this.ghostElement) {\n            // We need to take into account marginTop, since top style does not include margin, but pageY includes the margin.\n            const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n            // If ghost host is defined it needs to be taken into account.\n            this.ghostElement.style.top = (pageY - ghostMarginTop - this._ghostHostY) + 'px';\n        }\n    }\n\n    protected get ghostTop() {\n        return parseInt(this.ghostElement.style.top, 10) + this._ghostHostY;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    public ghostElement;\n\n    /**\n     * @hidden\n     */\n    public animInProgress = false;\n\n    protected _startX = 0;\n    protected _startY = 0;\n    protected _lastX = 0;\n    protected _lastY = 0;\n    protected _dragStarted = false;\n\n    /** Drag ghost related properties */\n    protected _defaultOffsetX;\n    protected _defaultOffsetY;\n    protected _offsetX;\n    protected _offsetY;\n    protected _ghostStartX;\n    protected _ghostStartY;\n    protected _ghostHostX = 0;\n    protected _ghostHostY = 0;\n\n    protected _pointerDownId = null;\n    protected _clicked = false;\n    protected _lastDropArea = null;\n\n    protected _destroy = new Subject<boolean>();\n    protected _removeOnDestroy = true;\n\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public element: ElementRef,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2\n    ) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (!this.dragHandles || !this.dragHandles.length ) {\n            // Set user select none to the whole draggable element if no drag handles are defined.\n            this.selectDisabled = true;\n        }\n\n        // Bind events\n        this.zone.runOutsideAngular(() => {\n            const targetElements = this.dragHandles && this.dragHandles.length ?\n                this.dragHandles.map((item) => item.element.nativeElement) : [this.element.nativeElement];\n            targetElements.forEach((element) => {\n                if (this.pointerEventsEnabled) {\n                    fromEvent(element, 'pointerdown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n\n                    fromEvent(element, 'pointermove').pipe(\n                        throttle(() => interval(0, animationFrameScheduler)),\n                        takeUntil(this._destroy)\n                    ).subscribe((res) => this.onPointerMove(res));\n\n                    fromEvent(element, 'pointerup').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerUp(res));\n\n                    if (!this.ghost) {\n                        // Do not bind `lostpointercapture` to the target, because we will bind it on the ghost later.\n                        fromEvent(element, 'lostpointercapture').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerLost(res));\n                    }\n                } else if (this.touchEventsEnabled) {\n                    fromEvent(element, 'touchstart').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                } else {\n                    // We don't have pointer events and touch events. Use then mouse events.\n                    fromEvent(element, 'mousedown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                }\n            });\n\n            // We should bind to document events only once when there are no pointer events.\n            if (!this.pointerEventsEnabled && this.touchEventsEnabled) {\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (!this.pointerEventsEnabled) {\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n\n            this.element.nativeElement.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        });\n\n        // Set transition duration to 0s. This also helps with setting `visibility: hidden` to the base to not lag.\n        this.element.nativeElement.style.transitionDuration = '0.0s';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.ghost && this.ghostElement && this._removeOnDestroy) {\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        }\n    }\n\n    /**\n     * Sets desired location of the base element or ghost element if rended relative to the document.\n     * @param newLocation New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll.\n     */\n    public setLocation(newLocation: IgxDragLocation) {\n        // We do not subtract marginLeft and marginTop here because here we calculate deltas.\n        if (this.ghost && this.ghostElement) {\n            const offsetHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n            const offsetHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n            this.ghostLeft = newLocation.pageX - offsetHostX + this.getWindowScrollLeft();\n            this.ghostTop = newLocation.pageY - offsetHostY + this.getWindowScrollTop();\n        } else if (!this.ghost) {\n            const deltaX = newLocation.pageX - this.pageX;\n            const deltaY = newLocation.pageY - this.pageY;\n            const transformX = this.getTransformX(this.element.nativeElement);\n            const transformY = this.getTransformY(this.element.nativeElement);\n            this.setTransformXY(transformX + deltaX, transformY + deltaY);\n        }\n\n        this._startX = this.baseLeft;\n        this._startY = this.baseTop;\n    }\n\n    /**\n     * Animates the base or ghost element depending on the `ghost` input to its initial location.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * If the base element has changed its DOM position its initial location will be changed accordingly.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionToOrigin(customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if ((!!startLocation && startLocation.pageX === this.baseOriginLeft && startLocation.pageY === this.baseOriginLeft) ||\n            (!startLocation && this.ghost && !this.ghostElement)) {\n            return;\n        }\n\n        if (!!startLocation && startLocation.pageX !== this.pageX && startLocation.pageY !== this.pageY) {\n            if (this.ghost && !this.ghostElement) {\n                this._startX = startLocation.pageX;\n                this._startY = startLocation.pageY;\n                this._ghostStartX = this._startX;\n                this._ghostStartY = this._startY;\n                this.createGhost(this._startX, this._startY);\n            }\n\n            this.setLocation(startLocation);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            if (this.ghost) {\n                this.ghostElement.style.transitionProperty = 'top, left';\n                this.ghostElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.ghostElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.ghostElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this.setLocation(new IgxDragLocation(this.baseLeft, this.baseTop));\n            } else if (!this.ghost) {\n                this.element.nativeElement.style.transitionProperty = 'transform';\n                this.element.nativeElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.element.nativeElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.element.nativeElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this._startX = this.baseLeft;\n                this._startY = this.baseTop;\n                this.setTransformXY(0, 0);\n            }\n        }, 0);\n    }\n\n    /**\n     * Animates the base or ghost element to a specific target location or other element using transition.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location.\n     * @param target Target that the base or ghost will transition to. It can be either location in the page or another HTML element.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionTo(target: IgxDragLocation | ElementRef, customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if (!!startLocation && this.ghost && !this.ghostElement) {\n            this._startX = startLocation.pageX;\n            this._startY = startLocation.pageY;\n            this._ghostStartX = this._startX;\n            this._ghostStartY = this._startY;\n        } else if (!!startLocation && (!this.ghost || this.ghostElement)) {\n            this.setLocation(startLocation);\n        } else if (this.ghost && !this.ghostElement) {\n            this._startX = this.baseLeft;\n            this._startY = this.baseTop;\n            this._ghostStartX = this._startX + this.getWindowScrollLeft();\n            this._ghostStartY = this._startY + this.getWindowScrollTop();\n        }\n\n        if (this.ghost && !this.ghostElement) {\n            this.createGhost(this._startX, this._startY);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            const movedElem = this.ghost ? this.ghostElement : this.element.nativeElement;\n            movedElem.style.transitionProperty = this.ghost && this.ghostElement ? 'left, top' : 'transform';\n            movedElem.style.transitionDuration =\n                customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n            movedElem.style.transitionTimingFunction =\n                customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n            movedElem.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n\n            if (target instanceof IgxDragLocation) {\n                this.setLocation(new IgxDragLocation (target.pageX, target.pageY));\n            } else {\n                const targetRects = target.nativeElement.getBoundingClientRect();\n                this.setLocation(new IgxDragLocation(\n                    targetRects.left -  this.getWindowScrollLeft(),\n                    targetRects.top - this.getWindowScrollTop()\n                ));\n            }\n        }, 0);\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        const ignoredElement = this.dragIgnoredElems.find(elem => elem.element.nativeElement === event.target);\n        if (ignoredElement) {\n            return;\n        }\n\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until ghostElement is created.\n        const handleFound = this.dragHandles.find(handle => handle.element.nativeElement === event.currentTarget);\n        const targetElement = handleFound ? handleFound.element.nativeElement : this.element.nativeElement;\n        if (this.pointerEventsEnabled) {\n            targetElement.setPointerCapture(this._pointerDownId);\n        } else {\n            targetElement.focus();\n            event.preventDefault();\n        }\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        this._defaultOffsetX = this.baseLeft - this._startX + this.getWindowScrollLeft();\n        this._defaultOffsetY = this.baseTop - this._startY + this.getWindowScrollTop();\n        this._ghostStartX = this._startX + this.ghostOffsetX;\n        this._ghostStartY = this._startY + this.ghostOffsetY;\n        this._lastX = this._startX;\n        this._lastY = this._startY;\n    }\n\n    /**\n     * @hidden\n     * Perform drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned it. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                const dragStartArgs: IDragStartEventArgs = {\n                    originalEvent: event,\n                    owner: this,\n                    startX: pageX - totalMovedX,\n                    startY: pageY - totalMovedY,\n                    pageX: pageX,\n                    pageY: pageY,\n                    cancel: false\n                };\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    if (this.ghost) {\n                        // We moved enough so ghostElement can be rendered and actual dragging to start.\n                        // When creating it will take into account any offset set by the user by default.\n                        this.createGhost(pageX, pageY);\n                    } else if (this._offsetX !== undefined || this._offsetY !== undefined) {\n                        // There is no need for ghost, but we will need to position initially the base element to reflect any offset.\n                        const transformX = (this._offsetX !== undefined ? this._offsetX - this._defaultOffsetX : 0) +\n                            this.getTransformX(this.element.nativeElement);\n                        const transformY = (this._offsetY !== undefined ? this._offsetY - this._defaultOffsetY : 0) +\n                            this.getTransformY(this.element.nativeElement);\n                        this.setTransformXY(transformX, transformY);\n                    }\n                } else {\n                    return;\n                }\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            const moveArgs: IDragMoveEventArgs = {\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._lastX,\n                pageY: this._lastY,\n                nextPageX: pageX,\n                nextPageY: pageY,\n                cancel: false\n            };\n            this.dragMove.emit(moveArgs);\n\n            const setPageX = moveArgs.nextPageX;\n            const setPageY = moveArgs.nextPageY;\n            if (!moveArgs.cancel) {\n                if (this.ghost) {\n                    const updatedTotalMovedX = this.dragDirection === DragDirection.VERTICAL ? 0 : setPageX - this._startX;\n                    const updatedTotalMovedY = this.dragDirection === DragDirection.HORIZONTAL ? 0 : setPageY - this._startY;\n                    this.ghostLeft = this._ghostStartX + updatedTotalMovedX;\n                    this.ghostTop = this._ghostStartY + updatedTotalMovedY;\n                } else {\n                    const lastMovedX = this.dragDirection === DragDirection.VERTICAL ? 0 : setPageX - this._lastX;\n                    const lastMovedY = this.dragDirection === DragDirection.HORIZONTAL ? 0 : setPageY - this._lastY;\n                    const translateX = this.getTransformX(this.element.nativeElement) + lastMovedX;\n                    const translateY = this.getTransformY(this.element.nativeElement) + lastMovedY;\n                    this.setTransformXY(translateX, translateY);\n                }\n                this.dispatchDragEvents(pageX, pageY, event);\n            }\n\n            this._lastX = setPageX;\n            this._lastY = setPageY;\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the ghostElement and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned to it. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n\n            // Prevent scrolling on touch while dragging\n            event.preventDefault();\n        }\n\n        const eventArgs: IDragBaseEventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement ) {\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n\n            if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        } else {\n            // Trigger our own click event because when there is no ghost, native click cannot be prevented when dragging.\n            this.zone.run(() => {\n                this.dragClick.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Execute this method whe the pointer capture has been lost.\n     * This means that during dragging the user has performed other action like right clicking and then clicking somewhere else.\n     * This method will ensure that the drag state is being reset in this case as if the user released the dragged element.\n     * @param event Event captured\n     */\n    public onPointerLost(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: event.pageX,\n            pageY: event.pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n            if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Create ghost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param pageX Latest pointer position on the X axis relative to the page.\n     * @param pageY Latest pointer position on the Y axis relative to the page.\n     * @param node The Node object to be cloned.\n     */\n    protected createGhost(pageX, pageY, node: any = null) {\n        if (!this.ghost) {\n            return;\n        }\n\n        let dynamicGhostRef;\n        if (this.ghostTemplate) {\n            dynamicGhostRef = this.viewContainer.createEmbeddedView(this.ghostTemplate, this.ghostContext);\n            this.ghostElement = dynamicGhostRef.rootNodes[0];\n        } else {\n            this.ghostElement = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        }\n\n        const totalMovedX = pageX - this._startX;\n        const totalMovedY = pageY - this._startY;\n        this._ghostHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n        this._ghostHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n\n        this.ghostElement.style.transitionDuration = '0.0s';\n        this.ghostElement.style.position = 'absolute';\n\n\n        if (this.ghostClass) {\n            this.renderer.addClass(this.ghostElement, this.ghostClass);\n        }\n\n        const createEventArgs = {\n            owner: this,\n            ghostElement: this.ghostElement,\n            cancel: false\n        };\n        this.ghostCreate.emit(createEventArgs);\n        if (createEventArgs.cancel) {\n            this.ghostElement = null;\n            if (this.ghostTemplate && dynamicGhostRef) {\n                dynamicGhostRef.destroy();\n            }\n            return;\n        }\n\n        if (this.ghostHost) {\n            this.ghostHost.appendChild(this.ghostElement);\n        } else {\n            document.body.appendChild(this.ghostElement);\n        }\n\n        const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n        const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n        this.ghostElement.style.left = (this._ghostStartX - ghostMarginLeft + totalMovedX - this._ghostHostX) + 'px';\n        this.ghostElement.style.top = (this._ghostStartY - ghostMarginTop + totalMovedY - this._ghostHostX) + 'px';\n\n        if (this.pointerEventsEnabled) {\n            // The ghostElement takes control for moving and dragging after it has been rendered.\n            if (this._pointerDownId !== null) {\n                this.ghostElement.setPointerCapture(this._pointerDownId);\n            }\n            this.ghostElement.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.ghostElement.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n            this.ghostElement.addEventListener('lostpointercapture', (args) => {\n                this.onPointerLost(args);\n            });\n        }\n\n        // Transition animation when the ghostElement is released and it returns to it's original position.\n        this.ghostElement.addEventListener('transitionend', (args) => {\n            this.onTransitionEnd(args);\n        });\n\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const customEventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' &&\n                elementsFromPoint[i] !== this.ghostElement && elementsFromPoint[i] !== this.element.nativeElement) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n                if (this._lastDropArea) {\n                    this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                }\n\n                this._lastDropArea = topDropArea;\n                this.dispatchEvent(this._lastDropArea, 'igxDragEnter', customEventArgs);\n            } else if (!topDropArea && this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                this._lastDropArea = null;\n                return;\n            }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', customEventArgs);\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if ((!this._dragStarted && !this.animInProgress) || this._clicked) {\n            // Return if no dragging started and there is no animation in progress.\n            return ;\n        }\n\n        if (this.ghost && this.ghostElement) {\n            this._ghostStartX = this.baseLeft + this.getWindowScrollLeft();\n            this._ghostStartY = this.baseTop + this.getWindowScrollTop();\n\n            const ghostDestroyArgs: IDragGhostBaseEventArgs = {\n                owner: this,\n                ghostElement: this.ghostElement,\n                cancel: false\n            };\n            this.ghostDestroy.emit(ghostDestroyArgs);\n            if (ghostDestroyArgs.cancel) {\n                return;\n            }\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        } else if (!this.ghost) {\n            this.element.nativeElement.style.transitionProperty = '';\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this.element.nativeElement.style.transitionTimingFunction = '';\n            this.element.nativeElement.style.transitionDelay = '';\n        }\n        this.animInProgress = false;\n        this._dragStarted = false;\n\n        // Execute transitioned after everything is reset so if the user sets new location on the base now it would work as expected.\n        this.zone.run(() => {\n            this.transitioned.emit({\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._startX,\n                pageY: this._startY\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint consider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            const elements = document['msElementsFromPoint'](viewPortX, viewPortY);\n            return elements === null ? [] : elements;\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Otherwise can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getTransformX(elem) {\n        let posX = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posX = values ? Number(values[ 1 ]) : 0;\n        }\n\n        return posX;\n    }\n\n    protected getTransformY(elem) {\n        let posY = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posY = values ? Number(values[ 2 ]) : 0;\n        }\n\n        return posY;\n    }\n\n    /** Method setting transformation to the base draggable element. */\n    protected setTransformXY(x: number, y: number) {\n        this.element.nativeElement.style.transform = 'translate3d(' + x + 'px, ' + y + 'px, 0px)';\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected ghostHostOffsetLeft(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().left - this.getWindowScrollLeft();\n        }\n        return ghostHost.getBoundingClientRect().left - this.getWindowScrollLeft();\n    }\n\n    protected ghostHostOffsetTop(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().top - this.getWindowScrollTop();\n        }\n        return ghostHost.getBoundingClientRect().top - this.getWindowScrollTop();\n    }\n}\n\n@Directive({\n    exportAs: 'drop',\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input('igxDrop')\n    private _data: any;\n    public get data(): any {\n        return this._data;\n    }\n    public set data(v: any) {\n        this._data = v;\n    }\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public dropChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies a drop strategy type that will be executed when an `IgxDrag` element is released inside\n     *  the current drop area. The provided strategies are:\n     *  - IgxDefaultDropStrategy - This is the default base strategy and it doesn't perform any actions.\n     *  - IgxAppendDropStrategy - Appends the dropped element to last position as a direct child to the `igxDrop`.\n     *  - IgxPrependDropStrategy - Prepends the dropped element to first position as a direct child to the `igxDrop`.\n     *  - IgxInsertDropStrategy - If the dropped element is released above a child element of the `igxDrop`, it will be inserted\n     *      at that position. Otherwise the dropped element will be appended if released outside any child of the `igxDrop`.\n     * ```html\n     * <div igxDrag>\n     *      <span>DragMe</span>\n     * </div>\n     * <div igxDrop [dropStrategy]=\"myDropStrategy\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * import { IgxAppendDropStrategy } from 'igniteui-angular';\n     *\n     * export class App {\n     *      public myDropStrategy = IgxAppendDropStrategy;\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public set dropStrategy(classRef: any) {\n        this._dropStrategy = new classRef(this._renderer);\n    }\n\n    public get dropStrategy() {\n        return this._dropStrategy;\n    }\n\n    /**\n     * Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public enter = new EventEmitter<IDropBaseEventArgs>();\n\n    /**\n     * Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public over = new EventEmitter<IDropBaseEventArgs>();\n\n    /**\n     * Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (leave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable element has left the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public leave = new EventEmitter<IDropBaseEventArgs>();\n\n    /**\n     * Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (dropped)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable element has been dropped in the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public dropped = new EventEmitter<IDropDroppedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n    protected _dropStrategy: IDropStrategy;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n        this._dropStrategy = new IgxDefaultDropStrategy();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n\n        this.over.emit(eventArgs);\n     }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.enter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.leave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IDropDroppedEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.dropped.emit(args);\n        });\n\n        if (this._dropStrategy && !args.cancel) {\n            const elementsAtPoint = event.detail.owner.getElementsAtPoint(event.detail.pageX, event.detail.pageY);\n            const insertIndex = this.getInsertIndexAt(event.detail.owner, elementsAtPoint);\n            this._dropStrategy.dropAction(event.detail.owner, this, insertIndex);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected isDragLinked(drag: IgxDragDirective): boolean {\n        const dragLinkArray = drag.dragChannel instanceof Array;\n        const dropLinkArray = this.dropChannel instanceof Array;\n\n        if (!dragLinkArray && !dropLinkArray) {\n            return this.dropChannel === drag.dragChannel;\n        } else if (!dragLinkArray && dropLinkArray) {\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dropLinks.length; i ++) {\n                if (dropLinks[i] === drag.dragChannel) {\n                    return true;\n                }\n            }\n        } else if (dragLinkArray && !dropLinkArray) {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                if (dragLinks[i] === this.dropChannel) {\n                    return true;\n                }\n            }\n        } else {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                for (let j = 0; j < dropLinks.length; j ++) {\n                    if (dragLinks[i] === dropLinks[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected getInsertIndexAt(draggedDir: IgxDragDirective, elementsAtPoint: any[]): number {\n        let insertIndex = -1;\n        const dropChildren = Array.prototype.slice.call(this.element.nativeElement.children);\n        if (!dropChildren.length) {\n            return insertIndex;\n        }\n\n        let i = 0;\n        let childUnder = null;\n        while (!childUnder && i < elementsAtPoint.length) {\n            if (elementsAtPoint[i].parentElement === this.element.nativeElement) {\n                childUnder = elementsAtPoint[i];\n            }\n            i++;\n        }\n\n        const draggedElemIndex = dropChildren.indexOf(draggedDir.element.nativeElement);\n        insertIndex = dropChildren.indexOf(childUnder);\n        if (draggedElemIndex !== -1 && draggedElemIndex < insertIndex) {\n            insertIndex++;\n        }\n\n        return insertIndex;\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective, IgxDragIgnoreDirective],\n    exports: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective, IgxDragIgnoreDirective]\n})\nexport class IgxDragDropModule { }\n","import { Renderer2 } from '@angular/core';\nimport { IgxDragDirective, IgxDropDirective } from './drag-drop.directive';\n\n\nexport interface IDropStrategy {\n    dropAction: (drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) => void;\n}\n\n// @dynamic\nexport class IgxDefaultDropStrategy implements IDropStrategy {\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) { }\n}\n\n// @dynamic\nexport class IgxAppendDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        this._renderer.appendChild(dropAreaElement, dragElement);\n    }\n}\n\n// @dynamic\nexport class IgxPrependDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (dropAreaElement.children.length) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n\n// @dynamic\nexport class IgxInsertDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {\n            return;\n        }\n\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus({ preventScroll: true}));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\nexport const MASK_FLAGS = ['C', '&', 'a', 'A', '?', 'L', '9', '0', '#'];\n\n/** @hidden */\nexport interface MaskOptions {\n    format: string;\n    promptChar: string;\n}\n\n/** @hidden */\nexport interface Replaced {\n    value: string;\n    end: number;\n}\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root'\n})\nexport class MaskParsingService {\n    public applyMask(inputVal: string, maskOptions: MaskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndices: number[] = this.getNonLiteralIndices(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPosition(char, nonLiteralIndices[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndices.length) {\n            nonLiteralValues.splice(nonLiteralIndices.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndices[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public parseValueFromMask(maskedValue: string, maskOptions: MaskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of maskedValue) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public replaceInMask(maskedValue: string, value: string, maskOptions: MaskOptions, start: number, end: number): Replaced {\n        const literalsPositions: number[] = Array.from(this.getMaskLiterals(maskOptions.format).keys());\n        const chars = Array.from(value);\n        let cursor = start;\n        end = Math.min(end, maskedValue.length);\n\n        for (let i = start; i < end || (chars.length && i < maskedValue.length); i++) {\n            if (literalsPositions.indexOf(i) !== -1) {\n                if (chars[0] === maskedValue[i]) {\n                    cursor = i + 1;\n                    chars.shift();\n                }\n                continue;\n            }\n            if (chars[0]\n                && !this.validateCharOnPosition(chars[0], i, maskOptions.format)\n                && chars[0] !== maskOptions.promptChar) {\n                break;\n            }\n\n            let char = maskOptions.promptChar;\n            if (chars.length) {\n                cursor = i + 1;\n                char = chars.shift();\n            }\n            maskedValue = this.replaceCharAt(maskedValue, i, char);\n        }\n\n        return { value: maskedValue, end: cursor };\n    }\n\n    public replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n\n    /** Validates only non literal positions. */\n    private validateCharOnPosition(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letterSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndices(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndices: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndices.push(i);\n            }\n        }\n\n        return nonLiteralsIndices;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive, ElementRef, EventEmitter, HostListener,\n    Output, PipeTransform, Renderer2,\n    Input, NgModule, OnInit, AfterViewChecked,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { MaskParsingService, MaskOptions } from './mask-parsing.service';\nimport { isIE, IBaseEventArgs, KEYCODES } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]',\n    exportAs: 'igxMask'\n})\nexport class IgxMaskDirective implements OnInit, AfterViewChecked, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     */\n    @Input()\n    public promptChar = '_';\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     */\n    @DeprecateProperty('\"placeholder\" is deprecated, use native placeholder instead.')\n    public set placeholder(val: string) {\n        this.renderer.setAttribute(this.nativeElement, 'placeholder', val);\n    }\n\n    public get placeholder(): string {\n        return this.nativeElement.placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /** @hidden */\n    public get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal; */\n    protected get inputValue(): string {\n        return this.nativeElement.value;\n    }\n\n    /** @hidden @internal */\n    protected set inputValue(val) {\n        this.nativeElement.value = val;\n    }\n\n    /** @hidden */\n    protected get maskOptions(): MaskOptions {\n        const format = this.mask || 'CCCCCCCCCC';\n        const promptChar = this.promptChar && this.promptChar.substring(0, 1);\n        return { format, promptChar };\n    }\n\n    /** @hidden */\n    protected get selectionStart(): number {\n        // Edge(classic) and FF don't select text on drop\n        return this.nativeElement.selectionStart === this.nativeElement.selectionEnd && this._hasDropAction ?\n            this.nativeElement.selectionEnd - this._droppedData.length :\n            this.nativeElement.selectionStart;\n    }\n\n    /** @hidden */\n    protected get selectionEnd(): number {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /** @hidden */\n    protected get start(): number {\n        return this._start;\n    }\n\n    /** @hidden */\n    protected get end(): number {\n        return this._end;\n    }\n\n    private _end = 0;\n    private _start = 0;\n    private _key: number;\n    private _oldText = '';\n    private _dataValue = '';\n    private _focused = false;\n    private _droppedData: string;\n    private _hasDropAction: boolean;\n    private _stopPropagation: boolean;\n\n    private _onTouchedCallback: () => void = noop;\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected maskParser: MaskParsingService,\n        protected renderer: Renderer2) { }\n\n    /** @hidden */\n    public ngOnInit(): void {\n        if (!this.nativeElement.placeholder) {\n            this.renderer.setAttribute(this.nativeElement, 'placeholder', this.maskOptions.format);\n        }\n    }\n\n    /**\n     * TODO: Remove after date/time picker integration refactor\n     * @hidden\n     */\n    public ngAfterViewChecked(): void {\n        this._oldText = this.inputValue;\n    }\n\n    /** @hidden */\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event): void {\n        const key = event.keyCode || event.charCode;\n        if (!key) { return; }\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if ((key === KEYCODES.CTRL && key === KEYCODES.Z) || (key === KEYCODES.CTRL && key === KEYCODES.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._start = this.selectionStart;\n        this._end = this.selectionEnd;\n    }\n\n    /** @hidden */\n    @HostListener('input')\n    public onInputChanged(): void {\n        /**\n         * '!this._focused' is a fix for #8165\n         * On page load IE triggers input events before focus events and\n         * it does so for every single input on the page.\n         * The mask needs to be prevented from doing anything while this is happening because\n         * the end user will be unable to blur the input.\n         * https://stackoverflow.com/questions/21406138/input-event-triggered-on-internet-explorer-when-placeholder-changed\n         */\n        if (isIE() && (this._stopPropagation || !this._focused)) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._hasDropAction) {\n            this._start = this.selectionStart;\n        }\n        if (this.inputValue.length < this._oldText.length && this._key === KEYCODES.INPUT_METHOD) {\n            // software keyboard input delete\n            this._key = KEYCODES.BACKSPACE;\n        }\n\n        let valueToParse = '';\n        switch (this._key) {\n            case KEYCODES.DELETE:\n                this._end = this._start === this._end ? ++this._end : this._end;\n                break;\n            case KEYCODES.BACKSPACE:\n                this._start = this.selectionStart;\n                break;\n            default:\n                valueToParse = this.inputValue.substring(this._start, this.selectionEnd);\n                break;\n        }\n\n        const replacedData = this.maskParser.replaceInMask(this._oldText, valueToParse, this.maskOptions, this._start, this._end);\n        this.inputValue = replacedData.value;\n        if (this._key === KEYCODES.BACKSPACE) { replacedData.end = this._start; }\n        this.setSelectionRange(replacedData.end);\n\n        const rawVal = this.maskParser.parseValueFromMask(this.inputValue, this.maskOptions);\n        this._dataValue = this.includeLiterals ? this.inputValue : rawVal;\n        this._onChangeCallback(this._dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.inputValue });\n\n        this.afterInput();\n    }\n\n    /** @hidden */\n    @HostListener('paste')\n    public onPaste(): void {\n        this._oldText = this.inputValue;\n        this._start = this.selectionStart;\n    }\n\n    /** @hidden */\n    @HostListener('focus')\n    public onFocus(): void {\n        this._focused = true;\n        this.showMask(this._dataValue);\n    }\n\n    /** @hidden */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value: string): void {\n        this._focused = false;\n        this.showDisplayValue(value);\n        this._onTouchedCallback();\n    }\n\n    /** @hidden */\n    @HostListener('dragenter')\n    public onDragEnter(): void {\n        if (!this._focused) {\n            this.showMask(this._dataValue);\n        }\n    }\n\n    /** @hidden */\n    @HostListener('dragleave')\n    public onDragLeave(): void {\n        if (!this._focused) {\n            this.showDisplayValue(this.inputValue);\n        }\n    }\n\n    /** @hidden */\n    @HostListener('drop', ['$event'])\n    public onDrop(event: DragEvent): void {\n        this._hasDropAction = true;\n        this._droppedData = event.dataTransfer.getData('text');\n    }\n\n    /** @hidden */\n    protected showMask(value: string) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            // TODO(D.P.): focusedValuePipe should be deprecated or force-checked to match mask format\n            this.inputValue = this.focusedValuePipe.transform(value);\n        } else {\n            this.inputValue = this.maskParser.applyMask(this.inputValue, this.maskOptions);\n        }\n\n        this._oldText = this.inputValue;\n    }\n\n    /** @hidden */\n    protected setSelectionRange(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /** @hidden */\n    protected afterInput() {\n        this._oldText = this.inputValue;\n        this._hasDropAction = false;\n        this._start = 0;\n        this._end = 0;\n        this._key = null;\n    }\n\n    private showDisplayValue(value: string) {\n        if (this.displayValuePipe) {\n            this.inputValue = this.displayValuePipe.transform(value);\n        } else if (value === this.maskParser.applyMask(null, this.maskOptions)) {\n            this.inputValue = '';\n        }\n    }\n\n    /** @hidden */\n    public writeValue(value: string): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this.maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.inputValue = value ? this.maskParser.applyMask(value, this.maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.inputValue = this.displayValuePipe.transform(this.inputValue);\n        }\n\n        this._dataValue = this.includeLiterals ? this.inputValue : value;\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.inputValue });\n    }\n\n    /** @hidden */\n    public registerOnChange(fn: (_: any) => void): void { this._onChangeCallback = fn; }\n\n    /** @hidden */\n    public registerOnTouched(fn: () => void): void { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE, IBaseEventArgs, mkenum } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs extends IBaseEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\n\nexport const RadioLabelPosition = mkenum({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nexport type RadioLabelPosition = (typeof RadioLabelPosition)[keyof typeof RadioLabelPosition];\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio', { static: true }) public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     * @hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * @hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     * @hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * @hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     * @hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     * @hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     * @hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onFocus() {\n        this.focused = true;\n    }\n    /**\n     * @hidden\n     */\n    public onBlur() {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = Math.round(event.clientX - rectBounds.left - radius / 2);\n        let top = Math.round(event.clientY - rectBounds.top - radius / 2);\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * Radio group directive renders set of radio buttons.\n *\n * @igxModule IgxRadioModule\n *\n * @igxTheme igx-radio-theme\n *\n * @igxKeywords radiogroup, radio, button, input\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * @example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    exportAs: 'igxRadioGroup',\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     *\n     * @example\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     */\n    @ContentChildren(IgxRadioComponent, { descendants: true }) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     *\n     * @remarks\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     *\n     * @example\n     *  ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     *\n     * @remarks\n     * If not set, `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     *\n     * @example\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     *\n     * @remarks\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group (change)=\"handler($event)\"></igx-radio-group>\n     * ```\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     * The css class applied to the component.\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _value: any = null;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _isInitialized = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * @hidden\n     * @internal\n     */\n    private _disabled = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _required = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @remarks\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     *\n     * @example\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     * Registers a function called when the control value changes.\n     *\n     * @hidden\n     * @internal\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * Registers a function called when the control is touched.\n     *\n     * @hidden\n     * @internal\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            const props = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };\n            this.radioButtons.forEach((button) => {\n                Object.assign(button, props);\n\n                if (button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { compareMaps } from '../../core/utils';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n    /**\n     * Additional, custom checks to perform prior an element highlighting.\n     */\n    metadata?: Map<string, any>;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n    private _defaultCssClass = 'igx-highlight';\n    private _defaultActiveCssClass = 'igx-highlight--active';\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    /**\n     * A map that contains all aditional conditions, that you need to activate a highlighted\n     * element. To activate the condition, you will have to add a new metadata key to\n     * the `metadata` property of the IActiveHighlightInfo interface.\n     *\n     * @example\n     * ```typescript\n     *  // Set a property, which would disable the highlight for a given element on a cetain condition\n     *  const metadata = new Map<string, any>();\n     *  metadata.set('highlightElement', false);\n     * ```\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [metadata]=\"metadata\">\n     * </div>\n     * ```\n     */\n    @Input()\n    public metadata: Map<string, any>;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row and column.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n\n        if (group.column === this.column && group.row === this.row && compareMaps(this.metadata, group.metadata)) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     * ```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, Inject, OnDestroy\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services/public_api';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport interface ITooltipShowEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit, OnDestroy {\n    private destroy$ = new Subject();\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n        this._overlayDefaults.closeOnEscape = true;\n\n        this.target.onClosing.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                event.cancel = true;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n\n\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","export interface IgxDateTimeEditorEventArgs {\n    readonly oldValue?: Date;\n    newValue?: Date;\n    readonly userInput: string;\n}\n\n/**\n * Specify a particular date, time or AmPm part.\n */\nexport enum DatePart {\n    Date = 'date',\n    Month = 'month',\n    Year = 'year',\n    Hours = 'hour',\n    Minutes = 'minute',\n    Seconds = 'second',\n    AmPm = 'ampm',\n    Literal = 'literal'\n}\n\n/** @hidden @internal */\nexport interface DatePartInfo {\n    type: DatePart;\n    start: number;\n    end: number;\n    format: string;\n}\n","import { isIE } from '../core/utils';\nimport { DatePart, DatePartInfo } from '../directives/date-time-editor/date-time-editor.common';\nimport { formatDate, FormatWidth, getLocaleDateFormat } from '@angular/common';\n\n/**\n * This enum is used to keep the date validation result.\n *\n * @hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/** @hidden */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/** @hidden */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\nconst DATE_CHARS = ['h', 'H', 'm', 's', 'S', 't', 'T'];\nconst TIME_CHARS = ['d', 'D', 'M', 'y', 'Y'];\n\n/** @hidden */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n\n/** @hidden */\nexport abstract class DatePickerUtil {\n    public static readonly DEFAULT_INPUT_FORMAT = 'MM/dd/yyyy';\n    // TODO: this is the def mask for the date-picker, should remove it during refactoring\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n\n\n    /**\n     *  TODO: (in issue #6483) Unit tests and docs for all public methods.\n     */\n\n\n\n    /**\n     * Parse a Date value from masked string input based on determined date parts\n     * @param inputData masked value to parse\n     * @param dateTimeParts Date parts array for the mask\n     */\n    public static parseValueFromMask(inputData: string, dateTimeParts: DatePartInfo[], promptChar?: string): Date | null {\n        const parts: { [key in DatePart]: number } = {} as any;\n        dateTimeParts.forEach(dp => {\n            let value = parseInt(this.getCleanVal(inputData, dp, promptChar), 10);\n            if (!value) {\n                value = dp.type === DatePart.Date || dp.type === DatePart.Month ? 1 : 0;\n            }\n            parts[dp.type] = value;\n        });\n        parts[DatePart.Month] -= 1;\n\n        if (parts[DatePart.Month] < 0 || 11 < parts[DatePart.Month]) {\n            return null;\n        }\n\n        // TODO: Century threshold\n        if (parts[DatePart.Year] < 50) {\n            parts[DatePart.Year] += 2000;\n        }\n\n        if (parts[DatePart.Date] > DatePickerUtil.daysInMonth(parts[DatePart.Year], parts[DatePart.Month])) {\n            return null;\n        }\n\n        if (parts[DatePart.Hours] > 23 || parts[DatePart.Minutes] > 59 || parts[DatePart.Seconds] > 59) {\n            return null;\n        }\n\n        return new Date(\n            parts[DatePart.Year] || 2000,\n            parts[DatePart.Month] || 0,\n            parts[DatePart.Date] || 1,\n            parts[DatePart.Hours] || 0,\n            parts[DatePart.Minutes] || 0,\n            parts[DatePart.Seconds] || 0\n        );\n    }\n\n    /**\n     * Parse the mask into date/time and literal parts\n     */\n    public static parseDateTimeFormat(mask: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): DatePartInfo[] {\n        const format = mask || DatePickerUtil.getDefaultInputFormat(locale);\n        const dateTimeParts: DatePartInfo[] = [];\n        const formatArray = Array.from(format);\n        let currentPart: DatePartInfo = null;\n        let position = 0;\n\n        for (let i = 0; i < formatArray.length; i++, position++) {\n            const type = DatePickerUtil.determineDatePart(formatArray[i]);\n            if (currentPart) {\n                if (currentPart.type === type) {\n                    currentPart.format += formatArray[i];\n                    if (i < formatArray.length - 1) {\n                        continue;\n                    }\n                }\n\n                DatePickerUtil.ensureLeadingZero(currentPart);\n                currentPart.end = currentPart.start + currentPart.format.length;\n                position = currentPart.end;\n                dateTimeParts.push(currentPart);\n            }\n\n            currentPart = {\n                start: position,\n                end: position + formatArray[i].length,\n                type: type,\n                format: formatArray[i]\n            };\n        }\n\n        return dateTimeParts;\n    }\n\n    public static getDefaultInputFormat(locale: string): string {\n        if (!Intl || !Intl.DateTimeFormat || !Intl.DateTimeFormat.prototype.formatToParts) {\n            // TODO: fallback with Intl.format for IE?\n            return DatePickerUtil.SHORT_DATE_MASK;\n        }\n        const parts = DatePickerUtil.getDefaultLocaleMask(locale);\n        parts.forEach(p => {\n            if (p.type !== DatePart.Year && p.type !== DatePickerUtil.SEPARATOR) {\n                p.formatType = FormatDesc.TwoDigits;\n            }\n        });\n\n        return DatePickerUtil.getMask(parts);\n    }\n\n    public static formatDate(value: number | Date, format: string, locale: string, timezone?: string): string {\n        let formattedDate: string;\n        try {\n            formattedDate = formatDate(value, format, locale, timezone);\n        } catch {\n            this.logMissingLocaleSettings(locale);\n            const formatter = new Intl.DateTimeFormat(locale);\n            formattedDate = formatter.format(value);\n        }\n\n        return formattedDate;\n    }\n\n    public static getLocaleDateFormat(locale: string, displayFormat?: string): string {\n        const formatKeys = Object.keys(FormatWidth) as (keyof FormatWidth)[];\n        const targetKey = formatKeys.find(k => k.toLowerCase() === displayFormat?.toLowerCase().replace('date', ''));\n        if (!targetKey) {\n            // if displayFormat is not shortDate, longDate, etc.\n            // or if it is not set by the user\n            return displayFormat;\n        }\n        let format: string;\n        try {\n            format = getLocaleDateFormat(locale, FormatWidth[targetKey]);\n        } catch {\n            this.logMissingLocaleSettings(locale);\n            format = DatePickerUtil.getDefaultInputFormat(locale);\n        }\n\n        return format;\n    }\n\n    public static isDateOrTimeChar(char: string): boolean {\n        return DATE_CHARS.indexOf(char) !== -1 || TIME_CHARS.indexOf(char) !== -1;\n    }\n\n    public static spinDate(delta: number, newDate: Date, isSpinLoop: boolean): void {\n        const maxDate = DatePickerUtil.daysInMonth(newDate.getFullYear(), newDate.getMonth());\n        let date = newDate.getDate() + delta;\n        if (date > maxDate) {\n            date = isSpinLoop ? date % maxDate : maxDate;\n        } else if (date < 1) {\n            date = isSpinLoop ? maxDate + (date % maxDate) : 1;\n        }\n\n        newDate.setDate(date);\n    }\n\n    public static spinMonth(delta: number, newDate: Date, isSpinLoop: boolean): void {\n        const maxDate = DatePickerUtil.daysInMonth(newDate.getFullYear(), newDate.getMonth() + delta);\n        if (newDate.getDate() > maxDate) {\n            newDate.setDate(maxDate);\n        }\n\n        const maxMonth = 11;\n        const minMonth = 0;\n        let month = newDate.getMonth() + delta;\n        if (month > maxMonth) {\n            month = isSpinLoop ? (month % maxMonth) - 1 : maxMonth;\n        } else if (month < minMonth) {\n            month = isSpinLoop ? maxMonth + (month % maxMonth) + 1 : minMonth;\n        }\n\n        newDate.setMonth(month);\n    }\n\n    public static spinYear(delta: number, newDate: Date): void {\n        const maxDate = DatePickerUtil.daysInMonth(newDate.getFullYear() + delta, newDate.getMonth());\n        if (newDate.getDate() > maxDate) {\n            // clip to max to avoid leap year change shifting the entire value\n            newDate.setDate(maxDate);\n        }\n        newDate.setFullYear(newDate.getFullYear() + delta);\n    }\n\n    public static spinHours(delta: number, newDate: Date, isSpinLoop: boolean): void {\n        const maxHour = 23;\n        const minHour = 0;\n        let hours = newDate.getHours() + delta;\n        if (hours > maxHour) {\n            hours = isSpinLoop ? hours % maxHour - 1 : maxHour;\n        } else if (hours < minHour) {\n            hours = isSpinLoop ? maxHour + (hours % maxHour) + 1 : minHour;\n        }\n\n        newDate.setHours(hours);\n    }\n\n    public static spinMinutes(delta: number, newDate: Date, isSpinLoop: boolean): void {\n        const maxMinutes = 59;\n        const minMinutes = 0;\n        let minutes = newDate.getMinutes() + delta;\n        if (minutes > maxMinutes) {\n            minutes = isSpinLoop ? minutes % maxMinutes - 1 : maxMinutes;\n        } else if (minutes < minMinutes) {\n            minutes = isSpinLoop ? maxMinutes + (minutes % maxMinutes) + 1 : minMinutes;\n        }\n\n        newDate.setMinutes(minutes);\n    }\n\n    public static spinSeconds(delta: number, newDate: Date, isSpinLoop: boolean): void {\n        const maxSeconds = 59;\n        const minSeconds = 0;\n        let seconds = newDate.getSeconds() + delta;\n        if (seconds > maxSeconds) {\n            seconds = isSpinLoop ? seconds % maxSeconds - 1 : maxSeconds;\n        } else if (seconds < minSeconds) {\n            seconds = isSpinLoop ? maxSeconds + (seconds % maxSeconds) + 1 : minSeconds;\n        }\n\n        newDate.setSeconds(seconds);\n    }\n\n    public static spinAmPm(newDate: Date, currentDate: Date, amPmFromMask: string): Date {\n        switch (amPmFromMask) {\n            case 'AM':\n                newDate = new Date(newDate.setHours(newDate.getHours() + 12));\n                break;\n            case 'PM':\n                newDate = new Date(newDate.setHours(newDate.getHours() - 12));\n                break;\n        }\n        if (newDate.getDate() !== currentDate.getDate()) {\n            return currentDate;\n        }\n\n        return newDate;\n    }\n\n    /**\n     * Determines whether the provided value is greater than the provided max value.\n     * @param includeTime set to false if you want to exclude time portion of the two dates\n     * @param includeDate set to false if you want to exclude the date portion of the two dates\n     * @returns true if provided value is greater than provided maxValue\n     */\n    public static greaterThanMaxValue(value: Date, maxValue: Date, includeTime = true, includeDate = true): boolean {\n        // TODO: check if provided dates are valid dates and not Invalid Date\n        // if maxValue is Invalid Date and value is valid date this will return:\n        // - false if includeDate is true\n        // - true if includeDate is false\n        if (includeTime && includeDate) {\n            return value.getTime() > maxValue.getTime();\n        }\n\n        const _value = new Date(value.getTime());\n        const _maxValue = new Date(maxValue.getTime());\n        if (!includeTime) {\n            _value.setHours(0, 0, 0, 0);\n            _maxValue.setHours(0, 0, 0, 0);\n        }\n        if (!includeDate) {\n            _value.setFullYear(0, 0, 0);\n            _maxValue.setFullYear(0, 0, 0);\n        }\n\n        return _value.getTime() > _maxValue.getTime();\n    }\n\n    /**\n     * Determines whether the provided value is less than the provided min value.\n     * @param includeTime set to false if you want to exclude time portion of the two dates\n     * @param includeDate set to false if you want to exclude the date portion of the two dates\n     * @returns true if provided value is less than provided minValue\n     */\n    public static lessThanMinValue(value: Date, minValue: Date, includeTime = true, includeDate = true): boolean {\n        // TODO: check if provided dates are valid dates and not Invalid Date\n        // if value is Invalid Date and minValue is valid date this will return:\n        // - false if includeDate is true\n        // - true if includeDate is false\n        if (includeTime && includeDate) {\n            return value.getTime() < minValue.getTime();\n        }\n\n        const _value = new Date(value.getTime());\n        const _minValue = new Date(minValue.getTime());\n        if (!includeTime) {\n            _value.setHours(0, 0, 0, 0);\n            _minValue.setHours(0, 0, 0, 0);\n        }\n        if (!includeDate) {\n            _value.setFullYear(0, 0, 0);\n            _minValue.setFullYear(0, 0, 0);\n        }\n\n        return _value.getTime() < _minValue.getTime();\n    }\n\n    private static logMissingLocaleSettings(locale: string): void {\n        console.warn(`Missing locale data for the locale ${locale}. Please refer to https://angular.io/guide/i18n#i18n-pipes`);\n        console.warn('Using default browser locale settings.');\n    }\n\n    private static ensureLeadingZero(part: DatePartInfo) {\n        switch (part.type) {\n            case DatePart.Date:\n            case DatePart.Month:\n            case DatePart.Hours:\n            case DatePart.Minutes:\n            case DatePart.Seconds:\n                if (part.format.length === 1) {\n                    part.format = part.format.repeat(2);\n                }\n                break;\n        }\n    }\n\n    private static getCleanVal(inputData: string, datePart: DatePartInfo, promptChar?: string): string {\n        return DatePickerUtil.trimEmptyPlaceholders(inputData.substring(datePart.start, datePart.end), promptChar);\n    }\n\n    private static determineDatePart(char: string): DatePart {\n        switch (char) {\n            case 'd':\n            case 'D':\n                return DatePart.Date;\n            case 'M':\n                return DatePart.Month;\n            case 'y':\n            case 'Y':\n                return DatePart.Year;\n            case 'h':\n            case 'H':\n                return DatePart.Hours;\n            case 'm':\n                return DatePart.Minutes;\n            case 's':\n            case 'S':\n                return DatePart.Seconds;\n            case 't':\n            case 'T':\n                return DatePart.AmPm;\n            default:\n                return DatePart.Literal;\n        }\n    }\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimEmptyPlaceholders(value: string, promptChar?: string): string {\n        const result = value.replace(new RegExp(promptChar || '_', 'g'), '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    public static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month + 1, 0).getDate();\n    }\n\n    /**\n     * Parse provided input to Date.\n     * @param value input to parse\n     * @returns Date if parse succeed or null\n     */\n    public static parseDate(value: any): Date | null {\n        if (typeof value === 'number') {\n            return new Date(value);\n        }\n\n        // if value is Invalid Date we should return null\n        if (this.isDate(value)) {\n            return this.isValidDate(value) ? value : null;\n        }\n\n        return value ? new Date(Date.parse(value)) : null;\n    }\n\n    /**\n     * Returns whether provided input is date\n     * @param value input to check\n     * @returns true if provided input is date\n     */\n    public static isDate(value: any): boolean {\n        return Object.prototype.toString.call(value) === '[object Date]';\n    }\n\n    /**\n     * Returns whether the input is valid date\n     * @param value input to check\n     * @returns true if provided input is a valid date\n     */\n    public static isValidDate(value: any): boolean {\n        if (this.isDate(value)) {\n            return !isNaN(value.getTime());\n        }\n\n        return false;\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.year;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimEmptyPlaceholders(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n","import {\n  Directive, Input, ElementRef,\n  Renderer2, NgModule, Output, EventEmitter, Inject, LOCALE_ID, OnChanges, SimpleChanges, DoCheck\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  Validator, AbstractControl, ValidationErrors, NG_VALIDATORS, NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxMaskDirective } from '../mask/mask.directive';\nimport { MaskParsingService } from '../mask/mask-parsing.service';\nimport { KEYS } from '../../core/utils';\nimport {\n  DatePickerUtil\n} from '../../date-picker/date-picker.utils';\nimport { IgxDateTimeEditorEventArgs, DatePartInfo, DatePart } from './date-time-editor.common';\n\n/**\n * Date Time Editor provides a functionality to input, edit and format date and time.\n *\n * @igxModule IgxDateTimeEditorModule\n *\n * @igxParent IgxInputGroup\n *\n * @igxTheme igx-input-theme\n *\n * @igxKeywords date, time, editor\n *\n * @igxGroup Scheduling\n *\n * @remarks\n *\n * The Ignite UI Date Time Editor Directive makes it easy for developers to manipulate date/time user input.\n * It requires input in a specified or default input format which is visible in the input element as a placeholder.\n * It allows the input of only date (ex: 'dd/MM/yyyy'), only time (ex:'HH:mm tt') or both at once, if needed.\n * Supports display format that may differ from the input format.\n * Provides methods to increment and decrement any specific/targeted `DatePart`.\n *\n * @example\n * ```html\n * <igx-input-group>\n *   <input type=\"text\" igxInput [igxDateTimeEditor]=\"'dd/MM/yyyy'\" [displayFormat]=\"'shortDate'\" [(ngModel)]=\"date\"/>\n * </igx-input-group>\n * ```\n */\n@Directive({\n  selector: '[igxDateTimeEditor]',\n  exportAs: 'igxDateTimeEditor',\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateTimeEditorDirective, multi: true },\n    { provide: NG_VALIDATORS, useExisting: IgxDateTimeEditorDirective, multi: true }\n  ]\n})\nexport class IgxDateTimeEditorDirective extends IgxMaskDirective implements OnChanges, DoCheck, Validator, ControlValueAccessor {\n  /**\n   * Locale settings used for value formatting.\n   *\n   * @remarks\n   * Uses Angular's `LOCALE_ID` by default. Affects both input mask and display format if those are not set.\n   * If a `locale` is set, it must be registered via `registerLocaleData`.\n   * Please refer to https://angular.io/guide/i18n#i18n-pipes.\n   * If it is not registered, `Intl` will be used for formatting.\n   *\n   * @example\n   * ```html\n   * <input igxDateTimeEditor [locale]=\"'en'\">\n   * ```\n   */\n  @Input()\n  public locale: string;\n\n  /**\n   * Minimum value required for the editor to remain valid.\n   *\n   * @remarks\n   * If a `string` value is passed, it must be in the defined input format.\n   *\n   * @example\n   * ```html\n   * <input igxDateTimeEditor [minValue]=\"minDate\">\n   * ```\n   */\n  public get minValue(): string | Date {\n    return this._minValue;\n  }\n\n  @Input()\n  public set minValue(value: string | Date) {\n    this._minValue = value;\n    this.onValidatorChange();\n  }\n\n  /**\n   * Maximum value required for the editor to remain valid.\n   *\n   * @remarks\n   * If a `string` value is passed in, it must be in the defined input format.\n   *\n   * @example\n   * ```html\n   * <input igxDateTimeEditor [maxValue]=\"maxDate\">\n   * ```\n   */\n  public get maxValue(): string | Date {\n    return this._maxValue;\n  }\n\n  @Input()\n  public set maxValue(value: string | Date) {\n    this._maxValue = value;\n    this.onValidatorChange();\n  }\n\n  /**\n   * Specify if the currently spun date segment should loop over.\n   * @example\n   * ```html\n   * <input igxDateTimeEditor [isSpinLoop]=\"false\">\n   * ```\n   */\n  @Input()\n  public isSpinLoop = true;\n\n  /**\n   * Set both pre-defined format options such as `shortDate` and `longDate`,\n   * as well as constructed format string using characters supported by `DatePipe`, e.g. `EE/MM/yyyy`.\n   * @example\n   * ```html\n   * <input igxDateTimeEditor [displayFormat]=\"'shortDate'\">\n   * ```\n   */\n  @Input()\n  public displayFormat: string;\n\n  /**\n   * Expected user input format (and placeholder).\n   * @example\n   * ```html\n   * <input [igxDateTimeEditor]=\"'dd/MM/yyyy'\">\n   * ```\n   */\n  @Input(`igxDateTimeEditor`)\n  public set inputFormat(value: string) {\n    if (value) {\n      this._format = value;\n    }\n    const mask = (this.inputFormat || DatePickerUtil.DEFAULT_INPUT_FORMAT)\n      .replace(new RegExp(/(?=[^t])[\\w]/, 'g'), '0');\n    this.mask = mask.indexOf('tt') !== -1 ? mask.replace(new RegExp('tt', 'g'), 'LL') : mask;\n  }\n\n  public get inputFormat(): string {\n    return this._format;\n  }\n\n  /**\n   * Editor value.\n   * @example\n   * ```html\n   * <input igxDateTimeEditor [value]=\"date\">\n   * ```\n   */\n  @Input()\n  public set value(value: Date) {\n    this._value = value;\n    this.onChangeCallback(value);\n    this.updateMask();\n  }\n\n  public get value(): Date {\n    return this._value;\n  }\n\n  /**\n   * Emitted when the editor's value has changed.\n   * @example\n   * ```html\n   * <input igxDateTimeEditor (valueChange)=\"onValueChanged($event)\"/>\n   * ```\n   */\n  @Output()\n  public valueChange = new EventEmitter<Date>();\n\n  /**\n   * Emitted when the editor is not within a specified range or when the editor's value is in an invalid state.\n   * @example\n   * ```html\n   * <input igxDateTimeEditor [minValue]=\"minDate\" [maxValue]=\"maxDate\" (validationFailed)=\"onValidationFailed($event)\"/>\n   * ```\n   */\n  @Output()\n  public validationFailed = new EventEmitter<IgxDateTimeEditorEventArgs>();\n\n  private _value: Date;\n  private _format: string;\n  private document: Document;\n  private _isFocused: boolean;\n  private _inputFormat: string;\n  private _minValue: string | Date;\n  private _maxValue: string | Date;\n  private _oldValue: Date | string;\n  private _inputDateParts: DatePartInfo[];\n  private onTouchCallback = (...args: any[]) => { };\n  private onChangeCallback = (...args: any[]) => { };\n  private onValidatorChange = (...args: any[]) => { };\n\n  private get emptyMask(): string {\n    return this.maskParser.applyMask(null, this.maskOptions);\n  }\n\n  private get targetDatePart(): DatePart {\n    if (this.document.activeElement === this.nativeElement) {\n      return this._inputDateParts\n        .find(p => p.start <= this.selectionStart && this.selectionStart <= p.end && p.type !== DatePart.Literal)?.type;\n    } else {\n      if (this._inputDateParts.some(p => p.type === DatePart.Date)) {\n        return DatePart.Date;\n      } else if (this._inputDateParts.some(p => p.type === DatePart.Hours)) {\n        return DatePart.Hours;\n      }\n    }\n  }\n\n  private get hasDateParts() {\n    return this._inputDateParts.some(\n      p => p.type === DatePart.Date\n        || p.type === DatePart.Month\n        || p.type === DatePart.Year);\n  }\n\n  private get hasTimeParts() {\n    return this._inputDateParts.some(\n      p => p.type === DatePart.Hours\n        || p.type === DatePart.Minutes\n        || p.type === DatePart.Seconds);\n  }\n\n  constructor(\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected maskParser: MaskParsingService,\n    @Inject(DOCUMENT) private _document: any,\n    @Inject(LOCALE_ID) private _locale: any) {\n    super(elementRef, maskParser, renderer);\n    this.document = this._document as Document;\n    this.locale = this.locale || this._locale;\n  }\n\n  /** @hidden @internal */\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes['inputFormat'] || changes['locale']) {\n      this.updateInputFormat();\n    }\n  }\n\n  /** @hidden @internal */\n  public ngDoCheck(): void {\n    if (this._inputFormat !== this.inputFormat) {\n      this.updateInputFormat();\n    }\n  }\n\n  /** Clear the input element value. */\n  public clear(): void {\n    this.updateValue(null);\n  }\n\n  /**\n   * Increment specified DatePart.\n   * @param datePart The optional DatePart to increment. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').\n   */\n  public increment(datePart?: DatePart): void {\n    const targetDatePart = this.targetDatePart;\n    if (!targetDatePart) { return; }\n    const newValue = datePart\n      ? this.spinValue(datePart, 1)\n      : this.spinValue(targetDatePart, 1);\n    this.updateValue(newValue ? newValue : new Date());\n  }\n\n  /**\n   * Decrement specified DatePart.\n   *\n   * @param datePart The optional DatePart to decrement. Defaults to Date or Hours(when Date is absent from the inputFormat - ex:'HH:mm').\n   */\n  public decrement(datePart?: DatePart): void {\n    const targetDatePart = this.targetDatePart;\n    if (!targetDatePart) { return; }\n    const newValue = datePart\n      ? this.spinValue(datePart, -1)\n      : this.spinValue(targetDatePart, -1);\n    this.updateValue(newValue ? newValue : new Date());\n  }\n\n  /** @hidden @internal */\n  public writeValue(value: any): void {\n    this._value = value;\n    this.updateMask();\n  }\n\n  /** @hidden @internal */\n  public validate(control: AbstractControl): ValidationErrors | null {\n    if (!this.inputIsComplete() || !control.value) {\n      return { 'value': true };\n    }\n\n    const maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);\n    const minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);\n    if (minValueAsDate\n      && DatePickerUtil.lessThanMinValue(\n        control.value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {\n      return { 'minValue': true };\n    }\n    if (maxValueAsDate\n      && DatePickerUtil.greaterThanMaxValue(\n        control.value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {\n      return { 'maxValue': true };\n    }\n\n    return null;\n  }\n\n  /** @hidden @internal */\n  public registerOnValidatorChange?(fn: () => void): void { this.onValidatorChange = fn; }\n\n  /** @hidden @internal */\n  public registerOnChange(fn: any): void { this.onChangeCallback = fn; }\n\n  /** @hidden @internal */\n  public registerOnTouched(fn: any): void { this.onTouchCallback = fn; }\n\n  /** @hidden @internal */\n  public setDisabledState?(isDisabled: boolean): void { }\n\n  /** @hidden @internal */\n  public onInputChanged() {\n    super.onInputChanged();\n    if (this.inputIsComplete()) {\n      const parsedDate = this.parseDate(this.inputValue);\n      if (this.isValidDate(parsedDate)) {\n        this.updateValue(parsedDate);\n      } else {\n        const oldValue = this.value && new Date(this.value.getTime());\n        const args = { oldValue: oldValue, newValue: parsedDate, userInput: this.inputValue };\n        this.validationFailed.emit(args);\n        if (args.newValue?.getTime && args.newValue.getTime() !== oldValue.getTime()) {\n          this.updateValue(args.newValue);\n        } else {\n          this.updateValue(null);\n        }\n      }\n    } else {\n      this.updateValue(null);\n    }\n  }\n\n  /** @hidden @internal */\n  public onKeyDown(event: KeyboardEvent): void {\n    super.onKeyDown(event);\n    if (event.altKey) { return; }\n    if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n      event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n      this.spin(event);\n      return;\n    }\n\n    if (event.ctrlKey && event.key === KEYS.SEMICOLON) {\n      this.updateValue(new Date());\n    }\n\n    this.moveCursor(event);\n  }\n\n  /** @hidden @internal */\n  public onFocus(): void {\n    this._isFocused = true;\n    this.onTouchCallback();\n    this.updateMask();\n    super.onFocus();\n  }\n\n  /** @hidden @internal */\n  public onBlur(value: string): void {\n    this._isFocused = false;\n    if (!this.inputIsComplete() && this.inputValue !== this.emptyMask) {\n      this.updateValue(this.parseDate(this.inputValue));\n    } else {\n      this.updateMask();\n    }\n\n    super.onBlur(value);\n  }\n\n  /** @hidden @internal */\n  public updateMask(): void {\n    if (this._isFocused) {\n      if (!this.value) { return; }\n      // store the cursor position as it will be moved during masking\n      const cursor = this.selectionEnd;\n      this.inputValue = this.getMaskedValue();\n      this.setSelectionRange(cursor);\n    } else {\n      if (!this.value || !this.isValidDate(this.value)) {\n        this.inputValue = '';\n        return;\n      }\n      const format = this.displayFormat || this.inputFormat;\n      if (format) {\n        this.inputValue = DatePickerUtil.formatDate(this.value, format.replace('tt', 'aa'), this.locale);\n      } else {\n        // TODO: formatter function?\n        this.inputValue = this.value.toLocaleString();\n      }\n    }\n  }\n\n  private getMaskedValue(): string {\n    let mask = this.emptyMask;\n    for (const part of this._inputDateParts) {\n      if (part.type === DatePart.Literal) { continue; }\n      const targetValue = this.getPartValue(part, part.format.length);\n      mask = this.maskParser.replaceInMask(mask, targetValue, this.maskOptions, part.start, part.end).value;\n    }\n\n    return mask;\n  }\n\n  private updateInputFormat(): void {\n    const defPlaceholder = this.inputFormat || DatePickerUtil.getDefaultInputFormat(this.locale);\n    this._inputDateParts = DatePickerUtil.parseDateTimeFormat(this.inputFormat);\n    this.inputFormat = this._inputDateParts.map(p => p.format).join('');\n    if (!this.nativeElement.placeholder || this._inputFormat !== this.inputFormat) {\n      this.renderer.setAttribute(this.nativeElement, 'placeholder', defPlaceholder);\n    }\n    // TODO: fill in partial dates?\n    this.updateMask();\n    this._inputFormat = this.inputFormat;\n  }\n\n  // TODO: move isDate to utils\n  private isDate(value: any): value is Date {\n    return value instanceof Date && typeof value === 'object';\n  }\n\n  private valueInRange(value: Date): boolean {\n    if (!value) { return false; }\n    const maxValueAsDate = this.isDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);\n    const minValueAsDate = this.isDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);\n    if (minValueAsDate\n      && DatePickerUtil.lessThanMinValue(\n        value, minValueAsDate, this.hasTimeParts, this.hasDateParts)) {\n      return false;\n    }\n    if (maxValueAsDate\n      && DatePickerUtil.greaterThanMaxValue(\n        value, maxValueAsDate, this.hasTimeParts, this.hasDateParts)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private spinValue(datePart: DatePart, delta: number): Date {\n    if (!this.value || !this.isValidDate(this.value)) { return null; }\n    const newDate = new Date(this.value.getTime());\n    switch (datePart) {\n      case DatePart.Date:\n        DatePickerUtil.spinDate(delta, newDate, this.isSpinLoop);\n        break;\n      case DatePart.Month:\n        DatePickerUtil.spinMonth(delta, newDate, this.isSpinLoop);\n        break;\n      case DatePart.Year:\n        DatePickerUtil.spinYear(delta, newDate);\n        break;\n      case DatePart.Hours:\n        DatePickerUtil.spinHours(delta, newDate, this.isSpinLoop);\n        break;\n      case DatePart.Minutes:\n        DatePickerUtil.spinMinutes(delta, newDate, this.isSpinLoop);\n        break;\n      case DatePart.Seconds:\n        DatePickerUtil.spinSeconds(delta, newDate, this.isSpinLoop);\n        break;\n      case DatePart.AmPm:\n        const formatPart = this._inputDateParts.find(dp => dp.type === DatePart.AmPm);\n        const amPmFromMask = this.inputValue.substring(formatPart.start, formatPart.end);\n        return DatePickerUtil.spinAmPm(newDate, this.value, amPmFromMask);\n    }\n\n    return newDate;\n  }\n\n  private updateValue(newDate: Date): void {\n    this._oldValue = this.value;\n    this.value = newDate;\n\n    if (this.value && !this.valueInRange(this.value)) {\n      this.validationFailed.emit({ oldValue: this._oldValue, newValue: this.value, userInput: this.inputValue });\n    }\n    if (this.inputIsComplete() || this.inputValue === this.emptyMask) {\n      this.valueChange.emit(this.value);\n    }\n  }\n\n  private toTwelveHourFormat(value: string): number {\n    let hour = parseInt(value.replace(new RegExp(this.promptChar, 'g'), '0'), 10);\n    if (hour > 12) {\n      hour -= 12;\n    } else if (hour === 0) {\n      hour = 12;\n    }\n\n    return hour;\n  }\n\n  private getPartValue(datePartInfo: DatePartInfo, partLength: number): string {\n    let maskedValue;\n    const datePart = datePartInfo.type;\n    switch (datePart) {\n      case DatePart.Date:\n        maskedValue = this.value.getDate();\n        break;\n      case DatePart.Month:\n        // months are zero based\n        maskedValue = this.value.getMonth() + 1;\n        break;\n      case DatePart.Year:\n        if (partLength === 2) {\n          maskedValue = this.prependValue(\n            parseInt(this.value.getFullYear().toString().slice(-2), 10), partLength, '0');\n        } else {\n          maskedValue = this.value.getFullYear();\n        }\n        break;\n      case DatePart.Hours:\n        if (datePartInfo.format.indexOf('h') !== -1) {\n          maskedValue = this.prependValue(\n            this.toTwelveHourFormat(this.value.getHours().toString()), partLength, '0');\n        } else {\n          maskedValue = this.value.getHours();\n        }\n        break;\n      case DatePart.Minutes:\n        maskedValue = this.value.getMinutes();\n        break;\n      case DatePart.Seconds:\n        maskedValue = this.value.getSeconds();\n        break;\n      case DatePart.AmPm:\n        maskedValue = this.value.getHours() >= 12 ? 'PM' : 'AM';\n        break;\n    }\n\n    if (datePartInfo.type !== DatePart.AmPm) {\n      return this.prependValue(maskedValue, partLength, '0');\n    }\n\n    return maskedValue;\n  }\n\n  private prependValue(value: number, partLength: number, prependChar: string): string {\n    return (prependChar + value.toString()).slice(-partLength);\n  }\n\n  private spin(event: KeyboardEvent): void {\n    event.preventDefault();\n    switch (event.key) {\n      case KEYS.UP_ARROW:\n      case KEYS.UP_ARROW_IE:\n        this.increment();\n        break;\n      case KEYS.DOWN_ARROW:\n      case KEYS.DOWN_ARROW_IE:\n        this.decrement();\n        break;\n    }\n  }\n\n  private inputIsComplete(): boolean {\n    return this.inputValue.indexOf(this.promptChar) === -1;\n  }\n\n  private isValidDate(date: Date): boolean {\n    return date && date.getTime && !isNaN(date.getTime());\n  }\n\n  // TODO: move parseDate to utils\n  public parseDate(val: string): Date | null {\n    if (!val) { return null; }\n    return DatePickerUtil.parseValueFromMask(val, this._inputDateParts, this.promptChar);\n  }\n\n  private moveCursor(event: KeyboardEvent): void {\n    const value = (event.target as HTMLInputElement).value;\n    switch (event.key) {\n      case KEYS.LEFT_ARROW:\n      case KEYS.LEFT_ARROW_IE:\n        if (event.ctrlKey) {\n          event.preventDefault();\n          this.setSelectionRange(this.getNewPosition(value));\n        }\n        break;\n      case KEYS.RIGHT_ARROW:\n      case KEYS.RIGHT_ARROW_IE:\n        if (event.ctrlKey) {\n          event.preventDefault();\n          this.setSelectionRange(this.getNewPosition(value, 1));\n        }\n        break;\n    }\n  }\n\n  /**\n   * Move the cursor in a specific direction until it reaches a date/time separator.\n   * Then return its index.\n   *\n   * @param value The string it operates on.\n   * @param direction 0 is left, 1 is right. Default is 0.\n   */\n  private getNewPosition(value: string, direction = 0): number {\n    const literals = this._inputDateParts.filter(p => p.type === DatePart.Literal);\n    let cursorPos = this.selectionStart;\n    if (!direction) {\n      do {\n        cursorPos = cursorPos > 0 ? --cursorPos : cursorPos;\n      } while (!literals.some(l => l.end === cursorPos) && cursorPos > 0);\n      return cursorPos;\n    } else {\n      do {\n        cursorPos++;\n      } while (!literals.some(l => l.start === cursorPos) && cursorPos < value.length);\n      return cursorPos;\n    }\n  }\n}\n\n@NgModule({\n  declarations: [IgxDateTimeEditorDirective],\n  exports: [IgxDateTimeEditorDirective]\n})\nexport class IgxDateTimeEditorModule { }\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    protected static _instance: IgxFilteringOperand = null;\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is-null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is-not-null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is-in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    public static instance(): IgxFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'select-all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is-true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is-false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'is-empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not-empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not-equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is-before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is-after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this-month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last-month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next-month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this-year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last-year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next-year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'is-empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not-empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        if (!target) { return false; }\n        return searchVal.has(target.toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not-equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater-than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less-than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater-than-or-equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less-than-or-equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'is-empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not-empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does-not-contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts-with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends-with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not-equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'is-empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not-empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    advancedExpressionsTree?: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\nimport { IgxColumnComponent } from '../grids/columns/column.component';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n    column?: IgxColumnComponent;\n }\n","import { Component, Input, TemplateRef, ViewChild, Output, EventEmitter, ElementRef } from '@angular/core';\n@Component({\n    selector: 'igx-grid-action-button',\n    templateUrl: 'grid-action-button.component.html'\n})\n\nexport class IgxGridActionButtonComponent {\n\n    @ViewChild('container')\n    public container: ElementRef;\n\n    /**\n     * Event emitted when action button is clicked.\n     * @example\n     * ```html\n     *  <igx-grid-action-button (onActionClick)=\"startEdit($event)\"></igx-grid-action-button>\n     * ```\n     */\n    @Output()\n    onActionClick = new EventEmitter<Event>();\n\n    /**\n     * Reference to the current template.\n     * @hidden\n     * @internal\n     */\n    @ViewChild(TemplateRef)\n    public templateRef: TemplateRef<any>;\n\n    /**\n     * Whether button action is rendered in menu and should container text label.\n     */\n    @Input()\n    public asMenuItem = false;\n\n    /**\n     * Name of the icon to display in the button.\n     */\n    @Input()\n    public iconName: string;\n\n    /**\n     * Additional Menu item container element classes.\n     */\n    @Input()\n    public classNames: string;\n\n    /** @hidden @internal */\n    get containerClass(): string {\n        return 'igx-action-strip__menu-button ' + (this.classNames || '');\n    }\n\n    /**\n     * The name of the icon set. Used in case the icon is from a different icon set.\n     */\n    @Input()\n    public iconSet: string;\n\n    /**\n     * The text of the label.\n     */\n    @Input()\n    public labelText: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public handleClick(event) {\n       this.onActionClick.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public preventEvent(event) {\n        if (event) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs, mkenum } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport const LabelPosition = mkenum({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nexport type LabelPosition = (typeof LabelPosition)[keyof typeof LabelPosition];\n\nexport interface IChangeCheckboxEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * Allows users to make a binary choice for a certain condition.\n *\n * @igxModule IgxCheckboxModule\n *\n * @igxTheme igx-checkbox-theme\n *\n * @igxKeywords checkbox, label\n *\n * @igxGroup Data entry and display\n *\n * @remarks\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice for a certain condition.It behaves similarly\n * to the native browser checkbox.\n *\n * @example\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * @hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     *\n     * @example\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     *\n     * @example\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     *\n     * @example\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.ariaLabel;\n     * ```\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     *\n     * @example\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDisabled = this.checkbox.disabled;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox is readonly.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [readonly]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let readonly = this.checkbox.readonly;\n     * ```\n     */\n    @Input() public readonly = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /** @hidden @internal */\n    public inputId = `${this.id}-input`;\n    /**\n     * @hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     *\n     * @example\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /** @hidden @internal */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /** @hidden @internal */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (this.readonly) {\n            // readonly prevents the component from changing state (see toggle() method).\n            // However, the native checkbox can still be activated through user interaction (focus + space, label click)\n            // Prevent the native change so the input remains in sync\n            event.preventDefault();\n        }\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /** @hidden @internal */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /** @hidden @internal */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /** @hidden @internal */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /** @hidden @internal */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden @internal */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import { EventEmitter, Injectable, NgZone } from '@angular/core';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IGridEditEventArgs, IGridEditDoneEventArgs } from '../common/events';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridBaseDirective } from '../grid/public_api';\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ninterface IColumnSelectionState {\n    field: null | string;\n    range: string[];\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n    isAddRow: boolean;\n\n    constructor(public id: any, public index: number, public data: any, public grid: IgxGridBaseDirective & GridType) { }\n\n    createEditEventArgs(includeNewValue = true): IGridEditEventArgs {\n        const args: IGridEditEventArgs = {\n            rowID: this.id,\n            rowData:  this.data,\n            oldValue: this.data,\n            cancel: false,\n            owner: this.grid,\n            isAddRow: this.isAddRow || false\n        };\n        if (includeNewValue) {\n            args.newValue = this.newData;\n        }\n        return args;\n    }\n\n    createDoneEditEventArgs(cachedRowData: any): IGridEditDoneEventArgs {\n        const updatedData = this.grid.transactions.enabled ?\n        this.grid.transactions.getAggregatedValue(this.id, true) : this.grid.gridAPI.getRowData(this.id);\n        const rowData = updatedData === null ? this.grid.gridAPI.getRowData(this.id) : updatedData;\n        const args: IGridEditDoneEventArgs = {\n            rowID: this.id,\n            rowData: rowData,\n            oldValue: cachedRowData,\n            newValue: updatedData,\n            owner: this.grid,\n            isAddRow: this.isAddRow || false\n        };\n\n        return args;\n    }\n}\n\nexport class IgxCell {\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any,\n        public grid: IgxGridBaseDirective & GridType) { }\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(includeNewValue = true): IGridEditEventArgs {\n        const args: IGridEditEventArgs = {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            rowData:  this.rowData,\n            oldValue: this.value,\n            cancel: false,\n            column: this.column,\n            owner: this.grid\n        };\n        if (includeNewValue) {\n            args.newValue = this.castToNumber(this.editValue);\n        }\n        return args;\n    }\n\n    createDoneEditEventArgs(value: any): IGridEditDoneEventArgs {\n        const updatedData = this.grid.transactions.enabled ?\n        this.grid.transactions.getAggregatedValue(this.id.rowID, true) : this.rowData;\n        const rowData = updatedData === null ? this.grid.gridAPI.getRowData(this.id.rowID) : updatedData;\n        const args: IGridEditDoneEventArgs = {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            // rowData - should be the updated/committed rowData - this effectively should be the newValue\n            // the only case we use this.rowData directly, is when there is no rowEditing or transactions enabled\n            rowData: rowData,\n            oldValue: this.value,\n            newValue: value,\n            column: this.column,\n            owner: this.grid,\n        };\n        return args;\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    public grid: IgxGridBaseDirective & GridType;\n    public cell: IgxCell | null = null;\n    public row: IgxRow | null = null;\n    public isInCompositionMode = false;\n\n    private _cellEditingBlocked = false;\n    private _rowEditingBlocked = false;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData, cell.grid);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData, cell.grid);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get cellInEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowInEditMode(): boolean {\n        return !!this.row;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    get cellEditingBlocked() {\n        return this._cellEditingBlocked;\n    }\n\n    set cellEditingBlocked(val: boolean) {\n        this._cellEditingBlocked = val;\n    }\n\n    get rowEditingBlocked() {\n        return this._rowEditingBlocked;\n    }\n\n    set rowEditingBlocked(val: boolean) {\n        this._rowEditingBlocked = val;\n    }\n\n    public enterEditMode(cell) {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.cellInEditMode) {\n            // TODO: case solely for f2/enter nav that uses enterEditMode as toggle. Refactor.\n            const canceled = this.grid.endEdit(true);\n\n            if (!canceled || !this.cell) {\n                this.grid.tbody.nativeElement.focus();\n            }\n        } else {\n\n            if (cell?.row.addRow) {\n                this.beginAddRow(cell);\n                return;\n            }\n            /** Changing the reference with the new editable cell */\n            const newCell = this.createCell(cell);\n            if (this.rowEditing)  {\n                const canceled = this.beginRowEdit(newCell);\n                if (!canceled) {\n                    this.beginCellEdit(newCell);\n                }\n\n            } else {\n                this.beginCellEdit(newCell);\n            }\n        }\n    }\n\n    /** Enters row edit mode */\n    public beginRowEdit(newCell) {\n        if (this.row && !this.sameRow(newCell.id.rowID)) {\n            this._rowEditingBlocked = this.grid.endEdit(true);\n            if (this.rowEditingBlocked) {\n                return true;\n            }\n\n            this.cell = newCell;\n            this._rowEditingBlocked = false;\n            this.endRowEdit();\n        }\n\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n\n        if (!this.row) {\n            this.cell = newCell;\n            this.row = this.createRow(this.cell);\n            const rowArgs = this.row.createEditEventArgs(false);\n\n            this.grid.rowEditEnter.emit(rowArgs);\n            if (rowArgs.cancel) {\n                this.endEditMode();\n                return true;\n            }\n\n            this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n            this.grid.transactions.startPending();\n            this.grid.openRowOverlay(this.row.id);\n        }\n    }\n\n    /** Exit row edit mode */\n    public exitRowEdit(commit: boolean) {\n        if (!this.grid.rowEditable ||\n            this.grid.rowEditingOverlay &&\n            this.grid.rowEditingOverlay.collapsed || !this.row) {\n            return false;\n        }\n\n        if (this.rowEditingBlocked && this.cellEditingBlocked) {\n            return true;\n        }\n\n        const canceled = this.grid.endRowTransaction(commit, this.row);\n        if (canceled) {\n            return true;\n        }\n    }\n\n    /** Enters cell edit mode */\n    beginAddRow(cell) {\n        const newCell = this.createCell(cell);\n        newCell.primaryKey = this.primaryKey;\n        cell.enterAddMode = true;\n        this.cell = newCell;\n        if (!this.sameRow(newCell.id.rowID)) {\n            this.row = this.createRow(this.cell);\n            this.row.isAddRow = true;\n            const rowArgs = this.row.createEditEventArgs(false);\n            this.grid.rowEditEnter.emit(rowArgs);\n            if (rowArgs.cancel) {\n                this.endEditMode();\n                this.grid.endAddRow();\n                return;\n            }\n            this.grid.openRowOverlay(this.row.id);\n        }\n        const args = newCell.createEditEventArgs(false);\n        this.grid.cellEditEnter.emit(args);\n        if (args.cancel) {\n            this.endCellEdit();\n            return;\n        }\n    }\n\n    public beginCellEdit(newCell) {\n        const args = newCell.createEditEventArgs(false);\n        this.grid.cellEditEnter.emit(args);\n\n        this._cellEditingBlocked = args.cancel;\n        if (args.cancel) {\n            this.endCellEdit();\n        } else {\n            this.cell = newCell;\n        }\n\n    }\n\n    /** Exit cell edit mode */\n    public exitCellEdit(): boolean {\n        if (!this.cell) {\n            return false;\n        }\n\n        const newValue = this.cell.castToNumber(this.cell.editValue);\n        const args = this.cell?.createDoneEditEventArgs(newValue);\n        this.cell.value = newValue;\n\n        this.grid.cellEditExit.emit(args);\n        this.endCellEdit();\n        return false;\n    }\n\n    /** Clears cell editing state */\n    public endCellEdit() {\n        this.cell = null;\n        this.cellEditingBlocked = false;\n    }\n\n    /** Clears row editing state */\n    public endRowEdit() {\n        this.row = null;\n        this.rowEditingBlocked = false;\n    }\n\n\n    /** Clears cell and row editing state and closes row editing template if it is open */\n    public endEditMode() {\n        this.endCellEdit();\n        if (this.grid.rowEditable) {\n            this.endRowEdit();\n            this.grid.closeRowEditingOverlay();\n        }\n    }\n\n    /** Returns whether the targeted cell is in edit mode */\n    public targetInEdit(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        const res = this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n        return res;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n    grid;\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n    columnsState = {} as IColumnSelectionState;\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n    rowSelection: Set<any> = new Set<any>();\n    columnSelection: Set<string> = new Set<string>();\n    private allRowsSelected: boolean;\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n        this.initColumnsState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Resets the columns state\n     */\n    initColumnsState(): void {\n        this.columnsState.field = null;\n        this.columnsState.range = [];\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode, addToRange = true): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        if (addToRange) { this._ranges.add(JSON.stringify(this.generateRange(node))); }\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (this.grid.hasColumnLayouts) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n        if (!this.grid.navigation.isDataRow(node.row)) { return; }\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = Object.assign({}, node);\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>, dom): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            if (isChromium()) {\n                this._moveSelectionChrome(dom);\n            }\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && (event.button === -1 || event.button === 0);\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n        this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(clearAcriveEl = false): void {\n        if (clearAcriveEl) { this.activeElement = null; }\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    /**\n     * (╯°□°）╯︵ ┻━┻\n     * Chrome and Chromium don't care about the active\n     * range after keyboard navigation, thus this.\n     */\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n\n    /** Returns array of the selected row id's. */\n    getSelectedRows(): Array<any> {\n        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];\n    }\n\n    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */\n    clearRowSelection(event?): void {\n        const removedRec = this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rID => this.isRowSelected(rID)) : this.getSelectedRows();\n        const newSelection = this.isFilteringApplied() ? this.getSelectedRows().filter(x => !removedRec.includes(x)) : [];\n\n        this.emitRowSelectionEvent(newSelection, [], removedRec, event);\n    }\n\n    /** Select all rows, if filtering is applied select only from filtered data. */\n    selectAllRows(event?) {\n        const allRowIDs = this.getRowIDs(this.allData);\n        const addedRows = allRowIDs.filter((rID) => !this.isRowSelected(rID));\n        const newSelection = this.rowSelection.size ? this.getSelectedRows().concat(addedRows) : addedRows;\n\n        this.emitRowSelectionEvent(newSelection, addedRows, [], event);\n    }\n\n    /** Select the specified row and emit event. */\n    selectRowById(rowID, clearPrevSelection?, event?): void {\n        if (!this.grid.isRowSelectable || this.isRowDeleted(rowID)) { return; }\n        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;\n\n        const newSelection = clearPrevSelection ? [rowID] : this.getSelectedRows().indexOf(rowID) !== -1 ?\n            this.getSelectedRows() : [...this.getSelectedRows(), rowID];\n        const removed = clearPrevSelection ? this.getSelectedRows() : [];\n        this.emitRowSelectionEvent(newSelection, [rowID], removed, event);\n    }\n\n    /** Deselect the specified row and emit event. */\n    deselectRow(rowID, event?): void {\n        if (!this.isRowSelected(rowID)) { return; }\n        const newSelection = this.getSelectedRows().filter(r => r !== rowID);\n        if (this.rowSelection.size && this.rowSelection.has(rowID)) {\n            this.emitRowSelectionEvent(newSelection, [], [rowID], event);\n        }\n    }\n\n    /** Select specified rows. No event is emitted. */\n    selectRowsWithNoEvent(rowIDs: any[], clearPrevSelection?): void {\n        if (clearPrevSelection) { this.rowSelection.clear(); }\n        rowIDs.forEach(rowID => this.rowSelection.add(rowID));\n        this.allRowsSelected = undefined;\n    }\n\n    /** Deselect specified rows. No event is emitted. */\n    deselectRowsWithNoEvent(rowIDs: any[]): void {\n        rowIDs.forEach(rowID => this.rowSelection.delete(rowID));\n        this.allRowsSelected = undefined;\n    }\n\n    isRowSelected(rowID): boolean {\n        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);\n    }\n\n    /** Select range from last selected row to the current specified row. */\n    selectMultipleRows(rowID, rowData, event?): void {\n        this.allRowsSelected = undefined;\n        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {\n            this.selectRowById(rowID);\n            return;\n        }\n        const gridData = this.allData;\n        const lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];\n        const currIndex = gridData.indexOf(this.getRowDataById(lastRowID));\n        const newIndex = gridData.indexOf(rowData);\n        const rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);\n\n        const added = this.getRowIDs(rows).filter(rID => !this.isRowSelected(rID));\n        const newSelection = this.getSelectedRows().concat(added);\n\n        this.emitRowSelectionEvent(newSelection, added, [], event);\n    }\n\n    areAllRowSelected(): boolean {\n        if (!this.grid.data) { return false; }\n        if (this.allRowsSelected !== undefined) { return this.allRowsSelected; }\n\n        const dataItemsID = this.getRowIDs(this.allData);\n        return this.allRowsSelected = Math.min(this.rowSelection.size, dataItemsID.length) > 0 &&\n            new Set(Array.from(this.rowSelection.values()).concat(dataItemsID)).size === this.rowSelection.size;\n    }\n\n    hasSomeRowSelected(): boolean {\n        const filteredData = this.isFilteringApplied() ?\n            this.getRowIDs(this.grid.filteredData).some(rID => this.isRowSelected(rID)) : true;\n        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();\n    }\n\n    public get filteredSelectedRowIds(): any[] {\n        return this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rowID => this.isRowSelected(rowID)) :\n            this.getSelectedRows().filter(rowID => !this.isRowDeleted(rowID));\n    }\n\n    public emitRowSelectionEvent(newSelection, added, removed, event?): boolean {\n        const currSelection = this.getSelectedRows();\n        if (this.areEqualCollections(currSelection, newSelection)) { return; }\n\n        const args = {\n            oldSelection: currSelection, newSelection: newSelection,\n            added: added, removed: removed, event: event, cancel: false\n        };\n        this.grid.onRowSelectionChange.emit(args);\n        if (args.cancel) { return; }\n        this.selectRowsWithNoEvent(args.newSelection, true);\n    }\n\n    public getRowDataById(rowID): Object {\n        if (!this.grid.primaryKey) { return rowID; }\n        const rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);\n        return rowIndex < 0 ? {} : this.grid.gridAPI.get_all_data(true)[rowIndex];\n    }\n\n    public getRowIDs(data): Array<any> {\n        return this.grid.primaryKey && data.length ? data.map(rec => rec[this.grid.primaryKey]) : data;\n    }\n\n    public clearHeaderCBState(): void {\n        this.allRowsSelected = undefined;\n    }\n\n    /** Clear rowSelection and update checkbox state */\n    public clearAllSelectedRows(): void {\n        this.rowSelection.clear();\n        this.clearHeaderCBState();\n    }\n\n    /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */\n    public get allData(): Array<any> {\n        let  allData;\n        if (this.isFilteringApplied() || this.grid.sortingExpressions.length) {\n            allData = this.grid.pinnedRecordsCount ? this.grid._filteredSortedUnpinnedData : this.grid.filteredSortedData;\n        } else {\n            allData = this.grid.gridAPI.get_all_data(true);\n        }\n        return allData.filter(rData => !this.isRowDeleted(this.grid.gridAPI.get_row_id(rData)));\n    }\n\n    private areEqualCollections(first, second): boolean {\n        return first.length === second.length && new Set(first.concat(second)).size === first.length;\n    }\n\n    private isFilteringApplied(): boolean {\n        const grid = this.grid as IgxGridBaseDirective;\n        return !FilteringExpressionsTree.empty(grid.filteringExpressionsTree) ||\n            !FilteringExpressionsTree.empty(grid.advancedFilteringExpressionsTree);\n    }\n\n    private isRowDeleted(rowID): boolean {\n        return this.grid.gridAPI.row_deleted_transaction(rowID);\n    }\n\n    /** Returns array of the selected columns fields. */\n    getSelectedColumns(): Array<any> {\n        return this.columnSelection.size ? Array.from(this.columnSelection.keys()) : [];\n    }\n\n    isColumnSelected(field: string): boolean {\n        return this.columnSelection.size > 0 && this.columnSelection.has(field);\n    }\n\n    /** Select the specified column and emit event. */\n    selectColumn(field: string, clearPrevSelection?, selectColumnsRange?, event?): void {\n        const stateColumn = this.columnsState.field ? this.grid.getColumnByName(this.columnsState.field) : null;\n        if (!event || !stateColumn || stateColumn.visibleIndex < 0 || !selectColumnsRange  ) {\n            this.columnsState.field = field;\n            this.columnsState.range = [];\n\n            const newSelection = clearPrevSelection ? [field] : this.getSelectedColumns().indexOf(field) !== -1 ?\n                this.getSelectedColumns() : [...this.getSelectedColumns(), field];\n            const removed = clearPrevSelection ? this.getSelectedColumns().filter(colField => colField !== field) : [];\n            const added = this.isColumnSelected(field) ? [] : [field];\n            this.emitColumnSelectionEvent(newSelection, added, removed, event);\n        } else if (selectColumnsRange) {\n            this.selectColumnsRange(field, event);\n        }\n    }\n\n    /** Select specified columns. And emit event. */\n    selectColumns(fields: string[], clearPrevSelection?, selectColumnsRange?, event?): void {\n        const columns = fields.map(f => this.grid.getColumnByName(f)).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const stateColumn = this.columnsState.field ? this.grid.getColumnByName(this.columnsState.field) : null;\n        if (!stateColumn || stateColumn.visibleIndex < 0 || !selectColumnsRange) {\n            this.columnsState.field = columns[0] ? columns[0].field : null;\n            this.columnsState.range = [];\n\n            const added = fields.filter(colField => !this.isColumnSelected(colField));\n            const removed = clearPrevSelection ? this.getSelectedColumns().filter(colField => fields.indexOf(colField) === -1) : [];\n            const newSelection = clearPrevSelection ? fields : this.getSelectedColumns().concat(added);\n\n            this.emitColumnSelectionEvent(newSelection, added, removed, event);\n        } else {\n            const filedStart = stateColumn.visibleIndex >\n                columns[columns.length - 1].visibleIndex ? columns[0].field : columns[columns.length - 1].field;\n            this.selectColumnsRange(filedStart, event);\n        }\n    }\n\n    /** Select range from last clicked column to the current specified column. */\n    selectColumnsRange(field: string, event): void {\n        const currIndex = this.grid.getColumnByName(this.columnsState.field).visibleIndex;\n        const newIndex = this.grid.columnToVisibleIndex(field);\n        const columnsFields = this.grid.visibleColumns\n            .filter(c => !c.columnGroup)\n            .sort((a, b) => a.visibleIndex - b.visibleIndex)\n            .slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1)\n            .filter(col => col.selectable).map(col => col.field);\n        const removed = [];\n        const oldAdded = [];\n        const added = columnsFields.filter(colField => !this.isColumnSelected(colField));\n        this.columnsState.range.forEach(f => {\n            if (columnsFields.indexOf(f) === -1) {\n                removed.push(f);\n            } else {\n                oldAdded.push(f);\n            }\n        });\n        this.columnsState.range = columnsFields.filter(colField => !this.isColumnSelected(colField) || oldAdded.indexOf(colField) > -1);\n        const newSelection = this.getSelectedColumns().concat(added).filter(c => removed.indexOf(c) === -1);\n        this.emitColumnSelectionEvent(newSelection, added, removed, event);\n    }\n\n    /** Select specified columns. No event is emitted. */\n    selectColumnsWithNoEvent(fields: string[], clearPrevSelection?): void {\n        if (clearPrevSelection) { this.columnSelection.clear(); }\n        fields.forEach(field => { this.columnSelection.add(field); });\n    }\n\n    /** Deselect the specified column and emit event. */\n    deselectColumn(field: string, event?): void {\n        this.initColumnsState();\n        const newSelection = this.getSelectedColumns().filter(c => c !== field);\n        this.emitColumnSelectionEvent(newSelection, [], [field], event);\n    }\n\n    /** Deselect specified columns. No event is emitted. */\n    deselectColumnsWithNoEvent(fields: string[]): void {\n        fields.forEach(field => this.columnSelection.delete(field));\n    }\n\n    /** Deselect specified columns. And emit event. */\n    deselectColumns(fields: string[], event?): void {\n        const removed = this.getSelectedColumns().filter(colField => fields.indexOf(colField) > -1);\n        const newSelection = this.getSelectedColumns().filter(colField => fields.indexOf(colField) === -1);\n\n        this.emitColumnSelectionEvent(newSelection, [], removed, event);\n    }\n\n    public emitColumnSelectionEvent(newSelection, added, removed, event?): boolean {\n        const currSelection = this.getSelectedColumns();\n        if (this.areEqualCollections(currSelection, newSelection)) { return; }\n\n        const args = {\n            oldSelection: currSelection, newSelection: newSelection,\n            added: added, removed: removed, event: event, cancel: false\n        };\n        this.grid.onColumnSelectionChange.emit(args);\n        if (args.cancel) { return; }\n        this.selectColumnsWithNoEvent(args.newSelection, true);\n    }\n\n    /** Clear columnSelection */\n    public clearAllSelectedColumns(): void {\n        this.columnSelection.clear();\n    }\n}\n\nexport function isChromium(): boolean {\n    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);\n}\n","import {\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    Directive,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { TransactionType } from '../services/public_api';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from './selection/selection.service';\nimport { GridType } from './common/grid.interface';\nimport merge from 'lodash.merge';\n\n@Directive({\n    selector: '[igxRowBaseComponent]'\n})\nexport class IgxRowDirective<T extends IgxGridBaseDirective & GridType> implements DoCheck {\n\n    protected _rowData: any;\n    protected _addRow: boolean;\n    /**\n     * @hidden\n     */\n    public animateAdd = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    onAnimationEnd = new EventEmitter<IgxRowDirective<T>>();\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return merge({...this._rowData }, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * Sets whether this specific row has disabled functionality for editing and row selection.\n     * Default value is `false`.\n     * ```typescript\n     * this.grid.selectedRows[0].pinned = true;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-grid__tr--disabled')\n    public disabled = false;\n\n    /**\n     * Gets whether the row is pinned.\n     * ```typescript\n     * let isPinned = row.pinned;\n     * ```\n     */\n    public get pinned(): boolean {\n        return this.grid.isRecordPinned(this.rowData);\n    }\n\n    @Input()\n    public get addRow(): any {\n        return this._addRow;\n    }\n\n    public set addRow(v: any) {\n        this._addRow = v;\n    }\n\n    @HostBinding('style.min-height.px')\n    get rowHeight() {\n        let height = this.grid.rowHeight || 32;\n        if (this.grid.hasColumnLayouts) {\n            const maxRowSpan = this.grid.multiRowLayoutRowSize;\n            height = height * maxRowSpan;\n        }\n        return this.addRow ?  height : null;\n    }\n\n    get cellHeight() {\n        return this.addRow && !this.inEditMode ? null : this.grid.rowHeight || 32;\n    }\n\n    /**\n     * Sets whether the row is pinned.\n     * Default value is `false`.\n     * ```typescript\n     * this.grid.selectedRows[0].pinned = true;\n     * ```\n     */\n    public set pinned(value: boolean) {\n        if (value) {\n            this.grid.pinRow(this.rowID);\n        } else {\n            this.grid.unpinRow(this.rowID);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    @ViewChildren('cell')\n    protected _cells: QueryList<any>;\n\n    /**\n     * Gets the rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    public get cells() {\n        const res = new QueryList<any>();\n        if (!this._cells) {\n            return res;\n        }\n        const cList = this._cells.filter((item) => item.nativeElement.parentElement !== null)\n        .sort((item1, item2) => item1.column.visibleIndex - item2.column.visibleIndex);\n        res.reset(cList);\n        return res;\n    }\n\n    public set cells(cells) {\n\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    get selected(): boolean {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    set selected(value: boolean) {\n        value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :\n        this.selectionService.deselectRowsWithNoEvent([this.rowID]);\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        if ((this.grid as any).groupingExpressions.length) {\n            return this.grid.filteredSortedData.indexOf(this.rowData);\n        }\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isRoot(): boolean {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public get hasChildren(): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowSelectors(): boolean {\n        return this.grid.showRowSelectors;\n    }\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get dragging() {\n        return this.grid.dragRowID === this.rowID;\n    }\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n\n    constructor(\n        public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef<HTMLElement>,\n        public cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        if (this.grid.rowSelection === 'none' || this.deleted) { return; }\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('mouseenter', ['$event'])\n    public showActionStrip(event: MouseEvent) {\n        if (this.grid.actionStrip) {\n            this.grid.actionStrip.show(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRowSelectorClick(event) {\n        event.stopPropagation();\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selected ? this.selectionService.deselectRow(this.rowID, event) :\n        this.selectionService.selectRowById(this.rowID, false, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.cellInEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData, this.grid);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    public isCellActive(visibleColumnIndex) {\n        const node = this.grid.navigation.activeNode;\n        return node ? node.row === this.index && node.column === visibleColumnIndex : false;\n    }\n\n    /**\n     * Pins the specified row.\n     * This method emits `onRowPinning` event.\n     *\n     * ```typescript\n     * // pin the selected row from the grid\n     * this.grid.selectedRows[0].pin();\n     * ```\n     */\n    public pin() {\n        return this.grid.pinRow(this.rowID);\n    }\n\n    /**\n     * Unpins the specified row.\n     * This method emits `onRowPinning` event.\n     *\n     * ```typescript\n     * // unpin the selected row from the grid\n     * this.grid.selectedRows[0].unpin();\n     * ```\n     */\n    public unpin() {\n        return this.grid.unpinRow(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.selected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public shouldDisplayPinnedChip(visibleColumnIndex: number): boolean {\n        return this.pinned && this.disabled && visibleColumnIndex === 0;\n    }\n\n    public animationEndHandler() {\n        this.onAnimationEnd.emit(this);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.selected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n\n    /**\n     * Spawns the add row UI for the specific row.\n     * @example\n     * ```typescript\n     * const row = this.grid1.getRowByIndex(1);\n     * row.beginAddRow();\n     * ```\n     */\n    public beginAddRow() {\n        this.grid.beginAddRowByIndex(this.rowID, this.index);\n    }\n}\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n/**\n * Event emitted when a SVG icon is loaded through\n * a HTTP request.\n */\nexport interface IgxIconLoadedEvent {\n    /** Name of the icon */\n    name: string;\n    /** The actual SVG text */\n    value: string;\n    /** The fontSet for the icon. Defaults to material. */\n    fontSet: string;\n}\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n    private _iconLoaded = new Subject<IgxIconLoadedEvent>();\n\n    /**\n     * Observable that emits when an icon is successfully loaded\n     * through a HTTP request.\n     * @example\n     * ```typescript\n     * this.service.iconLoaded.subscribe((ev: IgxIconLoadedEvent) => ...);\n     * ```\n     */\n    public iconLoaded = this._iconLoaded.asObservable();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     * ```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     * ```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     * ```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     * ```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     * ```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     * ```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     * ```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     * ```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load – when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                if (request.status === 200) {\n                    instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n                    instance._iconLoaded.next({ name: iconName, value: request.responseText, fontSet });\n                } else {\n                    throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n                }\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url};`);\n            }\n        };\n\n        // error – when the request couldn’t be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n            }\n            throw new Error(`Could not fetch SVG from url: ${url};`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { takeUntil } from 'rxjs/operators';\nimport { IgxGridActionButtonComponent } from './grid-action-button.component';\nimport { Directive, Inject, Input, AfterViewInit, QueryList, ViewChildren,\n     OnInit, IterableDiffers, IterableChangeRecord, OnDestroy } from '@angular/core';\nimport { IgxActionStripComponent } from '../action-strip.component';\nimport { IgxRowDirective } from '../../grids/row.directive';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { Subject } from 'rxjs';\n\n@Directive({\n    selector: '[igxGridActionsBase]'\n})\nexport class IgxGridActionsBaseDirective implements AfterViewInit {\n    constructor(protected iconService: IgxIconService,\n        protected differs: IterableDiffers) { }\n\n    public strip: IgxActionStripComponent;\n\n    @ViewChildren(IgxGridActionButtonComponent)\n    public buttons: QueryList<IgxGridActionButtonComponent>;\n\n    /**\n     * Gets/Sets if the action buttons will be rendered as menu items. When in menu, items will be rendered with text label.\n     * @example\n     * ```html\n     *  <igx-grid-pinning-actions [asMenuItems]='true'></igx-grid-pinning-actions>\n     *  <igx-grid-editing-actions [asMenuItems]='true'></igx-grid-editing-actions>\n     * ```\n     */\n    @Input()\n    asMenuItems = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get grid() {\n        return this.strip.context.grid;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngAfterViewInit() {\n        if (this.asMenuItems) {\n                this.buttons.changes.subscribe((change: QueryList<IgxGridActionButtonComponent>) => {\n                        this.strip.cdr.detectChanges();\n                });\n        }\n    }\n\n    /**\n     * Getter to be used in template\n     * @hidden\n     * @internal\n     */\n    get isRowContext(): boolean {\n        return this.isRow(this.strip.context) && !this.strip.context.inEditMode;\n    }\n\n    /**\n     * Check if the param is a row from a grid\n     * @hidden\n     * @internal\n     * @param context\n     */\n    protected isRow(context): context is IgxRowDirective<any> {\n        return context && context instanceof IgxRowDirective;\n    }\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { IgxGridActionsBaseDirective } from './grid-actions-base.directive';\nimport { showMessage } from '../../core/deprecateDecorators';\nimport { addRow, addChild  } from '@igniteui/material-icons-extended';\n\n@Component({\n    selector: 'igx-grid-editing-actions',\n    templateUrl: 'grid-editing-actions.component.html',\n    providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridEditingActionsComponent }]\n})\n\nexport class IgxGridEditingActionsComponent extends IgxGridActionsBaseDirective {\n\n    /**\n     * Host `class.igx-action-strip` binding.\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-action-strip__editing-actions')\n    public cssClass = 'igx-action-strip__editing-actions';\n\n    private isMessageShown = false;\n    private _addRow = false;\n    private iconsRendered = false;\n\n    /**\n     * An input to enable/disable action strip row adding button\n     */\n    @Input()\n    public set addRow(value: boolean) {\n        this._addRow = value;\n    }\n    public get addRow(): boolean {\n        if (!this.iconsRendered) {\n            this.registerIcons();\n            this.iconsRendered = true;\n        }\n        return this._addRow;\n    }\n\n    /**\n     * An input to enable/disable action strip child row adding button\n     */\n    @Input()\n    public addChild = false;\n\n    /**\n     * Enter row or cell edit mode depending the grid rowEditable option\n     * @example\n     * ```typescript\n     * this.gridEditingActions.startEdit();\n     * ```\n     */\n    public startEdit(event?): void {\n        if (event) {\n            event.stopPropagation();\n        }\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const row = this.strip.context;\n        const firstEditable = row.cells.filter(cell => cell.editable)[0];\n        const grid = row.grid;\n        if (!grid.hasEditableColumns) {\n            this.isMessageShown = showMessage(\n                'The grid should be editable in order to use IgxGridEditingActionsComponent',\n                this.isMessageShown);\n                return;\n        }\n        // be sure row is in view\n        if (grid.rowList.filter(r => r === row).length !== 0) {\n            grid.crudService.enterEditMode(firstEditable);\n        }\n        this.strip.hide();\n    }\n\n    /**\n     * Delete a row according to the context\n     * @example\n     * ```typescript\n     * this.gridEditingActions.deleteRow();\n     * ```\n     */\n    public deleteRow(event?): void {\n        if (event) {\n            event.stopPropagation();\n        }\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const context = this.strip.context;\n        const grid = context.grid;\n        grid.deleteRow(context.rowID);\n        this.strip.hide();\n    }\n\n    public addRowHandler(event?, asChild?: boolean): void {\n        if (event) {\n            event.stopPropagation();\n        }\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const context = this.strip.context;\n        const grid = context.grid;\n        if (!grid.rowEditable) {\n            console.warn('The grid must use row edit mode to perform row adding! Please set rowEditable to true.');\n            return;\n        }\n        grid.beginAddRowByIndex(context.rowID, context.index, asChild);\n        this.strip.hide();\n    }\n\n    /**\n     * Getter if the row is disabled\n     * @hidden\n     * @internal\n     */\n    get disabled(): boolean {\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        return this.strip.context.disabled;\n    }\n\n    /**\n     * Getter if the row is root.\n     * @hidden\n     * @internal\n     */\n    public get isRootRow(): boolean {\n        if (!this.isRow(this.strip.context)) {\n            return false;\n        }\n        return this.strip.context.isRoot;\n    }\n\n    public get hasChildren(): boolean {\n        if (!this.isRow(this.strip.context)) {\n            return false;\n        }\n        return this.strip.context.hasChildren;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private registerIcons() {\n        this.iconService.addSvgIconFromText(addRow.name, addRow.value, 'imx-icons');\n        this.iconService.addSvgIconFromText(addChild.name, addChild.value, 'imx-icons');\n    }\n}\n","import { Component, HostBinding } from '@angular/core';\nimport { IgxGridActionsBaseDirective } from './grid-actions-base.directive';\nimport { pinLeft, unpinLeft, jumpDown, jumpUp } from '@igniteui/material-icons-extended';\n@Component({\n    selector: 'igx-grid-pinning-actions',\n    templateUrl: 'grid-pinning-actions.component.html',\n    providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridPinningActionsComponent }]\n})\n\nexport class IgxGridPinningActionsComponent extends IgxGridActionsBaseDirective {\n    /**\n     * Host `class.igx-action-strip` binding.\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-action-strip__pinning-actions')\n    public cssClass = 'igx-action-strip__pinning-actions';\n\n    private iconsRendered = false;\n\n    /**\n     * Getter to know if the row is pinned\n     * @hidden\n     * @internal\n     */\n    get pinned(): boolean {\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const context = this.strip.context;\n        if (context && !this.iconsRendered) {\n            this.registerSVGIcons();\n            this.iconsRendered = true;\n        }\n        return context && context.pinned;\n    }\n\n    /**\n     * Getter to know if the row is in pinned and ghost\n     * @hidden\n     * @internal\n     */\n    get inPinnedArea(): boolean {\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const context = this.strip.context;\n        return this.pinned && !context.disabled;\n    }\n\n    /**\n     * Getter to know if the row pinning is set to top or bottom\n     * @hidden\n     * @internal\n     */\n    get pinnedTop(): boolean {\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        return this.strip.context.grid.isRowPinningToTop;\n    }\n\n    /**\n     * Pin the row according to the context.\n     * @example\n     * ```typescript\n     * this.gridPinningActions.pin();\n     * ```\n     */\n    public pin(event?): void {\n        if (event) {\n            event.stopPropagation();\n        }\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const row = this.strip.context;\n        const grid = row.grid;\n        grid.pinRow(row.rowID);\n        this.strip.hide();\n    }\n\n    /**\n     * Unpin the row according to the context.\n     * @example\n     * ```typescript\n     * this.gridPinningActions.unpin();\n     * ```\n     */\n    public unpin(event?): void {\n        if (event) {\n            event.stopPropagation();\n        }\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const row = this.strip.context;\n        const grid = row.grid;\n        grid.unpinRow(row.rowID);\n        this.strip.hide();\n    }\n\n    public scrollToRow(event) {\n        if (event) {\n            event.stopPropagation();\n        }\n        const context = this.strip.context;\n        const grid = context.grid;\n        grid.scrollTo(context.rowData, 0);\n        this.strip.hide();\n    }\n\n    private registerSVGIcons(): void {\n        if (!this.isRow(this.strip.context)) {\n            return;\n        }\n        const context = this.strip.context;\n        const grid = context.grid;\n        if (grid) {\n            this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');\n            this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');\n            this.iconService.addSvgIconFromText(jumpDown.name, jumpDown.value, 'imx-icons');\n            this.iconService.addSvgIconFromText(jumpUp.name, jumpDown.value, 'imx-icons');\n        }\n    }\n}\n","import {\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Renderer2,\n    ViewContainerRef,\n    Optional,\n    Inject,\n    ContentChildren,\n    QueryList,\n    ViewChild,\n    TemplateRef,\n    AfterContentInit,\n    IterableDiffers,\n    OnInit,\n    ChangeDetectorRef,\n    AfterViewInit\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IgxDropDownComponent } from '../drop-down/public_api';\nimport { CloseScrollStrategy, OverlaySettings } from '../services/public_api';\nimport { IgxGridActionsBaseDirective } from './grid-actions/grid-actions-base.directive';\n\n@Directive({\n    selector: '[igxActionStripMenuItem]'\n})\nexport class IgxActionStripMenuItemDirective {\n    constructor(\n        public templateRef: TemplateRef<any>\n    ) { }\n}\n\n/**\n * Action Strip provides templatable area for one or more actions.\n *\n * @igxModule IgxActionStripModule\n *\n * @igxTheme igx-action-strip-theme\n *\n * @igxKeywords action, strip, actionStrip, pinning, editing\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n * The Ignite UI Action Strip is a container, overlaying its parent container,\n * and displaying action buttons with action applicable to the parent component the strip is instantiated or shown for.\n *\n * @example\n * ```html\n * <igx-action-strip #actionStrip>\n *     <igx-icon (click)=\"doSomeAction()\"></igx-icon>\n * </igx-action-strip>\n */\n@Component({\n    selector: 'igx-action-strip',\n    templateUrl: 'action-strip.component.html'\n})\n\nexport class IgxActionStripComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit {\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public cdr: ChangeDetectorRef) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Getter for the 'display' property of the current `IgxActionStrip`\n     * @hidden\n     * @internal\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this._hidden ? 'none' : 'flex';\n    }\n\n    private _hidden = false;\n\n    /**\n     * An @Input property that set the visibility of the Action Strip.\n     * Could be used to set if the Action Strip will be initially hidden.\n     * @example\n     * ```html\n     *  <igx-action-strip [hidden]=\"false\">\n     * ```\n     */\n    @Input()\n    public set hidden(value) {\n        this._hidden = value;\n    }\n\n    public get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Host `class.igx-action-strip` binding.\n     * @hidden\n     * @internal\n     */\n    @Input('class')\n    hostClass: string;\n\n    /**\n     * Host `attr.class` binding.\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.class')\n    get hostClasses(): string {\n        const classes = [this.getComponentDensityClass('igx-action-strip')];\n        // The custom classes should be at the end.\n        if (!classes.includes('igx-action-strip')) {\n            classes.push('igx-action-strip');\n        }\n        classes.push(this.hostClass);\n        return classes.join(' ');\n    }\n\n    /**\n     * Sets the context of an action strip.\n     * The context should be an instance of a @Component, that has element property.\n     * This element will be the placeholder of the action strip.\n     * @example\n     * ```html\n     * <igx-action-strip [context]=\"cell\"></igx-action-strip>\n     * ```\n     */\n    @Input()\n    public context: any;\n    /**\n     * Menu Items ContentChildren inside the Action Strip\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxActionStripMenuItemDirective)\n    public _menuItems: QueryList<IgxActionStripMenuItemDirective>;\n\n\n    /**\n     * ActionButton as ContentChildren inside the Action Strip\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxGridActionsBaseDirective)\n    public actionButtons: QueryList<IgxGridActionsBaseDirective>;\n\n    /**\n     * Getter for menu overlay settings\n     * @hidden\n     * @internal\n     */\n    public menuOverlaySettings: OverlaySettings  = { scrollStrategy: new CloseScrollStrategy() };\n\n    /**\n     * Menu Items list.\n     * @hidden\n     * @internal\n     */\n    public get menuItems() {\n        const actions = [];\n        this.actionButtons.forEach(button => {\n            if (button.asMenuItems) {\n                const children = button.buttons;\n                if (children) {\n                    children.toArray().forEach(x => actions.push(x));\n                }\n            }\n        });\n        return [... this._menuItems.toArray(), ... actions];\n    }\n\n    /**\n     * Reference to the menu\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dropdown')\n    public menu: IgxDropDownComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngAfterContentInit() {\n        this.actionButtons.forEach(button => {\n            button.strip = this;\n        });\n        this.actionButtons.changes.subscribe(change => {\n            this.actionButtons.forEach(button => {\n                button.strip = this;\n            });\n        });\n    }\n\n    ngAfterViewInit() {\n        this.menu.onSelection.subscribe(($event) => {\n            const newSelection = ($event.newSelection as any).elementRef.nativeElement;\n            let allButtons = [];\n            this.actionButtons.forEach( actionButtons => {\n                if (actionButtons.asMenuItems) {\n                    allButtons = [... allButtons, ... actionButtons.buttons.toArray()];\n                }\n            });\n            const button = allButtons.find(x => newSelection.contains(x.container.nativeElement));\n            if (button) {\n                 button.onActionClick.emit();\n            }\n         });\n    }\n\n    /**\n     * Showing the Action Strip and appending it the specified context element.\n     * @param context\n     * @example\n     * ```typescript\n     * this.actionStrip.show(row);\n     * ```\n     */\n    public show(context?: any): void {\n        this.hidden = false;\n        if (!context) {\n            return;\n        }\n        // when shown for different context make sure the menu won't stay opened\n        if (this.context !== context) {\n            this.closeMenu();\n        }\n        this.context = context;\n        if (this.context && this.context.element) {\n            this.renderer.appendChild(context.element.nativeElement, this._viewContainer.element.nativeElement);\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Hiding the Action Strip and removing it from its current context element.\n     * @example\n     * ```typescript\n     * this.actionStrip.hide();\n     * ```\n     */\n    public hide(): void {\n        this.hidden = true;\n        this.closeMenu();\n        if (this.context && this.context.element) {\n            this.renderer.removeChild(this.context.element.nativeElement, this._viewContainer.element.nativeElement);\n        }\n    }\n\n    /**\n     * Close the menu if opened\n     * @hidden\n     * @internal\n     */\n    private closeMenu(): void {\n        if (this.menu && !this.menu.collapsed) {\n            this.menu.close();\n        }\n    }\n}\n\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { IgxIconService } from './icon.service';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n/**\n * Icon provides a way to include material icons to markup\n *\n * @igxModule IgxIconModule\n *\n * @igxTheme igx-icon-theme\n *\n * @igxKeywords icon, picture\n *\n * @igxGroup Display\n *\n * @remarks\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * @example\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\nexport class IgxIconComponent implements OnInit, OnDestroy {\n    @ViewChild('noLigature', { read: TemplateRef, static: true })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef, static: true })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef, static: true })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    private destroy$ = new Subject<void>();\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     * constructor(private cdRef:ChangeDetectorRef) {}\n     * ngAfterViewInit() {\n     *     this.icon.ariaHidden = false;\n     *     this.cdRef.detectChanges();\n     * }\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * @example\n     * ```html\n     * <igx-icon id=\"igx-icon-1\" fontSet=\"material\">settings</igx-icon>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n     * @example\n     * ```html\n     * <igx-icon fontSet=\"material\">settings</igx-icon>\n     * ```\n     */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n     * An @Input property that allows you to disable the `active` property. By default it's applied.\n     * @example\n     * ```html\n     * <igx-icon [isActive]=\"false\">settings</igx-icon>\n     * ```\n     */\n    @Input('isActive')\n    public active = true;\n\n    /**\n     * An @Input property that allows you to change the `iconColor` of the icon.\n     * @example\n     * ```html\n     * <igx-icon color=\"blue\">settings</igx-icon>\n     * ```\n     */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n     *  An @Input property that allows you to set the `iconName` of the icon.\n     *  @example\n     * ```html\n     * <igx-icon name=\"contains\" fontSet=\"filter-icons\"></igx-icon>\n     * ```\n     */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(\n            private _el: ElementRef,\n            private iconService: IgxIconService,\n            private ref: ChangeDetectorRef) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n        this.iconService.iconLoaded.pipe(\n            first(e => e.name === this.iconName && e.fontSet === this.font),\n            takeUntil(this.destroy$)\n        )\n        .subscribe(_ => this.ref.detectChanges());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     * @example\n     * ```typescript\n     *  @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     * An accessor that returns the opposite value of the `iconColor` property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     * An accessor that returns the value of the iconName property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxIconComponent } from './icon.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule { }\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { NgModule } from '@angular/core';\nimport { IgxActionStripComponent, IgxActionStripMenuItemDirective } from './action-strip.component';\nimport { IgxGridPinningActionsComponent } from './grid-actions/grid-pinning-actions.component';\nimport { IgxGridEditingActionsComponent } from './grid-actions/grid-editing-actions.component';\nimport { IgxGridActionsBaseDirective } from './grid-actions/grid-actions-base.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxDropDownModule } from '../drop-down/public_api';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxGridActionButtonComponent } from './grid-actions/grid-action-button.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxActionStripComponent,\n        IgxActionStripMenuItemDirective,\n        IgxGridPinningActionsComponent,\n        IgxGridEditingActionsComponent,\n        IgxGridActionsBaseDirective,\n        IgxGridActionButtonComponent\n    ],\n    entryComponents: [\n    ],\n    exports: [\n        IgxActionStripComponent,\n        IgxActionStripMenuItemDirective,\n        IgxGridPinningActionsComponent,\n        IgxGridEditingActionsComponent,\n        IgxGridActionsBaseDirective,\n        IgxGridActionButtonComponent\n    ],\n    imports: [CommonModule, IgxDropDownModule, IgxToggleModule, IgxButtonModule, IgxIconModule, IgxRippleModule]\n})\nexport class IgxActionStripModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/public_api';\nimport { mkenum } from '../core/utils';\n\nlet NEXT_ID = 0;\nexport const IgxAvatarSize = mkenum({\n    SMALL: 'small',\n    MEDIUM: 'medium',\n    LARGE: 'large'\n});\nexport type IgxAvatarSize = (typeof IgxAvatarSize)[keyof typeof IgxAvatarSize];\n\nexport const IgxAvatarType = mkenum({\n    INITIALS: 'initials',\n    IMAGE: 'image',\n    ICON: 'icon',\n    CUSTOM: 'custom'\n});\n\nexport type IgxAvatarType = (typeof IgxAvatarType)[keyof typeof IgxAvatarType];\n\n/**\n * Avatar provides a way to display an image, icon or initials to the user.\n *\n * @igxModule IgxAvatarModule\n *\n * @igxTheme igx-avatar-theme, igx-icon-theme\n *\n * @igxKeywords avatar, profile, picture, initials\n *\n * @igxGroup Layouts\n *\n * @remarks\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the Google Material icon set.\n *\n * @example\n * ```html\n * <igx-avatar initials=\"MS\" [roundShape]=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit {\n\n    /**\n     * This is a reference to the avatar image element in the DOM.\n     *\n     * @example\n     * ```typescript\n     *  let image = this.avatar.image;\n     * ```\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n    /** @hidden @internal */\n    @ViewChild('defaultTemplate', { read: TemplateRef, static: true })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /** @hidden @internal */\n    @ViewChild('imageTemplate', { read: TemplateRef, static: true })\n    protected imageTemplate: TemplateRef<any>;\n\n    /** @hidden @internal */\n    @ViewChild('initialsTemplate', { read: TemplateRef, static: true })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /** @hidden @internal */\n    @ViewChild('iconTemplate', { read: TemplateRef, static: true })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` attribute of the avatar.\n     *\n     * @example\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * @example\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Host `class.igx-avatar` binding.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be:\n     * - `\"initials type avatar\"`\n     * - `\"icon type avatar\"`\n     * - `\"image type avatar\"`.\n     * - `\"custom type avatar\"`.\n     *\n     * @example\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     */\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar, if `[roundShape]` is set to `true`.\n     * By default the shape of the avatar is a square.\n     *\n     * @example\n     * ```html\n     * <igx-avatar [roundShape]=\"true\" ></igx-avatar>\n     * ```\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the color of the avatar's initials or icon.\n     *\n     * @example\n     * ```html\n     * <igx-avatar color=\"blue\"></igx-avatar>\n     * ```\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * @example\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     * @igxFriendlyName Background color\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets initials to the avatar.\n     *\n     * @example\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an icon to the avatar. All icons from the material icon set are supported.\n     *\n     * @example\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the image source of the avatar.\n     *\n     * @example\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     * @igxFriendlyName Image URL\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _size: string | IgxAvatarSize = IgxAvatarSize.SMALL;\n    /**\n     * Returns the size of the avatar.\n     *\n     * @example\n     * ```typescript\n     * let avatarSize = this.avatar.size;\n     * ```\n     */\n    @Input()\n    public get size(): string | IgxAvatarSize {\n        return this._size;\n    }\n\n    /**\n     * Sets the size  of the avatar.\n     * By default, the size is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * @example\n     * ```html\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     */\n    public set size(value: string | IgxAvatarSize) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-avatar--small')\n    get _isSmallSize(): boolean {\n        return this.size === 'small';\n    }\n    /** @hidden @internal */\n    @HostBinding('class.igx-avatar--medium')\n    get _isMediumSize(): boolean {\n        return this.size === 'medium';\n    }\n    /** @hidden @internal */\n    @HostBinding('class.igx-avatar--large')\n    get _isLargeSize(): boolean {\n        return this.size === 'large';\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * @example\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     */\n    get type(): IgxAvatarType {\n        if (this.src) {\n            return IgxAvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return IgxAvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return IgxAvatarType.INITIALS;\n        }\n\n        return IgxAvatarType.CUSTOM;\n    }\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-avatar--image')\n    get _isImageType(): boolean {\n        return this.type === IgxAvatarType.IMAGE;\n    }\n    /** @hidden @internal */\n    @HostBinding('class.igx-avatar--icon')\n    get _isIconType(): boolean {\n        return this.type === IgxAvatarType.ICON;\n    }\n    /** @hidden @internal */\n    @HostBinding('class.igx-avatar--initials')\n    get _isInitialsType(): boolean {\n        return this.type === IgxAvatarType.INITIALS;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * @hidden\n     * @internal\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case IgxAvatarType.IMAGE:\n                return this.imageTemplate;\n            case IgxAvatarType.INITIALS:\n                return this.initialsTemplate;\n            case IgxAvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /** @hidden @internal */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /** @hidden @internal */\n    private getRole(): string {\n        switch (this.type) {\n            case IgxAvatarType.IMAGE:\n                return 'image avatar';\n            case IgxAvatarType.ICON:\n                return 'icon avatar';\n            case IgxAvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the css url of the image.\n     *\n     * @hidden\n     * @internal\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/public_api';\nimport { mkenum } from '../core/utils';\n\nlet NEXT_ID = 0;\n\n/**\n * Determines the igxBadge type\n */\nexport const IgxBadgeType = mkenum({\n    PRIMARY: 'primary',\n    INFO: 'info',\n    SUCCESS: 'success',\n    WARNING: 'warning',\n    ERROR: 'error'\n});\nexport type IgxBadgeType = (typeof IgxBadgeType)[keyof typeof IgxBadgeType];\n/**\n * Badge provides visual notifications used to decorate avatars, menus, etc.\n *\n * @igxModule IgxBadgeModule\n *\n * @igxTheme igx-badge-theme\n *\n * @igxKeywords badge, icon, notification\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * @example\n * ```html\n * <igx-avatar>\n *   <igx-badge icon=\"check\" type=\"success\"></igx-badge>\n * </igx-avatar>\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n   /**\n    * Sets/gets the `id` of the badge.\n    *\n    * @remarks\n    * If not set, the `id` will have value `\"igx-badge-0\"`.\n    *\n    * @example\n    * ```html\n    * <igx-badge id=\"igx-badge-2\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n   /**\n    * Sets/gets the type of the badge.\n    *\n    * @remarks\n    * Allowed values are `primary`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    *\n    * @example\n    * ```html\n    * <igx-badge type=\"success\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | IgxBadgeType = IgxBadgeType.PRIMARY;\n\n   /**\n    * Sets/gets the value to be displayed inside the badge.\n    *\n    * @remarks\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n    *\n    * @example\n    * ```html\n    * <igx-badge value=\"11\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value: string | number = '';\n\n    /**\n     * Sets/gets an icon for the badge from the material icons set.\n     *\n     * @remarks\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     *\n     * @example\n     * ```html\n     * <igx-badge icon=\"check\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets/gets the role attribute value.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     * public badge: IgxBadgeComponent;\n     *\n     * badge.role = 'status';\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * Sets/gets the the css class to use on the badge.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     * public badge: IgxBadgeComponent;\n     *\n     * badge.cssClass = 'my-badge-class';\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * Sets/gets the aria-label attribute value.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     * public badge: IgxBadgeComponent;\n     *\n     * badge.label = 'badge';\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * Defines a human-readable, accessor, author-localized description for\n     * the `type` and the `icon` or `value` of the element.\n     * @hidden\n     * @internal\n     */\n    get roleDescription() {\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            return this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value || this.value === 0) {\n            return this.type + ' badge type with value ' + this.value;\n        }\n        return this.type + ' badge type without value';\n    }\n\n    /**\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     * @hidden\n     * @internal\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (IgxBadgeType[this.type.toUpperCase()]) {\n            case IgxBadgeType.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case IgxBadgeType.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case IgxBadgeType.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case IgxBadgeType.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n            default:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule { }\n","import { EventEmitter, InjectionToken } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = new InjectionToken<IgxExpansionPanelBase>('IgxExpansionPanelToken');\n\nexport interface IExpansionPanelEventArgs extends IBaseEventArgs {\n    event: Event;\n    /**\n     * @deprecated\n     * To get a reference to the panel, use `owner` instead.\n     */\n    panel?: IgxExpansionPanelBase;\n}\n\nexport interface IExpansionPanelCancelableEventArgs  extends IExpansionPanelEventArgs, CancelableEventArgs {}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden @internal\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden @internal\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden @internal\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject,\n    ViewChild\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelCancelableEventArgs  } from './expansion-panel.common';\nimport { mkenum } from '../core/utils';\nimport { IgxIconComponent } from '../icon/public_api';\n\n/**\n * @hidden\n */\nexport const ICON_POSITION = mkenum({\n    LEFT: 'left',\n    NONE: 'none',\n    RIGHT: 'right'\n});\nexport type ICON_POSITION = (typeof ICON_POSITION)[keyof typeof ICON_POSITION];\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /** @hidden @internal */\n    @ContentChild(IgxExpansionPanelIconDirective, { read: ElementRef })\n    private customIconRef: ElementRef;\n\n    /** @hidden @internal */\n    @ViewChild(IgxIconComponent, { read: ElementRef })\n    public defaultIconRef: ElementRef;\n\n    /**\n     * Returns a reference to the `igx-expansion-panel-icon` element;\n     * If `iconPosition` is `NONE` - return null;\n     */\n    public get iconRef(): ElementRef {\n        const renderedTemplate = this.customIconRef  ?? this.defaultIconRef;\n        return this.iconPosition !== ICON_POSITION.NONE ? renderedTemplate : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelCancelableEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelCancelableEventArgs >();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n      * @hidden\n      */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n      * @hidden\n      */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         const eventArgs: IExpansionPanelCancelableEventArgs  = { event: evt, panel: this.panel, owner: this.panel, cancel: false };\n         this.onInteraction.emit(eventArgs);\n         if (eventArgs.cancel === true) {\n             return;\n         }\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            const eventArgs: IExpansionPanelCancelableEventArgs  = { event, panel: this.panel, owner: this.panel, cancel: false };\n            this.onInteraction.emit(eventArgs);\n            if (eventArgs.cancel === true) {\n                return;\n            }\n            this.panel.expand(event);\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            const eventArgs: IExpansionPanelCancelableEventArgs  = { event, panel: this.panel, owner: this.panel, cancel: false };\n            this.onInteraction.emit(eventArgs);\n            if (eventArgs.cancel === true) {\n                return;\n            }\n            this.panel.collapse(event);\n        }\n     }\n\n     /**\n      * @hidden\n      */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    AfterContentInit\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase, AfterContentInit {\n    private _collapsed = true;\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-expansion-panel [(collapsed)]=\"model.isCollapsed\"></igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n    public set collapsed(value) {\n        this._collapsed = value;\n        this.collapsedChange.emit(this._collapsed);\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public collapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: IExpansionPanelEventArgs)\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: IExpansionPanelEventArgs)\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelBodyComponent, { read: IgxExpansionPanelBodyComponent })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelHeaderComponent, { read: IgxExpansionPanelHeaderComponent })\n    public header: IgxExpansionPanelHeaderComponent;\n\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        if (this.body && this.header) {\n            // schedule at end of turn:\n            Promise.resolve().then(() => {\n                this.body.labelledBy = this.body.labelledBy || this.headerId;\n                this.body.label = this.body.label || this.id + '-region';\n            });\n        }\n    }\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this, owner: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this, owner: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport {\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n} from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel/public_api';\nimport { IgxIconModule, IgxIconComponent } from '../icon/public_api';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs extends IBaseEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel', { static: true })\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective)\n    private _bannerActionTemplate: IgxBannerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent)\n    public bannerIcon: IgxIconComponent;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/public_api';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.zIndex')\n    public zIndex = 0;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     * ```typescript\n     * public style1 = \"styleClass\";\n     *  //..\n     * ```\n     *  ```html\n     * <igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     * ```typescript\n     *  @ViewChild(\"MyChild\")\n     * public buttonG: IgxButtonGroupComponent;\n     * ngAfterViewInit(){\n     *    let buttonSelect = this.buttonG.itemContentCssClass;\n     * }\n     * ```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     * public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     * ```typescript\n     * @ViewChild(\"MyChild\")\n     * public buttonG: IgxButtonGroupComponent;\n     * ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     * }\n     * ```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     * ```typescript\n     * @ViewChild(\"toast\")\n     * private toast: IgxToastComponent;\n     * public onSelect(buttongroup){\n     *     this.toast.show()\n     * }\n     *  //...\n     * ```\n     * ```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     * <igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     * ```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     * ```typescript\n     *  @ViewChild(\"toast\")\n     *  private toast: IgxToastComponent;\n     *  public onUnselect(buttongroup){\n     *     this.toast.show()\n     * }\n     *  //...\n     * ```\n     * ```html\n     * <igx-buttongroup> #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     * <igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     * ```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     * @ViewChild(\"MyChild\")\n     * private buttonG: IgxButtonGroupComponent;\n     * ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     * }\n     * ```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     * ```typescript\n     * @ViewChild(\"MyChild\")\n     * private buttonG: IgxButtonGroupComponent;\n     * ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     * }\n     * ```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * ```typescript\n     * @ViewChild(\"MyChild\")\n     * private buttonG: IgxButtonGroupComponent;\n     * ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     * }\n     * ```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * ```typescript\n     * @ViewChild(\"MyChild\")\n     * private buttonG: IgxButtonGroupComponent;\n     * ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     * }\n     * ```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach((button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs extends IBaseEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\n/**\n * @hidden\n */\nenum TimeDeltaInterval {\n    Month = 'month',\n    Year = 'year'\n}\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    if (!ranges) {\n        return false;\n    }\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const _ of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: '' };\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: '' };\n            }\n        }\n        return result;\n    }\n\n    public getFirstViewDate(date: Date, interval: string, activeViewIdx: number) {\n        return this.timedelta(date, interval, -activeViewIdx);\n    }\n\n    public getNextMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, 1);\n    }\n\n    public getPrevMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, -1);\n    }\n\n    public getNextYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, 1);\n    }\n\n    public getPrevYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, -1);\n    }\n\n    public getWeekNumber(date: Date) {\n        const firstJan = new Date(date.getFullYear(), 0, 1).getTime();\n        const today = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n        const dayInMilSeconds = 86400000;\n        const dayOfYear = ((today - firstJan + 1) / dayInMilSeconds);\n        return Math.ceil(dayOfYear / 7);\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","import { Input, Output, EventEmitter, Directive } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\nimport { isDate, mkenum } from '../core/utils';\nimport { CalendarView } from './month-picker-base';\n\n/**\n * Sets the selection type - single, multi or range.\n */\nexport const CalendarSelection = mkenum({\n    SINGLE: 'single',\n    MULTI: 'multi',\n    RANGE: 'range'\n});\nexport type CalendarSelection = (typeof CalendarSelection)[keyof typeof CalendarSelection];\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport interface IViewDateChangeEventArgs {\n    previousValue: Date;\n    currentValue: Date;\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxCalendarBase]',\n})\nexport class IgxCalendarBaseDirective implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        if (!value || !!value && (value as Date[]).length === 0) {\n            this.selectedDatesWithoutFocus = new Date();\n            return;\n        }\n        if (!this.selectedDatesWithoutFocus) {\n            const valueDate = value[0] ? Math.min.apply(null, value) : value;\n            const date = this.getDateOnly(new Date(valueDate)).setDate(1);\n            this.viewDate = new Date(date);\n        }\n        this.selectDate(value);\n        this.selectedDatesWithoutFocus = value;\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        if (this._viewDate) {\n            this.selectedDatesWithoutFocus = value;\n        }\n        const date = this.getDateOnly(value).setDate(1);\n        this._viewDate = new Date(date);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     * @ViewChild(\"MyCalendar\")\n     * public calendar: IgxCalendarComponent;\n     * ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     * }\n     * ```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     * @ViewChild(\"MyCalendar\")\n     * public calendar: IgxCalendarComponent;\n     * ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     * }\n     * ```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [hideOutsideDays] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.calendar.hideOutsideDays;\n     * ```\n     */\n\n    @Input()\n    public hideOutsideDays = false;\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     * Emits an event when the month in view is changed.\n     * ```html\n     * <igx-calendar (viewDateChanged)=\"viewDateChanged($event)\"></igx-calendar>\n     * ```\n     * ```typescript\n     * public viewDateChanged(event: IViewDateChangeEventArgs) {\n     *  let viewDate = event.currentValue;\n     * }\n     * ```\n     */\n    @Output()\n    public viewDateChanged = new EventEmitter<IViewDateChangeEventArgs>();\n\n    /**\n     * Emits an event when the active view is changed.\n     * ```html\n     * <igx-calendar (activeViewChanged)=\"activeViewChanged($event)\"></igx-calendar>\n     * ```\n     * ```typescript\n     * public activeViewChanged(event: CalendarView) {\n     *  let activeView = event;\n     * }\n     * ```\n     */\n    @Output()\n    public activeViewChanged  = new EventEmitter<CalendarView>();\n\n    /**\n     * @hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     * @hidden\n     */\n    public rangeStarted = false;\n\n    /**\n     * @hidden\n     */\n    private _locale = 'en';\n\n    /**\n     * @hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     * @hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     * @hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     * @hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     * @hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     * @hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     * @hidden\n     */\n    protected formatterDay;\n\n    /**\n     * @hidden\n     */\n    protected formatterMonth;\n\n    /**\n     * @hidden\n     */\n    protected formatterYear;\n\n    /**\n     * @hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     * @hidden\n     */\n    protected calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     * @hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     * @hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     * @hidden\n     */\n    public selectedDates;\n\n    /**\n     * @hidden\n     */\n    private selectedDatesWithoutFocus;\n\n    /**\n     * @hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     * @hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     * @hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     * @hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() < end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            const newDates = value.map(v => this.getDateOnly(v).getTime());\n            const selDates = this.selectedDates.map(v => this.getDateOnly(v).getTime());\n\n            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {\n                return;\n            }\n\n            this.selectedDates = Array.from(new Set([...newDates, ...selDates])).map(v => new Date(v));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n        this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs deselection of a single value, when selection is multi\n     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view\n     * @hidden\n     */\n    public deselectMultipleInMonth(value: Date) {\n        const valueDateOnly = this.getDateOnly(value);\n        this.selectedDates = this.selectedDates.filter(\n            (date: Date) => date.getTime() !== valueDateOnly.getTime()\n        );\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     * @hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectDate(value as Date);\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                if (isDate(value) && !this.isDateDisabled(value as Date)) {\n                    this.selectSingle(value as Date);\n                }\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (!this.selectedDates || this.selectedDates.length === 0) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                this.selectDate(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    @HostBinding('attr.tabindex')\n    public get tabIndex(): number {\n        return this.isCurrentYear ? 0 : -1;\n    }\n\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { IgxCalendarBaseDirective } from './calendar-base';\nimport { HostBinding, Directive, ViewChildren, ElementRef, QueryList, Input } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\n\n@Directive({\n    selector: '[igxMonthPickerBase]'\n})\nexport class IgxMonthPickerBaseDirective extends IgxCalendarBaseDirective {\n\n    /**\n     * Holds month view index we are operating on.\n     */\n    protected activeViewIdx = 0;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren('yearsBtn')\n    public yearsBtns: QueryList<ElementRef>;\n\n    /**\n     * @hidden @internal\n     */\n    public previousViewDate: Date;\n\n\n    @Input()\n    /**\n     * Gets the current active view.\n     * ```typescript\n     * this.activeView = calendar.activeView;\n     * ```\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     * ```html\n     * <igx-calendar [activeView]=\"1\" #calendar></igx-calendar>\n     * ```\n     * ```typescript\n     * calendar.activeView = CalendarView.YEAR;\n     * ```\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtns && this.yearsBtns.length) {\n                this.yearsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx).nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(activeViewIdx = 0): void {\n        this.activeView = CalendarView.DECADE;\n        this.activeViewIdx = activeViewIdx;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event, activeViewIdx = 0) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade(activeViewIdx);\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public set date(value) {\n        this._date = value;\n        this.activeMonth = this.date.getMonth();\n    }\n\n    public get date() {\n        return this._date;\n    }\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public monthsRef: QueryList<IgxCalendarMonthDirective>;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activeMonth;\n\n    private _date = new Date();\n    /**\n     * @hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     * @hidden\n     */\n    private _locale = 'en';\n\n    /**\n     * @hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     * @hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this.activeMonth = this.date.getMonth();\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {\n                const month = months[index];\n                month.nativeElement.focus();\n                this.activeMonth = month.value.getMonth();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance ) {\n                const month = months[index];\n                month.nativeElement.focus();\n                this.activeMonth = month.value.getMonth();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n            this.activeMonth = month.value.getMonth();\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n            this.activeMonth = month.value.getMonth();\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.monthsRef.toArray()[0];\n        this.activeMonth = month.value.getMonth();\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.monthsRef.toArray();\n        const month = months[months.length - 1];\n        this.activeMonth = month.value.getMonth();\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.monthsRef.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n        this.activeMonth = this.date.getMonth();\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    @HostListener('focusout', ['$event'])\n    public resetActiveMonth(event) {\n        this.activeMonth = this.date.getMonth();\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable, ViewChildren, QueryList} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { IgxCalendarYearDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChildren(IgxCalendarYearDirective, { read: IgxCalendarYearDirective })\n    public calendarDir: QueryList<IgxCalendarYearDirective>;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     * @hidden\n     */\n    private _locale = 'en';\n\n    /**\n     * @hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     * @hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n        this.calendarDir.find(date => date.isCurrentYear).nativeElement.nextElementSibling.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n        this.calendarDir.find(date => date.isCurrentYear).nativeElement.previousElementSibling.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { IgxDaysViewComponent } from './days-view.component';\nimport { ScrollMonth } from '../calendar-base';\n\nenum Direction {\n    Up = 'ArrowUp',\n    Down = 'ArrowDown',\n    Left = 'ArrowLeft',\n    Right = 'ArrowRight',\n}\n\nconst ARROW = 'Arrow';\n\n/** @hidden */\n@Injectable()\nexport class IgxDaysViewNavigationService {\n    public monthView: IgxDaysViewComponent;\n    /**\n     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next\n     * @hidden\n     */\n    public focusNextDate(target: HTMLElement, key: string, nextView = false) {\n        if (target.childElementCount === 0) { target = target.parentElement; }\n        if (key.indexOf('Arrow') === -1) { key = ARROW.concat(key); }\n        const monthView = this.monthView;\n        const node = monthView.dates.find((date) => date.nativeElement === target);\n        let dates = monthView.dates.toArray(),\n            day: IgxDayItemComponent, step, i, nextDate: Date;\n        const index = dates.indexOf(node);\n\n        if (!node) { return; }\n\n        // focus item in current month\n        switch (key) {\n            case Direction.Left: {\n                step = -1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i > 0; i--) {\n                    day = nextView ? dates[i] : dates[i - 1];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Right: {\n                step = 1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i < dates.length - 1; i++) {\n                    day = nextView ? dates[i] : dates[i + 1];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Up: {\n                step = -7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i - 7 > -1; i -= 7) {\n                    day = nextView ? dates[i] : dates[i - 7];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Down: {\n                step = 7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i + 7 < 42; i += 7) {\n                    day = nextView ? dates[i] : dates[i + 7];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n        }\n\n        // focus item in prev/next visible month\n        const nextMonthView = step > 0 ? monthView.nextMonthView : monthView.prevMonthView;\n        if (nextMonthView) {\n            dates = nextMonthView.dates.toArray();\n            day = dates.find((item) => item.date.date.getTime() === nextDate.getTime());\n\n            if (day && day.isFocusable) {\n                day.nativeElement.focus();\n                return;\n            }\n            nextMonthView.daysNavService.focusNextDate(day.nativeElement, key);\n        }\n\n        // if iterating in the visible prev/next moths above found a day that is not focusable, ie is disabled, hidden, etc\n        // then it is needed to recalculate the next day, which is going to be part of the prev/next months\n        if (day && !day.isFocusable) {\n            day = dates[i + step];\n            if (!day) {\n                nextDate = this.timedelta(node.date.date, step + i - index);\n            }\n        }\n\n        // focus item in prev/next month, which is currently out of view\n        let dayIsNextMonth: boolean; // determine what we need to check for next date - if it belongs to prev or next month\n        if (day) { dayIsNextMonth = step > 0 ? day.date.isNextMonth : day.date.isPrevMonth; }\n        if (monthView.changeDaysView && !nextMonthView && ((day && dayIsNextMonth) || !day)) {\n            const monthAction = step > 0 ? ScrollMonth.NEXT : ScrollMonth.PREV;\n            monthView.onViewChanging.emit({monthAction: monthAction, key: key, nextDate: nextDate});\n        }\n    }\n\n    /**\n     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusHomeDate() {\n        let monthView = this.monthView;\n        while (!this.focusFirstDay(monthView) && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n    }\n\n    /**\n     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusEndDate() {\n        let monthView = this.monthView;\n        while (!this.focusLastDay(monthView) && monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n    }\n\n    private timedelta(date: Date, units: number): Date {\n        const ret = new Date(date);\n        ret.setDate(ret.getDate() + units);\n        return ret;\n    }\n\n    private focusFirstDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private focusLastDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    /**\n     * Returns boolean indicating if the day is selected\n     *\n     */\n    @Input()\n    public get selected(): any {\n        return this._selected;\n    }\n\n    /**\n     * Selects the day\n     */\n    public set selected(value: any) {\n        this._selected = value;\n    }\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Input()\n    public hideOutsideDays = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--last')\n    public isLastInRange = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--first')\n    public isFirstInRange = false;\n\n    @Input()\n    public isWithinRange = false;\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return (!this.isDisabled && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    @HostBinding('class.igx-calendar__date--hidden')\n    public get isHidden(): boolean {\n        return this.hideOutsideDays && this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isFocusable(): boolean {\n        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--range')\n    public get isWithinRangeCSS(): boolean {\n        return !this.isSingleSelection && this.isWithinRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isHidden || this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--single')\n    public get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click', ['$event'])\n    @HostListener('keydown.enter', ['$event'])\n    public onSelect(event) {\n        event.stopPropagation();\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck,\n    OnInit\n} from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../../calendar/calendar';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBaseDirective, CalendarSelection } from '../calendar-base';\nimport { isEqual } from '../../core/utils';\nimport { IViewChangingEventArgs } from './days-view.interface';\nimport { IgxDaysViewNavigationService } from '../days-view/daysview-navigation.service';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        },\n        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBaseDirective implements DoCheck, OnInit {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * Show/hide week numbers\n     *\n     * @example\n     * ```html\n     * <igx-days-view [showWeekNumbers]=\"true\"></igx-days-view>\n     * ``\n     */\n    @Input()\n    public showWeekNumbers: boolean;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public set activeDate(value: string) {\n        this._activeDate = value;\n        this.activeDateChange.emit(this._activeDate);\n    }\n\n    public get activeDate() {\n        return this._activeDate ? this._activeDate : this.viewDate.toLocaleDateString();\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanging = new EventEmitter<IViewChangingEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public activeDateChange = new EventEmitter<string>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public monthsViewBlur = new EventEmitter<any>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * @hidden\n     */\n    public nextMonthView: IgxDaysViewComponent;\n\n    /** @hidden */\n    public prevMonthView: IgxDaysViewComponent;\n    /** @hidden */\n    public shouldResetDate = true;\n    private _activeDate;\n\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focusout')\n    public resetActiveMonth() {\n        if (this.shouldResetDate) {\n            const date = this.dates.find(day => day.selected && day.isCurrentMonth)\n            || this.dates.find(day => day.isToday && day.isCurrentMonth) || this.dates.find(d => d.isFocusable);\n            if (date) { this.activeDate = date.date.date.toLocaleDateString(); }\n            this.monthsViewBlur.emit();\n        }\n        this.shouldResetDate = true;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.pagedown')\n    @HostListener('keydown.pageup')\n    @HostListener('keydown.shift.pagedown')\n    @HostListener('keydown.shift.pageup')\n    @HostListener('pointerdown')\n    public pointerDown() {\n        this.shouldResetDate = false;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(public daysNavService: IgxDaysViewNavigationService) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.daysNavService.monthView = this;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public tabIndex(day: ICalendarDate): number {\n        return this.activeDate && this.activeDate === day.date.toLocaleDateString() && day.isCurrentMonth ? 0 : -1;\n    }\n\n    /**\n     * Returns the week number by date\n     *\n     * @hidden\n     */\n    public getWeekNumber(date): number {\n        return this.calendarModel.getWeekNumber(date);\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public isSelected(date: ICalendarDate): boolean {\n        let selectedDates: Date | Date[];\n        if (this.isDateDisabled(date.date) || !this.value ||\n            (Array.isArray(this.value) && this.value.length === 0)\n            )  {\n            return false;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n            selectedDates = (this.value as Date);\n            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();\n        }\n\n        selectedDates = (this.value as Date[]);\n        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {\n            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();\n        }\n\n        if (this.selection === CalendarSelection.MULTI) {\n            const start = this.getDateOnly(selectedDates[0]);\n            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);\n\n            if (this.isWithinRange(date.date, false, start, end)) {\n                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());\n                return !!currentDate;\n            } else {\n                return false;\n            }\n\n        } else {\n            return this.isWithinRange(date.date, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isLastInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        const dates = this.value as Date[];\n        const lastDate = dates[dates.length - 1];\n        return isEqual(lastDate, date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isFirstInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        return isEqual((this.value as Date[])[0], date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isWithinRange(date: Date, checkForRange: boolean, min?: Date, max?: Date): boolean {\n        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {\n            return false;\n        }\n\n        min = min ? min : this.value[0];\n        max = max ? max : this.value[(this.value as Date[]).length - 1];\n\n        return isDateInRanges(date,\n            [\n                {\n                    type: DateRangeType.Between,\n                    dateRange: [min, max]\n                }\n            ]\n        );\n    }\n\n    /**\n     * @hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date.isFocusable) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    public getFirstMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private getLastMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    @HostListener('keydown.arrowright', ['$event'])\n    @HostListener('keydown.arrowup', ['$event'])\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrow(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.shouldResetDate = false;\n        this.daysNavService.focusNextDate(event.target as HTMLElement, event.key);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.shouldResetDate = false;\n        this.getFirstMonthView().daysNavService.focusHomeDate();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.shouldResetDate = false;\n        this.getLastMonthView().daysNavService.focusEndDate();\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    ViewChildren,\n    QueryList,\n    OnDestroy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBaseDirective } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval, Subscription } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\nimport { IViewChangingEventArgs } from './days-view/days-view.interface';\n\nlet NEXT_ID = 0;\n\n/**\n * Calendar provides a way to display date information.\n *\n * @igxModule IgxCalendarModule\n *\n * @igxTheme igx-calendar-theme, igx-icon-theme\n *\n * @igxKeywords calendar, datepicker, schedule, date\n *\n * @igxGroup Scheduling\n *\n * @remarks\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * @example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBaseDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * Sets/gets the `id` of the calendar.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar id=\"my-first-calendar\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the calendar has header.\n     * Default value is `true`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [hasHeader]=\"false\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [monthsViewNumber]=\"2\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    get monthsViewNumber() {\n        return this._monthsViewNumber;\n    }\n\n    set monthsViewNumber(val: number) {\n        if (val < 1 ) {\n            return;\n        }\n\n        this._monthsViewNumber = val;\n    }\n\n    /**\n     * Show/hide week numbers\n     *\n     * @example\n     * ```html\n     * <igx-calendar [showWeekNumbers]=\"true\"></igx-calendar>\n     * ``\n     */\n    @Input()\n    public showWeekNumbers = false;\n\n    /**\n     * Apply the different states for the transitions of animateChange\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * Used to apply the active date when the calendar view is changed\n     *\n     * @hidden\n     * @internal\n     */\n    public nextDate: Date;\n\n    /**\n     * Denote if the calendar view was changed with the keyboard\n     *\n     * @hidden\n     * @internal\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public callback: (next) => void;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * ViewChild that represents the months view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * Month button, that displays the months view.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('monthsBtn')\n    public monthsBtns: QueryList<ElementRef>;\n\n    /**\n     * ViewChild that represents the decade view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * ViewChild that represents the days view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * ViewChildrenden representing all of the rendered days views.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('days', { read: IgxDaysViewComponent })\n    public monthViews: QueryList<IgxDaysViewComponent>;\n\n    /**\n     * Button for previous month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('prevMonthBtn')\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * Button for next month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('nextMonthBtn')\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * Denote if the year view is active.\n     * @hidden\n     * @internal\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * Gets the header template.\n     *\n     * @example\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     *\n     * @example\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     *\n     * @example\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     *\n     * @example\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Date displayed in header\n     *\n     * @hidden\n     * @internal\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activeDate = new Date().toLocaleDateString();\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true  })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true  })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthsViewNumber = 1;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthViewsChanges$: Subscription;\n\n    public ngAfterViewInit() {\n        this.setSiblingMonths(this.monthViews);\n        this._monthViewsChanges$ = this.monthViews.changes.subscribe(c => {\n            this.setSiblingMonths(c);\n        });\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     * @internal\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * Change to previous month\n     *\n     * @hidden\n     * @internal\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        if (isKeydownTrigger && this.animationAction === ScrollMonth.NEXT) { return; }\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.calendarModel.getPrevMonth(this.viewDate);\n        this.animationAction = ScrollMonth.PREV;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    public suppressBlur() {\n        this.monthViews?.forEach(d => d.shouldResetDate = false);\n        if (this.daysView) { this.daysView.shouldResetDate = false; }\n    }\n\n    /**\n     * Change to next month\n     *\n     * @hidden\n     * @internal\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        if (isKeydownTrigger && this.animationAction === 'prev') { return; }\n        this.isKeydownTrigger = isKeydownTrigger;\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.calendarModel.getNextMonth(this.viewDate);\n        this.animationAction = ScrollMonth.NEXT;\n    }\n\n    /**\n     * Continious navigation through the previous months\n     * @hidden\n     * @internal\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.PREV;\n        this.animationAction = ScrollMonth.PREV;\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Continious navigation through the next months\n     * @hidden\n     * @internal\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.NEXT;\n        this.animationAction = ScrollMonth.NEXT;\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Stop continuous navigation\n     * @hidden\n     * @internal\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        // generally the scrolling is built on the calendar component\n        // and all start/stop scrolling methods are called on the calendar\n        // if we change below lines to call stopMonthScroll$ on the calendar instead of on the views,\n        // strange bug is introduced --> after changing number of months, continuous scrolling on mouse click does not happen\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            this.resetActiveDate();\n        }\n\n        this.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecade(args: Date, activeViewIdx: number) {\n        super.activeViewDecade(activeViewIdx);\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.calendarDir.find(date => date.isCurrentYear).nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecadeKB(event, args: Date, activeViewIdx: number) {\n        super.activeViewDecadeKB(event, activeViewIdx);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.calendarDir.find(date => date.isCurrentYear).nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * Handles invoked on date selection\n     * @hidden\n     * @internal\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        if (this.selection === 'multi') {\n            this.deselectDateInMonthViews(instance.date);\n        }\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public viewChanging(args: IViewChangingEventArgs) {\n        this.animationAction = args.monthAction;\n        this.isKeydownTrigger = true;\n        this.nextDate = args.nextDate;\n        this.callback = (next) => {\n            const day = this.daysView.dates.find((item) => item.date.date.getTime() === next.getTime());\n            if (day) {\n                this.daysView.daysNavService.focusNextDate(day.nativeElement, args.key, true);\n            }\n        };\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.nextDate;\n    }\n\n    /**\n     * @hidden\n     * @intenal\n     */\n    public changeMonth(event: Date) {\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            const elem = this.monthsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx);\n            if (elem) { elem.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYear(args: Date, activeViewIdx: number, event?): void {\n        this.activeView = CalendarView.YEAR;\n        this.activeViewIdx = activeViewIdx;\n        requestAnimationFrame(() => {\n            this.monthsView.date = args;\n            this.focusMonth(event.target);\n        });\n    }\n\n    private focusMonth(target: HTMLElement) {\n        const month = this.monthsView.monthsRef.find((e) =>\n            e.index === parseInt(target.parentElement.attributes['data-month'].value, 10));\n        if (month) { month.nativeElement.focus(); }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYearKB(args: Date, event, activeViewIdx: number): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.onActiveViewYear(args, activeViewIdx, event);\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *\n     * @example\n     * ```typescript\n     *  this.calendar.deselectDate(new Date(`2018-06-12`));\n     * ````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.monthViews.forEach((view) => {\n            view.selectedDates = this.selectedDates;\n            view.rangeStarted = false;\n        });\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Helper method that does deselection for all month views when selection is \"multi\"\n     * If not called, selection in other month views stays\n     * @hidden\n     * @internal\n     */\n    private deselectDateInMonthViews(value: Date) {\n        this.monthViews.forEach(m => {\n            m.deselectMultipleInMonth(value);\n         });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getViewDate(i: number): Date {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date;\n    }\n\n    /**\n     * Getter for the context object inside the calendar templates.\n     * @hidden\n     * @internal\n     */\n    public getContext(i: number) {\n        const date = this.getViewDate(i);\n        return this.generateContext(date, i);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public animationDone(event) {\n        if ((event.fromState === ScrollMonth.NONE && (event.toState === ScrollMonth.PREV || event.toState === ScrollMonth.NEXT)) ||\n             (event.fromState === 'void' && event.toState === ScrollMonth.NONE)) {\n            this.viewDateChanged.emit({ previousValue: this.previousViewDate, currentValue: this.viewDate });\n        }\n        if (!this.isKeydownTrigger) {\n            this.resetActiveDate();\n        }\n\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.scrollMonth$.next();\n        }\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let date = monthView.dates.find((d) => d.selected);\n\n        while (!date && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n            date = monthView.dates.find((d) => d.selected);\n        }\n        if (date && date.isFocusable && !this.isKeydownTrigger) {\n            setTimeout(() => {\n                date.nativeElement.focus();\n            }, parseInt(slideInRight.options.params.duration, 10));\n        } else if (this.callback && (event.toState === ScrollMonth.NEXT || event.toState === ScrollMonth.PREV)) {\n            this.callback(this.nextDate);\n        }\n        this.animationAction = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public viewRendered(event) {\n        if (event.fromState !== 'void') {\n            this.activeViewChanged.emit(this.activeView);\n            if (this.activeView === 0) { this.resetActiveDate(); }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetActiveDate() {\n        if (!this.monthViews) { return; }\n        let dates = [];\n        this.monthViews.map(mv => mv.dates).forEach(days => { dates = dates.concat(days.toArray()); });\n        const date = dates.find(day => day.selected && day.isCurrentMonth) || dates.find(day => day.isToday && day.isCurrentMonth)\n            || dates.find(d => d.isFocusable);\n        if (date) {\n            this.activeDate = date.date.date.toLocaleDateString();\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            let year = this.nextDate.getFullYear();\n\n            let month = this.nextDate.getMonth() + step;\n            if (isPageDown) {\n                if (month > 11) { month = 0; year += step; }\n            } else {\n                if (month < 0) { month = 11; year += step; }\n            }\n\n            const range = monthRange(this.nextDate.getFullYear(), month);\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setMonth(month);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        if (isPageDown) {\n            event.repeat ? requestAnimationFrame(() => this.nextMonth(true)) : this.nextMonth(true);\n        } else {\n            event.repeat ? requestAnimationFrame(() => this.previousMonth(true)) : this.previousMonth(true);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', step);\n\n        this.animationAction = isPageDown ? ScrollMonth.NEXT : ScrollMonth.PREV;\n        this.isKeydownTrigger = true;\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            const year = this.nextDate.getFullYear() + step;\n\n            const range = monthRange(year, this.nextDate.getMonth());\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * Stop continuous navigation on mouseup event\n     * @hidden\n     * @internal\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        if (this._monthViewsChanges$) {\n            this._monthViewsChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     * @internal\n     */\n    private generateContext(value: Date, i?: number) {\n        const formatObject = {\n            index: i,\n            monthView: () => this.onActiveViewYear(value, i),\n            yearView: () => this.onActiveViewDecade(value, i),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n\n    /**\n     * Helper method that sets references for prev/next months for each month in the view\n     * @hidden\n     * @internal\n     */\n    private setSiblingMonths(monthViews: QueryList<IgxDaysViewComponent>) {\n        monthViews.forEach((item, index) => {\n            const prevMonthView = this.getMonthView(index - 1);\n            const nextMonthView = this.getMonthView(index + 1);\n            item.nextMonthView = nextMonthView;\n            item.prevMonthView = prevMonthView;\n        });\n    }\n\n    /**\n     * Helper method returning previous/next day views\n     * @hidden\n     * @internal\n     */\n    private getMonthView(index: number): IgxDaysViewComponent {\n        if (index === -1 || index === this.monthViews.length ) {\n            return null;\n        } else {\n            return this.monthViews.toArray()[index];\n        }\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input,\n    ElementRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBaseDirective, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\nimport { ScrollMonth } from '../calendar-base';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBaseDirective {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn')\n    public yearsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone(event) {\n        if ((event.fromState === 'void' && event.toState === '') ||\n        (event.fromState === '' && (event.toState === ScrollMonth.PREV || event.toState === ScrollMonth.NEXT))) {\n            this.viewDateChanged.emit({ previousValue: this.previousViewDate, currentValue: this.viewDate });\n        }\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public viewRendered(event) {\n        if (event.fromState !== 'void') {\n            this.activeViewChanged.emit(this.activeView);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            this.nextYear(event);\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            this.previousYear(event);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public changeYearKB(event, next = true) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.stopPropagation();\n            next ? this.nextYear() :  this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.previousViewDate = this.viewDate;\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     * ```typescript\n     *  this.monthPicker.selectDate(new Date(`2018-06-12`));\n     * ```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public previousYear(event?: KeyboardEvent) {\n        event?.preventDefault();\n        if (event && this.yearAction === 'next') { return; }\n        this.yearAction = 'prev';\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public nextYear(event?: KeyboardEvent) {\n        event?.preventDefault();\n        if (event && this.yearAction === 'prev') { return; }\n        this.yearAction = 'next';\n        this.previousViewDate = this.viewDate;\n        this.viewDate = this.calendarModel.getNextYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Calendar } from './calendar';\n\n@Pipe({\n    name: 'IgxMonthViewSlots'\n})\nexport class IgxMonthViewSlotsCalendar implements PipeTransform {\n    public transform(monthViews: number) {\n        return new Array(monthViews);\n    }\n}\n\n@Pipe({\n    name: 'IgxGetViewDate'\n})\nexport class IgxGetViewDateCalendar implements PipeTransform {\n    private calendar: Calendar;\n    constructor() {\n        this.calendar = new Calendar();\n    }\n    public transform(index: number, viewDate: Date, wholeDate = true) {\n        const date = this.calendar.timedelta(viewDate, 'month', index);\n        return wholeDate ? date : date.getMonth();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\nimport { IgxCalendarBaseDirective } from './calendar-base';\nimport { IgxMonthPickerBaseDirective } from './month-picker-base';\nimport { IgxMonthViewSlotsCalendar, IgxGetViewDateCalendar } from './months-view.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCalendarBaseDirective,\n        IgxMonthPickerBaseDirective,\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxMonthViewSlotsCalendar,\n        IgxGetViewDateCalendar\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { mkenum } from '../core/utils';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     *\n     * @example\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     *\n     * @example\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     *\n     * @example\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     *\n     * @example\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     *\n     * @example\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * Card provides a way to display organized content in appealing way.\n *\n * @igxModule IgxCardModule\n *\n * @igxTheme igx-card-theme, igx-icon-theme, igx-button-theme\n *\n * @igxKeywords card, button, avatar, icon\n *\n * @igxGroup Layouts\n *\n * @remarks\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * @example\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport const IgxCardType = mkenum({\n    ELEVATED: 'elevated',\n    OUTLINED: 'outlined'\n});\nexport type IgxCardType = (typeof IgxCardType)[keyof typeof IgxCardType];\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     *\n     * @example\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     *\n     * @example\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     *\n     * @example\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.ELEVATED;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     *\n     * @example\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport const IgxCardActionsLayout = mkenum({\n    START: 'start',\n    JUSTIFY: 'justify'\n});\nexport type IgxCardActionsLayout = (typeof IgxCardActionsLayout)[keyof typeof IgxCardActionsLayout];\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     *\n     * @example\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = IgxCardActionsLayout.START;\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     *\n     * @example\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxCarouselIndicator]'\n})\nexport class IgxCarouselIndicatorDirective {\n}\n\n@Directive({\n    selector: '[igxCarouselNextButton]'\n})\nexport class IgxCarouselNextButtonDirective {\n}\n\n@Directive({\n    selector: '[igxCarouselPrevButton]'\n})\nexport class IgxCarouselPrevButtonDirective {\n}\n","import { Component, OnDestroy, Input, HostBinding, Output, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnDestroy {\n    private _active = false;\n    private _destroy$ = new Subject<boolean>();\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n\n    /**\n     * Returns the `tabIndex` of the slide component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return this.active ? 0 : null;\n    }\n\n    /**\n     * Returns the `aria-selected` of the slide.\n     *\n     * ```typescript\n     * let slide = this.slide.ariaSelected;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-selected')\n    public get ariaSelected(): boolean {\n        return this.active;\n    }\n\n    /**\n     * Returns the `aria-live` of the slide.\n     *\n     * ```typescript\n     * let slide = this.slide.ariaLive;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-selected')\n    public get ariaLive() {\n        return this.active ? 'polite' : null;\n    }\n\n    /**\n     * Returns the class of the slide component.\n     * ```typescript\n     * let class =  this.slide.cssClass;\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.igx-slide')\n    public cssClass = 'igx-slide';\n\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [(active)] =\"model.isActive\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.igx-slide--current')\n    @Input()\n    public get active(): boolean {\n        return this._active;\n    }\n\n    public set active(value) {\n        this._active = !!value;\n        this.activeChange.emit(this._active);\n    }\n\n    @HostBinding('class.igx-slide--previous')\n    @Input() public previous = false;\n\n    /**\n     * @hidden\n     */\n    @Output() public activeChange = new EventEmitter<boolean>();\n\n    constructor(private elementRef: ElementRef) { }\n\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.slide.nativeElement;\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDestroyed(): Subject<boolean> {\n    return this._destroy$;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n}\n","export interface IDateRangePickerResourceStrings {\n    igx_date_range_picker_date_separator?: string;\n}\n\nexport const DateRangePickerResourceStringsEN: IDateRangePickerResourceStrings = {\n    igx_date_range_picker_date_separator: 'to'\n};\n","import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';\nimport { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { PaginatorResourceStringsEN } from './paginator-resources';\nimport { cloneValue } from '../utils';\nimport { ICarouselResourceStrings, CarouselResourceStringsEN } from './carousel-resources';\nimport { ListResourceStringsEN } from './list-resources';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings, ICarouselResourceStrings  {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),\n    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),\n    CarouselResStrings: cloneValue(CarouselResourceStringsEN),\n    ListResStrings: cloneValue(ListResourceStringsEN),\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_select_all_search_results?: string;\n    igx_grid_excel_add_to_filter?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_show?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_select?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n    igx_grid_advanced_filter_title?: string;\n    igx_grid_advanced_filter_and_group?: string;\n    igx_grid_advanced_filter_or_group?: string;\n    igx_grid_advanced_filter_end_group?: string;\n    igx_grid_advanced_filter_create_and_group?: string;\n    igx_grid_advanced_filter_create_or_group?: string;\n    igx_grid_advanced_filter_and_label?: string;\n    igx_grid_advanced_filter_or_label?: string;\n    igx_grid_advanced_filter_add_condition?: string;\n    igx_grid_advanced_filter_ungroup?: string;\n    igx_grid_advanced_filter_delete?: string;\n    igx_grid_advanced_filter_delete_filters?: string;\n    igx_grid_advanced_filter_initial_text?: string;\n    igx_grid_advanced_filter_column_placeholder?: string;\n    igx_grid_advanced_filter_value_placeholder?: string;\n    igx_grid_pinned_row_indicator?: string;\n    igx_grid_hiding_check_all_label?: string;\n    igx_grid_hiding_uncheck_all_label?: string;\n    igx_grid_pinning_check_all_label?: string;\n    igx_grid_pinning_uncheck_all_label?: string;\n    igx_grid_toolbar_actions_filter_prompt?: string;\n    igx_grid_snackbar_addrow_label?: string;\n    igx_grid_snackbar_addrow_actiontext?: string;\n    igx_grid_actions_edit_label?: string;\n    igx_grid_actions_add_label?: string;\n    igx_grid_add_row_label?: string;\n    igx_grid_actions_add_child_label?: string;\n    igx_grid_actions_delete_label?: string;\n    igx_grid_actions_pin_label?: string;\n    igx_grid_actions_unpin_label?: string;\n    igx_grid_actions_jumpUp_label?: string;\n    igx_grid_actions_jumpDown_label?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_select_all_search_results: 'Select all search results',\n    igx_grid_excel_add_to_filter: 'Add current selection to filter',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_show: 'Show column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_select: 'Select column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...',\n    igx_grid_advanced_filter_title: 'Advanced Filtering',\n    igx_grid_advanced_filter_and_group: '\"And\" Group',\n    igx_grid_advanced_filter_or_group: '\"Or\" Group',\n    igx_grid_advanced_filter_end_group: 'End Group',\n    igx_grid_advanced_filter_create_and_group: 'Create \"And\" Group',\n    igx_grid_advanced_filter_create_or_group: 'Create \"Or\" Group',\n    igx_grid_advanced_filter_and_label: 'and',\n    igx_grid_advanced_filter_or_label: 'or',\n    igx_grid_advanced_filter_add_condition: 'Condition',\n    igx_grid_advanced_filter_ungroup: 'Ungroup',\n    igx_grid_advanced_filter_delete: 'Delete',\n    igx_grid_advanced_filter_delete_filters: 'Delete filters',\n    igx_grid_advanced_filter_initial_text: 'Start with creating a group of conditions linked with \"And\" or \"Or\"',\n    igx_grid_advanced_filter_column_placeholder: 'Select column',\n    igx_grid_advanced_filter_value_placeholder: 'Value',\n    igx_grid_pinned_row_indicator: 'Pinned',\n    igx_grid_hiding_check_all_label: 'Hide All',\n    igx_grid_hiding_uncheck_all_label: 'Show All',\n    igx_grid_pinning_check_all_label: 'Pin All',\n    igx_grid_pinning_uncheck_all_label: 'Unpin All',\n    igx_grid_toolbar_actions_filter_prompt: 'Filter columns list ...',\n    igx_grid_snackbar_addrow_label: 'Row added',\n    igx_grid_snackbar_addrow_actiontext: 'SHOW',\n    igx_grid_actions_edit_label: 'Edit',\n    igx_grid_actions_add_label: 'Add',\n    igx_grid_add_row_label: 'ADD ROW',\n    igx_grid_actions_add_child_label: 'Add Child',\n    igx_grid_actions_delete_label: 'Delete',\n    igx_grid_actions_pin_label: 'Pin',\n    igx_grid_actions_unpin_label: 'Unpin',\n    igx_grid_actions_jumpUp_label: 'Jump up',\n    igx_grid_actions_jumpDown_label: 'Jump down'\n};\n","export interface IPaginatorResourceStrings {\n    igx_paginator_label?: string;\n    igx_paginator_pager_text?: string;\n    igx_paginator_first_page_button_text?: string;\n    igx_paginator_previous_page_button_text?: string;\n    igx_paginator_last_page_button_text?: string;\n    igx_paginator_next_page_button_text?: string;\n}\n\nexport const PaginatorResourceStringsEN: IPaginatorResourceStrings = {\n    igx_paginator_label: 'Items per page',\n    igx_paginator_pager_text: 'of',\n    igx_paginator_first_page_button_text: 'Go to first page',\n    igx_paginator_previous_page_button_text: 'Previous page',\n    igx_paginator_last_page_button_text: 'Go to last page',\n    igx_paginator_next_page_button_text: 'Next page',\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","export interface ICarouselResourceStrings {\n    igx_carousel_of?: string;\n}\n\nexport const CarouselResourceStringsEN: ICarouselResourceStrings = {\n    igx_carousel_of: 'of'\n};\n","export interface IListResourceStrings {\n    igx_list_no_items?: string;\n    igx_list_loading?: string;\n}\n\nexport const ListResourceStringsEN: IListResourceStrings = {\n    igx_list_no_items: 'There are no items in the list.',\n    igx_list_loading: 'Loading data from the server...'\n};\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ContentChildren,\n    QueryList,\n    IterableDiffer,\n    IterableDiffers,\n    AfterContentInit,\n    IterableChangeRecord,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IBaseEventArgs, mkenum, PlatformUtil } from '../core/utils';\nimport { Subject, merge } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxCarouselIndicatorDirective, IgxCarouselNextButtonDirective, IgxCarouselPrevButtonDirective } from './carousel.directives';\nimport { useAnimation, AnimationBuilder, AnimationPlayer, AnimationReferenceMetadata } from '@angular/animations';\nimport { slideInLeft, fadeIn } from '../animations/main';\nimport { IgxSlideComponent, Direction } from './slide.component';\nimport { ICarouselResourceStrings } from '../core/i18n/carousel-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\nexport const CarouselIndicatorsOrientation = mkenum({\n    bottom: 'bottom',\n    top: 'top'\n});\nexport type CarouselIndicatorsOrientation = (typeof CarouselIndicatorsOrientation)[keyof typeof CarouselIndicatorsOrientation];\n\nexport const CarouselAnimationType = mkenum({\n    none: 'none',\n    slide: 'slide',\n    fade: 'fade'\n});\nexport type CarouselAnimationType = (typeof CarouselAnimationType)[keyof typeof CarouselAnimationType];\n\nexport interface CarouselAnimationSettings {\n    enterAnimation: AnimationReferenceMetadata;\n    leaveAnimation: AnimationReferenceMetadata;\n}\n\n@Injectable()\nexport class CarouselHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_HORIZONTAL }\n    };\n}\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    providers: [\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CarouselHammerConfig\n        }\n    ],\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy, AfterContentInit {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Returns the `aria-label` of the carousel.\n     *\n     * ```typescript\n     * let carousel = this.carousel.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'carousel';\n\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Returns the class of the carousel component.\n     * ```typescript\n     * let class =  this.carousel.cssClass;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('class.igx-carousel')\n    public cssClass = 'igx-carousel';\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    get touchAction() {\n        return this.gesturesSupport ? 'pan-y' : 'auto';\n    }\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this.restartInterval();\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * Controls whether the carousel should support keyboard navigation.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [keyboardSupport] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public keyboardSupport = true;\n\n    /**\n     * Controls whether the carousel should support gestures.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [gesturesSupport] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public gesturesSupport = true;\n\n    /**\n     * Controls the maximum indexes that can be shown.\n     * Default value is `5`.\n     * ```html\n     * <igx-carousel [maximumIndicatorsCount] = \"10\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public maximumIndicatorsCount = 5;\n\n    /**\n     * Gets/sets the display mode of carousel indicators. It can be top or bottom.\n     * Default value is `bottom`.\n     * ```html\n     * <igx-carousel indicatorsOrientation='top'>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public indicatorsOrientation: CarouselIndicatorsOrientation = CarouselIndicatorsOrientation.bottom;\n\n    /**\n     * Gets/sets the animation type of carousel.\n     * Default value is `slide`.\n     * ```html\n     * <igx-carousel animationType='none'>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public animationType = CarouselAnimationType.slide;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    @Input()\n    set resourceStrings(value: ICarouselResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): ICarouselResourceStrings {\n        return this._resourceStrings;\n    }\n\n    @ViewChild('defaultIndicator', { read: TemplateRef, static: true })\n    private defaultIndicator: TemplateRef<any>;\n\n    @ViewChild('defaultNextButton', { read: TemplateRef, static: true })\n    private defaultNextButton: TemplateRef<any>;\n\n    @ViewChild('defaultPrevButton', { read: TemplateRef, static: true })\n    private defaultPrevButton: TemplateRef<any>;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel indicators\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.indicatorTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselIndicator let-slide>\n     *         <igx-icon *ngIf=\"slide.active\"  fontSet=\"material\">brightness_7</igx-icon>\n     *         <igx-icon *ngIf=\"!slide.active\"  fontSet=\"material\">brightness_5</igx-icon>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselIndicatorDirective, { read: TemplateRef, static: false })\n    public indicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel next button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselNextButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon fontSet=\"material\">add</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselNextButtonDirective, { read: TemplateRef, static: false })\n    public nextButtonTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel previous button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselPrevButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon fontSet=\"material\">remove</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselPrevButtonDirective, { read: TemplateRef, static: false })\n    public prevButtonTemplate: TemplateRef<any> = null;\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: QueryList<IgxSlideComponent> = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @ContentChildren(IgxSlideComponent)\n    public slides: QueryList<IgxSlideComponent>;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    private _interval: number;\n    private _resourceStrings = CurrentResourceStrings.CarouselResStrings;\n    private lastInterval: any;\n    private playing: boolean;\n    private stoppedByInteraction: boolean;\n    private destroyed: boolean;\n    private destroy$ = new Subject<any>();\n    private differ: IterableDiffer<IgxSlideComponent> | null = null;\n    private enterAnimationPlayer?: AnimationPlayer;\n    private leaveAnimationPlayer?: AnimationPlayer;\n    private currentSlide: IgxSlideComponent;\n    private previousSlide: IgxSlideComponent;\n    private animationDuration = 320;\n    private incomingSlide: IgxSlideComponent;\n    private animationPosition = 0;\n    private newDuration = 0;\n\n    constructor(private element: ElementRef, private iterableDiffers: IterableDiffers,\n        private builder: AnimationBuilder, private platformUtil: PlatformUtil) {\n        this.differ = this.iterableDiffers.find([]).create(null);\n    }\n\n    /** @hidden */\n    public ngAfterContentInit() {\n        this.slides.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxSlideComponent>) => { this.initSlides(change); });\n\n        this.initSlides(this.slides);\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.destroyed = true;\n        if (this.lastInterval) {\n            clearInterval(this.lastInterval);\n        }\n    }\n\n    private unsubscriber(slide: IgxSlideComponent) {\n        return merge(this.destroy$, slide.isDestroyed);\n    }\n\n    private onSlideActivated(slide: IgxSlideComponent) {\n        if (slide.active && slide !== this.currentSlide) {\n            if (slide.direction === Direction.NONE) {\n                const newIndex = slide.index;\n                slide.direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n            }\n\n            if (this.currentSlide) {\n                if (this.previousSlide && this.previousSlide.previous) {\n                    this.previousSlide.previous = false;\n                }\n                this.currentSlide.direction = slide.direction;\n                this.currentSlide.active = false;\n\n                this.previousSlide = this.currentSlide;\n                this.currentSlide = slide;\n                if (this.animationType !== CarouselAnimationType.none) {\n                    if (this.animationStarted(this.leaveAnimationPlayer) || this.animationStarted(this.enterAnimationPlayer)) {\n                        requestAnimationFrame(() => {\n                            this.resetAnimations();\n                            this.playAnimations();\n                        });\n                    } else {\n                        this.playAnimations();\n                    }\n                }\n            } else {\n                this.currentSlide = slide;\n            }\n            this.onSlideChanged.emit({ carousel: this, slide });\n            this.restartInterval();\n        }\n    }\n\n    private playAnimations() {\n        this.playLeaveAnimation();\n        this.playEnterAnimation();\n    }\n\n    private finishAnimations() {\n        if (this.animationStarted(this.leaveAnimationPlayer)) {\n            this.leaveAnimationPlayer.finish();\n        }\n\n        if (this.animationStarted(this.enterAnimationPlayer)) {\n            this.enterAnimationPlayer.finish();\n        }\n    }\n\n    private resetAnimations() {\n        if (this.animationStarted(this.leaveAnimationPlayer)) {\n            this.leaveAnimationPlayer.reset();\n        }\n\n        if (this.animationStarted(this.enterAnimationPlayer)) {\n            this.enterAnimationPlayer.reset();\n        }\n    }\n\n    private animationStarted(animation: AnimationPlayer): boolean {\n        return animation && animation.hasStarted();\n    }\n\n    private getAnimation(): CarouselAnimationSettings {\n        let duration;\n        if (this.newDuration) {\n            duration = this.animationPosition ? this.animationPosition * this.newDuration : this.newDuration;\n        } else {\n            duration = this.animationPosition ? this.animationPosition * this.animationDuration : this.animationDuration;\n        }\n\n        switch (this.animationType) {\n            case CarouselAnimationType.slide:\n                const trans = this.animationPosition ? this.animationPosition * 100 : 100;\n                return {\n                    enterAnimation: useAnimation(slideInLeft,\n                        {\n                            params: {\n                                delay: '0s',\n                                duration: `${duration}ms`,\n                                endOpacity: 1,\n                                startOpacity: 1,\n                                fromPosition: `translateX(${this.currentSlide.direction === 1 ? trans : -trans}%)`,\n                                toPosition: 'translateX(0%)'\n                            }\n                        }),\n                    leaveAnimation: useAnimation(slideInLeft,\n                        {\n                            params: {\n                                delay: '0s',\n                                duration: `${duration}ms`,\n                                endOpacity: 1,\n                                startOpacity: 1,\n                                fromPosition: `translateX(0%)`,\n                                toPosition: `translateX(${this.currentSlide.direction === 1 ? -trans : trans}%)`,\n                            }\n                        })\n                };\n            case CarouselAnimationType.fade:\n                return {\n                    enterAnimation: useAnimation(fadeIn,\n                        { params: { duration: `${duration}ms`, startOpacity: `${this.animationPosition}` } }),\n                    leaveAnimation: null\n                };\n        }\n        return {\n            enterAnimation: null,\n            leaveAnimation: null\n        };\n    }\n\n    private playEnterAnimation() {\n        const animation = this.getAnimation().enterAnimation;\n        if (!animation) {\n            return;\n        }\n        const animationBuilder = this.builder.build(animation);\n\n        this.enterAnimationPlayer = animationBuilder.create(this.currentSlide.nativeElement);\n\n        this.enterAnimationPlayer.onDone(() => {\n            if (this.enterAnimationPlayer) {\n                this.enterAnimationPlayer.reset();\n                this.enterAnimationPlayer = null;\n            }\n            this.animationPosition = 0;\n            this.newDuration = 0;\n            this.previousSlide.previous = false;\n        });\n        this.previousSlide.previous = true;\n        this.enterAnimationPlayer.play();\n    }\n\n    private playLeaveAnimation() {\n        const animation = this.getAnimation().leaveAnimation;\n        if (!animation) {\n            return;\n        }\n\n        const animationBuilder = this.builder.build(animation);\n        this.leaveAnimationPlayer = animationBuilder.create(this.previousSlide.nativeElement);\n\n        this.leaveAnimationPlayer.onDone(() => {\n            if (this.leaveAnimationPlayer) {\n                this.leaveAnimationPlayer.reset();\n                this.leaveAnimationPlayer = null;\n            }\n            this.animationPosition = 0;\n            this.newDuration = 0;\n        });\n        this.leaveAnimationPlayer.play();\n    }\n\n    private initSlides(change: QueryList<IgxSlideComponent>) {\n        const diff = this.differ.diff(change.toArray());\n        if (diff) {\n            this.slides.reduce((any, c, ind) => c.index = ind, 0); // reset slides indexes\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxSlideComponent>) => {\n                const slide = record.item;\n                this.onSlideAdded.emit({ carousel: this, slide });\n                if (slide.active) {\n                    this.currentSlide = slide;\n                }\n                slide.activeChange.pipe(takeUntil(this.unsubscriber(slide))).subscribe(() => this.onSlideActivated(slide));\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxSlideComponent>) => {\n                const slide = record.item;\n                this.onSlideRemoved.emit({ carousel: this, slide });\n                if (slide.active) {\n                    slide.active = false;\n                    this.currentSlide = this.get(slide.index < this.total ? slide.index : this.total - 1);\n                }\n            });\n\n            this.updateSlidesSelection();\n        }\n    }\n\n    private updateSlidesSelection() {\n        requestAnimationFrame(() => {\n            if (this.currentSlide) {\n                this.currentSlide.active = true;\n                const activeSlides = this.slides.filter(slide => slide.active && slide.index !== this.currentSlide.index);\n                activeSlides.forEach(slide => { slide.active = false; });\n            } else if (this.total) {\n                this.slides.first.active = true;\n            }\n            this.play();\n        });\n    }\n\n    /** @hidden */\n    public get getIndicatorTemplate(): TemplateRef<any> {\n        if (this.indicatorTemplate) {\n            return this.indicatorTemplate;\n        }\n        return this.defaultIndicator;\n    }\n\n    /** @hidden */\n    public get getNextButtonTemplate(): TemplateRef<any> {\n        if (this.nextButtonTemplate) {\n            return this.nextButtonTemplate;\n        }\n        return this.defaultNextButton;\n    }\n\n    /** @hidden */\n    public get getPrevButtonTemplate(): TemplateRef<any> {\n        if (this.prevButtonTemplate) {\n            return this.prevButtonTemplate;\n        }\n        return this.defaultPrevButton;\n    }\n\n    /** @hidden */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /** @hidden */\n    public get indicatorsOrientationClass() {\n        return `igx-carousel-indicators--${this.indicatorsOrientation}`;\n    }\n\n    /** @hidden */\n    public get showIndicators(): boolean {\n        return this.total <= this.maximumIndicatorsCount && this.total > 0;\n    }\n\n    /** @hidden */\n    public get showIndicatorsLabel(): boolean {\n        return this.total > this.maximumIndicatorsCount;\n    }\n\n    /** @hidden */\n    public get getCarouselLabel() {\n        return `${this.current + 1} ${this.resourceStrings.igx_carousel_of} ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this.slides.length;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this.currentSlide ? 0 : this.currentSlide.index;\n    }\n\n    private getNextIndex(): number {\n        return (this.current + 1) % this.total;\n    }\n\n    private getPrevIndex(): number {\n        return this.current - 1 < 0 ? this.total - 1 : this.current - 1;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this.playing;\n    }\n\n    /**\n     * Returns а boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this.destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        return this.slides.find((slide) => slide.index === index);\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        const newSlides = this.slides.toArray();\n        newSlides.push(slide);\n        this.slides.reset(newSlides);\n        this.slides.notifyOnChanges();\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            const newSlides = this.slides.toArray();\n            newSlides.splice(slide.index, 1);\n            this.slides.reset(newSlides);\n            this.slides.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        if (slide && slide !== this.currentSlide) {\n            slide.direction = direction;\n            slide.active = true;\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = this.getNextIndex();\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.getPrevIndex();\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this.playing) {\n            this.playing = true;\n            this.onCarouselPlaying.emit(this);\n            this.restartInterval();\n            this.stoppedByInteraction = false;\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this.playing = false;\n            this.onCarouselPaused.emit(this);\n            this.resetInterval();\n        }\n    }\n\n    private resetInterval() {\n        if (this.lastInterval) {\n            clearInterval(this.lastInterval);\n            this.lastInterval = null;\n        }\n    }\n\n    private restartInterval() {\n        this.resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0 && this.platformUtil.isBrowser) {\n            this.lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this.playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n\n    /** @hidden */\n    public get nextButtonDisabled() {\n        return !this.loop && this.current === (this.total - 1);\n    }\n\n    /** @hidden */\n    public get prevButtonDisabled() {\n        return !this.loop && this.current === 0;\n    }\n\n    /** @hidden */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event) {\n        if (this.keyboardSupport) {\n            event.preventDefault();\n            this.next();\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event) {\n        if (this.keyboardSupport) {\n            event.preventDefault();\n            this.prev();\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('tap', ['$event'])\n    public onTap(event) {\n        // play pause only when tap on slide\n        if (event.target && event.target.classList.contains('igx-slide')) {\n            if (this.isPlaying) {\n                if (this.pause) {\n                    this.stoppedByInteraction = true;\n                }\n                this.stop();\n            } else if (this.stoppedByInteraction) {\n                this.play();\n            }\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event) {\n        if (this.keyboardSupport && this.slides.length > 0) {\n            event.preventDefault();\n            this.slides.first.active = true;\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event) {\n        if (this.keyboardSupport && this.slides.length > 0) {\n            event.preventDefault();\n            this.slides.last.active = true;\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.pause && this.isPlaying) {\n            this.stoppedByInteraction = true;\n        }\n        this.stop();\n    }\n\n    /** @hidden */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.stoppedByInteraction) {\n            this.play();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('panleft', ['$event'])\n    public onPanLeft(event) {\n        this.pan(event);\n    }\n\n    /** @hidden */\n    @HostListener('panright', ['$event'])\n    public onPanRight(event) {\n        this.pan(event);\n    }\n\n    private resetSlideStyles(slide: IgxSlideComponent) {\n        slide.nativeElement.style.transform = '';\n        slide.nativeElement.style.opacity = '';\n    }\n\n    private pan(event) {\n        const slideWidth = this.currentSlide.nativeElement.offsetWidth;\n        const panOffset = (slideWidth / 1000);\n        const deltaX = event.deltaX;\n        const index = deltaX < 0 ? this.getNextIndex() : this.getPrevIndex();\n        const offset = deltaX < 0 ? slideWidth + deltaX : -slideWidth + deltaX;\n\n        if (!this.gesturesSupport || event.isFinal || Math.abs(deltaX) + panOffset >= slideWidth) {\n            return;\n        }\n\n        if (!this.loop && ((this.current === 0 && deltaX > 0) || (this.current === this.total - 1 && deltaX < 0))) {\n            this.incomingSlide = null;\n            return;\n        }\n\n        event.preventDefault();\n        if (this.isPlaying) {\n            this.stoppedByInteraction = true;\n            this.stop();\n        }\n\n        if (this.previousSlide && this.previousSlide.previous) {\n            this.previousSlide.previous = false;\n        }\n        this.finishAnimations();\n\n        if (this.incomingSlide) {\n            if (index !== this.incomingSlide.index) {\n                this.resetSlideStyles(this.incomingSlide);\n                this.incomingSlide.previous = false;\n                this.incomingSlide = this.get(index);\n            }\n        } else {\n            this.incomingSlide = this.get(index);\n        }\n        this.incomingSlide.previous = true;\n\n        if (this.animationType === CarouselAnimationType.fade) {\n            this.currentSlide.nativeElement.style.opacity = `${Math.abs(offset) / slideWidth}`;\n        } else {\n            this.currentSlide.nativeElement.style.transform = `translateX(${deltaX}px)`;\n            this.incomingSlide.nativeElement.style.transform = `translateX(${offset}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panend', ['$event'])\n    public onPanEnd(event) {\n        if (!this.gesturesSupport) {\n            return;\n        }\n        event.preventDefault();\n\n        const slideWidth = this.currentSlide.nativeElement.offsetWidth;\n        const panOffset = (slideWidth / 1000);\n        const deltaX = Math.abs(event.deltaX) + panOffset < slideWidth ? Math.abs(event.deltaX) : slideWidth - panOffset;\n        const velocity = Math.abs(event.velocity);\n        this.resetSlideStyles(this.currentSlide);\n        if (this.incomingSlide) {\n            this.resetSlideStyles(this.incomingSlide);\n            if (slideWidth / 2 < deltaX || velocity > 1) {\n                this.incomingSlide.direction = event.deltaX < 0 ? Direction.NEXT : Direction.PREV;\n                this.incomingSlide.previous = false;\n\n                this.animationPosition = this.animationType === CarouselAnimationType.fade ?\n                    deltaX / slideWidth : (slideWidth - deltaX) / slideWidth;\n\n                if (velocity > 1) {\n                    this.newDuration = this.animationDuration / velocity;\n                }\n                this.incomingSlide.active = true;\n            } else {\n                this.currentSlide.direction = event.deltaX > 0 ? Direction.NEXT : Direction.PREV;\n                this.previousSlide = this.incomingSlide;\n                this.previousSlide.previous = true;\n                this.animationPosition = this.animationType === CarouselAnimationType.fade ?\n                    Math.abs((slideWidth - deltaX) / slideWidth) : deltaX / slideWidth;\n                this.playAnimations();\n            }\n        }\n\n        if (this.stoppedByInteraction) {\n            this.play();\n        }\n    }\n}\n\nexport interface ISlideEventArgs extends IBaseEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCarouselComponent,\n        IgxSlideComponent,\n        IgxCarouselIndicatorDirective,\n        IgxCarouselNextButtonDirective,\n        IgxCarouselPrevButtonDirective\n    ],\n    exports: [\n        IgxCarouselComponent,\n        IgxSlideComponent,\n        IgxCarouselIndicatorDirective,\n        IgxCarouselNextButtonDirective,\n        IgxCarouselPrevButtonDirective\n    ],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IDropBaseEventArgs,\n    IDropDroppedEventArgs\n} from '../directives/drag-drop/drag-drop.directive';\nimport { IBaseEventArgs } from '../core/utils';\nimport { fromEvent } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\n\n\nexport interface IBaseChipEventArgs extends IBaseEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n/**\n * Chip is compact visual component that displays information in an obround.\n *\n * @igxModule IgxChipsModule\n *\n * @igxTheme igx-chip-theme\n *\n * @igxKeywords chip\n *\n * @igxGroup display\n *\n * @remarks\n * The Ignite UI Chip can be templated, deleted, and selected.\n * Multiple chips can be reordered and visually connected to each other.\n * Chips reside in a container called chips area which is responsible for managing the interactions between the chips.\n *\n * @example\n * ```html\n * <igx-chip class=\"chipStyle\" [id]=\"901\" [draggable]=\"true\" [removable]=\"true\" (onRemove)=\"chipRemoved($event)\">\n *    <igx-avatar class=\"chip-avatar-resized\" igxPrefix fontSet=\"material\" roundShape=\"true\"></igx-avatar>\n * </igx-chip>\n * ```\n */\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that sets the value of `tabindex` attribute. If not provided it will use the element's tabindex if set.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [tabIndex]=\"1\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.tabIndex')\n    @Input()\n    public set tabIndex(value: number) {\n        this._tabIndex = value;\n    }\n\n    public get tabIndex() {\n        if (this._tabIndex !== null) {\n            return this._tabIndex;\n        }\n        return !this.disabled ? 0 : null;\n    }\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * @example\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [(selected)]=\"model.isSelected\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * @example\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * @example\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelectionDone)=\"chipSelectEnd($event)\">\n     * ```\n     */\n    @Output()\n    public onSelectionDone = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective, static: true })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('chipArea', { read: ElementRef, static: true })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('selectContainer', { read: ElementRef, static: true })\n    public selectContainer: ElementRef;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public hideBaseElement = false;\n\n    protected _tabIndex = null;\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        fromEvent(this.selectContainer.nativeElement, 'transitionend')\n            .pipe(filter<TransitionEvent>(event => event.propertyName === 'width'), take(1))\n            .subscribe(event => this.onSelectTransitionDone(event));\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        }\n    }\n\n    public onSelectTransitionDone(event) {\n        if (!!event.target.tagName) {\n            // Trigger onSelectionDone on when `width` property is changed and the target is valid element(not comment).\n            this.onSelectionDone.emit({\n                owner: this,\n                originalEvent: event\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    public keyEvent(event: KeyboardEvent) {\n        this.onChipKeyDown(event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // -----------------------------\n    // Start chip igxDrag behavior\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipDragEnd() {\n        if (this.animateOnRelease) {\n            this.dragDirective.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipGhostCreate() {\n        this.hideBaseElement = this.hideBaseOnDrag;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipGhostDestroy() {\n        this.hideBaseElement = false;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n    }\n    // End chip igxDrag behavior\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // -----------------------------\n    // Start chip igxDrop behavior\n    public onChipDragEnterHandler(event: IDropBaseEventArgs) {\n        if (this.dragDirective === event.drag || !event.drag.data || !event.drag.data.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.drag.data.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipDrop(event: IDropDroppedEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behavior\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n/**\n * The chip area allows you to perform more complex scenarios with chips that require interaction,\n * like dragging, selection, navigation, etc.\n *\n * @igxModule IgxChipsModule\n *\n * @igxTheme igx-chip-theme\n *\n * @igxKeywords chip area, chip\n *\n * @igxGroup display\n *\n * @example\n * ```html\n * <igx-chips-area>\n *    <igx-chip *ngFor=\"let chip of chipList\" [id]=\"chip.id\">\n *        <span>{{chip.text}}</span>\n *    </igx-chip>\n * </igx-chips-area>\n * ```\n */\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * @example\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent, { descendants: true })\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            const selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].elementRef.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].elementRef.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].elementRef.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        let selectedChips = this.chipsList.filter((chip) => chip.selected);\n        if (event.selected && !selectedChips.includes(event.owner)) {\n            selectedChips.push(event.owner);\n        } else if (!event.selected && selectedChips.includes(event.owner)) {\n            selectedChips = selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\nimport { Injectable } from '@angular/core';\n\n/**\n * @hidden\n */\n@Injectable()\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n    public get valueKey() {\n        return this.combo.valueKey !== null && this.combo.valueKey !== undefined ? this.combo.valueKey : null;\n    }\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        const valueKey = this.comboAPI.valueKey;\n        return valueKey !== null ? this.value[valueKey] : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event): void {\n        this.comboAPI.disableTransitions = false;\n        if (!this.isSelectable) { return; }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * The event that is prevented is the click on the checkbox label element.\n     * That is the only visible element that a user can interact with.\n     * The click propagates to the host and the preventDefault is to stop it from\n     * switching focus to the input it's base on.\n     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.\n     */\n    disableCheck(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { ElementRef, EventEmitter, InjectionToken } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\n\nexport const IGX_COMBO_COMPONENT = new InjectionToken<IgxComboBase>('IgxComboComponentToken');\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBaseDirective } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    /** @hidden @internal */\n   public get scrollContainer(): HTMLElement {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.scrollPosition;\n        const scrollHeight = this.virtDir.getScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBaseDirective> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBaseDirective) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBaseDirective[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBaseDirective, b: IgxDropDownItemBaseDirective) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { Inject, Pipe, PipeTransform} from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { DefaultSortingStrategy } from '../data-operations/sorting-strategy';\nimport { IComboFilteringOptions } from './combo.component';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n    public transform(collection: any[], searchValue: any, displayKey: any,\n                    shouldFilter: boolean, filteringOptions: IComboFilteringOptions) {\n        if (!collection) {\n            return [];\n        }\n        if (!searchValue || !shouldFilter) {\n            return collection;\n        } else {\n            const searchTerm = filteringOptions.caseSensitive ? searchValue.trim() : searchValue.toLowerCase().trim();\n            if (displayKey != null) {\n                return collection.filter(e => filteringOptions.caseSensitive ? e[displayKey].includes(searchTerm) :\n                                         e[displayKey].toLowerCase().includes(searchTerm));\n            } else {\n                return collection.filter(e => filteringOptions.caseSensitive ? e.includes(searchTerm) :\n                                         e.toLowerCase().includes(searchTerm));\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any, valueKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const sorted = DataUtil.sort(cloneArray(collection), [{\n            fieldName: groupKey,\n            dir: SortingDirection.Asc,\n            ignoreCase: true,\n            strategy: DefaultSortingStrategy.instance()\n        }]);\n        const data = cloneArray(sorted);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < sorted.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== sorted[i][groupKey]) {\n                currentHeader = sorted[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [valueKey]: currentHeader,\n                    [groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, Type\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, IBaseEventArgs, IBaseCancelableBrowserEventArgs, IBaseCancelableEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule, IgxIconService } from '../icon/public_api';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/public_api';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilteringPipe, IgxComboGroupingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy, AutoPositionStrategy } from '../services/public_api';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';\nimport { IgxInputGroupType, IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';\nimport { caseSensitive } from '@igniteui/material-icons-extended';\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL = IgxInputState.INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID = IgxInputState.VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID = IgxInputState.INVALID\n}\n\n/** The filtering criteria to be applied on data search */\nexport interface IComboFilteringOptions {\n    /** Defines filtering case-sensitivity */\n    caseSensitive: boolean;\n}\n\n/** Event emitted when an igx-combo's selection is changing */\nexport interface IComboSelectionChangeEventArgs extends IBaseCancelableEventArgs {\n    /** An array containing the values that are currently selected */\n    oldSelection: any[];\n    /** An array containing the values that will be selected after this event */\n    newSelection: any[];\n    /** An array containing the values that will be added to the selection (if any) */\n    added: any[];\n    /** An array containing the values that will be removed from the selection (if any) */\n    removed: any[];\n    /** The text that will be displayed in the combo text box */\n    displayText: string;\n    /** The user interaction that triggered the selection change */\n    event?: Event;\n}\n\n/** Event emitted when the igx-combo's search input changes */\nexport interface IComboSearchInputEventArgs extends IBaseCancelableEventArgs {\n    /** The text that has been typed into the search input */\n    searchText: string;\n}\n\nexport interface IComboItemAdditionEvent extends IBaseEventArgs {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\n/**\n * When called with sets A & B, returns A - B (as array);\n * @hidden\n */\nfunction diffInSets(set1: Set<any>, set2: Set<any>): any[] {\n    const results = [];\n    set1.forEach(entry => {\n        if (!set2.has(entry)) {\n            results.push(entry);\n        }\n    });\n    return results;\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxComboComponent, multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    /**\n     * @hidden @internal\n     */\n    public filteringOptions: IComboFilteringOptions = {\n        caseSensitive: false\n    };\n    /** @hidden @internal */\n    public filterValue = '';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private _searchValue = '';\n    private _type = null;\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _remoteSelection = {};\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n    private _overlaySettings: OverlaySettings;\n    private _value = '';\n    private _valid = IgxComboState.INITIAL;\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        private _iconService: IgxIconService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() @Inject(IGX_INPUT_GROUP_TYPE) private _inputGroupType: IgxInputGroupType,\n        @Optional() private _injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective, static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n\n    @Input()\n    public overlaySettings: OverlaySettings = null;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('comboInput', { read: IgxInputDirective, static: true }) public comboInput: IgxInputDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput')\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--empty\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef, static: true })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef, static: true })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    @ViewChild('dropdownItemContainer', { static: true })\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter<IComboSearchInputEventArgs>();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder;\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Defines whether the caseSensitive icon should be shown in the search input\n     *\n     * ```typescript\n     * // get\n     * let myComboShowSearchCaseIcon = this.combo.showSearchCaseIcon;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [showSearchCaseIcon]='true'></igx-combo>\n     * ```\n     */\n\n    @Input()\n    public showSearchCaseIcon = false;\n\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string = null;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this._groupKey = val;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     * <igx-combo [filterable]=\"false\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     * <igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     * <igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     * <igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public get type(): IgxInputGroupType {\n            return this._type || this._inputGroupType || 'box';\n        }\n\n    public set type(val: IgxInputGroupType) {\n        this._type = val;\n    }\n    /**\n     * An @Input property that controls whether the combo's search box\n     * should be focused after the `onOpened` event is called\n     * When `false`, the combo's list item container will be focused instead\n     */\n    @Input()\n    public autoFocusSearch = true;\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     */\n    public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n    /**\n     * Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n     */\n    public set valid(valid: IgxComboState) {\n        this._valid = valid;\n        this.comboInput.valid = IgxInputState[IgxComboState[valid]];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get searchValue(): string {\n        return this._searchValue;\n    }\n\n    public set searchValue(val: string) {\n        this.filterValue = val;\n        this._searchValue = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        if (!this.disabled) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n     */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n     */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        if (event !== undefined) {\n            const args: IComboSearchInputEventArgs = {\n                searchText: event,\n                owner: this,\n                cancel: false\n            };\n            this.onSearchInput.emit(args);\n            if (args.cancel) {\n                this.filterValue = null;\n            }\n        }\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.displayKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */\n    private registerRemoteEntries(ids: any[], add = true) {\n        if (add) {\n            const selection = this.getValueDisplayPairs(ids);\n            for (const entry of selection) {\n                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];\n            }\n        } else {\n            for (const entry of ids) {\n                delete this._remoteSelection[entry];\n            }\n        }\n    }\n\n    /**\n     * For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`\n     */\n    private getValueDisplayPairs(ids: any[]) {\n        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => {\n            return {\n                [this.valueKey]: e[this.valueKey],\n                [this.displayKey]: e[this.displayKey]\n            };\n        });\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, item);\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection, owner: this\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.virtDir.scrollTo(0);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (!this.collapsed || this.inputGroup.isFocused) {\n                this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n            } else {\n                this.valid = this.ngControl.valid ? IgxComboState.INITIAL : IgxComboState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl, null);\n        const targetElement = this.elementRef.nativeElement;\n        this._overlaySettings = {\n            target: targetElement,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(),\n            modal: false,\n            closeOnOutsideClick: true,\n            excludeFromOutsideClick: [targetElement as HTMLElement]\n        };\n        this.selection.set(this.id, new Set());\n        this._iconService.addSvgIconFromText(caseSensitive.name, caseSensitive.value, 'imx-icons');\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n            this.manageRequiredAsterisk();\n            this.cdr.detectChanges();\n        }\n        this.virtDir.onChunkPreload.pipe(takeUntil(this.destroy$)).subscribe((e: IForOfState) => {\n            const eventArgs: IForOfState = Object.assign({}, e, { owner: this });\n            this.onDataPreLoad.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any[]): void {\n        const selection = Array.isArray(value) ? value : [];\n        const oldSelection = this.selectedItems();\n        this.selection.select_items(this.id, selection, true);\n        this._value = this.createDisplayText(this.selectedItems(), oldSelection);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        if (this.disabled) {\n            return;\n        }\n        this.deselectAllItems(true, event);\n        if (this.collapsed) {\n            this.getEditElement().focus();\n        } else {\n            this.focusSearchInput(true);\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     * ```html\n     * <button (click)=\"combo.toggle()\">Toggle Combo</button>\n     * <igx-combo #combo></igx-combo>\n     * ```\n     */\n    public toggle(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.toggle(overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     * ```html\n     * <button (click)=\"combo.open()\">Open Combo</button>\n     * <igx-combo #combo></igx-combo>\n     * ```\n     */\n    public open(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.open(overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     * ```html\n     * <button (click)=\"combo.close()\">Close Combo</button>\n     * <igx-combo #combo></igx-combo>\n     * ```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects a single item\n     * @param itemID the itemID of the specific item\n     * @param select If the item should be selected (true) or deselected (false)\n     *\n     * Without specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = null;\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem(items[0], true);\n     * ```\n     * With specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = 'field';\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (select) {\n            this.selectItems([itemID], false, event);\n        } else {\n            this.deselectItems([itemID], event);\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const removed = diffInSets(this.selection.get(this.id), newSelection);\n        const added = diffInSets(newSelection, this.selection.get(this.id));\n        const newSelectionAsArray = Array.from(newSelection);\n        const oldSelectionAsArray = Array.from(this.selection.get(this.id) || []);\n        const displayText = this.createDisplayText(newSelectionAsArray, oldSelectionAsArray);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionAsArray,\n            oldSelection: oldSelectionAsArray,\n            added,\n            removed,\n            event,\n            owner: this,\n            displayText,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            if (displayText !== args.displayText) {\n                this._value = args.displayText;\n            } else {\n                this._value = this.createDisplayText(args.newSelection, args.oldSelection);\n            }\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n\n    /** Returns a string that should be populated in the combo's text box */\n    private concatDisplayText(selection: any[]): string {\n        const value = this.displayKey !== null && this.displayKey !== undefined ?\n            this.convertKeysToItems(selection).map(entry => entry[this.displayKey]).join(', ') :\n            selection.join(', ');\n        return value;\n    }\n\n    /**\n     * Constructs the combo display value\n     * If remote, caches the key displayText\n     * If not, just combine the object.displayKeys\n     */\n    private createDisplayText(newSelection: any[], oldSelection: any[]) {\n        let value = '';\n        if (this.isRemote) {\n            if (newSelection.length) {\n                const removedItems = oldSelection.filter(e => newSelection.indexOf(e) < 0);\n                const addedItems = newSelection.filter(e => oldSelection.indexOf(e) < 0);\n                this.registerRemoteEntries(addedItems);\n                this.registerRemoteEntries(removedItems, false);\n                value = Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');\n            } else {\n                // If new selection is empty, clear all items\n                this.registerRemoteEntries(oldSelection, false);\n            }\n        } else {\n            value = this.concatDisplayText(newSelection);\n        }\n        return value;\n    }\n\n    /** if there is a valueKey - map the keys to data items, else - just return the keys */\n    private convertKeysToItems(keys: any[]) {\n        if (this.comboAPI.valueKey === null) {\n            return keys;\n        }\n        // map keys vs. filter data to retain the order of the selected items\n        return keys.map(key => this.data.find(entry => entry[this.valueKey] === key)).filter(e => e !== undefined);\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: IBaseCancelableBrowserEventArgs) {\n        const eventArgs: IBaseCancelableBrowserEventArgs = Object.assign({}, event, { owner: this });\n        this.onOpening.emit(eventArgs);\n        event.cancel = eventArgs.cancel;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n\n        // Disabling focus of the search input should happen only when drop down opens.\n        // During keyboard navigation input should receive focus, even the autoFocusSearch is disabled.\n        // That is why in such cases focusing of the dropdownContainer happens outside focusSearchInput method.\n        if (this.autoFocusSearch) {\n            this.focusSearchInput(true);\n        } else {\n            this.dropdownContainer.nativeElement.focus();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event: IBaseCancelableBrowserEventArgs) {\n        const eventArgs: IBaseCancelableBrowserEventArgs = Object.assign({}, event, { owner: this });\n        this.onClosing.emit(eventArgs);\n        event.cancel = eventArgs.cancel;\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public toggleCaseSensitive() {\n        this.filteringOptions = { caseSensitive: !this.filteringOptions.caseSensitive };\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule]\n})\nexport class IgxComboModule { }\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimEmptyPlaceholders(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        /**\n         * TODO(D.P.): This plugs into the mask, but constantly received display strings it can't handle at all\n         * Those are almost immediately overridden by the pickers onFocus handling anyway; Refactor ASAP\n         */\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return (this._datePicker as any)._getEditorDate(this._datePicker.value);\n                // return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar/public_api';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar', { static: true })\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n     */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n     * Emits today selection event for the calendar.\n     */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    OnInit,\n    AfterViewInit,\n    Injector,\n    AfterViewChecked,\n    ContentChildren,\n    QueryList,\n    Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl, NG_VALIDATORS, ValidationErrors } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/public_api';\nimport { IgxIconModule } from '../icon/public_api';\nimport {\n    IgxInputGroupModule,\n    IgxInputDirective,\n    IgxInputGroupComponent,\n    IgxInputState,\n    IgxLabelDirective\n} from '../input-group/public_api';\nimport { Subject, fromEvent, animationFrameScheduler, interval, Subscription } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    OverlayCancelableEventArgs\n} from '../services/public_api';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, isIE, isEqual, IBaseEventArgs, mkenum, IBaseCancelableBrowserEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport const PredefinedFormatOptions = mkenum({\n    ShortDate: 'shortDate',\n    MediumDate: 'mediumDate',\n    LongDate: 'longDate',\n    FullDate: 'fullDate'\n});\nexport type PredefinedFormatOptions = (typeof PredefinedFormatOptions)[keyof typeof PredefinedFormatOptions];\n\nconst noop = () => { };\n\n/**\n * Date Picker displays a popup calendar that lets users select a single date.\n * @igxModule IgxDatePickerModule\n * @igxTheme igx-calendar-theme, igx-icon-theme\n * @igxGroup Scheduling\n * @igxKeywords  datepicker, calendar, schedule, date\n * @example\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor,\n    EditorProvider, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {\n    /**\n     * Gets/Sets the `IgxDatePickerComponent` label.\n     * @remarks\n     * The default label is 'Date'.\n     * @example\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     * @deprecated Use igxLabel inside the date picker to change the label:\n     * ````html\n     * <igx-date-picker>\n     *      <label igxLabel>Custom label</label>\n     * </igx-date-picker>\n     * ````\n     * to set a custom label.\n     */\n    @DeprecateProperty(`Use igxLabel inside the date picker to change the label:\n    <igx-date-picker>\n        <label igxLabel>Custom label</label>\n    </igx-date-picker> `)\n    @Input()\n    public label = 'Date';\n\n    /**\n     * Gets/Sets the `IgxDatePickerComponent` label visibility.\n     * @remarks\n     * By default the visibility is set to true.\n     * @example\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     * Gets/Sets the locales.\n     * @remarks Default locale is en.\n     * @example\n     * ```html\n     * <igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     * ```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     * Gets/Sets the default template editor's tabindex.\n     * @example\n     * ```html\n     * <igx-date-picker editorTabIndex=\"1\"></igx-date-picker>\n     * ```\n     */\n    @Input() public editorTabIndex: number;\n\n    /**\n     * Gets/Sets on which day the week starts.\n     * @example\n     * ```html\n     * <igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     * Gets the format options of the `IgxDatePickerComponent`.\n     * @example\n     * ```typescript\n     * let formatOptions = this.datePicker.formatOptions;\n     * ```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Gets/Sets whether the inactive dates will be hidden.\n     * @remarks\n     * Apllies to dates that are out of the current month.\n     * Default value is `false`.\n     * @example\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    @Input()\n    public hideOutsideDays: boolean;\n\n    /**\n     * Gets/Sets the number of month views displayed.\n     * @remarks\n     * Default value is `1`.\n     * @example\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    @Input()\n    public monthsViewNumber = 1;\n\n    /**\n     * Show/hide week numbers\n     *\n     * @exmpale\n     * ```html\n     * <igx-date-picker [showWeekNumbers]=\"true\"></igx-date-picker>\n     * ``\n     */\n    @Input()\n    public showWeekNumbers: boolean;\n\n    /**\n     * Sets the format options of the `IgxDatePickerComponent`.\n     * @example\n     * ```typescript\n     * this.datePicker.formatOptions = {  day: \"numeric\",  month: \"long\", weekday: \"long\", year: \"numeric\"};\n     * ```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     * Gets/Sets the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     * @example\n     * ```typescript\n     * let format = this.datePicker.format;\n     * this.datePicker.format = 'yyyy-M-d';\n     * ```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     * Gets/Sets the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *  @example\n     * ```typescript\n     * let mask = this.datePicker.mask;\n     * ```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     * Gets/Sets the format views of the `IgxDatePickerComponent`.\n     * @example\n     * ```typescript\n     * let formatViews = this.datePicker.formatViews;\n     *  this.datePicker.formatViews = {day:false, month: false, year:false};\n     * ```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets/Sets the disabled dates descriptors.\n     * @example\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n        this._onValidatorChange();\n    }\n\n    /**\n     * Gets/Sets the special dates descriptors.\n     * @example\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Gets/Sets the modal overlay settings.\n     */\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    /**\n     * Gets/Sets the drop-down overlay settings.\n     */\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlaySettings = value;\n    }\n\n    /**\n     * Gets the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *  @example\n     * ```typescript\n     * let selectedDate = this.datePicker.displayData;\n     * ```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /** @hidden @internal */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    /** @hidden @internal */\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(\n        IgxOverlayService) private _overlayService: IgxOverlayService,\n        public element: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _moduleRef: NgModuleRef<any>,\n        private _injector: Injector,\n        private _renderer: Renderer2) {\n    }\n\n\n    /**\n     * Gets the input group template.\n     * @example\n     * ```typescript\n     * let template = this.template();\n     * ```\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: () => this.openDialog()\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Gets/Sets the selected date.\n     *  @example\n     * ```html\n     * <igx-date-picker [value]=\"date\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Gets/Sets the value of `id` attribute.\n     * @remarks If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     * Gets/Sets a custom formatter function on the selected or passed date.\n     * @example\n     * ```html\n     * <igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     * Enables/Disables the `IgxDatePickerComponent`.\n     *  @example\n     * ```html\n     * <igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     * Gets/Sets the orientation of the `IgxDatePickerComponent` header.\n     *  @example\n     * ```html\n     * <igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Gets/Sets the today button's label.\n     *  @example\n     * ```html\n     * <igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     * *Gets/Sets the cancel button's label.\n     * @example\n     * ```html\n     * <igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     * Gets/Sets the interaction mode - dialog or drop down.\n     *  @example\n     * ```html\n     * <igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Gets/Sets whether date should spin continuously or stop when min/max is reached.\n     *  @example\n     * ```html\n     * <igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Gets/Sets the container used for the popup element.\n     * @remarks\n     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     * @example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * Emitted when the `IgxDatePickerComponent` calendar is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * Emitted after the `IgxDatePickerComponent` is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * Emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted when selection is made in the calendar.\n     *  @example\n     * ```html\n     * <igx-date-picker (onSelection)=\"selection($event)\"></igx-date-picker>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * Emitted when date picker value is changed.\n     * @example\n     * ```html\n     * <igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n     * ```\n     */\n    @Output()\n    public valueChange = new EventEmitter<Date>();\n\n    /**\n     * Emitted when the user types/spins to a disabled date in the date-picker editor.\n     *  @example\n     * ```html\n     * <igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n     * ```\n     */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n     * Emitted when the user types/spins invalid date in the date-picker editor.\n     *  @example\n     * ```html\n     * <igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef, static: true })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef, static: true })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden @internal\n     */\n    @ViewChild(IgxInputGroupComponent)\n    protected _inputGroup: IgxInputGroupComponent;\n\n    @ContentChild(IgxInputGroupComponent)\n    protected _inputGroupUserTemplate: IgxInputGroupComponent;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _inputElementRef: ElementRef;\n\n    @ContentChild(IgxInputDirective, { read: ElementRef })\n    protected _inputUserTemplateElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective)\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChildren(IgxInputDirective, { descendants: true })\n    private _inputDirectiveUserTemplates: QueryList<IgxInputDirective>;\n\n    @ViewChild(IgxLabelDirective)\n    protected _labelDirective: IgxLabelDirective;\n\n    /** @hidden @internal */\n    @ContentChild(IgxLabelDirective)\n    public _labelDirectiveUserTemplate: IgxLabelDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    /** @hidden @internal */\n    public calendar: IgxCalendarComponent;\n    /** @hidden @internal */\n    public hasHeader = true;\n    /** @hidden @internal */\n    public collapsed = true;\n    /** @hidden @internal */\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    /** @hidden @internal */\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    /** @hidden @internal */\n    public dateFormatParts = [];\n    /** @hidden @internal */\n    public rawDateString: string;\n    /** @hidden @internal */\n    public inputMask: string;\n    /** @hidden @internal */\n    public isEmpty = true;\n    /** @hidden @internal */\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _templateInputBlur$: Subscription;\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _defaultDropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n    private _onValidatorChange = () => { };\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        this._value = value;\n        // TODO: do we need next call\n        this._cdr.markForCheck();\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    /** @hidden @internal */\n    public registerOnValidatorChange(fn: any) {\n        this._onValidatorChange = fn;\n    }\n\n    /** @hidden @internal */\n    public validate(): ValidationErrors | null {\n        if (!!this.value && this.disabledDates && isDateInRanges(this.value, this.disabledDates)) {\n            return { dateIsDisabled: true };\n        }\n        return null;\n    }\n    //#endregion\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /** @hidden */\n    public getEditElement() {\n        const inputDirectiveElementRef = this._inputElementRef || this._inputUserTemplateElementRef;\n        return (inputDirectiveElementRef) ? inputDirectiveElementRef.nativeElement : null;\n    }\n\n    /** @hidden @internal */\n    public get inputGroupElement(): HTMLElement {\n        return this.inputGroup?.element.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public get inputGroup(): IgxInputGroupComponent {\n        return this._inputGroup || this._inputGroupUserTemplate || null;\n    }\n\n    /** @hidden @internal */\n    public get inputDirective(): IgxInputDirective {\n        return this._inputDirective || this._inputDirectiveUserTemplates.first || null;\n    }\n\n    /** @hidden @internal */\n    public get labelDirective(): IgxLabelDirective {\n        return this._labelDirective || this._labelDirectiveUserTemplate || null;\n    }\n\n    /** @hidden @internal */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._defaultDropDownOverlaySettings = {\n            target: this.inputGroupElement,\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            closeOnEscape: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onOpened();\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    // outside click\n                    this._updateValidityOnBlur();\n                }\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n\n        this._ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /** @hidden @internal */\n    public ngAfterViewInit() {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n\n        if (this._ngControl) {\n            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this._inputDirectiveUserTemplates.changes.subscribe(() => {\n            this.attachTemplateBlur();\n        });\n        this.attachTemplateBlur();\n    }\n\n    private attachTemplateBlur() {\n        if (this._templateInputBlur$) {\n            this._templateInputBlur$.unsubscribe();\n        }\n\n        if (this._inputDirectiveUserTemplates.first) {\n            const directive = this._inputDirectiveUserTemplates.first;\n            this._templateInputBlur$ = fromEvent(directive.nativeElement, 'blur').pipe(\n                takeUntil(this._destroy$)).subscribe((res) => {\n                    this.rawDateString = (res.target as HTMLInputElement).value;\n                    this.onBlur(res, false);\n                });\n            // TODO: Refactor custom template handling.\n            // Revise blur handling when custom template is passed\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // If one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of date picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n        // TODO: persist validation state when dynamically changing 'dropdown' to 'dialog' ot vice versa.\n        // For reference -> it is currently persisted if a user template is passed (as template is not recreated)\n\n        if (this.labelDirective) {\n            this._renderer.setAttribute(this.inputDirective.nativeElement, 'aria-labelledby', this.labelDirective.id);\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this.inputDirective && this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.inputDirective.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.inputDirective.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n        }\n    }\n\n    /** @hidden @internal */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * Selects today's date from calendar.\n     *  @remarks\n     * Changes the input field value, @calendar.viewDate and @calendar.value.\n     *  @example\n     * ```typescript\n     * this.datePicker.triggerTodaySelection();\n     * ```\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection.\n     * @remarks\n     * Calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     * @example\n     * ```typescript\n     * this.datePicker.selectDate(this.date);\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     */\n    public selectDate(date: Date): void {\n        const oldValue = this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value);\n        this.onSelection.emit(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     * @example\n     * ```typescript\n     * this.datePicker.deselectDate();\n     * ```\n     */\n    public deselectDate(): void {\n        const oldValue = this.value;\n        this.value = null;\n        this.emitValueChangeEvent(oldValue, this.value);\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n    }\n\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * @example\n     * ```typescript\n     * this.datePicker.openDialog(target);\n     * ```\n     */\n    public openDialog(): void {\n        if (!this.collapsed || this.disabled) {\n            return;\n        }\n\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                const target = this.inputGroupElement;\n                if (target) {\n                    this.dropDownOverlaySettings.target = target;\n                }\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent,\n                    this.dropDownOverlaySettings, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden @internal\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden @internal\n     */\n    public clear(): void {\n        if (!this.disabled) {\n            this.isEmpty = true;\n            this.invalidDate = '';\n            this.deselectDate();\n            this._setCursorPosition(0);\n        }\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden @internal\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n        const oldValue = this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value);\n        this.calendar.viewDate = date;\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /** @hidden @internal */\n    public onOpenClick(event: MouseEvent) {\n        event.stopPropagation();\n        this.openDialog();\n    }\n\n    /** @hidden @internal */\n    public onBlur(event, calcDate = true): void {\n        this._isInEditMode = false;\n        if (this.mode === InteractionMode.DropDown && calcDate) {\n            this.calculateDate(event.target.value, event.type);\n        }\n\n        if (this.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /** @hidden @internal */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog();\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @hidden @internal */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /** @hidden @internal */\n    public onInput(event) {\n        /**\n         * Fix for #8165 until refactoring (#6483).\n         * The IgxDateTimeEditor will be used to handle all inputs, i.e. this handler will be removed.\n         * It extends the IgxMaskDirective which contains logic that handles this issue.\n         */\n        if (isIE() && !this._isInEditMode && !this.inputGroup.isFocused) { return; }\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private emitValueChangeEvent(oldValue: Date, newValue: Date) {\n        if (!isEqual(oldValue, newValue)) {\n            this.valueChange.emit(newValue);\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                    const oldValue = this.value;\n                    this.value = newValue;\n\n                    this.emitValueChangeEvent(oldValue, this.value);\n                    this.invalidDate = '';\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event: OverlayCancelableEventArgs) {\n        this._initializeCalendarContainer(event.componentRef.instance as IgxCalendarContainerComponent);\n        this.collapsed = false;\n    }\n\n    private _onOpened(): void {\n        this.onOpened.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.hideOutsideDays = this.hideOutsideDays;\n        this.calendar.monthsViewNumber = this.monthsViewNumber;\n        this.calendar.showWeekNumbers = this.showWeekNumbers;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    public _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this.inputDirective;\n        if (input && this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDatePickerComponent,\n        IgxCalendarContainerComponent,\n        IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective,\n        DatePickerDisplayValuePipe,\n        DatePickerInputValuePipe\n    ],\n    entryComponents: [\n        IgxCalendarContainerComponent\n    ],\n    exports: [\n        IgxDatePickerComponent,\n        IgxDatePickerTemplateDirective,\n        IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe,\n        DatePickerInputValuePipe\n    ],\n    imports: [\n        CommonModule,\n        IgxIconModule,\n        IgxInputGroupModule,\n        IgxCalendarModule,\n        IgxButtonModule,\n        IgxRippleModule,\n        IgxMaskModule,\n        IgxTextSelectionModule\n    ]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services/public_api';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\"\n     *  leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\">\n     * </igx-dialog>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    /**\n     * Controls whether the dialog should be shown as modal. Defaults to `true`\n     * ```html\n     * <igx-dialog [isModal]=\"false\" ></igx-dialog>\n     * ```\n     */\n    @Input()\n    public get isModal() {\n        return this._isModal;\n    }\n\n    public set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n     * Controls whether the dialog should close when `Esc` key is pressed. Defaults to `true`\n     * ```html\n     * <igx-dialog [closeOnEscape]=\"false\" ></igx-dialog>\n     * ```\n     */\n    @Input()\n    public get closeOnEscape() {\n        return this._closeOnEscape;\n    }\n\n    public set closeOnEscape(val: boolean) {\n        this._overlayDefaultSettings.closeOnEscape = val;\n        this._closeOnEscape = val;\n    }\n\n    /**\n     * An @Input property controlling the `title` of the dialog.\n     * ```html\n     * <igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     * ```html\n     * <igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     * ```html\n     * <igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     * ```html\n     * <igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     * ```html\n     * <igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     * ```html\n     * <igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     * ```html\n     * <igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     * ```html\n     * <igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     * ```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     * ```html\n     * <igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     * rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     * </igx-dialog>\n     * ```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * Get the position and animation settings used by the dialog.\n     * ```typescript\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     * let currentPosition: PositionSettings = this.alert.positionSettings\n     * ```\n     */\n    @Input()\n    public get positionSettings(): PositionSettings {\n        return this._positionSettings;\n    }\n\n    /**\n     * Set the position and animation settings used by the dialog.\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     *  public newPositionSettings: PositionSettings = {\n     *      openAnimation: useAnimation(slideInTop, { params: { duration: '2000ms' } }),\n     *      closeAnimation: useAnimation(slideOutBottom, { params: { duration: '2000ms'} }),\n     *      horizontalDirection: HorizontalAlignment.Left,\n     *      verticalDirection: VerticalAlignment.Middle,\n     *      horizontalStartPoint: HorizontalAlignment.Left,\n     *      verticalStartPoint: VerticalAlignment.Middle,\n     *      minSize: { height: 100, width: 100 }\n     *  };\n     * this.alert.positionSettings = this.newPositionSettings;\n     * ```\n     */\n    public set positionSettings(settings: PositionSettings) {\n        this._positionSettings = settings;\n        this._overlayDefaultSettings.positionStrategy = new GlobalPositionStrategy(this._positionSettings);\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     * ```html\n     * <igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     * </igx-dialog>\n     * ```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     * ```html\n     * <igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     * </igx-dialog>\n     * ```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     * ```html\n     * <igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     * </igx-dialog>\n     * ```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     * <igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     * #dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     * rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     * </igx-dialog>\n     * ```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @Output() public isOpenChange = new EventEmitter<boolean>();\n\n    private _positionSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _closeOnEscape = true;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     * ```typescript\n     * @ViewChild(\"MyDialog\")\n     * public dialog: IgxDialogComponent;\n     * ngAfterViewInit() {\n     *     let dialogState = this.dialog.state;\n     * }\n     * ```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * State of the dialog.\n     *\n     * ```typescript\n     * // get\n     * let dialogIsOpen = this.dialog.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-dialog [isOpen]='false'></igx-dialog>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-dialog [(isOpen)]='model.isOpen'></igx-dialog>\n     * ```\n     */\n    @Input()\n    public get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n    public set isOpen(value: boolean) {\n\n        this.isOpenChange.emit(value);\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     * Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     * ```typescript\n     * @ViewChild(\"MyDialog\")\n     * public dialog: IgxDialogComponent;\n     * ngAfterViewInit() {\n     *     let dialogRole = this.dialog.role;\n     * }\n     *  ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     * Returns the value of the title id.\n     * ```typescript\n     *  @ViewChild(\"MyDialog\")\n     * public dialog: IgxDialogComponent;\n     * ngAfterViewInit() {\n     *     let dialogTitle = this.dialog.titleId;\n     * }\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._positionSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnEscape: this._closeOnEscape,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     * ```html\n     * <button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     * <igx-dialog #dialog></igx-dialog>\n     * ```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     * A method that that closes the dialog.\n     *  @memberOf {@link IgxDialogComponent}\n     * ```html\n     * <button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     * <igx-dialog #dialog></igx-dialog>\n     * ```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     * ```html\n     * <button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     * <igx-dialog #dialog></igx-dialog>\n     * ```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n}\n\nexport interface IDialogEventArgs extends IBaseEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { IBaseEventArgs } from '../../core/utils';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n     * The embedded views cache. Collection is key-value paired.\n     * Key is the template id, value is the embedded view for the related template.\n     */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    @Output()\n    public onBeforeViewDetach = new EventEmitter<IViewChangeEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        const prevIndex = this._viewRef ? this._viewContainerRef.indexOf(this._viewRef) : -1;\n        // detach old and create new\n        if (prevIndex !== -1) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(prevIndex);\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        } else {\n            this._updateExistingContext(this.igxTemplateOutletContext);\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        if (this._viewContainerRef.length > 0) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs extends IBaseEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxProgressBarGradient]'\n})\nexport class IgxProgressBarGradientDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { Injectable, Inject, InjectionToken, inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @hidden\n */\nexport type Direction = 'ltr' | 'rtl';\n\n/**\n * Injection token is used to inject the document into Directionality\n * which factory could be faked for testing purposes.\n *\n * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule\n * allows override of the default providers, directive, pipes, modules of the test injector\n * which causes errors.\n *\n * @hidden\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY\n});\n\n/**\n * @hidden\n */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n    return inject(DOCUMENT);\n}\n\n/**\n * @hidden\n *\n * Bidirectional service that extracts the value of the direction attribute on the body or html elements.\n *\n * The dir attribute over the body element takes precedence.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class IgxDirectionality {\n    private _dir: Direction;\n    private _document: Document;\n\n    public get value(): Direction {\n        return this._dir;\n    }\n\n    public get document() {\n        return this._document;\n    }\n\n    public get rtl() {\n        return this._dir === 'rtl';\n    }\n\n    constructor(@Inject(DIR_DOCUMENT) document) {\n        this._document = <Document>document;\n        const bodyDir = this._document.body ? this._document.body.dir : null;\n        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;\n        const extractedDir = bodyDir || htmlDir;\n        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    AfterContentInit,\n    Directive\n} from '@angular/core';\nimport {\n    IgxProcessBarTextTemplateDirective,\n    IgxProgressBarGradientDirective,\n} from './progressbar.common';\nimport { IBaseEventArgs, mkenum } from '../core/utils';\nimport { IgxDirectionality } from '../services/direction/directionality';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport const IgxTextAlign = mkenum({\n    START: 'start',\n    CENTER: 'center',\n    END: 'end'\n});\nexport type IgxTextAlign = (typeof IgxTextAlign)[keyof typeof IgxTextAlign];\n\nexport const IgxProgressType = mkenum({\n    ERROR: 'error',\n    INFO: 'info',\n    WARNING: 'warning',\n    SUCCESS: 'success'\n});\nexport type IgxProgressType = (typeof IgxProgressType)[keyof typeof IgxProgressType];\n\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\n/**\n * @hidden\n */\n@Directive()\nexport abstract class BaseProgressDirective {\n    private requestAnimationId: number = undefined;\n\n    protected _initValue = 0;\n    protected _contentInit = false;\n    protected _valueInPercent = MIN_VALUE;\n    protected _max = 100;\n    protected _value = MIN_VALUE;\n    protected _newVal = MIN_VALUE;\n    protected _animate = true;\n    protected _step;\n\n    /**\n     * An event, which is triggered after a progress is changed.\n     * ```typescript\n     * public progressChange(event) {\n     *     alert(\"Progress made!\");\n     * }\n     *  //...\n     * ```\n     * ```html\n     * <igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     * <igx-linear-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-linear-bar>\n     * ```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * Returns the value which update the progress indicator of the `progress bar`.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;\n     * public stepValue(event) {\n     *     let step = this.progressBar.step;\n     *     alert(step);\n     * }\n     * ```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     * Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     * ```html\n     * <igx-linear-bar [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     * <igx-circular-bar [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     * ```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     * Animating the progress. By default it is set to true.\n     * ```html\n     * <igx-linear-bar [animate]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * <igx-circular-bar [animate]=\"false\" [max]=\"200\" [value]=\"50\"></igx-circular-bar>\n     * ```\n     */\n    @Input()\n    public set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     * Returns whether the `progress bar` has animation true/false.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;\n     * public animationStatus(event) {\n     *     let animationStatus = this.progressBar.animate;\n     *     alert(animationStatus);\n     * }\n     * ```\n     */\n    public get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     * Set maximum value that can be passed. By default it is set to 100.\n     * ```html\n     * <igx-linear-bar [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     * <igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     * ```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     * Returns the the maximum progress value of the `progress bar`.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent | IgxCircularBarComponent;\n     * public maxValue(event) {\n     *     let max = this.progressBar.max;\n     *     alert(max);\n     * }\n     * ```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     * Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *     public setValue(event){\n     *     this.progressBar.valueInPercent = 56;\n     * }\n     * ```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     * public valuePercent(event){\n     *     let percentValue = this.progressBar.valueInPercent;\n     *     alert(percentValue);\n     * }\n     * ```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    protected triggerProgressTransition(oldVal, newVal) {\n        if (oldVal === newVal) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: newVal,\n            previousValue: oldVal\n        };\n\n        const stepDirection = this.directionFlow(oldVal, newVal);\n        if (this._animate) {\n            this.runAnimation(newVal, stepDirection);\n        } else {\n            this.updateProgressDirectly(newVal);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value = valueInRange(this._value, this._max) + step;\n        const passedValue = toPercent(val, this._max);\n        const progressValue = toPercent(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = valueInRange(val, this._max);\n        this.valueInPercent = toPercent(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number): number {\n        return currentValue < prevValue ? this.step : -this.step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = valueInRange(val, this._max);\n        this.valueInPercent = toPercent(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\nlet NEXT_GRADIENT_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgressDirective implements AfterContentInit {\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     * Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     * ```html\n     * <igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     * Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     * ```html\n     * <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     * <igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     * Set the position that defines where the text is aligned.\n     * Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     * ```typescript\n     * public positionCenter: IgxTextAlign;\n     * public ngOnInit() {\n     *     this.positionCenter = IgxTextAlign.CENTER;\n     * }\n     *  //...\n     * ```\n     *  ```html\n     * <igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     * Set the text to be visible. By default it is set to true.\n     * ```html\n     *  <igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     * ```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     * ```html\n     *  <igx-linear-bar type=\"error\" [textTop]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     * Set a custom text that is displayed according to the defined position.\n     *  ```html\n     * <igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     * ```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     * Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `error`.\n     * ```html\n     * <igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"error\"></igx-linear-bar>\n     * ```\n     */\n    @Input()\n    public type = 'default';\n\n   /**\n    * Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n    * ```typescript\n    *  @ViewChild(\"MyProgressBar\")\n    * public progressBar: IgxLinearProgressBarComponent;\n    * public getValue(event) {\n    *     let value = this.progressBar.value;\n    *     alert(value);\n    * }\n    * ```\n    */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     * Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     * ```html\n     * <igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    set value(val) {\n        const valInRange = valueInRange(val, this.max);\n        if (isNaN(valInRange) || this._value === val || this.indeterminate) {\n            return;\n        }\n\n        if (this._contentInit) {\n            this.triggerProgressTransition(this._value, valInRange);\n        } else {\n            this._initValue = valInRange;\n        }\n\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get error() {\n        return this.type === IgxProgressType.ERROR;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n\n    public ngAfterContentInit() {\n        this.triggerProgressTransition(MIN_VALUE, this._initValue);\n        this._contentInit = true;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgressDirective implements AfterViewInit, AfterContentInit {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     * @hidden\n     */\n    public gradientId = `igx-circular-gradient-${NEXT_GRADIENT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     * ```html\n     * <igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     * ```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     * Sets the text visibility. By default it is set to true.\n     * ```html\n     * <igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     * ```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     * ```html\n     * <igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     * ```\n     * ```typescript\n     * let text = this.circularBar.text;\n     * ```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    @ContentChild(IgxProgressBarGradientDirective, { read: IgxProgressBarGradientDirective })\n    public gradientTemplate: IgxProgressBarGradientDirective;\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n     * Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     * ```typescript\n     *  @ViewChild(\"MyProgressBar\")\n     * public progressBar: IgxCircularProgressBarComponent;\n     * public getValue(event) {\n     *     let value = this.progressBar.value;\n     *     alert(value);\n     * }\n     * ```\n     * ```html\n     * <button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     * ```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     * Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     * ```html\n     * <igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     * ```\n     */\n    set value(val: number) {\n        const valInRange = valueInRange(val, this.max);\n        if (isNaN(valInRange) || this._value === val || this.indeterminate) {\n            return;\n        }\n\n        if (this._contentInit) {\n            this.triggerProgressTransition(this._value, valInRange);\n        } else {\n            this._initValue = valInRange;\n        }\n\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle', { static: true })\n    private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2, private _directionality: IgxDirectionality) {\n        super();\n    }\n\n    public ngAfterContentInit() {\n        this.triggerProgressTransition(MIN_VALUE, this._initValue);\n        this._contentInit = true;\n    }\n\n    public ngAfterViewInit() {\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke',\n            `url(#${this.gradientId})`\n        );\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n     */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._directionality.rtl ?\n            this._circumference + (percentage * this._circumference / 100) :\n            this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function valueInRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function toPercent(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxLinearProgressBarComponent,\n        IgxCircularProgressBarComponent,\n        IgxProcessBarTextTemplateDirective,\n        IgxProgressBarGradientDirective,\n    ],\n    exports: [\n        IgxLinearProgressBarComponent,\n        IgxCircularProgressBarComponent,\n        IgxProcessBarTextTemplateDirective,\n        IgxProgressBarGradientDirective,\n    ],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule { }\n\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, DoCheck, Input } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<span class=\"igx-drop-down__inner\"><ng-content></ng-content></span>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    private _text: any;\n\n    /**\n     * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.\n     *\n     * ```typescript\n     *  //get\n     *  let mySelectedItem = this.dropDown.selectedItem;\n     *  let selectedItemText = mySelectedItem.text;\n     * ```\n     *\n     * ```html\n     * // set\n     * <igx-select-item [text]=\"'London'\"></igx-select-item>\n     * ```\n     */\n    @Input()\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n        this._text = text;\n    }\n\n    /** @hidden @internal */\n    public get itemText() {\n        if (this._text !== undefined) {\n            return this._text;\n        }\n        // If text @Input is undefined, try extract a meaningful item text out of the item template\n        return this.elementRef.nativeElement.textContent.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Util, ConnectedFit, Point  } from '../services/overlay/utilities';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectBase } from './select.common';\nimport { isIE } from '../core/utils';\nimport { BaseFitPositionStrategy } from '../services/overlay/position/base-fit-position-strategy';\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends BaseFitPositionStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectBase, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    // Global variables required for cases of !initialCall (page scroll/overlay repositionAll)\n    private global_yOffset = 0;\n    private global_xOffset = 0;\n    private global_styles: SelectStyles = {};\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean, target?: Point | HTMLElement): void {\n        this.select.scrollContainer.scrollTop = 0;\n        const targetElement = target || this.settings.target;\n        const rects = super.calculateElementRectangles(contentElement, targetElement);\n        // selectFit obj, to be used for both cases of initialCall and !initialCall(page scroll/overlay repositionAll)\n        const selectFit: SelectFit = {\n            verticalOffset: this.global_yOffset,\n            horizontalOffset: this.global_xOffset,\n            targetRect: rects.targetRect,\n            contentElementRect: rects.elementRect,\n            styles: this.global_styles,\n            scrollContainer: this.select.scrollContainer,\n            scrollContainerRect: this.select.scrollContainer.getBoundingClientRect()\n        };\n\n        if (initialCall) {\n            // Fill in the required selectFit object properties.\n            selectFit.viewPortRect = Util.getViewportRect(document);\n            selectFit.itemElement = this.getInteractionItemElement();\n            selectFit.itemRect = selectFit.itemElement.getBoundingClientRect();\n\n            // Calculate input and selected item elements style related variables\n            selectFit.styles = this.calculateStyles(selectFit, targetElement);\n\n            selectFit.scrollAmount = this.calculateScrollAmount(selectFit);\n            // Calculate how much to offset the overlay container.\n            this.calculateYoffset(selectFit);\n            this.calculateXoffset(selectFit);\n\n            super.updateViewPortFit(selectFit);\n            // container does not fit in viewPort and is out on Top or Bottom\n            if (selectFit.fitVertical.back < 0 || selectFit.fitVertical.forward < 0 ) {\n                this.fitInViewport(contentElement, selectFit);\n            }\n            this.select.scrollContainer.scrollTop = selectFit.scrollAmount;\n        }\n        this.setStyles(contentElement, selectFit);\n    }\n\n    /**\n     * Calculate selected item scroll position.\n     */\n    private calculateScrollAmount(selectFit: SelectFit): number {\n        const itemElementRect = selectFit.itemRect;\n        const scrollContainer = selectFit.scrollContainer;\n        const scrollContainerRect = selectFit.scrollContainerRect;\n        const scrollDelta = scrollContainerRect.top - itemElementRect.top;\n        let scrollPosition = scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += itemElementRect.height / 2;\n\n        return Math.round(Math.min(Math.max(0, scrollPosition), scrollContainer.scrollHeight - scrollContainerRect.height));\n    }\n\n    /**\n     * Position the items outer container so selected item text is positioned over input text and if header\n     * And/OR footer - both header/footer are visible\n     * @param selectFit selectFit to use for computation.\n     */\n    protected fitInViewport(contentElement: HTMLElement, selectFit: SelectFit) {\n        const footer = selectFit.scrollContainerRect.bottom - selectFit.contentElementRect.bottom;\n        const header = selectFit.scrollContainerRect.top - selectFit.contentElementRect.top;\n        const lastItemFitSize = selectFit.targetRect.bottom + selectFit.styles.itemTextToInputTextDiff - footer;\n        const firstItemFitSize = selectFit.targetRect.top - selectFit.styles.itemTextToInputTextDiff - header;\n        // out of viewPort on Top\n        if (selectFit.fitVertical.back < 0) {\n            const possibleScrollAmount = selectFit.scrollContainer.scrollHeight -\n                selectFit.scrollContainerRect.height - selectFit.scrollAmount;\n            if (possibleScrollAmount + selectFit.fitVertical.back > 0 && firstItemFitSize > selectFit.viewPortRect.top) {\n                selectFit.scrollAmount -= selectFit.fitVertical.back;\n                selectFit.verticalOffset -= selectFit.fitVertical.back;\n                this.global_yOffset = selectFit.verticalOffset;\n            } else {\n                selectFit.verticalOffset = 0 ;\n                this.global_yOffset = 0;\n            }\n        // out of viewPort on Bottom\n        } else if (selectFit.fitVertical.forward < 0) {\n            if (selectFit.scrollAmount + selectFit.fitVertical.forward > 0 && lastItemFitSize < selectFit.viewPortRect.bottom) {\n                selectFit.scrollAmount += selectFit.fitVertical.forward;\n                selectFit.verticalOffset += selectFit.fitVertical.forward;\n                this.global_yOffset = selectFit.verticalOffset;\n            } else {\n                selectFit.verticalOffset = -selectFit.contentElementRect.height + selectFit.targetRect.height;\n                this.global_yOffset = selectFit.verticalOffset;\n            }\n        }\n    }\n\n    /**\n     * Sets element's style which effectively positions the provided element\n     * @param element Element to position\n     * @param selectFit selectFit to use for computation.\n     * @param initialCall should be true if this is the initial call to the position method calling setStyles\n     */\n    protected setStyles(contentElement: HTMLElement, selectFit: SelectFit) {\n        super.setStyle(contentElement, selectFit.targetRect, selectFit.contentElementRect, selectFit);\n        contentElement.style.width = `${selectFit.styles.contentElementNewWidth}px`; // manage container based on paddings?\n        this.global_styles.contentElementNewWidth = selectFit.styles.contentElementNewWidth;\n    }\n\n    /**\n     * Calculate the necessary input and selected item styles to be used for positioning item text over input text.\n     * Calculate & Set default items container width.\n     * @param selectFit selectFit to use for computation.\n     */\n    private calculateStyles(selectFit: SelectFit, target: Point | HTMLElement): SelectStyles  {\n        const styles: SelectStyles = {};\n        const inputElementStyles = window.getComputedStyle(target as Element);\n        const itemElementStyles = window.getComputedStyle(selectFit.itemElement);\n        const numericInputFontSize = parseFloat(inputElementStyles.fontSize);\n        const numericItemFontSize = parseFloat(itemElementStyles.fontSize);\n        const inputTextToInputTop = (selectFit.targetRect.bottom - selectFit.targetRect.top - numericInputFontSize) / 2;\n        const itemTextToItemTop = (selectFit.itemRect.height - numericItemFontSize) / 2;\n         // Adjust for input top padding\n        const negateInputPaddings = (\n                parseFloat(inputElementStyles.paddingTop) -\n                parseFloat(inputElementStyles.paddingBottom)\n            ) / 2;\n        styles.itemTextToInputTextDiff = Math.round(itemTextToItemTop - inputTextToInputTop + negateInputPaddings);\n\n        const numericLeftPadding = parseFloat(itemElementStyles.paddingLeft);\n        const numericTextIndent = parseFloat(itemElementStyles.textIndent);\n\n        styles.itemTextPadding = numericLeftPadding;\n        styles.itemTextIndent = numericTextIndent;\n        // 24 is the input's toggle ddl icon width\n        styles.contentElementNewWidth = selectFit.targetRect.width + 24 + numericLeftPadding * 2;\n\n        return styles;\n    }\n\n    /**\n     * Obtain the selected item if there is such one or otherwise use the first one\n     */\n    public getInteractionItemElement(): HTMLElement {\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                this.select.scrollContainer.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        return itemElement;\n    }\n\n    /**\n     * Calculate how much to offset the overlay container for Y-axis.\n     */\n    private calculateYoffset(selectFit: SelectFit) {\n        selectFit.verticalOffset = -(selectFit.itemRect.top - selectFit.contentElementRect.top +\n            selectFit.styles.itemTextToInputTextDiff - selectFit.scrollAmount);\n        this.global_yOffset = selectFit.verticalOffset;\n    }\n\n    /**\n     * Calculate how much to offset the overlay container for X-axis.\n     */\n    private calculateXoffset(selectFit: SelectFit) {\n        selectFit.horizontalOffset = selectFit.styles.itemTextIndent - selectFit.styles.itemTextPadding;\n        this.global_xOffset = selectFit.horizontalOffset;\n    }\n}\n\n/** @hidden */\nexport interface SelectFit extends ConnectedFit {\n    itemElement?: HTMLElement;\n    scrollContainer: HTMLElement;\n    scrollContainerRect: ClientRect;\n    itemRect?: ClientRect;\n    styles?: SelectStyles;\n    scrollAmount?: number;\n}\n\n/** @hidden */\nexport interface SelectStyles {\n    itemTextPadding?: number;\n    itemTextIndent?: number;\n    itemTextToInputTextDiff?: number;\n    contentElementNewWidth?: number;\n    numericLeftPadding?: number;\n}\n","import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Inject,\n    Injector,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { CancelableEventArgs, IBaseCancelableBrowserEventArgs, IBaseCancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxDropDownItemBaseDirective } from '../drop-down/drop-down-item.base';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\nimport { IgxSelectBase } from './select.common';\nimport { IgxHintDirective, IgxInputGroupType, IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectHeader]'\n})\nexport class IgxSelectHeaderDirective {\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectFooter]'\n})\nexport class IgxSelectFooterDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n    private _type = null;\n    protected destroy$ = new Subject<boolean>();\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective, static: true }) public input: IgxInputDirective;\n\n    @ContentChild(IgxHintDirective, { read: ElementRef }) private hintElement: ElementRef;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective), { static: true }) public label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The input-group default is `line`.\n     * ```html\n     * <igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get type(): IgxInputGroupType {\n            return this._type || this._inputGroupType || 'line';\n        }\n\n    public set type(val: IgxInputGroupType) {\n        this._type = val;\n    }\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-select onOpening='handleOpening($event)'></igx-select>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<IBaseCancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-select (onOpened)='handleOpened()'></igx-select>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-select (onClosing)='handleClosing($event)'></igx-select>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-select (onClosed)='handleClosed()'></igx-select>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectHeader>\n     *          <div class=\"select__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectHeaderDirective, { read: TemplateRef, static: false })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectFooter>\n     *          <div class=\"select__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectFooterDirective, { read: TemplateRef, static: false })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() @Inject(IGX_INPUT_GROUP_TYPE) private _inputGroupType: IgxInputGroupType,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n    //#endregion\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLInputElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBaseDirective, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    public inputGroupClick(event: MouseEvent, overlaySettings?: OverlaySettings) {\n        const targetElement = event.target as HTMLElement;\n\n        if (this.hintElement && targetElement.contains(this.hintElement.nativeElement)) {\n            return;\n        }\n        this.toggle(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n}\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            target: this.getEditElement(),\n            modal: false,\n            positionStrategy: new SelectPositioningStrategy(this),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludeFromOutsideClick: [this.inputGroup.element.nativeElement as HTMLElement]\n        };\n        const changes$ = this.children.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => {\n            if (!changes$.closed) {\n                this.children.notifyOnChanges();\n            }\n        });\n    }\n\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        const hasRequiredHTMLAttribute = this.elementRef.nativeElement.hasAttribute('required');\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n\n        // If validator is dynamically cleared and no required HTML attribute is set,\n        // reset label's required class(asterisk) and IgxInputState #6896\n        } else if (this.inputGroup.isRequired && this.ngControl && !this.ngControl.control.validator && !hasRequiredHTMLAttribute) {\n            this.input.valid = IgxInputState.INITIAL;\n            this.inputGroup.isRequired = false;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBaseDirective) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /**\n     * Event handlers\n     * @hidden @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        const args: CancelableEventArgs = { cancel: event.cancel };\n        this.onOpening.emit(args);\n\n        event.cancel = args.cancel;\n        if (args.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    /** @hidden @internal */\n    public handleOpened() {\n        this.updateItemFocus();\n        this.onOpened.emit();\n    }\n\n    /** @hidden @internal */\n    public handleClosing(event) {\n        const args: CancelableEventArgs = { cancel: event.cancel };\n        this.onClosing.emit(args);\n        event.cancel = args.cancel;\n    }\n\n    /** @hidden @internal */\n    public handleClosed() {\n        this.focusItem(false);\n        this.onClosed.emit();\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        this._onTouchedCallback();\n        if (this.ngControl && !this.ngControl.valid) {\n            this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus(): void {\n        this._onTouchedCallback();\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     * Prevent input blur - closing the items container on Header/Footer Template click.\n     */\n    public mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n    protected _target: IgxSelectBase = null;\n\n    @Input('igxSelectItemNavigation')\n    get target(): IgxSelectBase {\n        return this._target;\n    }\n    set target(target: IgxSelectBase) {\n        this._target = target ? target : this.dropdown as IgxSelectBase;\n    }\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        } else if (key === 'tab' || event.shiftKey && key === 'tab') {\n            this.target.close();\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/public_api';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxDropDownModule } from '../drop-down/public_api';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective, IgxSelectHeaderDirective, IgxSelectFooterDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [\n        IgxSelectComponent,\n        IgxSelectFooterDirective,\n        IgxSelectGroupComponent,\n        IgxSelectHeaderDirective,\n        IgxSelectItemComponent,\n        IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective\n    ],\n    exports: [\n        IgxSelectComponent,\n        IgxSelectFooterDirective,\n        IgxSelectGroupComponent,\n        IgxSelectHeaderDirective,\n        IgxSelectItemComponent,\n        IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDropDownModule,\n        IgxIconModule,\n        IgxInputGroupModule,\n        IgxRippleModule,\n        IgxToggleModule,\n        ReactiveFormsModule\n    ],\n    providers: []\n})\nexport class IgxSelectModule { }\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges && !init) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function WatchColumnChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const oldValue = this[key];\n            originalSetter.call(this, val);\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                if (this.onColumnChange) {\n                    this.onColumnChange.emit();\n                }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function notifyChanges(repaint = false) {\n    return (_: any, key: string, propDesc?: PropertyDescriptor) => {\n\n        const privateKey = `__${key}`;\n\n        propDesc = propDesc || {\n            enumerable: true,\n            configurable: true\n        };\n\n\n        const originalSetter = propDesc ? propDesc.set : null;\n\n        propDesc.get = propDesc.get || (function(this) { return this[privateKey]; });\n\n        propDesc.set = function(this, newValue) {\n            if (originalSetter) {\n                originalSetter.call(this, newValue);\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            } else {\n                if (newValue === this[key]) { return; }\n                this[privateKey] = newValue;\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            }\n        };\n        return propDesc as any;\n    };\n}\n","import { DecimalPipe, DatePipe } from '@angular/common';\nimport { IColumnPipeArgs } from '../columns/interfaces';\n\nexport interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string, locale: string = 'en-US'): IgxSummaryResult[] {\n        const pipe = new DecimalPipe(locale);\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: pipe.transform(IgxSummaryOperand.count(data))\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string, locale: string, pipeArgs: IColumnPipeArgs): IgxSummaryResult[] {\n     *     pipeArgs.digitsInfo = '1.1-2';\n     *     const result = super.operate(data, allData, fieldName, locale, pipeArgs);\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: 'mdn',\n     *       label: 'Median',\n     *       summaryResult: this.findMedian(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string, locale: string = 'en-US',\n        pipeArgs: IColumnPipeArgs = {}):\n    IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName, locale);\n        const pipe = new DecimalPipe(locale);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: pipe.transform(IgxNumberSummaryOperand.min(data), pipeArgs.digitsInfo)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: pipe.transform(IgxNumberSummaryOperand.max(data), pipeArgs.digitsInfo)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: pipe.transform(IgxNumberSummaryOperand.sum(data), pipeArgs.digitsInfo)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: pipe.transform(IgxNumberSummaryOperand.average(data), pipeArgs.digitsInfo)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string, locale: string, pipeArgs: IColumnPipeArgs): IgxSummaryResult[] {\n     *     pipeArgs = {\n     *        format: 'longDate',\n     *        timezone: 'UTC'\n     *     };\n     *     const result = super.operate(data, allData, fieldName, locale, pipeArgs);\n     *     result.push({\n     *       key: \"deadline\",\n     *       label: \"Deadline Date\",\n     *       summaryResult: this.calculateDeadline(data);\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [],  fieldName?: string, locale: string = 'en-US',\n        pipeArgs: IColumnPipeArgs = {}): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName, locale);\n        const pipe = new DatePipe(locale);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: pipe.transform(IgxDateSummaryOperand.earliest(data), pipeArgs.format, pipeArgs.timezone)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: pipe.transform(IgxDateSummaryOperand.latest(data), pipeArgs.format, pipeArgs.timezone)\n        });\n        return result;\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCollapsibleIndicator]'\n})\nexport class IgxCollapsibleIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\n\n/**\n * This enumeration is used to configure whether the drop position is set before or after\n * the target.\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget\n}\n\n\n/**\n * @hidden\n * @internal\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n","import { Subject } from 'rxjs';\nimport {\n    AfterContentInit,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    Output,\n    EventEmitter,\n    OnDestroy,\n} from '@angular/core';\nimport { notifyChanges } from '../watch-changes';\nimport { WatchColumnChanges } from '../watch-changes';\nimport { DataType } from '../../data-operations/data-util';\nimport {\n    IgxFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand\n} from '../../data-operations/filtering-condition';\nimport { ISortingStrategy, DefaultSortingStrategy } from '../../data-operations/sorting-strategy';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { GridBaseAPIService } from '../api.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridHeaderComponent } from '../headers/grid-header.component';\nimport { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from '../headers/grid-header-group.component';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { IgxSummaryOperand, IgxNumberSummaryOperand, IgxDateSummaryOperand } from '../summaries/grid-summary';\nimport {\n    IgxCellTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxCollapsibleIndicatorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './templates.directive';\nimport { MRLResizeColumnInfo, MRLColumnSizeInfo, IColumnPipeArgs } from './interfaces';\nimport { DropPosition } from '../moving/moving.service';\nimport { IgxColumnGroupComponent } from './column-group.component';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEFAULT_DIGITS_INFO = '1.0-3';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid/grid#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit, OnDestroy {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets the `title` value.\n     * ```typescript\n     * let title = this.column.title;\n     * ```\n     * ```html\n     * <igx-column [title] = \"'Some column tooltip'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public title = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortable = false;\n    /**\n     * Returns if the column is selectable.\n     * ```typescript\n     * let columnSelectable = this.column.selectable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    get selectable(): boolean  {\n        return this._selectable;\n    }\n\n    /**\n     * Sets if the column is selectable.\n     * Default value is `true`.\n     * ```html\n     * <igx-column [selectable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set selectable(value: boolean) {\n        this._selectable = value;\n    }\n\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    groupable = false;\n    /**\n     * Gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    get editable(): boolean {\n        // Updating the primary key when grid has transactions (incl. row edit)\n        // should not be allowed, as that can corrupt transaction state.\n        const rowEditable = this.grid && this.grid.rowEditable;\n        const hasTransactions = this.grid && this.grid.transactions.enabled;\n\n        if (this.isPrimaryColumn && (rowEditable || hasTransactions)) {\n            return false;\n        }\n\n        if (this._editable !== undefined) {\n            return this._editable;\n        } else {\n            return rowEditable;\n        }\n    }\n    /**\n     * Sets whether the column is editable.\n     * ```typescript\n     * this.column.editable = true;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set editable(editable: boolean) {\n        this._editable = editable;\n    }\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(hidden)] = \"model.isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            this.hiddenChange.emit(this._hidden);\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n                return;\n            }\n            if (this.grid) {\n                this.grid.endEdit(false);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.filteringService.refreshExpressions();\n                this.grid.filteringService.hideFilteringRowOnColumnVisibilityChange(this);\n                this.grid.notifyChanges();\n            }\n        }\n    }\n\n    /**\n     * Returns if the column is selected.\n     * ```typescript\n     * let isSelected = this.column.selected;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get selected(): boolean {\n        return this.grid.selectionService.isColumnSelected(this.field);\n    }\n\n    /**\n     * Select/deselect a column.\n     * Default value is `false`.\n     * ```typescript\n     * this.column.selected = true;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set selected(value: boolean) {\n        if (this.selectable && value !== this.selected) {\n            value ? this.grid.selectionService.selectColumnsWithNoEvent([this.field]) :\n            this.grid.selectionService.deselectColumnsWithNoEvent([this.field]);\n            this.grid.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /** @hidden */\n    @Output()\n    public expandedChange = new EventEmitter<boolean>();\n\n    /** @hidden */\n    @Output()\n    public collapsibleChange = new EventEmitter<boolean>();\n    /** @hidden */\n    @Output()\n    public visibleWhenCollapsedChange = new EventEmitter<boolean>();\n\n    /** @hidden */\n    @Output()\n    public onColumnChange = new EventEmitter<void>();\n\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disableHiding = false;\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disablePinning = false;\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @notifyChanges()\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(width)]=\"model.columns[0].width\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            // width could be passed as number from the template\n            // host bindings are not px affixed so we need to ensure we affix simple number strings\n            if (typeof(value) === 'number' || value.match(/^[0-9]*$/)) {\n                value = value + 'px';\n            }\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n            this.widthChange.emit(this._width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public widthChange = new EventEmitter<string>();\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n    /**\n     * @hidden\n     */\n    protected _applySelectableClass = false;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'150px'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public maxWidth: string;\n\n    /**\n     * @hidden\n     */\n    get maxWidthPx() {\n        const gridAvailableSize = this.grid.calcWidth;\n        const isPercentageWidth = this.maxWidth && typeof this.maxWidth === 'string' && this.maxWidth.indexOf('%') !== -1;\n        return isPercentageWidth ?  parseFloat(this.maxWidth) / 100 * gridAvailableSize : parseFloat(this.maxWidth);\n    }\n\n    /**\n     * @hidden\n     */\n    get maxWidthPercent() {\n        const gridAvailableSize = this.grid.calcWidth;\n        const isPercentageWidth = this.maxWidth && typeof this.maxWidth === 'string' && this.maxWidth.indexOf('%') !== -1;\n        return isPercentageWidth ?  parseFloat(this.maxWidth) : parseFloat(this.maxWidth) / gridAvailableSize * 100;\n    }\n\n    /**\n     * @hidden\n     */\n    get minWidthPx() {\n        const gridAvailableSize = this.grid.calcWidth;\n        const isPercentageWidth = this.minWidth && typeof this.minWidth === 'string' && this.minWidth.indexOf('%') !== -1;\n        return isPercentageWidth ?  parseFloat(this.minWidth) / 100 * gridAvailableSize : parseFloat(this.minWidth);\n    }\n\n    /**\n     * @hidden\n     */\n    get minWidthPercent() {\n        const gridAvailableSize = this.grid.calcWidth;\n        const isPercentageWidth = this.minWidth && typeof this.minWidth === 'string' && this.minWidth.indexOf('%') !== -1;\n        return isPercentageWidth ?  parseFloat(this.minWidth) : parseFloat(this.minWidth) / gridAvailableSize * 100;\n    }\n\n\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'100px'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey, cellValue, rowIndex) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public cellClasses: any;\n\n    /**\n     * Sets conditional style properties on the column cells.\n     * Similar to `ngStyle` it accepts an object literal where the keys are\n     * the style properties and the value is the expression to be evaluated.\n     * As with `cellClasses` it accepts a callback function.\n     * ```typescript\n     * styles = {\n     *  background: 'royalblue',\n     *  color: (rowData, columnKey, cellValue, rowIndex) => value.startsWith('Important') : 'red': 'inherit'\n     * }\n     * ```\n     * ```html\n     * <igx-column [cellStyles]=\"styles\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    cellStyles = null;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * When autogenerating columns, the formatter is used to format the display of the column data\n     * without modifying the underlying bound values.\n     *\n     * In this example, we check to see if the column name is Salary, and then provide a method as the column formatter\n     * to format the value into a currency string.\n     *\n     * ```typescript\n     * onColumnInit(column: IgxColumnComponent) {\n     *   if (column.field == \"Salary\") {\n     *     column.formatter = (salary => this.format(salary));\n     *   }\n     * }\n     *\n     * format(value: number) : string {\n     *   return formatCurrency(value, \"en-us\", \"$\");\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(pinned)] = \"model.columns[0].isPinned\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._unpinnedIndex = this.grid ? this.grid.columns.filter(x => !x.pinned).indexOf(this) : 0;\n            this._pinned = value;\n            this.pinnedChange.emit(this._pinned);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public pinnedChange = new EventEmitter<boolean>();\n\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     * class CustomSortingStrategy extends SortingStrategy {...}\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n     * Gets the function that compares values for grouping.\n     * ```typescript\n     * let groupingComparer = this.column.groupingComparer'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public get grid(): IgxGridBaseDirective {\n        return this.gridAPI.grid;\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * Note that the column header height is fixed and any content bigger than it will be cut off.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n\n    /** @hidden */\n    @Input()\n    public collapsibleIndicatorTemplate: TemplateRef<any>;\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowDirective)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup && !c.hidden)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ?\n                -1 :\n                (this.grid.isPinningToStart ?\n                    pinnedColumns.length + indexInCollection :\n                    indexInCollection);\n        } else {\n            const indexInCollection = pinnedColumns.indexOf(col);\n            vIndex = this.grid.isPinningToStart ?\n                indexInCollection :\n                unpinnedColumns.length + indexInCollection;\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n     * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnLayoutChild =  this.column.columnLayoutChild;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.isPinningToStart &&\n            this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n\n    get isFirstPinned(): boolean {\n        const pinnedCols = this.grid.pinnedColumns.filter(x => !x.columnGroup);\n        return !this.grid.isPinningToStart && pinnedCols[0] === this;\n    }\n\n    get rightPinnedOffset(): string {\n        return this.pinned && !this.grid.isPinningToStart ?\n            - this.grid.pinnedWidth - this.grid.headerFeaturesWidth + 'px' :\n            null;\n    }\n\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * Indicates whether the column will be visible when its parent is collapsed.\n     * ```html\n     * <igx-column-group>\n     *   <igx-column [visibleWhenCollapsed]=\"true\"></igx-column>\n     * </igx-column-group>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @Input()\n    set visibleWhenCollapsed(value: boolean) {\n        this._visibleWhenCollapsed = value;\n        this.visibleWhenCollapsedChange.emit(this._visibleWhenCollapsed);\n        if (this.parent) { this.parent.setExpandCollapseState(); }\n    }\n\n    get visibleWhenCollapsed(): boolean {\n        return this._visibleWhenCollapsed;\n    }\n\n    private _columnPipeArgs: IColumnPipeArgs = { format: DEFAULT_DATE_FORMAT, digitsInfo: DEFAULT_DIGITS_INFO };\n    /**\n     * @remarks\n     * Pass optional parameters for DatePipe and/or DecimalPipe to format the display value for date and numeric columns.\n     * Accepts an `IColumnPipeArgs` object with any of the `format`, `timezone` and `digitsInfo` properties.\n     * For more details see https://angular.io/api/common/DatePipe and https://angular.io/api/common/DecimalPipe\n     * @example\n     * ```typescript\n     * const pipeArgs: IColumnPipeArgs = {\n     *      format: 'longDate',\n     *      timezone: 'UTC',\n     *      digitsInfo: '1.1-2'\n     * }\n     * ```\n     * ```html\n     * <igx-column dataType=\"date\" [pipeArgs]=\"pipeArgs\"></igx-column>\n     * <igx-column dataType=\"number\" [pipeArgs]=\"pipeArgs\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    set pipeArgs(value: IColumnPipeArgs) {\n        this._columnPipeArgs = Object.assign(this._columnPipeArgs, value);\n        this.grid.summaryService.clearSummaryCache();\n        (this.grid as any)._pipeTrigger++;\n        this.grid.notifyChanges();\n    }\n    get pipeArgs(): IColumnPipeArgs {\n        return this._columnPipeArgs;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get collapsible() { return false; }\n    public set collapsible(_value: boolean) {}\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get expanded() { return true; }\n    public set expanded(_value: boolean) {}\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n\n\n    /**\n     * @hidden\n     */\n    public destroy$ = new Subject<any>();\n    /**\n     * @hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     * @hidden\n     */\n    protected _pinned = false;\n    /**\n     * @hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _summaries = null;\n    /**\n     * @hidden\n     */\n    protected _filters = null;\n    /**\n     * @hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     * @hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     * @hidden\n     */\n    protected _hidden = false;\n    /**\n     * @hidden\n     */\n    protected _index: number;\n    /**\n     * @hidden\n     */\n    protected _disablePinning = false;\n    /**\n     * @hidden\n     */\n    protected _width: string;\n    /**\n     * @hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     * @hidden\n     */\n    protected _hasSummary = false;\n    /**\n     * @hidden\n     */\n    protected _editable: boolean;\n    /**\n     *  @hidden\n     */\n    protected _visibleWhenCollapsed;\n    /**\n     * @hidden\n     */\n    protected _collapsible = false;\n    /**\n     * @hidden\n     */\n    protected _expanded = true;\n    /**\n     * @hidden\n     */\n    protected _selectable = true;\n    /**\n     * @hidden\n     */\n    protected get isPrimaryColumn(): boolean {\n        return this.field !== undefined && this.grid !== undefined && this.field === this.grid.primaryKey;\n    }\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective, descendants: false })\n    protected headTemplate: QueryList<IgxCellHeaderTemplateDirective>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxCollapsibleIndicatorTemplateDirective, { read: IgxCollapsibleIndicatorTemplateDirective, static: false })\n    protected collapseIndicatorTemplate:  IgxCollapsibleIndicatorTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet = col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 */\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                            (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                            (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n        const res = this.getFilledChildColumnSizes(children);\n        return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1 });\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        if (!this.parent && !this.pinnable) {\n            return false;\n        }\n\n        this._pinned = true;\n        this.pinnedChange.emit(this._pinned);\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        const rootPinnedCols = grid._pinnedColumns.filter((c) => c.level === 0);\n        index = index !== undefined ? index : rootPinnedCols.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            if (!grid.hasColumnGroups) {\n                grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n            } else {\n                // insert based only on root collection\n                rootPinnedCols.splice(args.insertAtIndex, 0, this);\n                let allPinned = [];\n                // re-create hierarchy\n                rootPinnedCols.forEach(group => {\n                    allPinned.push(group);\n                    allPinned = allPinned.concat(group.allChildren);\n                });\n                grid._pinnedColumns = allPinned;\n            }\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                const childrenCount = this.allChildren.length;\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1 + childrenCount);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n        this.pinnedChange.emit(this._pinned);\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        if (!hasIndex) {\n            grid._unpinnedColumns.splice(index, 0, this);\n            if (grid._pinnedColumns.indexOf(this) !== -1) {\n                grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n            }\n        }\n\n\n        if (hasIndex) {\n            grid.moveColumn(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n\n        return true;\n    }\n\n    /**\n     * Moves a column to the specified visible index.\n     * If passed index is invalid, or if column would receive a different visible index after moving, moving is not performed.\n     * If passed index would move the column to a different column group. moving is not performed.\n     * @example\n     * ```typescript\n     * column.move(index);\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public move(index: number) {\n        let target;\n        const grid = (this.grid as IgxGridBaseDirective);\n        let columns: Array<IgxColumnComponent | IgxColumnGroupComponent> = grid.columnList.filter(c => c.visibleIndex > -1);\n        // grid last visible index\n        const li = columns.map(c => c.visibleIndex).reduce(function(a, b) {\n            return Math.max(a, b);\n        });\n        const parent = this.parent;\n        const isPreceding = this.visibleIndex < index;\n\n        if (index === this.visibleIndex || index < 0 || index > li) {\n            return;\n        }\n\n        if (parent) {\n            columns = columns.filter(c => c.level >= this.level && c !== this && c.parent !== this &&\n                c.topLevelParent === this.topLevelParent);\n        }\n        // tslint:disable:max-line-length\n        // If isPreceding, find a target such that when the current column is placed after it, current colummn will receive a visibleIndex === index. This takes into account visible children of the columns.\n        // If !isPreceding, finds a column of the same level and visible index that equals the passed index agument (c.visibleIndex === index). No need to consider the children here.\n        // tslint:enable:max-line-length\n        if (isPreceding) {\n            columns = columns.filter(c => c.visibleIndex > this.visibleIndex);\n            target = columns.find(c => c.level === this.level && c.visibleIndex + c.calcChildren() - this.calcChildren() === index);\n        } else {\n            columns = columns.filter(c => c.visibleIndex < this.visibleIndex);\n            target = columns.find(c => c.level === this.level && c.visibleIndex === index);\n        }\n\n        if (!target || (target.pinned && this.disablePinning)) {\n            return;\n        }\n\n        const pos = isPreceding ? DropPosition.AfterDropTarget : DropPosition.BeforeDropTarget;\n        grid.moveColumn(this, target as IgxColumnComponent, pos);\n    }\n\n    /**\n     * No children for the column, so will returns 1 or 0, if the column is hidden.\n     * @hidden\n     */\n    public calcChildren(): number {\n        const children = this.hidden ? 0 : 1;\n        return children;\n    }\n\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n     * Returns a reference to the filter cell of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let filterell = column.filterell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     * @param byHeader Set if column should be autized based only on the header content\n     */\n    public autosize(byHeader = false) {\n        if (!this.columnGroup) {\n            const size = this.getAutoSize(byHeader);\n            this.width = size;\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getAutoSize(byHeader = false) {\n        const size = !byHeader ? this.getLargestCellWidth() :\n            (Object.values(this.getHeaderCellWidths()).reduce((a, b) => a + b) + 'px');\n        const gridAvailableSize = this.grid.calcWidth;\n        let newWidth;\n        const isPercentageWidth = this.width && typeof this.width === 'string' && this.width.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            const percentageSize =  parseFloat(size) / gridAvailableSize * 100;\n            newWidth = percentageSize + '%';\n        } else {\n            newWidth = size;\n        }\n        return newWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n\n    /**\n     * @hidden\n     * Returns the width and padding of a header cell.\n     */\n    public getHeaderCellWidths() {\n        const range = this.grid.document.createRange();\n        let headerWidth;\n        if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n            headerWidth = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                .map((child) => getNodeSizeViaRange(range, child)));\n        } else {\n            headerWidth = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n        }\n\n        if (this.sortable || this.filterable) {\n            headerWidth += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n        }\n\n        const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n        const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n            parseFloat(headerStyle.borderRightWidth);\n\n        // Take into consideration the header group element, since column pinning applies borders to it if its not a columnGroup.\n        const headerGroupStyle = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement);\n        const borderSize = !this.parent ? parseFloat(headerGroupStyle.borderRightWidth) + parseFloat(headerGroupStyle.borderLeftWidth) : 0;\n\n        return { width: Math.ceil(headerWidth), padding: Math.ceil(headerPadding + borderSize)};\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderLeftWidth) + parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            const headerCellWidths = this.getHeaderCellWidths();\n            largest.set(headerCellWidths.width, headerCellWidths.padding);\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseFloat(colWidth) / 100 * grid.calcWidth;\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseFloat(this._calcWidth);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected setExpandCollapseState() {\n        this.children.filter(col => (col.visibleWhenCollapsed !== undefined)).forEach(c =>  {\n            if (!this.collapsible) { c.hidden = this.hidden; return; }\n            c.hidden = this._expanded ? c.visibleWhenCollapsed : !c.visibleWhenCollapsed;\n        });\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    protected checkCollapsibleState() {\n        if (!this.children) { return false; }\n        const cols = this.children.map(child => child.visibleWhenCollapsed);\n        return (cols.some(c => c === true) && cols.some(c => c === false));\n    }\n\n\n    /**\n     * @hidden\n     */\n    public get pinnable() {\n        return (this.grid as any)._init || !this.pinned;\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n\n    /**\n     * @hidden\n     */\n    public get applySelectableClass(): boolean {\n        return this._applySelectableClass;\n    }\n\n    /**\n     * @hidden\n     */\n    public set applySelectableClass(value: boolean) {\n        if (this.selectable) {\n            this._applySelectableClass = value;\n        }\n    }\n}\n","import { Directive } from '@angular/core';\nimport { ConnectedPositioningStrategy } from '../services/public_api';\nimport { VerticalAlignment, PositionSettings, Point } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\nimport { ColumnPinningPosition, RowPinningPosition } from './common/enums';\n\n\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n\n/**\n * @hidden\n */\nexport interface RowEditPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * An interface describing settings for row/column pinning position.\n */\nexport interface IPinningConfig {\n    columns?: ColumnPinningPosition;\n    rows?: RowPinningPosition;\n}\n\n/**\n * @hidden\n */\nexport class RowEditPositionStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: RowEditPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean,\n            target?: Point | HTMLElement): void {\n        const container = this.settings.container; // grid.tbody\n        const targetElement = <HTMLElement>target || <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                targetElement.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = targetElement.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: targetElement.clientWidth, height: targetElement.clientHeight },\n                    document, initialCall, targetElement);\n    }\n}\n","\nimport { mkenum } from '../../core/utils';\nexport const FilterMode = mkenum({\n    quickFilter: 'quickFilter',\n    excelStyleFilter: 'excelStyleFilter'\n});\nexport type FilterMode = (typeof FilterMode)[keyof typeof FilterMode];\n\nexport const GridSummaryPosition = mkenum({\n    top: 'top',\n    bottom: 'bottom'\n});\nexport type GridSummaryPosition = (typeof GridSummaryPosition)[keyof typeof GridSummaryPosition];\n\nexport const GridSummaryCalculationMode = mkenum({\n    rootLevelOnly: 'rootLevelOnly',\n    childLevelsOnly: 'childLevelsOnly',\n    rootAndChildLevels: 'rootAndChildLevels'\n});\nexport type GridSummaryCalculationMode = (typeof GridSummaryCalculationMode)[keyof typeof GridSummaryCalculationMode];\n\nexport type GridKeydownTargetType =\n    'dataCell' |\n    'summaryCell' |\n    'groupRow' |\n    'hierarchicalRow' |\n    'headerCell' |\n    'masterDetailRow';\n\nexport const GridSelectionMode = mkenum({\n    none: 'none',\n    single: 'single',\n    multiple: 'multiple'\n});\nexport type GridSelectionMode = (typeof GridSelectionMode)[keyof typeof GridSelectionMode];\n\nexport const ColumnDisplayOrder = mkenum({\n    Alphabetical: 'Alphabetical',\n    DisplayOrder: 'DisplayOrder'\n});\nexport type ColumnDisplayOrder = (typeof ColumnDisplayOrder)[keyof typeof ColumnDisplayOrder];\n\nexport enum ColumnPinningPosition {\n    Start,\n    End\n}\n\nexport enum RowPinningPosition {\n    Top,\n    Bottom\n}\n\nexport enum GridPagingMode {\n    local,\n    remote\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChildren,\n    QueryList,\n    EventEmitter,\n    Output,\n    IterableDiffers,\n    IterableDiffer,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { ColumnDisplayOrder } from '../common/enums';\nimport { IgxColumnActionsBaseDirective } from './column-actions-base.directive';\nimport { IgxCheckboxComponent, IChangeCheckboxEventArgs } from '../../checkbox/checkbox.component';\nimport { IColumnToggledEventArgs } from '../common/events';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n/**\n * Providing reference to `IgxColumnActionsComponent`:\n * ```typescript\n *  @ViewChild('columnActions', { read: IgxColumnActionsComponent })\n *  public columnActions: IgxColumnActionsComponent;\n */\n@Component({\n    selector: 'igx-column-actions',\n    templateUrl: './column-actions.component.html'\n})\nexport class IgxColumnActionsComponent implements DoCheck {\n    protected _differ: IterableDiffer<any> | null = null;\n\n    constructor (private differs: IterableDiffers) {\n        this._differ = this.differs.find([]).create(this.trackChanges);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public actionableColumns: IgxColumnComponent[] = [];\n\n    /**\n     * @hidden @internal\n     */\n    public filteredColumns: IgxColumnComponent[] = [];\n\n    /**\n     * Gets the grid columns to provide an action for.\n     * @deprecated\n     * @example\n     * ```typescript\n     * let gridColumns = this.columnActions.columns;\n     * ```\n     */\n    @DeprecateProperty(`Deprecated. Use 'grid' input instead.`)\n    @Input()\n    public get columns() {\n        return this.grid?.columns;\n    }\n\n    public set columns(value) {\n        if (value && value.length > 0) {\n            this.grid = value[0].grid;\n        }\n    }\n\n    /**\n     * Gets/sets the title of the column actions component.\n     * @example\n     * ```html\n     * <igx-column-actions [title]=\"'Pin Columns'\"></igx-column-actions>\n     * ```\n     */\n    @Input()\n    public title = '';\n\n    /**\n     * @hidden @internal\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * @example\n     * ```typescript\n     * let filterColumnsPrompt = this.columnActions.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt(): string {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is displayed in the filter input.\n     * @example\n     * ```html\n     * <igx-column-actions [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-actions>\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value || '';\n    }\n\n    /**\n     * Shows/hides the columns filtering input from the UI.\n     * @example\n     * ```html\n     *  <igx-column-actions [hideFilter]=\"true\"></igx-column-actions>\n     * ```\n     */\n    @Input()\n    public hideFilter = false;\n\n    /**\n     * Gets the checkbox components representing column items currently present in the dropdown\n     * @example\n     * ```typescript\n     * let columnItems =  this.columnActions.columnItems;\n     * ```\n     */\n    @ViewChildren(IgxCheckboxComponent)\n    public columnItems: QueryList<IgxCheckboxComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    private _filterCriteria = '';\n    /**\n     * Gets the value which filters the columns list.\n     * @example\n     * ```typescript\n     * let filterCriteria =  this.columnActions.filterCriteria;\n     * ```\n     */\n    @Input()\n    public get filterCriteria() {\n        return this._filterCriteria;\n    }\n    /**\n     * Sets the value which filters the columns list.\n     * @example\n     * ```html\n     *  <igx-column-actions [filterCriteria]=\"'ID'\"></igx-column-actions>\n     * ```\n     */\n    public set filterCriteria(value: string) {\n        value = value || '';\n        if (value !== this._filterCriteria) {\n            this._filterCriteria = value;\n            this._pipeTrigger++;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    private _columnDisplayOrder: ColumnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     * Gets the display order of the columns.\n     * @example\n     * ```typescript\n     * let columnDisplayOrder = this.columnActions.columnDisplayOrder;\n     * ```\n     */\n    @Input()\n    public get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * @example\n     * ```typescript\n     * this.columnActions.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     */\n    public set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value && value !== this._columnDisplayOrder) {\n            this._columnDisplayOrder = value;\n            this._pipeTrigger++;\n        }\n    }\n\n    /**\n     * Gets/sets the max height of the columns area.\n     * @remarks\n     * The default max height is 100%.\n     * @example\n     * ```html\n     * <igx-column-actions [columnsAreaMaxHeight]=\"200px\"></igx-column-actions>\n     * ```\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n\n    /**\n     * @hidden @internal\n     */\n    private _uncheckAllText: string;\n    /**\n     * Gets the text of the button that unchecks all columns.\n     * @remarks\n     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.\n     * @example\n     * ```typescript\n     * let uncheckAllText = this.columnActions.uncheckAllText;\n     * ```\n     */\n    @Input()\n    public get uncheckAllText() {\n        return this._uncheckAllText || this.actionsDirective.uncheckAllLabel;\n    }\n    /**\n     * Sets the text of the button that unchecks all columns.\n     * @example\n     * ```html\n     * <igx-column-actions [uncheckAllText]=\"'Show All'\"></igx-column-actions>\n     * ```\n     */\n    public set uncheckAllText(value: string) {\n        this._uncheckAllText = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    private _checkAllText: string;\n    /**\n     * Gets the text of the button that checks all columns.\n     * @remarks\n     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.\n     * @example\n     * ```typescript\n     * let uncheckAllText = this.columnActions.uncheckAllText;\n     * ```\n     */\n    @Input()\n    public get checkAllText() {\n        return this._checkAllText || this.actionsDirective.checkAllLabel;\n    }\n    /**\n     * Sets the text of the button that checks all columns.\n     * @remarks\n     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.\n     * @example\n     * ```html\n     * <igx-column-actions [checkAllText]=\"'Hide All'\"></igx-column-actions>\n     * ```\n     */\n    public set checkAllText(value: string) {\n        this._checkAllText = value;\n    }\n\n    /**\n     * Gets/sets the indentation of columns in the column list based on their hierarchy level.\n     * @example\n     * ```\n     * <igx-column-actions [indentation]=\"15\"></igx-column-actions>\n     * ```\n     */\n    @Input()\n    public indentation = 30;\n\n    /**\n     * An event that is emitted after a column's checked state is changed.\n     * Provides references to the `column` and the `checked` properties as event arguments.\n     * ```html\n     *  <igx-column-actions (onColumnToggled)=\"onColumnToggled($event)\"></igx-column-actions>\n     * ```\n     */\n    @Output()\n    public onColumnToggled = new EventEmitter<IColumnToggledEventArgs>();\n\n    /**\n     * @hidden @internal\n     */\n    private _pipeTrigger = 0;\n    /**\n     * @hidden @internal\n     */\n    public get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public actionsDirective: IgxColumnActionsBaseDirective;\n\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-actions';\n\n    /**\n     * @hidden @internal\n     */\n    public get checkAllDisabled(): boolean {\n        return !this.filteredColumns.some(col => !this.actionsDirective.columnChecked(col));\n\n    }\n    /**\n     * @hidden @internal\n     */\n    public get uncheckAllDisabled(): boolean {\n        return !this.filteredColumns.some(col => this.actionsDirective.columnChecked(col));\n\n    }\n\n    /**\n     * Gets/Sets the grid to provide column actions for.\n     * @example\n     * ```typescript\n     * let grid = this.columnActions.grid;\n     * ```\n     */\n    @Input()\n    public grid: IgxGridBaseDirective;\n\n    /**\n     * @hidden @internal\n     */\n    private _id = `igx-column-actions-${NEXT_ID++}`;\n\n    /**\n     * Gets/Sets the value of the `id` attribute.\n     * @remarks\n     * If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-column-actions [id]=\"'igx-actions-1'\"></igx-column-actions>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get titleID() {\n        return this.id + '_title';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public trackChanges = (index, col) => {\n        return col.field + '_' + this.actionsDirective.actionEnabledColumnsFilter(col, index, []);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.columns);\n            if (changes) {\n                this._pipeTrigger++;\n            }\n        }\n    }\n\n    /**\n     * Unchecks all columns and performs the appropriate action.\n     * @example\n     * ```typescript\n     * this.columnActions.uncheckAllColumns();\n     * ```\n     */\n    public uncheckAllColumns() {\n        this.actionsDirective.uncheckAll();\n    }\n\n    /**\n     * Checks all columns and performs the appropriate action.\n     * @example\n     * ```typescript\n     * this.columnActions.checkAllColumns();\n     * ```\n     */\n    public checkAllColumns() {\n        this.actionsDirective.checkAll();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public toggleColumn(event: IChangeCheckboxEventArgs, column: IgxColumnComponent) {\n        this.onColumnToggled.emit({\n            column: column,\n            checked: event.checked\n        });\n        this.actionsDirective.toggleColumn(column);\n    }\n}\n","import { Directive } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\n\n@Directive()\nexport abstract class IgxColumnActionsBaseDirective {\n\n    /**\n     * @hidden @internal\n     */\n    public actionEnabledColumnsFilter: (\n        value: IgxColumnComponent,\n        index: number,\n        array: IgxColumnComponent[]\n    ) => boolean;\n\n    /**\n     * @hidden @internal\n     */\n    public abstract get checkAllLabel(): string;\n\n    /**\n     * @hidden @internal\n     */\n    public abstract get uncheckAllLabel(): string;\n\n    /**\n     * @hidden @internal\n     */\n    public abstract columnChecked(column: IgxColumnComponent): boolean;\n\n    /**\n     * @hidden @internal\n     */\n    public abstract toggleColumn(column: IgxColumnComponent);\n\n    /**\n     * @hidden @internal\n     */\n    public abstract uncheckAll();\n\n    /**\n     * @hidden @internal\n     */\n    public abstract checkAll();\n}\n","import { Directive, Inject } from '@angular/core';\nimport { IgxColumnActionsBaseDirective } from './column-actions-base.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxColumnActionsComponent } from './column-actions.component';\n\n@Directive({\n    selector: '[igxColumnHiding]'\n})\nexport class IgxColumnHidingDirective extends IgxColumnActionsBaseDirective {\n\n    constructor(\n        @Inject(IgxColumnActionsComponent) protected columnActions: IgxColumnActionsComponent\n    ) {\n        super();\n        columnActions.actionsDirective = this;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get checkAllLabel(): string {\n        return this.columnActions.grid?.resourceStrings.igx_grid_hiding_check_all_label ?? 'Hide All';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get uncheckAllLabel(): string {\n        return this.columnActions.grid?.resourceStrings.igx_grid_hiding_uncheck_all_label ?? 'Show All';\n    }\n    /**\n     * @hidden @internal\n     */\n    public checkAll() {\n        this.columnActions.filteredColumns.forEach(c => c.hidden = true);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public uncheckAll() {\n        this.columnActions.filteredColumns.forEach(c => c.hidden = false);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public actionEnabledColumnsFilter = c => !c.disableHiding;\n\n    /**\n     * @hidden @internal\n     */\n    public columnChecked(column: IgxColumnComponent): boolean {\n        return column.hidden;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public toggleColumn(column: IgxColumnComponent) {\n        column.hidden = !column.hidden;\n    }\n}\n","import { Directive, Inject } from '@angular/core';\nimport { IgxColumnActionsBaseDirective } from './column-actions-base.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxColumnActionsComponent } from './column-actions.component';\n\n@Directive({\n    selector: '[igxColumnPinning]'\n})\nexport class IgxColumnPinningDirective extends IgxColumnActionsBaseDirective {\n\n    constructor(\n        @Inject(IgxColumnActionsComponent) protected columnActions: IgxColumnActionsComponent\n    ) {\n        super();\n        columnActions.actionsDirective = this;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get checkAllLabel(): string {\n        return this.columnActions.grid?.resourceStrings.igx_grid_pinning_check_all_label ?? 'Pin All';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get uncheckAllLabel(): string {\n        return this.columnActions.grid?.resourceStrings.igx_grid_pinning_uncheck_all_label ?? 'Unpin All';\n    }\n    /**\n     * @hidden @internal\n     */\n    public checkAll() {\n        this.columnActions.filteredColumns.forEach(c => c.pinned = true);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public uncheckAll() {\n        this.columnActions.filteredColumns.forEach(c => c.pinned = false);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public actionEnabledColumnsFilter = c => !c.disablePinning && !c.level;\n\n    /**\n     * @hidden @internal\n     */\n    public columnChecked(column: IgxColumnComponent): boolean {\n        return column.pinned;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public toggleColumn(column: IgxColumnComponent) {\n        column.pinned = !column.pinned;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef,\n    AfterViewInit\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../../services/public_api';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxButtonDirective } from '../../directives/button/button.directive';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxDropDownComponent } from '../../drop-down/drop-down.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnActionsComponent } from '../column-actions/column-actions.component';\nimport { IgxColumnHidingDirective } from '../column-actions/column-hiding.directive';\nimport { IgxColumnPinningDirective } from '../column-actions/column-pinning.directive';\nimport { IgxIconService } from '../../icon/public_api';\nimport { pinLeft, unpinLeft } from '@igniteui/material-icons-extended';\nimport { first } from 'rxjs/operators';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase implements AfterViewInit {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = this.grid.resourceStrings.igx_grid_toolbar_actions_filter_prompt;\n    private _isExporting = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.totalHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnActionsComponent` for column hiding.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingDirective, { read: IgxColumnActionsComponent })\n    public columnHidingUI: IgxColumnActionsComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton', { read: IgxButtonDirective })\n    public columnHidingButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport', { read: IgxButtonDirective })\n    public exportButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnActionsComponent` for column pinning.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningDirective, { read: IgxColumnActionsComponent })\n    public columnPinningUI: IgxColumnActionsComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton', { read: IgxButtonDirective })\n    public columnPinningButton: IgxButtonDirective;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseDirective {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isExporting(): boolean {\n        return this._isExporting;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-grid-toolbar')];\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private iconService: IgxIconService) {\n        super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.target = this.exportButton.nativeElement;\n        this._overlaySettings.excludeFromOutsideClick = [this.exportButton.nativeElement as HTMLElement];\n        this._overlaySettings.outlet = this.grid.outlet;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private setIsExporting(isExporting: boolean) {\n        this._isExporting = isExporting;\n        this.cdr.detectChanges();\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n\n        let exportEnded = false;\n        setTimeout(() => {\n            if (!exportEnded) {\n                this.setIsExporting(true);\n            }\n        }, 500);\n\n        exp.onExportEnded.pipe(first()).subscribe(() => {\n            exportEnded = true;\n            this.setIsExporting(false);\n        });\n\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outlet;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outlet;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showAdvancedFilteringUI() {\n        this.grid.openAdvancedFilteringDialog();\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngAfterViewInit() {\n        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');\n        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClosingColumnHiding(args) {\n        const activeElem = document.activeElement;\n\n        if (!args.event && activeElem !== this.grid.nativeElement &&\n            !this.columnHidingButton.nativeElement.contains(activeElem)) {\n            args.cancel = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClosingColumnPinning(args) {\n        const activeElem = document.activeElement;\n\n        if (!args.event && activeElem !== this.grid.nativeElement &&\n            !this.columnPinningButton.nativeElement.contains(activeElem)) {\n            args.cancel = true;\n        }\n    }\n}\n","import { Directive, ElementRef, Host, HostListener } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden @internal */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private currentCellIndex: number;\n\n\n    constructor(public api: GridBaseAPIService<any>, public element: ElementRef) {}\n\n    get grid() {\n        return this.api.grid;\n    }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||\n            (this.grid.rowEditTabs.first === this && event.shiftKey)\n        ) {\n            this.move(event);\n        }\n    }\n\n    @HostListener('keydown.Escape', [`$event`])\n    public handleEscape(event: KeyboardEvent): void {\n        this.grid.endEdit(false, event);\n        this.grid.tbody.nativeElement.focus();\n    }\n\n    @HostListener('keydown.Enter', ['$event'])\n    public handleEnter(event: KeyboardEvent): void {\n        event.stopPropagation();\n    }\n\n    /**\n     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.\n     * If cell is out of view first scrolls to the cell\n     * @param event keyboard event containing information about whether SHIFT key was pressed\n     */\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        this.grid.navigation.activeNode.row = this.grid.rowInEditMode.index;\n        this.grid.navigation.activeNode.column = this.currentCellIndex;\n        this.grid.navigateTo(this.grid.rowInEditMode.index, this.currentCellIndex, (obj) => {\n            obj.target.activate(event);\n            this.grid.cdr.detectChanges();\n        });\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    ElementRef,\n    Input,\n    ViewRef,\n    ContentChild,\n    Output,\n    EventEmitter,\n    Optional,\n    Host,\n} from '@angular/core';\nimport { IgxOverlayService } from '../../../services/public_api';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { cloneArray, KEYS, resolveNestedPath, parseDate, uniqueDates } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { Subscription, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxGridBaseDirective } from '../../grid-base.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { GridSelectionMode } from '../../common/enums';\nimport { GridBaseAPIService } from '../../api.service';\n\n/**\n * @hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isFiltered: boolean;\n    public isSpecial = false;\n    public isBlanks = false;\n}\n\n@Directive({\n    selector: 'igx-excel-style-column-operations,[igxExcelStyleColumnOperations]'\n})\nexport class IgxExcelStyleColumnOperationsTemplateDirective {\n    constructor() {}\n}\n\n@Directive({\n    selector: 'igx-excel-style-filter-operations,[igxExcelStyleFilterOperations]'\n})\nexport class IgxExcelStyleFilterOperationsTemplateDirective {\n    constructor() {}\n}\n\n/**\n * A component used for presenting Excel style filtering UI for a specific column.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-grid-excel-style-filtering\n *     [column]=\"grid1.columns[0]\">\n * </igx-grid-excel-style-filtering>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy {\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n    private _column: IgxColumnComponent;\n    private _columnPinning: Subscription;\n    private _columnVisibilityChanged: Subscription;\n    private _sortingChanged: Subscription;\n    private _filteringChanged: Subscription;\n    private _densityChanged: Subscription;\n    private _columnMoved: Subscription;\n    private _originalDisplay: string;\n\n    /**\n     * An @Input property that sets the column.\n     */\n    @Input()\n    public set column(value: IgxColumnComponent) {\n        this._column = value;\n        this.listData = new Array<FilterListItem>();\n        this.columnChange.emit(this._column);\n\n        if (this._columnPinning) {\n            this._columnPinning.unsubscribe();\n        }\n\n        if (this._columnVisibilityChanged) {\n            this._columnVisibilityChanged.unsubscribe();\n        }\n\n        if (this._sortingChanged) {\n            this._sortingChanged.unsubscribe();\n        }\n\n        if (this._filteringChanged) {\n            this._filteringChanged.unsubscribe();\n        }\n\n        if (this._densityChanged) {\n            this._densityChanged.unsubscribe();\n        }\n\n        if (this._columnMoved) {\n            this._columnMoved.unsubscribe();\n        }\n\n        if (this._column) {\n            this._column.grid.filteringService.registerSVGIcons();\n            this.init();\n            this.sortingChanged.emit();\n\n            this._columnPinning = this.grid.onColumnPinning.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    if (!(this.cdr as ViewRef).destroyed) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            });\n            this._columnVisibilityChanged = this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.cdr.detectChanges();\n            });\n            this._sortingChanged =  this.grid.sortingExpressionsChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.sortingChanged.emit();\n            });\n            this._filteringChanged = this.grid.filteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.init();\n            });\n            this._densityChanged = this.grid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.cdr.detectChanges();\n            });\n            this._columnMoved = this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * Returns the current column.\n     */\n    public get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringService(): IgxFilteringService {\n        return this.grid.filteringService;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public expressionsList = new Array<ExpressionUI>();\n    /**\n     * @hidden @internal\n     */\n    public listData = new Array<FilterListItem>();\n    /**\n     * @hidden @internal\n     */\n    public uniqueValues = [];\n    /**\n     * @hidden @internal\n     */\n    public overlayService: IgxOverlayService;\n    /**\n     * @hidden @internal\n     */\n    public overlayComponentId: string;\n\n    private _minHeight;\n\n    /**\n     * Gets the minimum height.\n     */\n    @Input()\n    get minHeight(): string {\n        if (this._minHeight || this._minHeight === 0) {\n            return this._minHeight;\n        }\n\n        if (!this.inline) {\n            let minHeight = 645;\n            switch (this.displayDensity) {\n                case DisplayDensity.cosy: minHeight = 465; break;\n                case DisplayDensity.compact: minHeight = 330; break;\n                default: break;\n            }\n            return `${minHeight}px`;\n        }\n    }\n\n    /**\n     * Sets the minimum height.\n     */\n    set minHeight(value: string) {\n        this._minHeight = value;\n    }\n\n\n    private _maxHeight;\n\n    /**\n     * Gets the maximum height.\n     */\n    @Input()\n    @HostBinding('style.max-height')\n    get maxHeight(): string {\n        if (this._maxHeight) {\n            return this._maxHeight;\n        }\n\n        if (!this.inline) {\n            let maxHeight = 775;\n            switch (this.displayDensity) {\n                case DisplayDensity.cosy: maxHeight = 565; break;\n                case DisplayDensity.compact: maxHeight = 405; break;\n                default: break;\n            }\n            return `${maxHeight}px`;\n        }\n    }\n\n    /**\n     * Sets the maximum height.\n     */\n    set maxHeight(value: string) {\n        this._maxHeight = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-excel-filter--inline')\n    public inline = true;\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public loadingStart = new EventEmitter();\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public loadingEnd = new EventEmitter();\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public initialized = new EventEmitter();\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public sortingChanged = new EventEmitter();\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public columnChange = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public listDataLoaded = new EventEmitter();\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelColumnOperations', { read: TemplateRef, static: true })\n    protected defaultExcelColumnOperations: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelFilterOperations', { read: TemplateRef, static: true })\n    protected defaultExcelFilterOperations: TemplateRef<any>;\n\n    @ViewChild('mainDropdown', { read: ElementRef })\n    public mainDropdown: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxExcelStyleColumnOperationsTemplateDirective, { read: IgxExcelStyleColumnOperationsTemplateDirective })\n    public excelColumnOperationsDirective: IgxExcelStyleColumnOperationsTemplateDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxExcelStyleFilterOperationsTemplateDirective, { read: IgxExcelStyleFilterOperationsTemplateDirective })\n    public excelFilterOperationsDirective: IgxExcelStyleFilterOperationsTemplateDirective;\n\n    /**\n     * @hidden @internal\n     */\n    get grid(): IgxGridBaseDirective {\n        return this.gridAPI?.grid ?? this.column?.grid;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get displayDensity() {\n        return this.grid?.displayDensity;\n    }\n\n    constructor(\n        private cdr: ChangeDetectorRef,\n        public element: ElementRef,\n        @Host() @Optional() private gridAPI?: GridBaseAPIService<IgxGridBaseDirective>) {}\n\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private init() {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        this.populateColumnData();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectedClass() {\n        return this.column.selected ? 'igx-excel-filter__actions-selected' : 'igx-excel-filter__actions-select';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public initialize(column: IgxColumnComponent, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.inline = false;\n        this.column = column;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n        if (this._originalDisplay) {\n            this.element.nativeElement.style.display = this._originalDisplay;\n        }\n\n        this.initialized.emit();\n        this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSelect() {\n        if (!this.column.selected) {\n            this.grid.selectionService.selectColumn(this.column.field, this.grid.columnSelection === GridSelectionMode.single);\n        } else {\n            this.grid.selectionService.deselectColumn(this.column.field);\n        }\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public columnSelectable() {\n        return this.grid?.columnSelection !== GridSelectionMode.none && this.column?.selectable;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onHideToggle() {\n        this.column.hidden = !this.column.hidden;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: this.column.hidden });\n        this.closeDropdown();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n                this.expressionsList[0].expression.condition.name === 'true' ||\n                this.expressionsList[0].expression.condition.name === 'false' ||\n                this.expressionsList[0].expression.condition.name === 'empty' ||\n                this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n                exp.expression.condition.name === 'true' ||\n                exp.expression.condition.name === 'false' ||\n                exp.expression.condition.name === 'empty' ||\n                exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            const value = this.column.dataType === DataType.Date ? this.uniqueValues[index].label : this.uniqueValues[index];\n            if (this.filterValues.has(value)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private populateColumnData() {\n        if (this.grid.uniqueColumnValuesStrategy) {\n            this.cdr.detectChanges();\n            this.renderColumnValuesRemotely();\n        } else {\n            this.renderColumnValuesFromData();\n        }\n    }\n\n    private renderColumnValuesRemotely() {\n        this.loadingStart.emit();\n        const expressionsTree: FilteringExpressionsTree = this.getColumnFilterExpressionsTree();\n\n        const prevColumn = this.column;\n        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals: any[]) => {\n            if (!this.column || this.column !== prevColumn) {\n                return;\n            }\n\n            const columnValues = (this.column.dataType === DataType.Date) ?\n                colVals.map(value => {\n                    const label = this.getFilterItemLabel(value);\n                    return { label, value };\n                }) : colVals;\n\n            this.renderValues(columnValues);\n            this.loadingEnd.emit();\n        });\n    }\n\n    private renderColumnValuesFromData() {\n        let data = this.column.gridAPI.get_all_data((this.grid as any).id);\n        const expressionsTree = this.getColumnFilterExpressionsTree();\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state, this.grid);\n        }\n\n        const columnField = this.column.field;\n        const columnValues = (this.column.dataType === DataType.Date) ?\n            data.map(record => {\n                const value = (resolveNestedPath(record, columnField));\n                const label = this.getFilterItemLabel(value);\n                return { label, value };\n            }) : data.map(record => resolveNestedPath(record, columnField));\n\n        this.renderValues(columnValues);\n    }\n\n    private renderValues(columnValues: any[]) {\n        this.generateUniqueValues(columnValues);\n        this.generateFilterValues(this.column.dataType === DataType.Date);\n        this.generateListData();\n    }\n\n    private generateUniqueValues(columnValues: any[]) {\n        if (this.column.dataType === DataType.String && this.column.filteringIgnoreCase) {\n            const filteredUniqueValues = columnValues.map(s => s?.toString().toLowerCase())\n                .reduce((map, val, i) => map.get(val) ? map : map.set(val, columnValues[i]),\n                    new Map);\n            this.uniqueValues = Array.from(filteredUniqueValues.values());\n        } else {\n            this.uniqueValues = this.column.dataType === DataType.Date ? uniqueDates(columnValues) : Array.from(new Set(columnValues));\n        }\n    }\n\n    private generateFilterValues(isDateColumn: boolean = false) {\n        if (isDateColumn) {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v => this.getFilterItemLabel(v))];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? this.getFilterItemLabel(e.expression.searchVal) : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n    }\n\n    private generateListData() {\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        if (this.listData.length > 0) {\n            this.addSelectAllItem();\n        }\n\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n\n        this.listDataLoaded.emit();\n    }\n\n    private getColumnFilterExpressionsTree() {\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        return expressionsTree;\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        filterListItem.isFiltered = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                        filterListItem.isSelected = true;\n                        filterListItem.isFiltered = true;\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        filterListItem.isFiltered = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                    filterListItem.isFiltered = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.containsNullOrEmpty = false;\n        this.selectAllIndeterminate = false;\n\n        this.uniqueValues.forEach(element => {\n            const hasValue = (element !== undefined && element !== null && element !== '' && this.column.dataType !== DataType.Date)\n                || !!(element && element.label);\n\n            if (hasValue) {\n                const filterListItem = new FilterListItem();\n                filterListItem.isSelected = true;\n                filterListItem.isFiltered = true;\n\n                if (this.column.filteringExpressionsTree) {\n                    filterListItem.isSelected = false;\n                    filterListItem.isFiltered = false;\n\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element.label || element)) {\n                            filterListItem.isSelected = true;\n                            filterListItem.isFiltered = true;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        this.selectAllSelected = false;\n                    }\n                }\n\n                filterListItem.value = this.getFilterItemValue(element);\n                filterListItem.label = this.getFilterItemLabel(element);\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            }\n        });\n        this.containsNullOrEmpty = this.uniqueValues.length > this.listData.length;\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        selectAll.isFiltered = this.selectAllSelected;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                    blanks.isFiltered = true;\n                } else {\n                    blanks.isSelected = false;\n                    blanks.isFiltered = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n            blanks.isFiltered = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        blanks.isBlanks = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private getFilterItemLabel(element: any) {\n        if (this.column.dataType === DataType.Date) {\n            return element && element.label ? element.label : this.column.formatter ?\n                this.column.formatter(element) :\n                this.grid.datePipe.transform(element, this.column.pipeArgs.format, this.column.pipeArgs.timezone,\n                    this.grid.locale);\n        }\n        if (this.column.dataType === DataType.Number) {\n            return this.column.formatter ?\n                this.column.formatter(element) :\n                this.grid.decimalPipe.transform(element, this.column.pipeArgs.digitsInfo, this.grid.locale);\n        }\n        return this.column.formatter ?\n            this.column.formatter(element) :\n            element;\n    }\n\n    private getFilterItemValue(element: any) {\n        if (this.column.dataType === DataType.Date) {\n            element = parseDate(element.value);\n        }\n        return element;\n    }\n\n    // TODO: sort members by access modifier\n\n    /**\n     * @hidden @internal\n     */\n    public cancel() {\n        if (!this.overlayComponentId) {\n            this.init();\n        }\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE ||\n            eventArgs.ctrlKey && eventArgs.shiftKey && eventArgs.key.toLowerCase() === 'l') {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public hide() {\n        this._originalDisplay = document.defaultView.getComputedStyle(this.element.nativeElement).display;\n        this.element.nativeElement.style.display = 'none';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public detectChanges() {\n        this.cdr.detectChanges();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridType } from './common/grid.interface';\nimport { NAVIGATION_KEYS, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, HORIZONTAL_NAV_KEYS, HEADER_KEYS, ROW_ADD_KEYS, isEdge } from '../core/utils';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IMultiRowLayoutNode } from './selection/selection.service';\nimport { GridKeydownTargetType, GridSelectionMode, FilterMode } from './common/enums';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IActiveNodeChangeEventArgs } from './common/events';\nexport interface ColumnGroupsCache {\n    level: number;\n    visibleIndex: number;\n}\nexport interface IActiveNode {\n    gridID?: string;\n    row: number;\n    column?: number;\n    level?: number;\n    mchCache?: ColumnGroupsCache;\n    layout?: IMultiRowLayoutNode;\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseDirective & GridType;\n    public _activeNode: IActiveNode = {} as IActiveNode;\n    protected pendingNavigation = false;\n\n    public get activeNode() {\n        return this._activeNode;\n    }\n\n    public set activeNode(value: IActiveNode) {\n        this._activeNode = value;\n    }\n\n    handleNavigation(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.repeat && SUPPORTED_KEYS.has(key) || (key === 'tab' && this.grid.crudService.cell)) {\n            event.preventDefault();\n        }\n        event.repeat ? setTimeout(() => this.dispatchEvent(event), 1) : this.dispatchEvent(event);\n    }\n\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (!this.activeNode || !(SUPPORTED_KEYS.has(key) || (key === 'tab' && this.grid.crudService.cell)) &&\n            !this.grid.crudService.rowEditingBlocked && !this.grid.rowInEditMode) { return; }\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        if (NAVIGATION_KEYS.has(key) && this.pendingNavigation) { event.preventDefault(); return; }\n\n        const type = this.isDataRow(this.activeNode.row) ? 'dataCell' :\n            this.isDataRow(this.activeNode.row, true) ? 'summaryCell' : 'groupRow';\n        if (this.emitKeyDown(type, this.activeNode.row, event)) {\n            return;\n        }\n        if (event.altKey) {\n            this.handleAlt(key, event);\n            return;\n        }\n        if ([' ', 'spacebar', 'space'].indexOf(key) === -1) {\n            this.grid.selectionService.keyboardStateOnKeydown(this.activeNode, shift, shift && key === 'tab');\n        }\n        if (this.grid.crudService.cell && NAVIGATION_KEYS.has(key)) { return; }\n\n        const position = this.getNextPosition(this.activeNode.row, this.activeNode.column, key, shift, ctrl, event);\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n            this.navigateInBody(position.rowIndex, position.colIndex, (obj) => {\n                obj.target.activate(event);\n                this.grid.cdr.detectChanges();\n            });\n        }\n        this.grid.cdr.detectChanges();\n    }\n\n    protected getNextPosition(rowIndex: number, colIndex: number, key: string, shift: boolean, ctrl: boolean, event: KeyboardEvent) {\n        if (!this.isDataRow(rowIndex, true) && (key.indexOf('down') < 0 || key.indexOf('up') < 0) && ctrl) {\n            return { rowIndex, colIndex };\n        }\n        switch (key) {\n            case 'pagedown':\n            case 'pageup':\n                event.preventDefault();\n                key === 'pagedown' ? this.grid.verticalScrollContainer.scrollNextPage() :\n                    this.grid.verticalScrollContainer.scrollPrevPage();\n                const editCell = this.grid.crudService.cell;\n                this.grid.verticalScrollContainer.onChunkLoad\n                    .pipe(first()).subscribe(() => {\n                        if (editCell && this.grid.rowList.map(r => r.index).indexOf(editCell.rowIndex) < 0) {\n                            this.grid.tbody.nativeElement.focus({ preventScroll: true });\n                        }\n                    });\n                break;\n            case 'tab':\n                this.handleEditing(shift, event);\n                break;\n            case 'end':\n                rowIndex = ctrl ? this.findLastDataRowIndex() : this.activeNode.row;\n                colIndex = this.lastColumnIndex;\n                break;\n            case 'home':\n                rowIndex = ctrl ? this.findFirstDataRowIndex() : this.activeNode.row;\n                colIndex = 0;\n                break;\n            case 'arrowleft':\n            case 'left':\n                colIndex = ctrl ? 0 : this.activeNode.column - 1;\n                break;\n            case 'arrowright':\n            case 'right':\n                colIndex = ctrl ? this.lastColumnIndex : this.activeNode.column + 1;\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl && !this.isDataRow(rowIndex) || (this.grid.rowEditable && this.grid.crudService.rowEditingBlocked)) { break; }\n                colIndex = this.activeNode.column !== undefined ? this.activeNode.column : 0;\n                rowIndex = ctrl ? this.findFirstDataRowIndex() : this.activeNode.row - 1;\n                break;\n            case 'arrowdown':\n            case 'down':\n                if ((ctrl && !this.isDataRow(rowIndex)) || (this.grid.rowEditable && this.grid.crudService.rowEditingBlocked)) { break; }\n                colIndex = this.activeNode.column !== undefined ? this.activeNode.column : 0;\n                rowIndex = ctrl ? this.findLastDataRowIndex() : this.activeNode.row + 1;\n                break;\n            case 'enter':\n            case 'f2':\n                const cell = this.grid.getCellByColumnVisibleIndex(this.activeNode.row, this.activeNode.column);\n                if (!this.isDataRow(rowIndex) || !cell.editable) { break; }\n                this.grid.crudService.enterEditMode(cell);\n                break;\n            case 'escape':\n            case 'esc':\n                if (!this.isDataRow(rowIndex)) { break; }\n\n                if (this.grid.crudService.isInCompositionMode) {\n                    return;\n                }\n\n                if (this.grid.crudService.cellInEditMode || this.grid.crudService.rowInEditMode) {\n                    this.grid.endEdit(false);\n                    if (isEdge()) { this.grid.cdr.detectChanges(); }\n                    this.grid.tbody.nativeElement.focus();\n                }\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                const rowObj = this.grid.getRowByIndex(this.activeNode.row);\n                if (this.grid.isRowSelectable && this.isDataRow(rowIndex)) {\n                    rowObj && rowObj.selected ? this.grid.selectionService.deselectRow(rowObj.rowID, event) :\n                        this.grid.selectionService.selectRowById(rowObj.rowID, false, event);\n                }\n                break;\n            default:\n                return;\n        }\n        return { rowIndex, colIndex };\n    }\n\n    summaryNav(event: KeyboardEvent) {\n        if (this.grid.hasSummarizedColumns) {\n            this.horizontalNav(event, event.key.toLowerCase(), this.grid.dataView.length, 'summaryCell');\n        }\n    }\n\n    headerNavigation(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (!HEADER_KEYS.has(key)) { return; }\n        event.preventDefault();\n\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n        const alt = event.altKey;\n\n        this.performHeaderKeyCombination(this.currentActiveColumn, key, shift, ctrl, alt, event);\n        if (shift || alt || (ctrl && (key.includes('down') || key.includes('down')))) { return; }\n        !this.grid.hasColumnGroups ? this.horizontalNav(event, key, -1, 'headerCell') : this.handleMCHeaderNav(key, ctrl);\n    }\n\n    protected horizontalNav(event: KeyboardEvent, key: string, rowIndex: number, tag: GridKeydownTargetType) {\n        const ctrl = event.ctrlKey;\n        if (!HORIZONTAL_NAV_KEYS.has(event.key.toLowerCase())) { return; }\n        event.preventDefault();\n        this.activeNode.row = rowIndex;\n        if (rowIndex > 0) {\n            if (this.emitKeyDown('summaryCell', this.activeNode.row, event)) {\n                return;\n            }\n        }\n\n        const newActiveNode = {\n            column: this.activeNode.column,\n            mchCache: {\n                level: this.activeNode.level,\n                visibleIndex: this.activeNode.column\n            }\n        };\n\n        if ((key.includes('left') || key === 'home') && this.activeNode.column > 0) {\n            newActiveNode.column = ctrl || key === 'home' ? 0 : this.activeNode.column - 1;\n        }\n        if ((key.includes('right') || key === 'end') && this.activeNode.column < this.lastColumnIndex) {\n            newActiveNode.column = ctrl || key === 'end' ? this.lastColumnIndex : this.activeNode.column + 1;\n        }\n\n        if (tag === 'headerCell') {\n            const column = this.grid.getColumnByVisibleIndex(newActiveNode.column);\n            newActiveNode.mchCache.level = column.level;\n            newActiveNode.mchCache.visibleIndex = column.visibleIndex;\n        }\n\n        this.setActiveNode({ row: this.activeNode.row, column: newActiveNode.column, mchCache: newActiveNode.mchCache });\n        this.performHorizontalScrollToCell(this.activeNode.column);\n    }\n\n    focusTbody(event) {\n        const gridRows = this.grid.verticalScrollContainer.totalItemCount ?? this.grid.dataView.length;\n        if (gridRows < 1) { this.activeNode = null; return; }\n        if (!Object.keys(this.activeNode).length || this.activeNode.row < 0 || this.activeNode.row > gridRows - 1) {\n            this.grid.navigateTo(0, 0, (obj) => {\n                this.grid.clearCellSelection();\n                obj.target.activate(event);\n            });\n        }\n    }\n\n    focusFirstCell(header = true) {\n        if ((header || this.grid.dataView.length) && this.activeNode &&\n            (this.activeNode.row === -1 || this.activeNode.row === this.grid.dataView.length ||\n                (!header && !this.grid.hasSummarizedColumns))) { return; }\n\n        this.setActiveNode({\n            row: header ? -1 : this.grid.dataView.length, column: 0,\n            level: this.grid.hasColumnLayouts ? 1 : 0, mchCache: { level: 0, visibleIndex: 0 }\n        });\n        this.performHorizontalScrollToCell(0);\n    }\n\n    get lastColumnIndex() {\n        return Math.max(...this.grid.visibleColumns.map(col => col.visibleIndex));\n    }\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n    get displayContainerScrollLeft() {\n        return Math.ceil(this.grid.headerContainer.scrollPosition);\n    }\n    get containerTopOffset() {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    public isColumnFullyVisible(columnIndex: number) {\n        if (columnIndex < 0 || this.isColumnPinned(columnIndex, this.forOfDir())) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        const width = this.forOfDir().getColumnScrollLeft(index + 1) - this.forOfDir().getColumnScrollLeft(index);\n        if (this.displayContainerWidth < width && this.displayContainerScrollLeft === this.forOfDir().getColumnScrollLeft(index)) {\n            return true;\n        }\n        return this.displayContainerWidth >= this.forOfDir().getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= this.forOfDir().getColumnScrollLeft(index);\n    }\n\n    protected getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    protected forOfDir(): IgxForOfDirective<any> {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        return forOfDir as IgxForOfDirective<any>;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        event.preventDefault();\n        const row = this.grid.getRowByIndex(this.activeNode.row) as any;\n\n        if (!(this.isToggleKey(key) || this.isAddKey(key)) || !row) { return; }\n        if (this.isAddKey(key)) {\n            if (!this.grid.rowEditable) {\n                console.warn('The grid must be in row edit mode to perform row adding!');\n                return;\n            }\n\n            if (event.shiftKey && row.treeRow !== undefined) {\n                row.beginAddChild();\n            } else if (!event.shiftKey) {\n                row.beginAddRow();\n            }\n        } else if (!row.expanded && ROW_EXPAND_KEYS.has(key)) {\n            row.rowID === undefined ? row.toggle() :\n                this.grid.gridAPI.set_row_expansion_state(row.rowID, true, event);\n        } else if (row.expanded && ROW_COLLAPSE_KEYS.has(key)) {\n            row.rowID === undefined ? row.toggle() :\n                this.grid.gridAPI.set_row_expansion_state(row.rowID, false, event);\n        }\n        this.grid.notifyChanges();\n    }\n\n    protected handleEditing(shift: boolean, event: KeyboardEvent) {\n        const next = shift ? this.grid.getPreviousCell(this.activeNode.row, this.activeNode.column, col => col.editable) :\n            this.grid.getNextCell(this.activeNode.row, this.activeNode.column, col => col.editable);\n        if (!this.grid.rowInEditMode && this.isActiveNode(next.rowIndex, next.visibleColumnIndex)) {\n            this.grid.endEdit(true);\n            return;\n        }\n        event.preventDefault();\n        if ((this.grid.rowInEditMode && this.grid.rowEditTabs.length) &&\n            (this.activeNode.row !== next.rowIndex || this.isActiveNode(next.rowIndex, next.visibleColumnIndex))) {\n            if (this.grid.crudService.row?.isAddRow) {\n                this.grid.gridAPI.submit_add_value();\n                const row = this.grid.rowList.find(r => r.rowID === this.grid.crudService.row.id);\n                row.rowData = this.grid.crudService.row.data;\n            } else {\n                this.grid.gridAPI.submit_value();\n            }\n            shift ? this.grid.rowEditTabs.last.element.nativeElement.focus() :\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n\n        if (this.grid.rowInEditMode && !this.grid.rowEditTabs.length) {\n            if (shift && next.rowIndex === this.activeNode.row && next.visibleColumnIndex === this.activeNode.column) {\n                next.visibleColumnIndex = this.grid.lastEditableColumnIndex;\n            } else if (!shift && next.rowIndex === this.activeNode.row && next.visibleColumnIndex === this.activeNode.column) {\n                next.visibleColumnIndex = this.grid.firstEditableColumnIndex;\n            } else {\n                next.rowIndex = this.activeNode.row;\n            }\n        }\n\n        this.navigateInBody(next.rowIndex, next.visibleColumnIndex, (obj) => {\n            obj.target.activate(event);\n            this.grid.cdr.detectChanges();\n        });\n    }\n\n    public shouldPerformHorizontalScroll(visibleColIndex: number, rowIndex = -1) {\n        if (visibleColIndex < 0 || visibleColIndex > this.grid.visibleColumns.length - 1) { return false; }\n        if (rowIndex < 0 || rowIndex > this.grid.dataView.length - 1) {\n            return !this.isColumnFullyVisible(visibleColIndex);\n        }\n        const row = this.grid.dataView[rowIndex];\n        return row.expression || row.detailsData ? false : !this.isColumnFullyVisible(visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColIndex: number): boolean {\n        if (this.grid.isRecordPinnedByViewIndex(targetRowIndex)) { return false; }\n        const scrollRowIndex = this.grid.hasPinnedRecords && this.grid.isRowPinningToTop ?\n            targetRowIndex - this.grid.pinnedDataView.length : targetRowIndex;\n        const targetRow = this.getRowElementByIndex(targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(scrollRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const endTopOffset = targetRow ? targetRow.offsetTop + rowHeight + this.containerTopOffset : containerHeight + rowHeight;\n        // this is workaround: endTopOffset - containerHeight > 5 and should be replaced with: containerHeight < endTopOffset\n        // when the page is zoomed the grid does not scroll the row completely in the view\n        return !targetRow || targetRow.offsetTop < Math.abs(this.containerTopOffset)\n            || containerHeight && endTopOffset - containerHeight > 5;\n    }\n\n    protected navigateInBody(rowIndex, visibleColIndex, cb: Function = null): void {\n        if (!this.isValidPosition(rowIndex, visibleColIndex) || this.isActiveNode(rowIndex, visibleColIndex)) { return; }\n        this.grid.navigateTo(rowIndex, visibleColIndex, cb);\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex = -1, cb?: () => void) {\n        if (!this.shouldPerformVerticalScroll(rowIndex, visibleColIndex)) { return; }\n        this.pendingNavigation = true;\n        // Only for top pinning we need to subtract pinned count because virtualization indexing doesn't count pinned rows.\n        const scrollRowIndex = this.grid.hasPinnedRecords && this.grid.isRowPinningToTop ?\n            rowIndex - this.grid.pinnedDataView.length : rowIndex;\n        this.grid.verticalScrollContainer.scrollTo(scrollRowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                this.pendingNavigation = false;\n                if (cb) { cb(); }\n            });\n    }\n\n    public performHorizontalScrollToCell(visibleColumnIndex: number, cb?: () => void) {\n        if (!this.shouldPerformHorizontalScroll(visibleColumnIndex)) { return; }\n        this.pendingNavigation = true;\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                this.pendingNavigation = false;\n                if (cb) { cb(); }\n            });\n        this.forOfDir().scrollTo(this.getColumnUnpinnedIndex(visibleColumnIndex));\n    }\n\n    public isDataRow(rowIndex: number, includeSummary = false) {\n        if (rowIndex < 0 || rowIndex > this.grid.dataView.length - 1) { return false; }\n        const curRow = this.grid.dataView[rowIndex];\n        return curRow && !this.grid.isGroupByRecord(curRow) && !this.grid.isDetailRecord(curRow)\n            && !curRow.childGridsData && (includeSummary || !curRow.summaries);\n    }\n\n    public setActiveNode(activeNode: IActiveNode) {\n        if (!this.isActiveNodeChanged(activeNode)) {\n            return;\n        }\n\n        if (!this.activeNode) {\n            this.activeNode = activeNode;\n        }\n\n        Object.assign(this.activeNode, activeNode);\n\n        const currRow = this.grid.dataView[activeNode.row];\n        const type: GridKeydownTargetType = activeNode.row < 0 ? 'headerCell' :\n            this.isDataRow(activeNode.row) ? 'dataCell' :\n                currRow && this.grid.isGroupByRecord(currRow) ? 'groupRow' :\n                    currRow && this.grid.isDetailRecord(currRow) ? 'masterDetailRow' : 'summaryCell';\n\n        const args: IActiveNodeChangeEventArgs = {\n            row: this.activeNode.row,\n            column: this.activeNode.column,\n            level: this.activeNode.level,\n            tag: type\n        };\n\n        this.grid.activeNodeChange.emit(args);\n    }\n\n    public isActiveNodeChanged(activeNode: IActiveNode) {\n        let isChanged = false;\n        const checkInnerProp = (aciveNode: ColumnGroupsCache | IMultiRowLayoutNode, prop) => {\n            if (!aciveNode) {\n                isChanged = true;\n                return;\n            }\n\n            props = Object.getOwnPropertyNames(aciveNode);\n            for (let i = 0; i < props.length; i++) {\n                const propName = props[i];\n                if (this.activeNode[prop][propName] !== aciveNode[propName]) {\n                    isChanged = true;\n                }\n            }\n        };\n\n        if (!this.activeNode) {\n            return isChanged = true;\n        }\n\n        let props = Object.getOwnPropertyNames(activeNode);\n        for (let i = 0; i < props.length; i++) {\n            const propName = props[i];\n\n            if (!!this.activeNode[propName] && typeof this.activeNode[propName] === 'object') {\n                checkInnerProp(activeNode[propName], propName);\n            } else if (this.activeNode[propName] !== activeNode[propName]) {\n                isChanged = true;\n            }\n        }\n\n        return isChanged;\n    }\n\n\n\n    protected emitKeyDown(type: GridKeydownTargetType, rowIndex, event) {\n        const row = this.grid.summariesRowList.toArray().concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n\n        const target = type === 'groupRow' ? row :\n            type === 'dataCell' ? row.cells?.find(c => c.visibleColumnIndex === this.activeNode.column) :\n                row.summaryCells?.find(c => c.visibleColumnIndex === this.activeNode.column);\n        const keydownArgs = { targetType: type, event: event, cancel: false, target: target };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel && type === 'dataCell') {\n            this.grid.selectionService.clear();\n            this.grid.selectionService.keyboardState.active = true;\n            return keydownArgs.cancel;\n        }\n    }\n\n    protected isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean {\n        const horizontalScroll = forOfDir.getScroll();\n        return (!horizontalScroll.clientWidth || this.grid.getColumnByVisibleIndex(columnIndex)?.pinned);\n    }\n\n    protected findFirstDataRowIndex(): number {\n        return this.grid.dataView.findIndex(rec => !this.grid.isGroupByRecord(rec) && !this.grid.isDetailRecord(rec));\n    }\n\n    protected findLastDataRowIndex(): number {\n        if ((this.grid as any).totalItemCount) { return (this.grid as any).totalItemCount - 1; }\n        let i = this.grid.dataView.length;\n        while (i--) {\n            if (this.isDataRow(i)) {\n                return i;\n            }\n        }\n    }\n\n    protected getRowElementByIndex(index) {\n        if (this.grid.hasDetails) {\n            const detail = this.grid.nativeElement.querySelector(`[detail=\"true\"][data-rowindex=\"${index}\"]`);\n            if (detail) { return detail; }\n        }\n        return this.grid.rowList.toArray().concat(this.grid.summariesRowList.toArray()).find(r => r.index === index)?.nativeElement;\n    }\n\n    protected isValidPosition(rowIndex: number, colIndex: number): boolean {\n        const length = (this.grid as any).totalItemCount ?? this.grid.dataView.length;\n        if (rowIndex < 0 || colIndex < 0 || length - 1 < rowIndex || this.lastColumnIndex < colIndex) {\n            return false;\n        }\n        return this.activeNode.column !== colIndex && !this.isDataRow(rowIndex, true) ? false : true;\n    }\n    protected performHeaderKeyCombination(column, key, shift, ctrl, alt, event) {\n        let direction = this.grid.sortingExpressions.find(expr => expr.fieldName === column.field)?.dir;\n        if (ctrl && key.includes('up') && column.sortable && !column.columnGroup) {\n            direction = direction === SortingDirection.Asc ? SortingDirection.None : SortingDirection.Asc;\n            this.grid.sort({ fieldName: column.field, dir: direction, ignoreCase: false });\n            return;\n        }\n        if (ctrl && key.includes('down') && column.sortable && !column.columnGroup) {\n            direction = direction === SortingDirection.Desc ? SortingDirection.None : SortingDirection.Desc;\n            this.grid.sort({ fieldName: column.field, dir: direction, ignoreCase: false });\n            return;\n        }\n        if (shift && alt && this.isToggleKey(key) && !column.columnGroup && column.groupable) {\n            direction = direction ? SortingDirection.Desc : SortingDirection.Asc;\n            key.includes('right') ? (this.grid as any).groupBy({ fieldName: column.field, dir: direction, ignoreCase: false }) :\n                (this.grid as any).clearGrouping(column.field);\n            this.activeNode.column = key.includes('right') && (this.grid as any).hideGroupedColumns &&\n                column.visibleIndex === this.lastColumnIndex ? this.lastColumnIndex - 1 : this.activeNode.column;\n            return;\n        }\n        if (alt && (ROW_EXPAND_KEYS.has(key) || ROW_COLLAPSE_KEYS.has(key))) {\n            this.handleMCHExpandCollapse(key, column);\n            return;\n        }\n        if ([' ', 'spacebar', 'space'].indexOf(key) !== -1) {\n            this.handleColumnSelection(column, event);\n        }\n        if (alt && (key === 'l' || key === '¬') && this.grid.allowAdvancedFiltering) {\n            this.grid.openAdvancedFilteringDialog();\n        }\n        if (ctrl && shift && key === 'l' && this.grid.allowFiltering && !column.columnGroup && column.filterable) {\n            if (this.grid.filterMode === FilterMode.excelStyleFilter) {\n                const headerEl = this.grid.nativeElement.querySelector(`.igx-grid__th--active`);\n                this.grid.filteringService.toggleFilterDropdown(headerEl, column, IgxGridExcelStyleFilteringComponent);\n            } else {\n                this.performHorizontalScrollToCell(column.visibleIndex);\n                this.grid.filteringService.filteredColumn = column;\n                this.grid.filteringService.isFilterRowVisible = true;\n            }\n        }\n    }\n\n    private handleMCHeaderNav(key: string, ctrl: boolean) {\n        const newHeaderNode: ColumnGroupsCache = {\n            visibleIndex: this.activeNode.mchCache.visibleIndex,\n            level: this.activeNode.mchCache.level\n        };\n        const activeCol = this.currentActiveColumn;\n        const lastGroupIndex = Math.max(... this.grid.visibleColumns.\n            filter(c => c.level <= this.activeNode.level).map(col => col.visibleIndex));\n        let nextCol = activeCol;\n        if ((key.includes('left') || key === 'home') && this.activeNode.column > 0) {\n            const index = ctrl || key === 'home' ? 0 : this.activeNode.column - 1;\n            nextCol = this.getNextColumnMCH(index);\n            newHeaderNode.visibleIndex = nextCol.visibleIndex;\n        }\n        if ((key.includes('right') || key === 'end') && activeCol.visibleIndex < lastGroupIndex) {\n            const nextVIndex = activeCol.children ? Math.max(...activeCol.allChildren.map(c => c.visibleIndex)) + 1 :\n                activeCol.visibleIndex + 1;\n            nextCol = ctrl || key === 'end' ? this.getNextColumnMCH(this.lastColumnIndex) : this.getNextColumnMCH(nextVIndex);\n            newHeaderNode.visibleIndex = nextCol.visibleIndex;\n        }\n        if (!ctrl && key.includes('up') && this.activeNode.level > 0) {\n            nextCol = activeCol.parent;\n            newHeaderNode.level = nextCol.level;\n        }\n        if (!ctrl && key.includes('down') && activeCol.children) {\n            nextCol = activeCol.children.find(c => c.visibleIndex === newHeaderNode.visibleIndex) ||\n                activeCol.children.toArray().sort((a, b) => b.visibleIndex - a.visibleIndex)\n                    .filter(col => col.visibleIndex < newHeaderNode.visibleIndex)[0];\n            newHeaderNode.level = nextCol.level;\n        }\n\n        this.setActiveNode({\n            row: this.activeNode.row,\n            column: nextCol.visibleIndex,\n            level: nextCol.level,\n            mchCache: newHeaderNode\n        });\n        this.performHorizontalScrollToCell(nextCol.visibleIndex);\n    }\n\n    private handleMCHExpandCollapse(key, column) {\n        if (!column.children || !column.collapsible) { return; }\n        if (!column.expanded && ROW_EXPAND_KEYS.has(key)) {\n            column.expanded = true;\n        } else if (column.expanded && ROW_COLLAPSE_KEYS.has(key)) {\n            column.expanded = false;\n        }\n    }\n\n    private handleColumnSelection(column, event) {\n        if (!column.selectable || this.grid.columnSelection === GridSelectionMode.none) { return; }\n        const clearSelection = this.grid.columnSelection === GridSelectionMode.single;\n        const columnsToSelect = !column.children ? [column.field] :\n            column.allChildren.filter(c => !c.hidden && c.selectable && !c.columnGroup).map(c => c.field);\n        column.selected ? this.grid.selectionService.deselectColumns(columnsToSelect, event) :\n            this.grid.selectionService.selectColumns(columnsToSelect, clearSelection, false, event);\n    }\n\n    private getNextColumnMCH(visibleIndex) {\n        let col = this.grid.getColumnByVisibleIndex(visibleIndex);\n        let parent = col.parent;\n        while (parent && col.level > this.activeNode.mchCache.level) {\n            col = col.parent;\n            parent = col.parent;\n        }\n        return col;\n    }\n\n    private get currentActiveColumn() {\n        return this.grid.visibleColumns.find(c => c.visibleIndex === this.activeNode.column && c.level === this.activeNode.level);\n    }\n\n    private isActiveNode(rIndex: number, cIndex: number): boolean {\n        return this.activeNode ? this.activeNode.row === rIndex && this.activeNode.column === cIndex : false;\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n\n    private isAddKey(key: string): boolean {\n        return ROW_ADD_KEYS.has(key);\n    }\n}\n","import { AutoPositionStrategy } from '../../../services/overlay/position/auto-position-strategy';\nimport { ConnectedFit } from '../../../services/overlay/utilities';\n\n/** @hidden */\nexport class ExcelStylePositionStrategy extends AutoPositionStrategy {\n    protected shouldFitInViewPort(connectedFit: ConnectedFit) {\n        return true;\n    }\n\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const heightOverflow = connectedFit.contentElementRect.height - connectedFit.viewPortRect.height;\n        if (heightOverflow > 0) {\n            element.style.width = 'auto';\n            element.style.height = `${connectedFit.viewPortRect.height}px`;\n        } else {\n            element.style.height = `${Math.max(\n                connectedFit.viewPortRect.height - connectedFit.targetRect.bottom - 1,\n                connectedFit.contentElementRect.height)}px`;\n        }\n\n        super.fitInViewport(element, connectedFit);\n    }\n}\n","import { Injectable, OnDestroy, NgModuleRef } from '@angular/core';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\nimport { IColumnResizeEventArgs } from '../common/events';\nimport { GridType } from '../common/grid.interface';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../../services/overlay/utilities';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { useAnimation } from '@angular/animations';\nimport { fadeIn, fadeOut } from '../../animations/main';\nimport { ExcelStylePositionStrategy } from './excel-style/excel-style-position-strategy';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll/absolute-scroll-strategy';\nimport { IgxGridExcelStyleFilteringComponent } from './excel-style/grid.excel-style-filtering.component';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { editor, pinLeft, unpinLeft } from '@igniteui/material-icons-extended';\n\n/**\n * @hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n * @hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private columnStartIndex = -1;\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private column;\n    private lastActiveNode;\n\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n    public activeFilterCell = 0;\n    grid: IgxGridBaseDirective;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, private _moduleRef: NgModuleRef<any>,\n        private iconService: IgxIconService,  private _overlayService: IgxOverlayService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public toggleFilterDropdown(element, column, classRef) {\n        if (!this._componentOverlayId || (this.column && this.column.field !== column.field)) {\n            this.initFilteringSettings();\n            this.column = column;\n            const filterIcon = this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n            const filterIconTarget = element.querySelector('.' + filterIcon);\n\n            this._filterMenuOverlaySettings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = (this.grid as any).outlet;\n\n            if (this.grid.excelStyleFilteringComponent) {\n                this._componentOverlayId =\n                    this._overlayService.attach(this.grid.excelStyleFilteringComponent.element, this._filterMenuOverlaySettings);\n            } else {\n                this._componentOverlayId =\n                    this._overlayService.attach(classRef, this._filterMenuOverlaySettings, this._moduleRef);\n            }\n\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    public initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, { params: { duration: '250ms' }}),\n            closeAnimation: null\n        };\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new ExcelStylePositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            first((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this.destroy$)).subscribe((eventArgs) => {\n                const instance = this.grid.excelStyleFilteringComponent ?\n                    this.grid.excelStyleFilteringComponent :\n                    eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n\n                if (instance) {\n                    this.lastActiveNode = this.grid.navigation.activeNode;\n                    instance.initialize(this.column, this._overlayService, eventArgs.id);\n                }\n            });\n\n        this._overlayService.onClosed.pipe(\n            first((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this.destroy$)).subscribe((eventArgs) => {\n                const instance = this.grid.excelStyleFilteringComponent ?\n                    this.grid.excelStyleFilteringComponent :\n                    eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n\n                if (instance) {\n                    instance.column = null;\n                }\n                this._componentOverlayId = null;\n                this.grid.navigation.activeNode = this.lastActiveNode;\n                this.grid.theadRow.nativeElement.focus();\n            });\n    }\n\n    public hideExcelFiltering() {\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Close filtering row if a column is hidden.\n     */\n    public hideFilteringRowOnColumnVisibilityChange(col: IgxColumnComponent) {\n        const filteringRow = this.grid.filteringRow;\n\n        if (filteringRow && filteringRow.column && filteringRow.column === col) {\n            filteringRow.close();\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clears the filter of a given column if name is provided. Otherwise clears the filters of all columns.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        } else {\n            this.grid.columns.forEach(c => {\n                const expressions = this.getExpressions(c.field);\n                expressions.length = 0;\n            });\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        const editorIcons = editor as any[];\n        editorIcons.forEach(icon => this.iconService.addSvgIconFromText(icon.name, icon.value, 'imx-icons'));\n        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');\n        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n            if (column) {\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n                this.columnToExpressionsMap.set(columnId, expressionUIs);\n            }\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            const pipeArgs = this.grid.getColumnByName(expression.fieldName).pipeArgs;\n            return this.grid.datePipe.transform(expression.searchVal, pipeArgs.format, undefined, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean {\n        if (FilteringExpressionsTree.empty(expressionTree)) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\n\n/**\n * @hidden\n * @internal\n */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    /**\n     * @hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     * @hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     * @hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        const minWidth = this.column.minWidthPx < actualWidth ? this.column.minWidthPx : actualWidth;\n\n        return actualWidth - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        const maxWidth = this.column.maxWidthPx;\n        if (this.column.maxWidth) {\n            return maxWidth - actualWidth;\n        } else {\n            return Number.MAX_SAFE_INTEGER;\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        const isPercentageWidth = this.column.width && typeof this.column.width === 'string' && this.column.width.indexOf('%') !== -1;\n        let size = this.column.getAutoSize();\n        const maxWidth = isPercentageWidth ? this.column.maxWidthPercent : this.column.maxWidthPx;\n        const minWidth = isPercentageWidth ? this.column.minWidthPercent : this.column.minWidthPx;\n        if (this.column.maxWidth && (parseFloat(size) > maxWidth)) {\n            size = isPercentageWidth ? maxWidth + '%' : maxWidth + 'px';\n        } else if (parseFloat(size) < minWidth) {\n            size = isPercentageWidth ? minWidth + '%' : minWidth + 'px';\n        }\n        this.column.width = size;\n\n        this.zone.run(() => {});\n\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        const colWidth = this.column.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        let currentColWidth = parseFloat(colWidth);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) ? parseFloat(actualWidth) : currentColWidth;\n\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else if (isPercentageWidth) {\n            this._handlePercentageResize(diff, this.column);\n        } else {\n            this._handlePixelResize(diff, this.column);\n        }\n\n\n        this.zone.run(() => {});\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: isPercentageWidth ? currentColWidth + '%' : currentColWidth + 'px',\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected _handlePixelResize(diff: number, column: IgxColumnComponent) {\n        const currentColWidth = parseFloat(column.width);\n        const colMinWidth = column.minWidthPx;\n        const colMaxWidth = column.maxWidthPx;\n        if (currentColWidth + diff < colMinWidth) {\n            column.width = colMinWidth + 'px';\n        } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n            column.width = colMaxWidth + 'px';\n        } else {\n            column.width = (currentColWidth + diff) + 'px';\n        }\n    }\n\n    protected _handlePercentageResize(diff: number, column: IgxColumnComponent) {\n        const currentPercentWidth = parseFloat(column.width);\n        const gridAvailableSize = column.grid.calcWidth;\n\n        const diffPercentage = (diff / gridAvailableSize) * 100;\n        const colMinWidth = column.minWidthPercent;\n        const colMaxWidth =  column.maxWidthPercent;\n\n        if (currentPercentWidth + diffPercentage < colMinWidth) {\n            column.width = colMinWidth + '%';\n        } else if (colMaxWidth && (currentPercentWidth + diffPercentage > colMaxWidth)) {\n            column.width = colMaxWidth + '%';\n        } else {\n            column.width = (currentPercentWidth + diffPercentage) + '%';\n        }\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n                const colWidth = col.target.width;\n                const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n                const minWidth = col.target.minWidthPx;\n                const maxWidth = col.target.maxWidthPx;\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = isPercentageWidth ? col.target.minWidthPercent + '%' : minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = isPercentageWidth ? col.target.maxWidthPercent + '%' : col.target.maxWidthPx + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            const colWidth = col.target.width;\n            const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n            if (isPercentageWidth) {\n                this._handlePercentageResize(resizeScaled, col.target);\n            } else {\n                this._handlePixelResize(resizeScaled, col.target);\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport { DataType } from '../../data-operations/data-util';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { Subject } from 'rxjs';\nimport { GridType } from '../common/grid.interface';\nimport { GridSelectionMode } from '../common/enums';\nimport { IgxGridExcelStyleFilteringComponent } from '../filtering/excel-style/grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnDestroy {\n\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    /**\n     * Returns the `aria-selected` of the header.\n     */\n    @HostBinding('attr.aria-selected')\n    public get ariaSelected(): boolean {\n        return this.column.selected;\n    }\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--selectable': this.selectable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted,\n            'igx-grid__th--selected': this.selected\n        };\n\n        for (const klass of Object.keys(classList)) {\n            if (classList[klass]) {\n                defaultClasses.push(klass);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.rem')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    get selectable() {\n        return this.grid.columnSelection !== GridSelectionMode.none &&\n            this.column.applySelectableClass &&\n            !this.column.selected &&\n            !this.grid.filteringService.isFilterRowVisible;\n    }\n\n    get selected() {\n        return this.column.selected\n            && (!this.grid.filteringService.isFilterRowVisible || this.grid.filteringService.filteredColumn !== this.column);\n    }\n\n    get columnTitle() {\n        return this.column.title || this.column.header || this.column.field;\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone\n    ) { }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n        this.grid.filteringService.hideExcelFiltering();\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterCellTemplate) {\n                    this.grid.filteringRow.close();\n                    return;\n                }\n\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.grid.columnSelection !== GridSelectionMode.none && this.column.selectable) {\n                const clearSelection = this.grid.columnSelection === GridSelectionMode.single || !event.ctrlKey;\n                const rangeSelection = this.grid.columnSelection === GridSelectionMode.multiple && event.shiftKey;\n\n                if (!this.column.selected || (this.grid.selectionService.getSelectedColumns().length > 1 && clearSelection)) {\n                    this.grid.selectionService.selectColumn(this.column.field, clearSelection, rangeSelection, event);\n                } else {\n                    this.grid.selectionService.deselectColumn(this.column.field, event);\n                }\n            }\n        }\n        this.grid.theadRow.nativeElement.focus();\n    }\n\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n        this.grid.filteringService.toggleFilterDropdown(this.elementRef.nativeElement, this.column, IgxGridExcelStyleFilteringComponent);\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        event.stopPropagation();\n        this.triggerSort();\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({\n            fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.column.applySelectableClass = true;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.column.applySelectableClass = false;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips/public_api';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { DisplayDensity } from '../../../core/displayDensity';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef, static: true })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef, static: true })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef, static: true })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        let classes = this.column && this.column.selected ?\n            'igx-grid__filtering-cell--selected' :\n            'igx-grid__filtering-cell';\n\n        switch (this.column.grid.displayDensity) {\n            case DisplayDensity.compact:\n                classes = classes + ' igx-grid__filtering-cell--compact';\n                break;\n            case DisplayDensity.cosy:\n                classes = classes + ' igx-grid__filtering-cell--cosy';\n                break;\n        }\n        return classes;\n    }\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get displayDensity(): string {\n        return this.column.grid.displayDensity === DisplayDensity.comfortable ? DisplayDensity.cosy : this.column.grid.displayDensity;\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            return null;\n        }\n        if (this.column.filterCellTemplate) {\n            return this.column.filterCellTemplate;\n        }\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            return this.emptyFilter;\n        }\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            return this.complexFilter;\n        }\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return { column: this.column };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n        this.filteringService.grid.navigation.performHorizontalScrollToCell(this.column.visibleIndex);\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.filteringService.grid.theadRow.nativeElement.focus();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';\nimport { isIE } from '../../core/utils';\nimport { GridType } from '../common/grid.interface';\nimport { GridSelectionMode } from '../common/enums';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class.igx-grid__th--active')\n    public get active() {\n        const node = this.grid.navigation.activeNode;\n        return  node && !this.column.columnGroup ?\n            node.row === -1 && node.column === this.column.visibleIndex && node.level === this.column.level : false;\n    }\n\n    public get activeGroup() {\n        const node = this.grid.navigation.activeNode;\n        return  node ? node.row === -1 && node.column === this.column.visibleIndex && node.level === this.column.level : false;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent)\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent)\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__th--pinned-first': this.isFirstPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        for (const className of Object.keys(classList)) {\n            if (classList[className]) {\n                defaultClasses.push(className);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    /**\n     * Gets whether the header group is stored in the first column of the right pinned area.\n     */\n    get isFirstPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isFirstPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn === this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get hasFirstPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isFirstPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get selectable() {\n        const selectableChildren = this.column.allChildren.filter(c => !c.hidden && c.selectable && !c.columnGroup);\n        return this.grid.columnSelection !== GridSelectionMode.none &&\n            this.column.applySelectableClass\n            && !this.selected && selectableChildren.length > 0\n            && !this.grid.filteringService.isFilterRowVisible;\n    }\n\n    /**\n     * @hidden\n     */\n    get selected() {\n        return this.column.selected;\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    get columnTitle() {\n        return this.column.title || this.column.header;\n    }\n\n    /**\n     * @hidden\n     */\n    public groupClicked(event): void {\n        const columnsToSelect = this.column.allChildren.filter(c => !c.hidden && c.selectable && !c.columnGroup).map(c => c.field);\n        if (this.grid.columnSelection !== GridSelectionMode.none\n            && columnsToSelect.length > 0 && !this.grid.filteringService.isFilterRowVisible) {\n            const clearSelection = this.grid.columnSelection === GridSelectionMode.single || !event.ctrlKey;\n            const rangeSelection = this.grid.columnSelection === GridSelectionMode.multiple && event.shiftKey;\n            if (!this.selected) {\n                this.grid.selectionService.selectColumns(columnsToSelect, clearSelection, rangeSelection, event);\n            } else {\n                const selectedFields = this.grid.selectionService.getSelectedColumns();\n                if ((selectedFields.length === columnsToSelect.length) && selectedFields.every(el => columnsToSelect.includes(el))\n                    || !clearSelection) {\n                    this.grid.selectionService.deselectColumns(columnsToSelect, event);\n                } else {\n                    this.grid.selectionService.selectColumns(columnsToSelect, clearSelection, rangeSelection, event);\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleExpandState(event): void {\n        event.stopPropagation();\n        this.column.expanded = !this.column.expanded;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('pointerdown', ['$event'])\n    public pointerdown(event): void {\n        event.stopPropagation();\n        this.activate();\n        this.grid.theadRow.nativeElement.focus();\n    }\n\n    /*\n     * This method is necessary due to some specifics related with implementation of column moving\n     * @hidden\n     */\n    public activate() {\n        this.grid.navigation.setActiveNode(this.activeNode);\n        this.grid.theadRow.nativeElement.focus();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n    /**\n     * @hidden\n     */\n    public onPinterEnter() {\n        this.column.applySelectableClass = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onPointerLeave() {\n        this.column.applySelectableClass = false;\n    }\n\n    private get activeNode() {\n        return {row: -1, column: this.column.visibleIndex, level: this.column.level,\n            mchCache: {level: this.column.level, visibleIndex: this.column.visibleIndex},\n            layout: this.column.columnLayoutChild ? {\n            rowStart: this.column.rowStart,\n            colStart: this.column.colStart,\n            rowEnd: this.column.rowEnd,\n            colEnd: this.column.colEnd,\n            columnVisibleIndex: this.column.visibleIndex} : null };\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public element: ElementRef,\n        public colResizingService: IgxColumnResizingService,\n        public filteringService: IgxFilteringService) { }\n}\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray, resolveNestedPath } from '../../core/utils';\nimport { GridType, FlatGridType, TreeGridType } from '../common/grid.interface';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid: GridType;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.notifyChanges(true);\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = (this.grid as FlatGridType).groupingExpressions &&\n            (this.grid as FlatGridType).groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, (this.grid as FlatGridType).groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                const summaryResult = column.summaries.operate(data.map(r => resolveNestedPath(r, column.field)),\n                    data, column.field, this.grid.locale, column.pipeArgs);\n                rowSummaries.set(column.field, summaryResult);\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = (this.grid as TreeGridType).records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ISelectionNode } from '../selection/selection.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef) {\n    }\n\n    /** @hidden */\n    @Input()\n    @HostBinding('class.igx-grid-summary--active')\n    public active: boolean;\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.id')\n    public get attrCellID() {\n        return `${this.grid.id}_${this.rowIndex}_${ this.visibleColumnIndex}`;\n    }\n\n    @HostListener('pointerdown')\n    public activate() {\n        const currNode = this.grid.navigation.activeNode;\n        if (currNode && this.rowIndex === currNode.row && this.visibleColumnIndex === currNode.column) {\n            return;\n        }\n\n        this.grid.navigation.setActiveNode({row: this.rowIndex, column: this.visibleColumnIndex}, 'summaryCell');\n        this.grid.cdr.detectChanges();\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { GridType } from '../common/grid.interface';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public _summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    public get summaryCells(): QueryList<IgxSummaryCellComponent> {\n        const res = new QueryList<IgxSummaryCellComponent>();\n        if (!this._summaryCells) { return res; }\n        const cList = this._summaryCells.filter(c => c.nativeElement.isConnected);\n        res.reset(cList);\n        return res;\n    }\n    public set summaryCells(cells) { }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public isCellActive(visibleColumnIndex) {\n        const node = this.grid.navigation.activeNode;\n        return node ? node.row === this.index && node.column === visibleColumnIndex : false;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    getContext(row) {\n        return {\n            $implicit: row\n        };\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IListResourceStrings } from '../core/i18n/list-resources';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxListBase]'\n})\nexport class IgxListBaseDirective extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ɵgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { PlatformUtil } from './utils';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    private platformBrowser: boolean;\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {};\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any, private platformUtil: PlatformUtil) {\n        this.platformBrowser = this.platformUtil.isBrowser;\n        if (this.platformBrowser) {\n            this.hammerOptions = {\n                // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n                // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n                inputClass: Hammer.TouchInput,\n                recognizers: [\n                    [Hammer.Pan, { threshold: 0 }],\n                    [Hammer.Swipe, {\n                        direction: Hammer.DIRECTION_HORIZONTAL\n                    }],\n                    [Hammer.Tap],\n                    [Hammer.Tap, { event: 'doubletap', taps: 2 }, ['tap']]\n                ]\n            };\n        }\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(\n        element: HTMLElement,\n        eventName: string,\n        eventHandler: (eventObj) => void,\n        options: HammerOptions = null): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, Object.assign(this.hammerOptions, options));\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBaseDirective\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     * @hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     * @hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     * @hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBaseDirective,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     * @hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     * @hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     * @hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     * @hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     * @hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     * @hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBaseDirective,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\nimport { IListResourceStrings } from '../core/i18n/list-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\n\nlet NEXT_ID = 0;\n\n/**\n * Interface for the panStateChange igxList event arguments\n */\nexport interface IPanStateChangeEventArgs extends IBaseEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\n/**\n * Interface for the listItemClick igxList event arguments\n */\nexport interface IListItemClickEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\n/**\n * Interface for the listItemPanning igxList event arguments\n */\nexport interface IListItemPanningEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n/**\n * Displays a collection of data items in a templatable list format\n *\n * @igxModule IgxListModule\n *\n * @igxTheme igx-list-theme\n *\n * @igxKeywords list, data\n *\n * @igxGroup Grids & Lists\n *\n * @remarks\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templatable and will support any valid HTML or Angular component.\n *\n * @example\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBaseDirective, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBaseDirective {\n    /**\n     * Sets the resource strings.\n     * By default it uses EN resources.\n     */\n   @Input()\n   set resourceStrings(value: IListResourceStrings) {\n       this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n   }\n\n    /**\n     * Returns the resource strings.\n     */\n    get resourceStrings(): IListResourceStrings {\n        return this._resourceStrings;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.ListResStrings;\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     *\n     * @example\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent), { descendants: true })\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Sets/gets the empty list template.\n     *\n     * @remarks\n     * This template is used by IgxList in case there are no list items\n     * defined and `isLoading` is set to `false`.\n     *\n     * @example\n     * ```html\n     * <igx-list>\n     *   <ng-template igxEmptyList>\n     *     <p class=\"empty\">No contacts! :(</p>\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Sets/gets the list loading template.\n     *\n     * @remarks\n     * This template is used by IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     *\n     * @example\n     * ```html\n     * <igx-list>\n     *   <ng-template igxDataLoading>\n     *     <p>Patience, we are currently loading your data...</p>\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template for left panning a list item.\n     *\n     * @remarks\n     * Default value is `null`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\">\n     *   <ng-template igxListItemLeftPanning>\n     *     <igx-icon>delete</igx-icon>Delete\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template for right panning a list item.\n     *\n     * @remarks\n     * Default value is `null`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowRightPanning] = \"true\">\n     *   <ng-template igxListItemRightPanning>\n     *     <igx-icon>call</igx-icon>Dial\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     *\n     * @remarks\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     *\n     * @example\n     * ```html\n     * <igx-list [panEndTriggeringThreshold]=\"0.8\"></igx-list>\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultEmptyList', { read: TemplateRef, static: true })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultDataLoading', { read: TemplateRef, static: true })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     *\n     * @remarks\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-list id=\"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId = this.list.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     *\n     * @remarks\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     *\n     * @remarks\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     *\n     * @remarks\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Event emitted when a left pan gesture is executed on a list item.\n     *\n     * @remarks\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Event emitted when a right pan gesture is executed on a list item.\n     *\n     * @remarks\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     *\n     * Event emitted when a pan gesture is executed on a list item.\n     *\n     * @remarks\n     * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-list (onPanStateChange)=\"onPanStateChange($event)\"></igx-list>\n     * ```\n     */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Event emitted when a list item is clicked.\n     *\n     * @remarks\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-list (onItemClicked)=\"onItemClicked($event)\"></igx-list>\n     * ```\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute value.\n     *\n     * @example\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Gets a boolean indicating if the list is empty.\n     *\n     * @example\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Gets the list `items` excluding the header ones.\n     *\n     * @example\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Gets the header list `items`.\n     *\n     * @example\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Gets the `context` object of the template binding.\n     *\n     * @remark\n     * Gets the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     *\n     * @example\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets a `TemplateRef` to the currently used template.\n     *\n     * @example\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListBaseDirective,\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import {\n    AfterViewInit,\n    Component,\n    ViewChild,\n    ChangeDetectorRef,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { IgxGridExcelStyleFilteringComponent, FilterListItem } from './grid.excel-style-filtering.component';\nimport { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { Subject } from 'rxjs';\nimport { IgxListComponent } from '../../../list/public_api';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { KEYS } from '../../../core/utils';\n\n@Directive({\n    selector: '[igxExcelStyleLoading]'\n})\nexport class IgxExcelStyleLoadingValuesTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * A component used for presenting Excel style search UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit, OnDestroy {\n    private static readonly filterOptimizationThreshold = 2;\n    private _isLoading;\n    private _addToCurrentFilter: FilterListItem;\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden @internal\n     */\n    public get addToCurrentFilter(): FilterListItem {\n        if (!this._addToCurrentFilter) {\n            const addToCurrentFilterItem = {\n                isSelected: false,\n                isFiltered: false,\n                indeterminate: false,\n                isSpecial: true,\n                isBlanks: false,\n                value: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter,\n                label: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter\n            };\n\n            this._addToCurrentFilter = addToCurrentFilterItem;\n        }\n\n        return this._addToCurrentFilter;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isLoading() {\n        return this._isLoading;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue: any;\n\n    /**\n     * @hidden @internal\n     */\n    public displayedListData: FilterListItem[];\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class') class = 'igx-excel-filter__menu-main';\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('input', { read: IgxInputDirective, static: true })\n    public searchInput: IgxInputDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('list', { read: IgxListComponent, static: true })\n    public list: IgxListComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef })\n    protected defaultExcelStyleLoadingValuesTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    public get valuesLoadingTemplate() {\n        if (this.esf.grid?.excelStyleLoadingValuesTemplateDirective) {\n            return this.esf.grid.excelStyleLoadingValuesTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleLoadingValuesTemplate;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef, public esf: IgxGridExcelStyleFilteringComponent) {\n        esf.loadingStart.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.displayedListData = [];\n            this.isLoading = true;\n        });\n        esf.loadingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.isLoading = false;\n            this.refreshSize();\n        });\n        esf.initialized.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.searchInput.nativeElement.focus();\n            });\n        });\n        esf.columnChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.virtDir.resetScrollPosition();\n        });\n\n        esf.listDataLoaded.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.searchValue ?\n                this.clearInput() :\n                this.filterListData();\n        });\n    }\n\n    public ngAfterViewInit() {\n        this.refreshSize();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public refreshSize() {\n        requestAnimationFrame(() => {\n            this.virtDir?.recalcUpdateSizes();\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearInput() {\n        this.searchValue = null;\n        this.filterListData();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.displayedListData.indexOf(eventArgs.checkbox.value);\n        const selectAllBtn = this.displayedListData[0];\n\n        if (selectedIndex === 0) {\n            this.displayedListData.forEach(element => {\n                if (element === this.addToCurrentFilter) { return; }\n                element.isSelected = eventArgs.checked;\n            });\n\n            selectAllBtn.indeterminate = false;\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            const indexToStartSlicing = this.displayedListData.indexOf(this.addToCurrentFilter) > -1 ? 2 : 1;\n\n            const slicedArray =\n                this.displayedListData.slice(indexToStartSlicing, this.displayedListData.length);\n\n            if (!slicedArray.find(el => el.isSelected === false)) {\n                selectAllBtn.indeterminate = false;\n                selectAllBtn.isSelected = true;\n            } else if (!slicedArray.find(el => el.isSelected === true)) {\n                selectAllBtn.indeterminate = false;\n                selectAllBtn.isSelected = false;\n            } else {\n                selectAllBtn.indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.esf.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '24px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get containerSize() {\n        if (this.list) {\n            return this.list.element.nativeElement.offsetHeight;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get applyButtonDisabled(): boolean {\n        return this.esf.listData[0] && !this.esf.listData[0].isSelected && !this.esf.listData[0].indeterminate ||\n            this.displayedListData && this.displayedListData.length === 0;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onInputKeyDown(event): void {\n        switch (event.key) {\n            case KEYS.ENTER:\n                event.preventDefault();\n                this.applyFilter();\n\n                return;\n            case KEYS.ESCAPE || KEYS.ESCAPE_IE:\n                if (this.searchValue) {\n                    event.stopPropagation();\n                    this.clearInput();\n                }\n\n                return;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filterListData(): void {\n        if (!this.esf.listData || !this.esf.listData.length) {\n            this.displayedListData = [];\n\n            return;\n        }\n\n        const searchAllBtn = this.esf.listData[0];\n\n        if (!this.searchValue) {\n            const anyFiltered = this.esf.listData.some(i => i.isFiltered);\n            const anyUnfiltered = this.esf.listData.some(i => !i.isFiltered);\n\n            if (anyFiltered && anyUnfiltered) {\n                searchAllBtn.indeterminate = true;\n            }\n\n            this.esf.listData.forEach(i => i.isSelected = i.isFiltered);\n            this.displayedListData = this.esf.listData;\n            searchAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all;\n\n            return;\n        }\n\n        const searchVal = this.searchValue.toLowerCase();\n\n        this.displayedListData = this.esf.listData.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.label !== null && it.label !== undefined) &&\n            !it.isBlanks &&\n            it.label.toString().toLowerCase().indexOf(searchVal) > -1);\n\n       this.esf.listData.forEach(i => i.isSelected = false);\n       this.displayedListData.forEach(i => i.isSelected = true);\n\n        this.displayedListData.splice(1, 0, this.addToCurrentFilter);\n\n        searchAllBtn.indeterminate = false;\n        searchAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all_search_results;\n\n        if (this.displayedListData.length === 2) {\n            this.displayedListData = [];\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.esf.column.field);\n\n        const item = this.displayedListData[1];\n        const addToCurrentFilterOptionVisible = item === this.addToCurrentFilter;\n\n        const selectedItems = addToCurrentFilterOptionVisible && item.isSelected ?\n            this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected || el.isFiltered) :\n            this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected);\n\n        const unselectedItem = this.esf.listData.slice(1, this.esf.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxExcelStyleSearchComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.esf.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.esf.column.field,\n                        ignoreCase: this.esf.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.esf.column.field,\n                    ignoreCase: this.esf.column.filteringIgnoreCase,\n                    searchVal: new Set(this.esf.column.dataType === DataType.Date ?\n                        selectedItems.map(d => d.value.toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.esf.column.field,\n                        ignoreCase: this.esf.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.esf.grid.filteringService.filterInternal(this.esf.column.field, filterTree);\n            this.esf.expressionsList = new Array<ExpressionUI>();\n            this.esf.grid.filteringService.generateExpressionsList(this.esf.column.filteringExpressionsTree,\n                this.esf.grid.filteringLogic, this.esf.expressionsList);\n        } else {\n            this.esf.grid.filteringService.clearFilter(this.esf.column.field);\n        }\n\n        this.esf.closeDropdown();\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.esf.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    Inject,\n    Input,\n    NgZone,\n    Output,\n    OnInit,\n    OnDestroy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle } from 'rxjs/operators';\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './resizing.service';\nimport { IgxColumnResizerDirective } from './resizer.directive';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective, { static: true })\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    ChangeDetectionStrategy,\n    ViewRef,\n    HostListener\n} from '@angular/core';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../../drop-down/public_api';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips/public_api';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from '../grid-filtering.service';\nimport { KEYS, isEdge, isIE } from '../../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../../services/overlay/scroll';\nimport { DisplayDensity } from '../../../core/displayDensity';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (this._column) {\n            this.expressionsList.forEach(exp => exp.isSelected = false);\n        }\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = DataUtil.parseValue(this.column.dataType, val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n        this.filter();\n    }\n\n    public get displayDensity() {\n        return this.column.grid.displayDensity === DisplayDensity.comfortable ? DisplayDensity.cosy : this.column.grid.displayDensity;\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef, static: true })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef, static: true })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent, static: true })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: true })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container', { static: true })\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton', { static: true })\n    public closeButton: ElementRef;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        let classes = 'igx-grid__filtering-row';\n\n        switch (this.column.grid.displayDensity) {\n            case DisplayDensity.compact:\n                classes = classes + ' igx-grid__filtering-row--compact';\n                break;\n            case DisplayDensity.cosy:\n                classes = classes + ' igx-grid__filtering-row--cosy';\n                break;\n        }\n        return classes;\n    }\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outlet;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outlet;\n\n        const selectedItem = this.expressionsList.find(expr => expr.isSelected === true);\n        if (selectedItem) {\n            this.expression = selectedItem.expression;\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeydownHandler(evt) {\n        if (evt.key === KEYS.ESCAPE || evt.key === KEYS.ESCAPE_IE ||\n            evt.ctrlKey && evt.shiftKey && evt.key.toLowerCase() === 'l') {\n                evt.preventDefault();\n                evt.stopPropagation();\n                this.close();\n        }\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB && !this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n        event.stopPropagation();\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                return;\n            }\n        }\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE ||\n            event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'l') {\n                this.close();\n        }\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        const target = eventArgs.target;\n\n        if (isEdge() && target.type !== 'number' || this.isKeyPressed && isIE() || target.value || target.checkValidity()) {\n            this.value = target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        const selectedItem = this.expressionsList.filter(ex => ex.isSelected === true);\n        selectedItem.forEach(e => e.isSelected = false);\n\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0 &&\n            this.expression.condition && !this.expression.condition.isUnary) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n\n            if (focusedElement.className === 'igx-chip__remove' || focusedElement.tagName === 'IGX-DAY-ITEM') {\n                return;\n            }\n\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement))\n                && this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n\n            this.filter();\n        } else {\n            const condToRemove = this.expressionsList.filter(ex => ex.expression.searchVal === null && !ex.expression.condition.isUnary);\n            if (condToRemove && condToRemove.length > 0) {\n                condToRemove.forEach(c => this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(c)));\n                this.filter();\n            }\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.filteringService.grid.theadRow.nativeElement.focus();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * noop\n    */\n    public noop() { }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public inputGroupPrefixClick(event: MouseEvent) {\n        event.stopPropagation();\n        (event.currentTarget as HTMLElement).focus();\n        this.toggleConditionsDropDown(event.currentTarget);\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.target = target;\n        this._conditionsOverlaySettings.excludeFromOutsideClick = [target as HTMLElement];\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.target = eventArgs.target.parentElement;\n        this._operatorsOverlaySettings.excludeFromOutsideClick = [eventArgs.target.parentElement as HTMLElement];\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement &&\n            this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, item: ExpressionUI) {\n        if (this._cancelChipClick) {\n            this._cancelChipClick = false;\n            return;\n        }\n\n        this.expressionsList.forEach(ex => ex.isSelected = false);\n\n        this.toggleChip(item);\n    }\n\n    public toggleChip(item: ExpressionUI) {\n        item.isSelected = !item.isSelected;\n        if (item.isSelected) {\n            this.expression = item.expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n\n            this.toggleChip(item);\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                if (!(this.cdr as ViewRef).destroyed) {\n                this.cdr.detectChanges(); }\n            }\n        });\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n\n    public get isNarrowWidth(): boolean {\n        return this.element.nativeElement.offsetWidth < 432;\n    }\n}\n","import { Directive, OnDestroy, Input, ElementRef, ViewContainerRef, NgZone, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { IgxDragDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { KEYS } from '../../core/utils';\nimport { IgxColumnMovingService } from './moving.service';\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]',\n\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    public data: any;\n\n    get column(): IgxColumnComponent {\n        return this.data;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _ghostClass = 'igx-grid__drag-ghost-image';\n    private ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n    private columnSelectedClass = 'igx-grid__th--selected';\n\n    constructor(\n        public element: ElementRef<HTMLElement>,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2,\n        public cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(cdr, element, viewContainer, zone, renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostClass = this._ghostClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createGhost(pageX, pageY) {\n        super.createGhost(pageX, pageY);\n\n        this.ghostElement.style.height = null;\n        this.ghostElement.style.minWidth = null;\n        this.ghostElement.style.flexBasis = null;\n        this.ghostElement.style.position = null;\n\n        this.renderer.removeClass( this.ghostElement, this.columnSelectedClass);\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.ghostImgIconClass);\n\n            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);\n\n            this.renderer.addClass(icon, this.ghostImgIconGroupClass);\n            this.ghostElement.children[0].style.paddingLeft = '0px';\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGridDetail]'\n})\nexport class IgxGridDetailTemplateDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowExpandedIndicator]'\n})\nexport class IgxRowExpandedIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowCollapsedIndicator]'\n})\nexport class IgxRowCollapsedIndicatorDirective {\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderExpandedIndicator]'\n})\nexport class IgxHeaderExpandIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderCollapsedIndicator]'\n})\nexport class IgxHeaderCollapseIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import {\n    Component, Input, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, AfterViewInit, OnDestroy, HostBinding\n} from '@angular/core';\nimport { VerticalAlignment, HorizontalAlignment, Point, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs, IDragBaseEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { CloseScrollStrategy } from '../../../services/overlay/scroll/close-scroll-strategy';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { Subject, Subscription } from 'rxjs';\nimport { KEYS } from '../../../core/utils';\nimport { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/public_api';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { GridType } from '../../common/grid.interface';\nimport { DataUtil } from './../../../data-operations/data-util';\n\n/**\n * @hidden\n */\nclass ExpressionItem {\n    constructor(parent?: ExpressionGroupItem) {\n        this.parent = parent;\n    }\n    parent: ExpressionGroupItem;\n    selected: boolean;\n}\n\n/**\n * @hidden\n */\nclass ExpressionGroupItem extends ExpressionItem {\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem) {\n        super(parent);\n        this.operator = operator;\n        this.children = [];\n    }\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n}\n\n/**\n * @hidden\n */\nclass ExpressionOperandItem extends ExpressionItem {\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem) {\n        super(parent);\n        this.expression = expression;\n    }\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n    columnHeader: string;\n}\n\n/**\n * A component used for presenting advanced filtering UI for a Grid.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-advanced-filtering-dialog\n *     [grid]=\"grid1\">\n * </igx-advanced-filtering-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-advanced-filtering-dialog',\n    templateUrl: './advanced-filtering-dialog.component.html'\n})\nexport class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    /**\n     * @hidden @internal\n     */\n    public inline = true;\n    /**\n     * @hidden @internal\n     */\n    public rootGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public selectedExpressions: ExpressionOperandItem[] = [];\n\n    /**\n     * @hidden @internal\n     */\n    public selectedGroups: ExpressionGroupItem[] = [];\n\n    /**\n     * @hidden @internal\n     */\n    public currentGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public editedExpression: ExpressionOperandItem;\n\n    /**\n     * @hidden @internal\n     */\n    public addModeExpression: ExpressionOperandItem;\n\n    /**\n     * @hidden @internal\n     */\n    public contextualGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogics;\n\n    /**\n     * @hidden @internal\n     */\n    public selectedCondition: string;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue: any;\n\n    /**\n     * @hidden @internal\n     */\n    public lastActiveNode;\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Top\n    };\n    private _overlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public columnSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public conditionSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false\n    };\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('columnSelect', { read: IgxSelectComponent })\n    public columnSelect: IgxSelectComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('conditionSelect', { read: IgxSelectComponent })\n    public conditionSelect: IgxSelectComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchValueInput', { read: ElementRef })\n    public searchValueInput: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addRootAndGroupButton', { read: ElementRef })\n    public addRootAndGroupButton: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addConditionButton', { read: ElementRef })\n    public addConditionButton: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('editingInputsContainer', { read: ElementRef })\n    public set editingInputsContainer(value: ElementRef) {\n        if ((value && !this._editingInputsContainer) ||\n            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._editingInputsContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get editingInputsContainer(): ElementRef {\n        return this._editingInputsContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addModeContainer', { read: ElementRef })\n    public set addModeContainer(value: ElementRef) {\n        if ((value && !this._addModeContainer) ||\n            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._addModeContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get addModeContainer(): ElementRef {\n        return this._addModeContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('currentGroupButtonsContainer', { read: ElementRef })\n    public set currentGroupButtonsContainer(value: ElementRef) {\n        if ((value && !this._currentGroupButtonsContainer) ||\n            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._currentGroupButtonsContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get currentGroupButtonsContainer(): ElementRef {\n        return this._currentGroupButtonsContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxToggleDirective)\n    public contextMenuToggle: IgxToggleDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxChipComponent)\n    public chips: QueryList<IgxChipComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('expressionsContainer')\n    protected expressionsContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('overlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public overlayOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('style.display')\n    display = 'block';\n\n    private destroy$ = new Subject<any>();\n    private _overlayComponentId: string;\n    private _overlayService: IgxOverlayService;\n    private _selectedColumn: IgxColumnComponent;\n    private _clickTimer;\n    private _dblClickDelay = 200;\n    private _preventChipClick = false;\n    private _editingInputsContainer: ElementRef;\n    private _addModeContainer: ElementRef;\n    private _currentGroupButtonsContainer: ElementRef;\n    private _grid: GridType;\n    private _filteringChange: Subscription;\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit(): void {\n        this._overlaySettings.outlet = this.overlayOutlet;\n        this.columnSelectOverlaySettings.outlet = this.overlayOutlet;\n        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get displayDensity() {\n        return this.grid.displayDensity;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get selectedColumn(): IgxColumnComponent {\n        return this._selectedColumn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set selectedColumn(value: IgxColumnComponent) {\n        const oldValue = this._selectedColumn;\n\n        if (this._selectedColumn !== value) {\n            this._selectedColumn = value;\n            if (oldValue && this._selectedColumn && this._selectedColumn.dataType !== oldValue.dataType) {\n                this.selectedCondition = null;\n                this.searchValue = null;\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the grid.\n     */\n    @Input()\n    set grid(grid: GridType) {\n        this._grid = grid;\n\n        if (this._filteringChange) {\n            this._filteringChange.unsubscribe();\n        }\n\n        if (this._grid) {\n            this._grid.filteringService.registerSVGIcons();\n\n            this._filteringChange = this._grid.advancedFilteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.init();\n            });\n\n            this.init();\n        }\n    }\n\n    /**\n     * Returns the grid.\n     */\n    get grid(): GridType {\n        return this._grid;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get filterableColumns(): IgxColumnComponent[] {\n        return this.grid.columns.filter((col) => !col.columnGroup && col.filterable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dragStart(dragArgs: IDragStartEventArgs) {\n        if (!this._overlayComponentId) {\n            dragArgs.cancel = true;\n            return;\n        }\n\n        if (!this.contextMenuToggle.collapsed) {\n            this.contextMenuToggle.element.style.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dragEnd(dragArgs: IDragBaseEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n            this.contextMenuToggle.element.style.display = '';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onDragMove(e) {\n        const deltaX = e.nextPageX - e.pageX;\n        const deltaY = e.nextPageY - e.pageY;\n        e.cancel = true;\n        this._overlayService.setOffset(this._overlayComponentId, deltaX, deltaY);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const operandItem = new ExpressionOperandItem({\n            fieldName: null,\n            condition: null,\n            ignoreCase: true,\n            searchVal: null\n        }, parent);\n\n        if (afterExpression) {\n            const index = parent.children.indexOf(afterExpression);\n            parent.children.splice(index + 1, 0, operandItem);\n        } else {\n            parent.children.push(operandItem);\n        }\n\n        this.enterExpressionEdit(operandItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.And, parent, afterExpression);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.Or, parent, afterExpression);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public endGroup(groupItem: ExpressionGroupItem) {\n        this.currentGroup = groupItem.parent;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public commitOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.expression.fieldName = this.selectedColumn.field;\n            this.editedExpression.expression.condition = this.selectedColumn.filters.condition(this.selectedCondition);\n            this.editedExpression.expression.searchVal = DataUtil.parseValue(this.selectedColumn.dataType, this.searchValue);\n            this.editedExpression.columnHeader = this.selectedColumn.header;\n\n            this.editedExpression.inEditMode = false;\n            this.editedExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelOperandAdd() {\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n            this.addModeExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n\n            if (!this.editedExpression.expression.fieldName) {\n                this.deleteItem(this.editedExpression);\n            }\n\n            this.editedExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public operandCanBeCommitted(): boolean {\n        return this.selectedColumn && this.selectedCondition &&\n            (!!this.searchValue || this.selectedColumn.filters.condition(this.selectedCondition).isUnary);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public exitOperandEdit() {\n        if (!this.editedExpression) {\n            return;\n        }\n\n        if (this.operandCanBeCommitted()) {\n            this.commitOperandEdit();\n        } else {\n            this.cancelOperandEdit();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isExpressionGroup(expression: ExpressionItem): boolean {\n        return expression instanceof ExpressionGroupItem;\n    }\n\n    private addGroup(operator: FilteringLogic, parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        if (parent) {\n            if (afterExpression) {\n                const index = parent.children.indexOf(afterExpression);\n                parent.children.splice(index + 1, 0, groupItem);\n            } else {\n                parent.children.push(groupItem);\n            }\n        } else {\n            this.rootGroup = groupItem;\n        }\n\n        this.addCondition(groupItem);\n        this.currentGroup = groupItem;\n    }\n\n    private createExpressionGroupItem(expressionTree: IFilteringExpressionsTree, parent?: ExpressionGroupItem): ExpressionGroupItem {\n        let groupItem: ExpressionGroupItem;\n        if (expressionTree) {\n            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);\n\n            for (const expr of expressionTree.filteringOperands) {\n                if (expr instanceof FilteringExpressionsTree) {\n                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));\n                } else {\n                    const filteringExpr = expr as IFilteringExpression;\n                    const exprCopy: IFilteringExpression = {\n                        fieldName: filteringExpr.fieldName,\n                        condition: filteringExpr.condition,\n                        searchVal: filteringExpr.searchVal,\n                        ignoreCase: filteringExpr.ignoreCase\n                    };\n                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);\n                    const column = this.grid.getColumnByName(filteringExpr.fieldName);\n                    operandItem.columnHeader = column.header;\n                    groupItem.children.push(operandItem);\n                }\n            }\n        }\n\n        return groupItem;\n    }\n\n    private createExpressionsTreeFromGroupItem(groupItem: ExpressionGroupItem): FilteringExpressionsTree {\n        if (!groupItem) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(groupItem.operator);\n\n        for (const item of groupItem.children) {\n            if (item instanceof ExpressionGroupItem) {\n                const subTree = this.createExpressionsTreeFromGroupItem((item as ExpressionGroupItem));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                expressionsTree.filteringOperands.push((item as ExpressionOperandItem).expression);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipRemove(expressionItem: ExpressionItem) {\n        this.deleteItem(expressionItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipClick(expressionItem: ExpressionOperandItem) {\n        this._clickTimer = setTimeout(() => {\n            if (!this._preventChipClick) {\n                this.onToggleExpression(expressionItem);\n            }\n            this._preventChipClick = false;\n        }, this._dblClickDelay);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipDblClick(expressionItem: ExpressionOperandItem) {\n        clearTimeout(this._clickTimer);\n        this._preventChipClick = true;\n        this.enterExpressionEdit(expressionItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public enterExpressionEdit(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n        this.cancelOperandAdd();\n\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n        }\n\n        expressionItem.hovered = false;\n\n        this.selectedColumn = expressionItem.expression.fieldName ?\n            this.grid.getColumnByName(expressionItem.expression.fieldName) : null;\n        this.selectedCondition = expressionItem.expression.condition ?\n            expressionItem.expression.condition.name : null;\n        this.searchValue = expressionItem.expression.searchVal;\n\n        expressionItem.inEditMode = true;\n        this.editedExpression = expressionItem;\n\n        this.cdr.detectChanges();\n\n        this.columnSelectOverlaySettings.target = this.columnSelect.element;\n        this.columnSelectOverlaySettings.excludeFromOutsideClick = [this.columnSelect.element as HTMLElement];\n        this.columnSelectOverlaySettings.positionStrategy = new AutoPositionStrategy();\n        this.conditionSelectOverlaySettings.target = this.conditionSelect.element;\n        this.conditionSelectOverlaySettings.excludeFromOutsideClick = [this.conditionSelect.element as HTMLElement];\n        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy();\n\n        if (!this.selectedColumn) {\n            this.columnSelect.input.nativeElement.focus();\n        } else if (this.selectedColumn.filters.condition(this.selectedCondition).isUnary) {\n            this.conditionSelect.input.nativeElement.focus();\n        } else {\n            this.searchValueInput.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearSelection() {\n        for (const group of this.selectedGroups) {\n            group.selected = false;\n        }\n        this.selectedGroups = [];\n\n        for (const expr of this.selectedExpressions) {\n            expr.selected = false;\n        }\n        this.selectedExpressions = [];\n\n        this.toggleContextMenu();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public enterExpressionAdd(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n        }\n\n        expressionItem.inAddMode = true;\n        this.addModeExpression = expressionItem;\n        if (expressionItem.selected) {\n            this.toggleExpression(expressionItem);\n        }\n    }\n\n    private onToggleExpression(expressionItem: ExpressionOperandItem) {\n        this.exitOperandEdit();\n        this.toggleExpression(expressionItem);\n\n        this.toggleContextMenu();\n    }\n\n    private toggleExpression(expressionItem: ExpressionOperandItem) {\n        expressionItem.selected = !expressionItem.selected;\n\n        if (expressionItem.selected) {\n            this.selectedExpressions.push(expressionItem);\n        } else {\n            const index = this.selectedExpressions.indexOf(expressionItem);\n            this.selectedExpressions.splice(index, 1);\n            this.deselectParentRecursive(expressionItem);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public contextMenuClosed() {\n        this.contextualGroup = null;\n    }\n\n    private toggleContextMenu() {\n        const contextualGroup = this.findSingleSelectedGroup();\n\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n\n            if (contextualGroup) {\n                this.filteringLogics = [\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_and,\n                        selected: contextualGroup.operator === FilteringLogic.And\n                    },\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_or,\n                        selected: contextualGroup.operator === FilteringLogic.Or\n                    }\n                ];\n            }\n        } else if (this.contextMenuToggle) {\n            this.contextMenuToggle.close();\n        }\n    }\n\n    private findSingleSelectedGroup(): ExpressionGroupItem {\n        for (const group of this.selectedGroups) {\n            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));\n\n            if (containsAllSelectedExpressions) {\n                return group;\n            }\n        }\n\n        return null;\n    }\n\n    private isInsideGroup(item: ExpressionItem, group: ExpressionGroupItem): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (item.parent === group) {\n            return true;\n        }\n\n        return this.isInsideGroup(item.parent, group);\n    }\n\n    private deleteItem(expressionItem: ExpressionItem) {\n        if (!expressionItem.parent) {\n            this.rootGroup = null;\n            this.currentGroup = null;\n            return;\n        }\n\n        if (expressionItem === this.currentGroup) {\n            this.currentGroup = this.currentGroup.parent;\n        }\n\n        const children = expressionItem.parent.children;\n        const index = children.indexOf(expressionItem);\n        children.splice(index, 1);\n\n        if (!children.length) {\n            this.deleteItem(expressionItem.parent);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onKeyDown(eventArgs: KeyboardEvent) {\n        eventArgs.stopPropagation();\n        const key = eventArgs.key;\n        if (!this.contextMenuToggle.collapsed && (key === KEYS.ESCAPE || key === KEYS.ESCAPE_IE)) {\n            this.clearSelection();\n        } else if (key === KEYS.ESCAPE || key === KEYS.ESCAPE_IE) {\n            this.closeDialog();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public createAndGroup() {\n        this.createGroup(FilteringLogic.And);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public createOrGroup() {\n        this.createGroup(FilteringLogic.Or);\n    }\n\n    private createGroup(operator: FilteringLogic) {\n        const chips = this.chips.toArray();\n        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);\n        const firstExpression = chips[minIndex].data;\n\n        const parent = firstExpression.parent;\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        const index = parent.children.indexOf(firstExpression);\n        parent.children.splice(index, 0, groupItem);\n\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n            groupItem.children.push(expr);\n            expr.parent = groupItem;\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public deleteFilters() {\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onGroupClick(groupItem: ExpressionGroupItem) {\n        this.toggleGroup(groupItem);\n    }\n\n    private toggleGroup(groupItem: ExpressionGroupItem) {\n        this.exitOperandEdit();\n        if (groupItem.children && groupItem.children.length) {\n            this.toggleGroupRecursive(groupItem, !groupItem.selected);\n            if (!groupItem.selected) {\n                this.deselectParentRecursive(groupItem);\n            }\n            this.toggleContextMenu();\n        }\n    }\n\n    private toggleGroupRecursive(groupItem: ExpressionGroupItem, selected: boolean) {\n        if (groupItem.selected !== selected) {\n            groupItem.selected = selected;\n\n            if (groupItem.selected) {\n                this.selectedGroups.push(groupItem);\n            } else {\n                const index = this.selectedGroups.indexOf(groupItem);\n                this.selectedGroups.splice(index, 1);\n            }\n        }\n\n        for (const expr of groupItem.children) {\n            if (expr instanceof ExpressionGroupItem) {\n                this.toggleGroupRecursive(expr, selected);\n            } else {\n                const operandExpression = expr as ExpressionOperandItem;\n                if (operandExpression.selected !== selected) {\n                    this.toggleExpression(operandExpression);\n                }\n            }\n        }\n    }\n\n    private deselectParentRecursive(expressionItem: ExpressionItem) {\n        const parent = expressionItem.parent;\n        if (parent) {\n            if (parent.selected) {\n                parent.selected = false;\n                const index = this.selectedGroups.indexOf(parent);\n                this.selectedGroups.splice(index, 1);\n            }\n            this.deselectParentRecursive(parent);\n        }\n    }\n\n    private calculateContextMenuTarget() {\n        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();\n        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);\n        let minTop = chips.reduce((t, c) =>\n            Math.min(t, c.elementRef.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);\n        minTop = Math.max(containerRect.top, minTop);\n        minTop = Math.min(containerRect.bottom, minTop);\n        let maxRight = chips.reduce((r, c) =>\n            Math.max(r, c.elementRef.nativeElement.getBoundingClientRect().right), 0);\n        maxRight = Math.max(maxRight, containerRect.left);\n        maxRight = Math.min(maxRight, containerRect.right);\n        this._overlaySettings.target = new Point(maxRight, minTop);\n    }\n\n    private scrollElementIntoView(target: HTMLElement) {\n        const container = this.expressionsContainer.nativeElement;\n        const targetOffset = target.offsetTop - container.offsetTop;\n        const delta = 10;\n\n        if (container.scrollTop + delta > targetOffset) {\n            container.scrollTop = targetOffset - delta;\n        } else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {\n            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ungroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1, ...selectedGroup.children);\n\n            for (const expr of selectedGroup.children) {\n                expr.parent = parent;\n            }\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public deleteGroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1);\n        } else {\n            this.rootGroup = null;\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectFilteringLogic(event: IButtonGroupEventArgs) {\n        this.contextualGroup.operator = event.index as FilteringLogic;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getConditionFriendlyName(name: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${name}`] || name;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isDate(value: any) {\n        return value instanceof Date;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onExpressionsScrolled() {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public invokeClick(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            (eventArgs.currentTarget as HTMLElement).click();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onOutletPointerDown(event) {\n        // This prevents closing the select's dropdown when clicking the scroll\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getConditionList(): string[] {\n        return this.selectedColumn ? this.selectedColumn.filters.conditionList() : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public initialize(grid: GridType, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.inline = false;\n        this.grid = grid;\n        this._overlayService = overlayService;\n        this._overlayComponentId = overlayComponentId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getFormat(field: string) {\n        return this.grid.getColumnByName(field).pipeArgs.format;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getTimezone(field: string) {\n        return this.grid.getColumnByName(field).pipeArgs.timezone;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setAddButtonFocus() {\n        if (this.addRootAndGroupButton) {\n            this.addRootAndGroupButton.nativeElement.focus();\n        } else if (this.addConditionButton) {\n            this.addConditionButton.nativeElement.focus();\n        }\n    }\n\n    private init() {\n        this.clearSelection();\n        this.cancelOperandAdd();\n        this.cancelOperandEdit();\n        this.rootGroup = this.createExpressionGroupItem(this.grid.advancedFilteringExpressionsTree);\n        this.currentGroup = this.rootGroup;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public context(expression: ExpressionItem, afterExpression?: ExpressionItem) {\n        return {\n            $implicit: expression,\n            afterExpression\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClearButtonClick() {\n        this.grid.endEdit(false);\n        this.grid.advancedFilteringExpressionsTree = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public closeDialog() {\n        if (this._overlayComponentId) {\n            this._overlayService.hide(this._overlayComponentId);\n        }\n        this.grid.navigation.activeNode = this.lastActiveNode;\n        if (this.grid.navigation.activeNode && this.grid.navigation.activeNode.row === -1) {\n            (this.grid as any).theadRow.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public applyChanges() {\n        this.grid.endEdit(false);\n        this.exitOperandEdit();\n        this.grid.advancedFilteringExpressionsTree = this.createExpressionsTreeFromGroupItem(this.rootGroup);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelChanges() {\n        if (!this._overlayComponentId) {\n            this.init();\n        }\n        this.closeDialog();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onApplyButtonClick() {\n        this.applyChanges();\n        this.closeDialog();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipSelectionEnd() {\n        const contextualGroup = this.findSingleSelectedGroup();\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n            this.calculateContextMenuTarget();\n            if (this.contextMenuToggle.collapsed) {\n                this.contextMenuToggle.open(this._overlaySettings);\n            } else {\n                this.contextMenuToggle.reposition();\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxRowSelector]'\n})\nexport class IgxRowSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxHeadSelector]'\n})\nexport class IgxHeadSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    ChangeDetectionStrategy,\n    Input,\n    forwardRef,\n    QueryList,\n    TemplateRef,\n    Output,\n    EventEmitter\n} from '@angular/core';\n\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { flatten } from '../../core/utils';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n\n    /**\n     * Set if the column group is collapsible.\n     * Default value is `false`\n     * ```html\n     *  <igx-column-group [collapsible] = \"true\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public set collapsible(value: boolean) {\n        this._collapsible = value;\n        this.collapsibleChange.emit(this._collapsible);\n        if (this.children && !this.hidden) {\n            if (this._collapsible) {\n                this.setExpandCollapseState();\n            } else {\n                this.children.forEach(child => child.hidden = false);\n            }\n        }\n    }\n    public get collapsible() {\n        return this._collapsible && this.checkCollapsibleState();\n    }\n\n    /**\n     * Set whether the group is expanded or collapsed initially.\n     * Applied only if the collapsible property is set to `true`\n     * Default value is `true`\n     * ```html\n     *  const state = false\n     *  <igx-column-group [(expand)] = \"state\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public set expanded(value: boolean) {\n        this._expanded = value;\n        this.expandedChange.emit(this._expanded);\n        if (!this.collapsible) { return; }\n        if (!this.hidden && this.children) {\n            this.setExpandCollapseState();\n        }\n    }\n    public get expanded() {\n        return this._expanded;\n    }\n\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns if the column group is selectable\n     * ```typescript\n     * let columnGroupSelectable = this.columnGroup.selectable;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public get selectable(): boolean {\n        return this.children && this.children.some(child => child.selectable);\n    }\n\n    public set selectable(value: boolean) {}\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n\n    /**\n     * Allows you to define a custom template for expand/collapse indicator\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public collapsibleIndicatorTemplate: TemplateRef<any>;\n\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-column [(hidden)] = \"model.columns[0].isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.hiddenChange.emit(this._hidden);\n        if (this._hidden || !this.collapsible) {\n            this.children.forEach(child => child.hidden = this._hidden);\n        } else {\n            this.children.forEach(c => {\n                if (c.visibleWhenCollapsed === undefined) { c.hidden = false; return; }\n                c.hidden = this.expanded ? c.visibleWhenCollapsed : !c.visibleWhenCollapsed;\n            });\n        }\n    }\n\n    /**\n     * Returns if the column group is selected.\n     * ```typescript\n     * let isSelected = this.columnGroup.selected;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get selected(): boolean {\n        const selectableChildren = this.allChildren.filter(c => !c.columnGroup && c.selectable && !c.hidden);\n        return selectableChildren.length > 0 && selectableChildren.every(c => c.selected);\n    }\n\n    /**\n     * Select/deselect the column group.\n     * ```typescript\n     * this.columnGroup.selected = true;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set selected(value: boolean) {\n        if (this.selectable) {\n            this.children.forEach(c => {\n                c.selected = value;\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.collapseIndicatorTemplate) {\n            this.collapsibleIndicatorTemplate = this.collapseIndicatorTemplate.template;\n        }\n        // currently only ivy fixes the issue, we have to slice only if the first child is group\n        if (this.children.first === this) {\n            this.children.reset(this.children.toArray().slice(1));\n        }\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n        if (this.collapsible) {\n            this.setExpandCollapseState();\n        }\n    }\n\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            return acc + parseInt(val.calcWidth, 10);\n        }, 0)}`;\n        return width + 'px';\n    }\n\n    set width(val) { }\n\n    /**\n     * @hidden\n     */\n    public get applySelectableClass(): boolean {\n        return this._applySelectableClass;\n    }\n\n    /**\n     * @hidden\n     */\n    public set applySelectableClass(value: boolean) {\n        if (this.selectable) {\n            this._applySelectableClass = value;\n            this.children.forEach(c => {\n                c.applySelectableClass = value;\n            });\n        }\n    }\n    // constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n    //     // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n    //     super(gridAPI, cdr);\n    // }\n\n    /**\n     * @hidden\n     * Calculates the number of visible columns, based on indexes of first and last visible columns.\n     */\n    public calcChildren(): number {\n        const visibleChildren = this.allChildren.filter(c => c.visibleIndex > -1);\n        const fi = visibleChildren[0].visibleIndex;\n        const li = visibleChildren[visibleChildren.length - 1].visibleIndex;\n        return li - fi + 1;\n    }\n}\n","import { Directive, Input, OnDestroy, NgModule, TemplateRef } from '@angular/core';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowDirective, IgxGridBaseDirective } from './grid/public_api';\nimport { IRowDragStartEventArgs, IRowDragEndEventArgs } from './common/events';\nimport { GridType } from './common/grid.interface';\nimport { IgxHierarchicalRowComponent } from './hierarchical-grid/hierarchical-row.component';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n    private get row(): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.data;\n    }\n\n    @Input('igxRowDrag')\n    public data: any;\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        this._removeOnDestroy = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                dragDirective: this,\n                dragData: this.row,\n                cancel: false,\n                owner: this.row.grid\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.ghostElement.parentNode.removeChild(this.ghostElement);\n                this.ghostElement = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.grid.dragRowID = this.row.rowID;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            dragDirective: this,\n            dragData: this.row,\n            animation: false,\n            owner: this.row.grid\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.ghostElement) {\n            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createGhost(pageX, pageY) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        this.ghostContext = {\n            $implicit: this.row.rowData,\n            data: this.row.rowData,\n            grid: this.row.grid\n        };\n        super.createGhost(pageX, pageY, this.row.nativeElement);\n\n        // check if there is an expander icon and create the ghost at the corresponding position\n        if (this.isHierarchicalGrid) {\n            const row = this.row as IgxHierarchicalRowComponent;\n            if (row.expander) {\n                const expanderWidth = row.expander.nativeElement.getBoundingClientRect().width;\n                this._ghostHostX += expanderWidth;\n            }\n        }\n\n        const ghost = this.ghostElement;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.grid.dragRowID = null;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.ghostElement) {\n            this.ghostElement.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n\n    private get isHierarchicalGrid() {\n        return this.row.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDragGhost]'\n})\n\nexport class IgxRowDragGhostDirective  {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import {\n    AnimationEvent,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @DeprecateProperty(`'message' property is deprecated.\n    You can use place the message in the snackbar content or pass a message parameter to the show method instead.`)\n    @Input()\n    public set message(value: string) {\n        this.snackbarMessage = value;\n    }\n    public get message() {\n        return this.snackbarMessage;\n    }\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n\n    /**\n     * @hidden\n     * @internal\n     */\n    snackbarMessage = '';\n\n    /**\n     * @hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(message?: string): void {\n        clearTimeout(this.timeoutId);\n        if (message !== undefined) { this.snackbarMessage = message; }\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     * @hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     * @hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional,\n    DoCheck,\n    Directive,\n    LOCALE_ID,\n    HostListener\n} from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport 'igniteui-trial-watermark';\nimport { Subject, pipe, fromEvent } from 'rxjs';\nimport { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';\nimport { cloneArray, flatten, mergeObjects, isIE, compareMaps, resolveNestedPath, isObject } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService,\n    OverlaySettings,\n    PositionSettings,\n    ConnectedPositioningStrategy,\n    ContainerPositionStrategy,\n    StateUpdateEvent,\n    TransactionEventOrigin\n} from '../services/public_api';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './hiding/column-hiding-item.directive';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { RowEditPositionStrategy, IPinningConfig } from './grid.common';\nimport { IgxGridToolbarComponent } from './toolbar/grid-toolbar.component';\nimport { IgxRowDirective } from './row.directive';\nimport { IgxGridHeaderComponent } from './headers/grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport {\n    FilteringExpressionsTree, IFilteringExpressionsTree, FilteringExpressionsTreeType\n} from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/public_api';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService, IActiveNode } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid/public_api';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/base/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './headers/grid-header-group.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport {\n    IgxGridSelectionService,\n    GridSelectionRange,\n    IgxGridCRUDService,\n    IgxRow,\n    IgxCell,\n    isChromium\n} from './selection/selection.service';\nimport { DragScrollDirection } from './selection/drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport { IgxGridColumnResizerComponent } from './resizing/resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/base/grid-filtering-row.component';\nimport { CharSeparatedValueData } from '../services/csv/char-separated-value-data';\nimport { IgxColumnResizingService } from './resizing/resizing.service';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport {\n    IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective\n} from './grid/grid.directives';\nimport {\n    GridKeydownTargetType,\n    GridSelectionMode,\n    GridSummaryPosition,\n    GridSummaryCalculationMode,\n    FilterMode,\n    ColumnPinningPosition,\n    RowPinningPosition,\n    GridPagingMode\n} from './common/enums';\nimport {\n    IGridCellEventArgs,\n    IRowSelectionEventArgs,\n    IPinColumnEventArgs,\n    IGridEditEventArgs,\n    IPageEventArgs,\n    IRowDataEventArgs,\n    IColumnResizeEventArgs,\n    IColumnMovingStartEventArgs,\n    IColumnMovingEventArgs,\n    IColumnMovingEndEventArgs,\n    IGridKeydownEventArgs,\n    IRowDragStartEventArgs,\n    IRowDragEndEventArgs,\n    IGridClipboardEvent,\n    IGridToolbarExportEventArgs,\n    ISearchInfo,\n    ICellPosition,\n    IRowToggleEventArgs,\n    IColumnSelectionEventArgs,\n    IPinRowEventArgs,\n    IGridScrollEventArgs,\n    IGridEditDoneEventArgs,\n    IActiveNodeChangeEventArgs\n} from './common/events';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { GridType } from './common/grid.interface';\nimport { DropPosition } from './moving/moving.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './selection/row-selectors';\nimport { IgxGridToolbarCustomContentDirective } from './toolbar/toolbar.directive';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxColumnGroupComponent } from './columns/column-group.component';\nimport { IGridSortingStrategy } from '../data-operations/sorting-strategy';\nimport { IgxRowDragGhostDirective, IgxDragIndicatorIconDirective } from './row-drag.directive';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxSnackbarComponent } from '../snackbar/snackbar.component';\nimport { v4 as uuidv4 } from 'uuid';\nimport { IgxActionStripComponent } from '../action-strip/action-strip.component';\n\nlet FAKE_ROW_ID = -1;\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\n@Directive()\nexport abstract class IgxGridBaseDirective extends DisplayDensityBase implements GridType,\n    OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    private _customDragIndicatorIconTemplate: TemplateRef<any>;\n    protected _init = true;\n    private _cdrRequests = false;\n    protected _cdrRequestRepaint = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get scrollSize() {\n        return this.verticalScrollContainer.getScrollNativeSize();\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale: string;\n    public _destroyed = false;\n    private overlayIDs = [];\n    private _filteringStrategy: IFilteringStrategy;\n    private _sortingStrategy: IGridSortingStrategy;\n    private _pinning: IPinningConfig = { columns: ColumnPinningPosition.Start };\n\n    private _hostWidth;\n    private _advancedFilteringOverlayId: string;\n    private _advancedFilteringPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _advancedFilteringOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._advancedFilteringPositionSettings),\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public decimalPipe: DecimalPipe;\n    /**\n     * @hidden @internal\n     */\n    public datePipe: DatePipe;\n\n    protected _userOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * Gets/Sets the resource strings.\n     * @remarks\n     * By default it uses EN resources.\n     */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * Gets/Sets the display time for the row adding snackbar notification.\n     * @remarks\n     * By default it is 6000ms.\n     */\n    @Input()\n    public snackbarDisplayTime = 6000;\n\n    /**\n     * Gets/Sets whether to autogenerate the columns.\n     * @remarks\n     * The default value is false. When set to true, it will override all columns declared through code or in markup.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public autoGenerate = false;\n\n    /**\n     * @hidden @internal\n     */\n    public abstract id: string;\n\n    /**\n     * @hidden @internal\n     */\n    public cancelAddMode = false;\n\n    /**\n     * Gets/Sets a custom template when empty.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * Gets/Sets a custom template for adding row UI when grid is empty.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [addRowEmptyTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public addRowEmptyTemplate: TemplateRef<any>;\n\n    /**\n     * Gets/Sets a custom template when loading.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    /**\n     * Gets/Sets the filtering logic of the `IgxGridComponent`.\n     * @remarks\n     * The default is AND.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Gets/Sets the filtering state.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n     * ```\n     * @remarks\n     * Supports two-way binding.\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            value.type = FilteringExpressionsTreeType.Regular;\n            this._filteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n            this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty(this._filteringExpressionsTree) &&\n                !this.advancedFilteringExpressionsTree) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Emitted after filtering is performed.\n     * @remarks\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *              (filteringExpressionsTreeChange)=\"filteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public filteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted after advanced filtering is performed.\n     * @remarks\n     * Returns the advanced filtering expressions tree.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *           (advancedFilteringExpressionsTreeChange)=\"advancedFilteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public advancedFilteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when grid is scrolled horizontally/vertically.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *              (onScroll)=\"onScroll($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onScroll = new EventEmitter<IGridScrollEventArgs>();\n\n    /**\n     * Gets/Sets the advanced filtering state.\n     * @example\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * this.grid.advancedFilteringExpressionsTree = logic;\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get advancedFilteringExpressionsTree() {\n        return this._advancedFilteringExpressionsTree;\n    }\n\n    set advancedFilteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            value.type = FilteringExpressionsTreeType.Advanced;\n            this._advancedFilteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n        } else {\n            this._advancedFilteringExpressionsTree = null;\n        }\n        this.advancedFilteringExpressionsTreeChange.emit(this._advancedFilteringExpressionsTree);\n\n        if (this.filteringService.isFilteringExpressionsTreeEmpty(this._advancedFilteringExpressionsTree) &&\n            !this.advancedFilteringExpressionsTree) {\n            this.filteredData = null;\n        }\n\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache();\n        this.notifyChanges();\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.onFilteringDone.emit(this._advancedFilteringExpressionsTree));\n    }\n\n    /**\n     * Gets/Sets the locale.\n     * @remarks\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        return this._locale;\n    }\n\n    set locale(value: string) {\n        if (value !== this._locale) {\n            this._locale = value;\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.notifyChanges();\n        }\n    }\n\n    @Input()\n    get pagingMode() {\n        return this._pagingMode;\n    }\n\n    set pagingMode(val: GridPagingMode) {\n        this._pagingMode = val;\n        this._pipeTrigger++;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets whether the paging feature is enabled.\n     * @remarks\n     * The default state is disabled (false).\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets the current page index.\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * Supports two-way binding.\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.pageChange.emit(this._page);\n        this.navigateTo(0);\n        this.notifyChanges();\n    }\n\n    /**\n     * Emitted after the current page is changed.\n     * @example\n     * ```html\n     * <igx-grid (pageChange)=\"onPageChange($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onPageChange(page: number) {\n     *   this.currentPage = page;\n     * }\n     * ```\n     */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    /**\n     * Gets/Sets the number of visible items per page.\n     * @remarks\n     * The default is 15.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this._perPage = val;\n        this.perPageChange.emit(this._perPage);\n        this.page = 0;\n        this.endEdit(true);\n        this.notifyChanges();\n    }\n\n    /**\n     * Emitted when `perPage` property value of the grid is changed.\n     * @example\n     * ```html\n     * <igx-grid #grid (perPageChange)=\"onPerPageChange($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onPerPageChange(perPage: number) {\n     *   this.perPage = perPage;\n     * }\n     * ```\n     */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n\n    /**\n     * Gets/Sets a custom `ng-template` for the pagination UI of the grid.\n     * @example\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Gets/Sets whether the column hiding UI is enabled.\n     * @remarks\n     * By default it is disabled (false). In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets if the row selectors are hidden.\n     * @remarks\n     *  By default row selectors are shown\n     */\n    @WatchChanges()\n    @Input()\n    get hideRowSelectors() {\n        return this._hideRowSelectors;\n    }\n\n    set hideRowSelectors(value: boolean) {\n        this._hideRowSelectors = value;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets whether rows can be moved.\n     * @example\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag && this.hasVisibleColumns;\n    }\n\n\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n    /**\n     * Gets the row ID that is being dragged.\n     * @remarks\n     * The row ID is either the primaryKey value or the data record instance.\n     */\n    public dragRowID = null;\n\n    /**\n     * @hidden @interal\n     */\n    public addRowParent = null;\n\n    /**\n     * Gets/Sets whether the rows are editable.\n     * @remarks\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n\n    set rowEditable(val: boolean) {\n        if (!this._init) {\n            this.refreshGridState();\n        }\n        this._rowEditable = val;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * Gets/Sets the height.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this.nativeElement.style.height = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('style.width')\n    get hostWidth() {\n        return this._width || this._hostWidth;\n    }\n\n    /**\n     * Gets/Sets the width of the grid.\n     * @example\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get width() {\n        return this._width;\n    }\n\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.nativeElement.style.width = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets the width of the header.\n     * @example\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n     */\n    get headerWidth() {\n        return parseInt(this.width, 10) - 17;\n    }\n\n    /**\n     * Gets/Sets the styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * Gets/Sets the styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Gets/Sets the row height.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * Gets/Sets the default width of the columns.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets the primary key.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * Get/Sets the message displayed when there are no records.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * Gets/Sets whether the grid is going to show a loading indicator.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    set isLoading(value: boolean) {\n        if (this._isLoading !== value) {\n            this._isLoading = value;\n            this.evaluateLoadingState();\n        }\n        Promise.resolve().then(() => {\n            // wait for the current detection cycle to end before triggering a new one.\n            this.notifyChanges();\n        });\n    }\n\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * Gets/Sets whether the columns should be auto-generated once again after the initialization of the grid\n     * @remarks\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * @example\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * Gets/Sets the message displayed when there are no records and the grid is filtered.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * Gets/Sets the title to be displayed in the built-in column hiding UI.\n     * @example\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Gets/Sets the initial pinning configuration.\n     * @remarks\n     * Allows to apply pinning the columns to the start or the end.\n     * Note that pinning to both sides at a time is not allowed.\n     * @example\n     * ```html\n     * <igx-grid [pinning]=\"pinningConfig\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get pinning() {\n        return this._pinning;\n    }\n    set pinning(value) {\n        if (value !== this._pinning) {\n            this.resetCaches();\n        }\n        this._pinning = value;\n    }\n\n\n    /**\n     * Gets/Sets if the built-in column pinning UI should be shown in the toolbar.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the title to be displayed in the UI of the column pinning.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Gets/Sets if the filtering is enabled.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.calcGridHeadRow();\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets/Sets a value indicating whether the advanced filtering is enabled.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get allowAdvancedFiltering() {\n        return this._allowAdvancedFiltering;\n    }\n\n    set allowAdvancedFiltering(value) {\n        if (this._allowAdvancedFiltering !== value) {\n            this._allowAdvancedFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the filter mode.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it's set to FilterMode.quickFilter.\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    set filterMode(value: FilterMode) {\n        this._filterMode = value;\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.close();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets the summary position.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it is bottom.\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    set summaryPosition(value: GridSummaryPosition) {\n        this._summaryPosition = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * Gets/Sets the summary calculation mode.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    set summaryCalculationMode(value: GridSummaryCalculationMode) {\n        this._summaryCalculationMode = value;\n        if (!this._init) {\n            this.endEdit(true);\n            this.summaryService.resetSummaryHeight();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Controls whether the summary row is visible when groupBy/parent row is collapsed.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showSummaryOnCollapse]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default showSummaryOnCollapse is set to 'false' which means that the summary row is not visible\n     * when the groupBy/parent row is collapsed.\n     */\n    @Input()\n    get showSummaryOnCollapse() {\n        return this._showSummaryOnCollapse;\n    }\n\n    set showSummaryOnCollapse(value: boolean) {\n        this._showSummaryOnCollapse = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * Gets/Sets the filtering strategy of the grid.\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get filterStrategy(): IFilteringStrategy {\n        return this._filteringStrategy;\n    }\n\n    set filterStrategy(classRef: IFilteringStrategy) {\n        this._filteringStrategy = classRef;\n    }\n\n    /**\n     * Gets/Sets the sorting strategy of the grid.\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [sortStrategy]=\"sortStrategy\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get sortStrategy(): IGridSortingStrategy {\n        return this._sortingStrategy;\n    }\n\n    set sortStrategy(value: IGridSortingStrategy) {\n        this._sortingStrategy = value;\n    }\n\n    /**\n     * Gets/Sets a unique values strategy used by the Excel Style Filtering\n     * @remarks\n     * Provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public uniqueColumnValuesStrategy: (column: IgxColumnComponent,\n        filteringExpressionsTree: IFilteringExpressionsTree,\n        done: (values: any[]) => void) => void;\n\n    /**\n     * Gets/Sets the current selection state.\n     * @remarks\n     * Represents the selected rows' IDs (primary key or rowData)\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" primaryKey=\"ID\" rowSelection=\"multiple\" [selectedRows]=\"[0, 1, 2]\"><igx-grid>\n     * ```\n     */\n    @Input()\n    public set selectedRows(rowIDs: any[]) {\n        rowIDs.length > 0\n            ? this.selectRows(rowIDs, true)\n            : this.deselectAllRows();\n    }\n\n    public get selectedRows(): any[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked.\n     * @remarks\n     * Returns the `IgxGridCellComponent`.\n     * @example\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected.\n     * @remarks\n     *  Returns the `IgxGridCellComponent`.\n     * @example\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * @example\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     *  Emitted when `IgxColumnComponent` is selected.\n     * @example\n     * ```html\n     * <igx-grid #grid (onColumnSelectionChange)=\"onColumnSelectionChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnSelectionChange = new EventEmitter<IColumnSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * @remarks\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * @example\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * Emitted when cell enters edit mode.\n     * @remarks\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEditEnter)=\"editStart($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public cellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when cell exits edit mode.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEditExit)=\"editExit($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public cellEditExit = new EventEmitter<IGridEditDoneEventArgs>();\n\n    /**\n     * Emitted when cell has been edited.\n     * @remarks\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEdit)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public cellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted after cell has been edited and editing has been committed.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (cellEditDone)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public cellEditDone = new EventEmitter<IGridEditDoneEventArgs>();\n\n    /**\n     * Emitted when a row enters edit mode.\n     * @remarks\n     * Emitted when [rowEditable]=\"true\".\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEditEnter)=\"editStart($event)\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public rowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when exiting edit mode for a row.\n     * @remarks\n     * Emitted when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEdit)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public rowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted after exiting edit mode for a row and editing has been committed.\n     * @remarks\n     * Emitted when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEditDone)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public rowEditDone = new EventEmitter<IGridEditDoneEventArgs>();\n\n    /**\n     * Emitted when row editing is canceled.\n     * @remarks\n     * Emits when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (rowEditExit)=\"editExit($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public rowEditExit = new EventEmitter<IGridEditDoneEventArgs>();\n\n    /**\n     * Emitted when a column is initialized.\n     * @remarks\n     * Returns the column object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI.\n     * @remarks\n     * Returns the sorting expression.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * @remarks\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed.\n     * @remarks\n     * Returns an object consisting of the previous and next pages.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a row added through the API.\n     * @remarks\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a row is deleted through API.\n     * @remarks\n     * Returns an `IRowDataEventArgs` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when column is resized.\n     * @remarks\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a cell is right clicked.\n     * @remarks\n     * Returns the `IgxGridCellComponent` object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a cell is double clicked.\n     * @remarks\n     * Returns the `IgxGridCellComponent` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when column visibility is changed.\n     * @remarks\n     * Args: { column: any, newValue: boolean }\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when column moving starts.\n     * @remarks\n     * Returns the moved `IgxColumnComponent` object.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted during the column moving operation.\n     * @remarks\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when column moving ends.\n     * @remarks\n     * Returns the source and target `IgxColumnComponent` objects.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * @remarks\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * @example\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * Emitted when start dragging a row.\n     * @remarks\n     * Return the dragged row.\n     */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * @remarks\n     * Return the dropped row.\n     */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * Emitted when a copy operation is executed.\n     * @remarks\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseDirective#clipboardOptions}.\n     */\n    @Output()\n    onGridCopy = new EventEmitter<IGridClipboardEvent>();\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public expansionStatesChange = new EventEmitter<Map<any, boolean>>();\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * Emitted when the pinned state of a row is changed.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"employeeData\" (onRowPinning)=\"rowPin($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowPinning = new EventEmitter<IPinRowEventArgs>();\n\n    /**\n     * Emmited when the active node is changed.\n     *\n     * @example\n     * ```\n     * <igx-grid [data]=\"data\" [autoGenerate]=\"true\" (activeNodeChange)=\"activeNodeChange($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public activeNodeChange = new EventEmitter<IActiveNodeChangeEventArgs>();\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxSnackbarComponent)\n    public addRowSnackbar: IgxSnackbarComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxGridColumnResizerComponent)\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('loadingOverlay', { static: true })\n    public loadingOverlay: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public loadingOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent> = new QueryList<IgxColumnComponent>();\n\n    @ContentChild(IgxActionStripComponent)\n    public actionStrip: IgxActionStripComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true })\n    public excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n\n    /**\n     * @hidden @internal\n     */\n    public get excelStyleFilteringComponent() {\n        return this.excelStyleFilteringComponents.first;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChildren(IgxGridExcelStyleFilteringComponent, { read: IgxGridExcelStyleFilteringComponent, descendants: false })\n    public excelStyleFilteringComponents: QueryList<IgxGridExcelStyleFilteringComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * @example\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * @example\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * @example\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('pinnedRow')\n    private _pinnedRowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * @example\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowDirective, { read: IgxRowDirective })\n    private _dataRowList: QueryList<IgxRowDirective<IgxGridBaseDirective>>;\n\n    /**\n     * A list of currently rendered `IgxGridRowComponent`'s.\n     * @example\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n     */\n    public get dataRowList(): QueryList<IgxRowDirective<IgxGridBaseDirective>> {\n        const res = new QueryList<IgxRowDirective<IgxGridBaseDirective>>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered grid is empty.\n     * @example\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the grid is empty.\n     * @example\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * @example\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get headSelectorTemplate(): TemplateRef<IgxHeadSelectorDirective> {\n        if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {\n            return this.headSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false })\n    public headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get isPinningToStart() {\n        return this.pinning.columns !== ColumnPinningPosition.End;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get isRowPinningToTop() {\n        return this.pinning.rows !== RowPinningPosition.Bottom;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get rowSelectorTemplate(): TemplateRef<IgxRowSelectorDirective> {\n        if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {\n            return this.rowSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false })\n    public rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowDragGhostDirective, { read: TemplateRef, descendants: false })\n    public dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('scr', { read: ElementRef, static: true })\n    public scr: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('footer', { read: ElementRef })\n    public footer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('hContainer', { read: IgxGridForOfDirective, static: true })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('headerSelectorContainer')\n    public headerSelectorContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('headerDragContainer')\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('theadRow', { static: true })\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('tbody', { static: true })\n    public tbody: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('pinContainer', { read: ElementRef })\n    public pinContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('tfoot', { static: true })\n    public tfoot: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any> = new QueryList<any>();\n\n\n    /**\n     * @hidden @internal\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get parentRowOutletDirective() {\n        return this.outlet;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })\n    private defaultRowEditTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n\n    /**\n     * The custom template, if any, that should be used when rendering a row expand indicator.\n     */\n    @ContentChild(IgxRowExpandedIndicatorDirective, { read: TemplateRef })\n    public rowExpandedIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering a row collapse indicator.\n     */\n    @ContentChild(IgxRowCollapsedIndicatorDirective, { read: TemplateRef })\n    public rowCollapsedIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering a header expand indicator.\n     */\n    @ContentChild(IgxHeaderExpandIndicatorDirective, { read: TemplateRef })\n    public headerExpandIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering a header collapse indicator.\n     */\n    @ContentChild(IgxHeaderCollapseIndicatorDirective, { read: TemplateRef })\n    public headerCollapseIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxDragIndicatorIconDirective, { read: TemplateRef, descendants: false })\n    public dragIndicatorIconTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     */\n    public get dragIndicatorIconTemplate(): TemplateRef<any> {\n        return this._customDragIndicatorIconTemplate || this.dragIndicatorIconTemplates.first;\n    }\n\n    public set dragIndicatorIconTemplate(val: TemplateRef<any>) {\n        this._customDragIndicatorIconTemplate = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get rowInEditMode(): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = this.visibleColumns.filter(col => col.editable)\n            .map(c => c.visibleIndex).sort((a, b) => a - b);\n        return index.length ? index[0] : null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get lastEditableColumnIndex(): number {\n        const index = this.visibleColumns.filter(col => col.editable)\n            .map(c => c.visibleIndex).sort((a, b) => a > b ? -1 : 1);\n        return index.length ? index[0] : null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChildren(IgxRowEditTabStopDirective, { descendants: true })\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden @internal\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    get activeDescendant() {\n        const activeElem = this.navigation.activeNode;\n        if (activeElem) {\n            return !this.navigation.isDataRow(activeElem.row, true) ? this.id + '_' + activeElem.row :\n                this.id + '_' + activeElem.row + '_' + activeElem.column;\n        }\n        return null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-grid')];\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden @internal\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get filteringPipeTrigger(): number {\n        return this._filteringPipeTrigger;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Gets/Sets the sorting state.\n     * @remarks\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.sortingExpressionsChange.emit(this._sortingExpressions);\n        this.notifyChanges();\n    }\n\n    /**\n     * Emitted before sorting is performed.\n     * @remarks\n     * Returns the sorting expressions.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (sortingExpressionsChange)=\"sortingExprChange($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public sortingExpressionsChange = new EventEmitter<ISortingExpression[]>();\n\n    /**\n     * @hidden @internal\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Gets the number of hidden columns.\n     * @example\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Gets/Sets the text to be displayed inside the toggle button.\n     * @remarks\n     * Used for the built-in column hiding UI of the`IgxColumnComponent`.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Gets/Sets the text to be displayed inside the toggle button.\n     * @remarks\n     * Used for the built-in column pinning UI of the`IgxColumnComponent`.\n     * @example\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden @internal\n     */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * @example\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Gets/Sets whether the toolbar is shown.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the toolbar's title.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets whether exporting to MS Excel is enabled or disabled.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets whether the option for exporting to CSV is enabled or disabled.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the textual content for the main export button.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the textual content for the CSV export button.\n     * @example\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    @Input()\n    clipboardOptions = {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: true,\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: true,\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: true,\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: '\\t'\n    };\n\n    /**\n     * Gets/Sets cell selection mode.\n     * @remarks\n     * By default the cell selection mode is multiple\n     * @param selectionMode: GridSelectionMode\n     */\n    @WatchChanges()\n    @Input()\n    get cellSelection() {\n        return this._cellSelectionMode;\n    }\n\n    set cellSelection(selectionMode: GridSelectionMode) {\n        this._cellSelectionMode = selectionMode;\n        if (this.gridAPI.grid) {\n            this.selectionService.clear(true);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Gets/Sets row selection mode\n     * @remarks\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelection() {\n        return this._rowSelectionMode;\n    }\n\n    set rowSelection(selectionMode: GridSelectionMode) {\n        this._rowSelectionMode = selectionMode;\n        if (this.gridAPI.grid && this.columnList) {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets/Sets column selection mode\n     * @remarks\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n     */\n    @WatchChanges()\n    @Input()\n    get columnSelection() {\n        return this._columnSelectionMode;\n    }\n\n    set columnSelection(selectionMode: GridSelectionMode) {\n        this._columnSelectionMode = selectionMode;\n        if (this.gridAPI.grid) {\n            this.selectionService.clearAllSelectedColumns();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public rowEditMessage;\n\n    /**\n     * @hidden @internal\n     */\n    public snackbarActionText = this.resourceStrings.igx_grid_snackbar_addrow_actiontext;\n\n    /**\n     * @hidden @internal\n     */\n    public snackbarLabel = this.resourceStrings.igx_grid_snackbar_addrow_label;\n\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * @example\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * Emitted when making a range selection.\n     * @remarks\n     * Range selection can be made either through drag selection or through keyboard selection.\n     */\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden @internal\n     */\n    public pagingState;\n    /**\n     * @hidden @internal\n     */\n    public calcWidth: number;\n    /**\n     * @hidden @internal\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden @internal\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden @internal\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden @internal\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden @internal\n     */\n    public draggedColumn: IgxColumnComponent;\n\n\n    /**\n     * @hidden @internal\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden @internal\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public columnWidthSetByUser = false;\n\n    /**\n     * @hidden @internal\n     */\n    public pinnedRecords: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public unpinnedRecords: any[];\n\n    abstract data: any[];\n    abstract filteredData: any[];\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    protected _filteredSortedPinnedData: any[];\n    protected _filteredSortedUnpinnedData: any[];\n    protected _filteredPinnedData: any[];\n\n    /**\n     * @hidden\n     */\n    public _filteredUnpinnedData;\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _pagingMode = GridPagingMode.local;\n    /**\n     * @hidden @internal\n     */\n    public _totalRecords = -1;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _filteringPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n\n    protected _pinnedRecordIDs = [];\n\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns;\n    protected _allowFiltering = false;\n    protected _allowAdvancedFiltering = false;\n    protected _filterMode: FilterMode = FilterMode.quickFilter;\n\n    protected observer: ResizeObserver = new ResizeObserver(() => { });\n\n    protected resizeNotify = new Subject();\n\n\n    private columnListDiffer;\n    private rowListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _baseFontSize: number;\n    private _horizontalForOfs: Array<IgxGridForOfDirective<any>> = [];\n    private _multiRowLayoutRowSize = 1;\n    protected _loadingId;\n    protected _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n    protected _defaultExpandState = false;\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n    private _autoGeneratedCols = [];\n    protected _headerFeaturesWidth = NaN;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition: GridSummaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode: GridSummaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n    private _showSummaryOnCollapse = false;\n    private _cellSelectionMode: GridSelectionMode = GridSelectionMode.multiple;\n    private _rowSelectionMode: GridSelectionMode = GridSelectionMode.none;\n    private _columnSelectionMode: GridSelectionMode = GridSelectionMode.none;\n\n    private lastAddedRowIndex;\n\n    private rowEditPositioningStrategy = new RowEditPositionStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public paginatorSettings: OverlaySettings = null;\n\n    private verticalScrollHandler = (event) => {\n        this.verticalScrollContainer.onScroll(event);\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n                if (this.rowEditable) {\n                    this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n                }\n            });\n        });\n        this.disableTransitions = false;\n\n        this.hideOverlays();\n        this.actionStrip?.hide();\n        const args: IGridScrollEventArgs = {\n            direction: 'vertical',\n            event: event,\n            scrollPosition: this.verticalScrollContainer.scrollPosition\n        };\n        this.onScroll.emit(args);\n    }\n\n    private horizontalScrollHandler = (event) => {\n        const scrollLeft = event.target.scrollLeft;\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n        const args: IGridScrollEventArgs = { direction: 'horizontal', event: event, scrollPosition: this.headerContainer.scrollPosition };\n        this.onScroll.emit(args);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get headerFeaturesWidth() {\n        return this._headerFeaturesWidth;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public isDetailRecord(rec) {\n        return false;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public isGroupByRecord(rec) {\n        return false;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isGhostRecord(record: any): boolean {\n        return record.ghostRecord !== undefined;\n    }\n    /**\n     * @hidden @internal\n     */\n    public isAddRowRecord(record: any): boolean {\n        return record.addRow !== undefined;\n    }\n\n    /**\n     * @hidden\n     * Returns the row index of a row that takes into account the full view data like pinning.\n     */\n    public getDataViewIndex(rowIndex, pinned) {\n        if (pinned && !this.isRowPinningToTop) {\n            rowIndex = rowIndex + this.unpinnedDataView.length;\n        } else if (!pinned && this.isRowPinningToTop) {\n            rowIndex = rowIndex + this.pinnedDataView.length;\n        }\n        return rowIndex;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get hasDetails() {\n        return false;\n    }\n\n    /**\n     * Returns the state of the grid virtualization.\n     * @remarks\n     * Includes the start index and how many records are rendered.\n     * @example\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    /**\n     * Returns whether the record is pinned or not.\n     *\n     * @param rowIndex Index of the record in the `dataView` collection.\n     *\n     * @hidden\n     * @internal\n     */\n    public isRecordPinnedByViewIndex(rowIndex: number) {\n        return this.hasPinnedRecords && (this.isRowPinningToTop && rowIndex < this.pinnedDataView.length) ||\n            (!this.isRowPinningToTop && rowIndex >= this.unpinnedDataView.length);\n    }\n\n    /**\n     * Returns whether the record is pinned or not.\n     *\n     * @param rowIndex Index of the record in the `filteredSortedData` collection.\n     */\n    public isRecordPinnedByIndex(rowIndex: number) {\n        return this.hasPinnedRecords && (this.isRowPinningToTop && rowIndex < this._filteredSortedPinnedData.length) ||\n            (!this.isRowPinningToTop && rowIndex >= this._filteredSortedUnpinnedData.length);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public isRecordPinned(rec) {\n        return this.getInitialPinnedIndex(rec) !== -1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * Returns the record index in order of pinning by the user. Does not consider sorting/filtering.\n     */\n    public getInitialPinnedIndex(rec) {\n        const id = this.gridAPI.get_row_id(rec);\n        return this._pinnedRecordIDs.indexOf(id);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get hasPinnedRecords() {\n        return this._pinnedRecordIDs.length > 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get pinnedRecordsCount() {\n        return this._pinnedRecordIDs.length;\n    }\n\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Inject(LOCALE_ID) private localeId: string) {\n        super(_displayDensityOptions);\n        this.locale = this.locale || this.localeId;\n        this.datePipe = new DatePipe(this.locale);\n        this.decimalPipe = new DecimalPipe(this.locale);\n        this.cdr.detach();\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.selectionService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil<any>(this.destroy$);\n        fromEvent(this.nativeElement, 'focusout').pipe(filter(() => !!this.navigation.activeNode), destructor).subscribe((event) => {\n            if (this.selectionService.dragMode && isIE()) { return; }\n            if (!this.crudService.cell &&\n                !!this.navigation.activeNode &&\n                ((event.target === this.tbody.nativeElement && this.navigation.activeNode.row >= 0 &&\n                        this.navigation.activeNode.row < this.dataView.length)\n                || (event.target === this.theadRow.nativeElement && this.navigation.activeNode.row === -1)\n                || (event.target === this.tfoot.nativeElement && this.navigation.activeNode.row === this.dataView.length)) &&\n                !(this.rowEditable && this.crudService.rowEditingBlocked && this.rowInEditMode)) {\n                this.navigation.activeNode = {} as IActiveNode;\n                this.notifyChanges();\n            }\n        });\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n\n        this.transactions.onStateUpdate.pipe(destructor).subscribe((event: StateUpdateEvent) => {\n            let actions = [];\n            if (event.origin === TransactionEventOrigin.REDO) {\n                actions = event.actions ? event.actions.filter(x => x.transaction.type === TransactionType.DELETE) : [];\n            } else if (event.origin === TransactionEventOrigin.UNDO) {\n                actions = event.actions ? event.actions.filter(x => x.transaction.type === TransactionType.ADD) : [];\n            }\n            if (actions.length > 0) {\n                for (const action of actions) {\n                    if (this.selectionService.isRowSelected(action.transaction.id)) {\n                        this.selectionService.deselectRow(action.transaction.id);\n                    }\n                }\n            }\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.notifyChanges();\n        });\n\n        this.resizeNotify.pipe(destructor, filter(() => !this._init), throttleTime(100, undefined, { leading: true, trailing: true }))\n            .subscribe(() => {\n                this.zone.run(() => {\n                    this.notifyChanges(true);\n                });\n            });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear(true);\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpening.pipe(destructor).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.initialize(this, this.overlayService, event.id);\n                }\n            }\n        });\n\n        this.overlayService.onOpened.pipe(destructor).subscribe((event) => {\n            const overlaySettings = this.overlayService.getOverlayById(event.id)?.settings;\n\n            // do not hide the advanced filtering overlay on scroll\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.lastActiveNode = this.navigation.activeNode;\n                    instance.setAddButtonFocus();\n                }\n                return;\n            }\n\n            // do not hide the overlay if it's attached to a row\n            if (this.rowEditingOverlay?.overlayId === event.id) {\n                return;\n            }\n\n            if (overlaySettings?.outlet === this.outlet && this.overlayIDs.indexOf(event.id) === -1) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n\n        this.overlayService.onClosed.pipe(destructor, filter(() => !this._init)).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                this._advancedFilteringOverlayId = null;\n                return;\n            }\n\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n\n        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            const shouldRecalcSize = this.isPercentHeight &&\n                (!this.calcHeight || this.calcHeight === this.getDataBasedBodyHeight() ||\n                    this.calcHeight === this.renderedRowHeight * this._defaultTargetRecordNumber);\n            if (shouldRecalcSize) {\n                this.calculateGridHeight();\n                $event.containerSize = this.calcHeight;\n            }\n            this.evaluateLoadingState();\n        });\n\n        this.verticalScrollContainer.onScrollbarVisibilityChanged.pipe(destructor, filter(() => !this._init)).subscribe(() => {\n            // called to recalc all widths that may have changes as a result of\n            // the vert. scrollbar showing/hiding\n            this.notifyChanges(true);\n        });\n\n        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            this.calculateGridSizes(false);\n        });\n\n        this.onDensityChanged.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.summaryService.summaryHeight = 0;\n            this.notifyChanges(true);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n        this._setupServices();\n        this._setupListeners();\n        this.rowListDiffer = this.differs.find([]).create(null);\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n        this.columnListDiffer.diff(this.columnList);\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => {\n                this.onColumnsChanged(change);\n            });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public generateRowID(): string | number {\n        const primaryColumn = this.columnList.find(col => col.field === this.primaryKey);\n        const idType = this.data.length ? typeof (this.data[0][this.primaryKey]) : primaryColumn ? primaryColumn.dataType : 'string';\n        return idType === 'string' ? uuidv4() : FAKE_ROW_ID--;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            if (this._cdrRequests) {\n                firstVirtRow.virtDirRow.cdr.detectChanges();\n            }\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setFilteredData(data, pinned: boolean) {\n        if (this.hasPinnedRecords && pinned) {\n            this._filteredPinnedData = data || [];\n            const filteredUnpinned = this._filteredUnpinnedData || [];\n            const filteredData = [... this._filteredPinnedData, ...filteredUnpinned];\n            this.filteredData = filteredData.length > 0 ? filteredData : this._filteredUnpinnedData;\n        } else if (this.hasPinnedRecords && !pinned) {\n            this._filteredUnpinnedData = data;\n        } else {\n            this.filteredData = data;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches(recalcFeatureWidth = true) {\n        if (recalcFeatureWidth) {\n            this._headerFeaturesWidth = NaN;\n        }\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this.hasVisibleColumns = undefined;\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n        if (this.actionStrip) {\n            this.actionStrip.menuOverlaySettings.outlet = this.outlet;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setFilteredSortedData(data, pinned: boolean) {\n        data = data || [];\n        if (this.pinnedRecordsCount > 0 && pinned) {\n            this._filteredSortedPinnedData = data;\n            this.pinnedRecords = data;\n            this._filteredSortedData = this.isRowPinningToTop ? [... this._filteredSortedPinnedData, ... this._filteredSortedUnpinnedData] :\n                [... this._filteredSortedUnpinnedData, ... this._filteredSortedPinnedData];\n            this.refreshSearch(true, false);\n        } else if (this.pinnedRecordsCount > 0 && !pinned) {\n            this._filteredSortedUnpinnedData = data;\n        } else {\n            this._filteredSortedData = data;\n            this.refreshSearch(true, false);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public _setupRowObservers() {\n        const elementFilter = (item: IgxRowDirective<any> | IgxSummaryRowComponent) => this.isDefined(item.nativeElement.parentElement);\n        const extractForOfs = pipe(map((collection: any[]) => collection.filter(elementFilter).map(item => item.virtDirRow)));\n        const rowListObserver = extractForOfs(this._dataRowList.changes);\n        const summaryRowObserver = extractForOfs(this._summaryRowList.changes);\n        const resetHorizontalForOfs = () => {\n            this._horizontalForOfs = [\n                ...this._dataRowList.filter(elementFilter).map(item => item.virtDirRow),\n                ...this._summaryRowList.filter(elementFilter).map(item => item.virtDirRow)\n            ];\n        };\n        rowListObserver.pipe(takeUntil(this.destroy$)).subscribe(resetHorizontalForOfs);\n        summaryRowObserver.pipe(takeUntil(this.destroy$)).subscribe(resetHorizontalForOfs);\n        resetHorizontalForOfs();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public _zoneBegoneListeners() {\n        this.zone.runOutsideAngular(() => {\n            this.verticalScrollContainer.getScroll().addEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().addEventListener('scroll', this.horizontalScrollHandler);\n            this.observer = new ResizeObserver(() => this.resizeNotify.next());\n            this.observer.observe(this.nativeElement);\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('mouseleave', ['$event'])\n    public hideActionStrip(event: MouseEvent) {\n        this.actionStrip?.hide();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.initPinning();\n        this.calculateGridSizes();\n        this._init = false;\n        this.cdr.reattach();\n        this._setupRowObservers();\n        this._zoneBegoneListeners();\n\n        this.paginatorSettings = { outlet: this.outlet };\n\n        const vertScrDC = this.verticalScrollContainer.displayContainer;\n        vertScrDC.addEventListener('scroll', this.preventContainerScroll);\n\n        this._pinnedRowList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxGridRowComponent>) => {\n                this.onPinnedRowsChanged(change);\n            });\n\n        this.addRowSnackbar?.onAction.subscribe(() => {\n            const rec = this.filteredSortedData[this.lastAddedRowIndex];\n            this.scrollTo(rec, 0);\n            this.addRowSnackbar.hide();\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public notifyChanges(repaint = false) {\n        this._cdrRequests = true;\n        this._cdrRequestRepaint = repaint;\n        this.cdr.markForCheck();\n    }\n\n    protected resetNotifyChanges() {\n        this._cdrRequestRepaint = false;\n        this._cdrRequests = false;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngDoCheck() {\n        super.ngDoCheck();\n        if (this._init) {\n            return;\n        }\n\n        if (this._cdrRequestRepaint) {\n            this.resetNotifyChanges();\n            this.calculateGridSizes();\n            this.refreshSearch(true);\n            return;\n        }\n\n        if (this._cdrRequests) {\n            this.resetNotifyChanges();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDragGhostCustomTemplate() {\n        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {\n            return this.dragGhostCustomTemplates.first;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n\n        if (this._advancedFilteringOverlayId) {\n            this.overlayService.hide(this._advancedFilteringOverlayId);\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.observer.disconnect();\n            this.verticalScrollContainer?.getScroll()?.removeEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer?.getScroll()?.removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer?.displayContainer;\n            vertScrDC?.removeEventListener('scroll', this.preventContainerScroll);\n        });\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * @example\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     * Gets/Sets a list of key-value pairs [row ID, expansion state].\n     * @remarks\n     * Includes only states that differ from the default one.\n     * Supports two-way binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"data\" [(expansionStates)]=\"model.expansionStates\">\n     * </igx-grid>\n     * ```\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    public set expansionStates(value) {\n        this._expansionStates = new Map<any, boolean>(value);\n        this.expansionStatesChange.emit(this._expansionStates);\n        this.notifyChanges(true);\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Expands all rows.\n     * @example\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n     */\n    public expandAll() {\n        this._defaultExpandState = true;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * @example\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n     */\n    public collapseAll() {\n        this._defaultExpandState = false;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Expands the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.expandRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    public expandRow(rowID: any) {\n        this.gridAPI.set_row_expansion_state(rowID, true);\n    }\n\n    /**\n     * Collapses the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.collapseRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    public collapseRow(rowID: any) {\n        this.gridAPI.set_row_expansion_state(rowID, false);\n    }\n\n\n    /**\n     * Toggles the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.toggleRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    public toggleRow(rowID: any) {\n        const rec = this.gridAPI.get_rec_by_id(rowID);\n        const state = this.gridAPI.get_row_expansion_state(rec);\n        this.gridAPI.set_row_expansion_state(rowID, !state);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDefaultExpandState(rec: any) {\n        return this._defaultExpandState;\n    }\n\n    /**\n     * Gets the native element.\n     * @example\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets/Sets the outlet used to attach the grid's overlays to.\n     * @remark\n     * If set, returns the outlet defined outside the grid. Otherwise returns the grid's internal outlet directive.\n     */\n    @Input()\n    get outlet() {\n        return this.resolveOutlet();\n    }\n\n    set outlet(val: IgxOverlayOutletDirective) {\n        this._userOutletDirective = val;\n    }\n\n    protected resolveOutlet() {\n        return this._userOutletDirective ? this._userOutletDirective : this._outletDirective;\n    }\n\n\n    /**\n     * Gets the default row height.\n     * @example\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * @remarks\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public paginatorClassName(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-paginator--cosy';\n            case DisplayDensity.compact:\n                return 'igx-paginator--compact';\n            default:\n                return 'igx-paginator';\n        }\n    }\n\n    /**\n     * Gets the current width of the container for the pinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Gets the current width of the container for the unpinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get isHorizontalScrollHidden() {\n        const diff = this.unpinnedWidth - this.totalWidth;\n        return this.width === null || diff >= 0;\n    }\n\n    /**\n     * @hidden @internal\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     */\n    public featureColumnsWidth(expander?: ElementRef) {\n        if (Number.isNaN(this._headerFeaturesWidth)) {\n            const rowSelectArea = this.headerSelectorContainer ?\n                this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;\n            const rowDragArea = this.rowDraggable && this.headerDragContainer ?\n                this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;\n            const groupableArea = this.headerGroupContainer ?\n                this.headerGroupContainer.nativeElement.getBoundingClientRect().width : 0;\n            const expanderWidth = expander ? expander.nativeElement.getBoundingClientRect().width : 0;\n            this._headerFeaturesWidth = rowSelectArea + rowDragArea + groupableArea + expanderWidth;\n        }\n        return this._headerFeaturesWidth;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get summariesMargin() {\n        return this.featureColumnsWidth();\n    }\n\n    /**\n     * Gets an array of `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Gets an array of the pinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Gets an array of the pinned `IgxRowComponent`s.\n     * @example\n     * ```typescript\n     * const pinnedRow = this.grid.pinnedRows;\n     * ```\n     */\n    get pinnedRows(): IgxGridRowComponent[] {\n        return this._pinnedRowList.toArray().sort((a, b) => {\n            return a.index - b.index;\n        });\n    }\n\n    /**\n     * Gets an array of unpinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Gets the `width` to be set on `IgxGridHeaderGroupComponent`.\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = parseFloat(column.calcWidth);\n        const minWidth = this.defaultHeaderGroupMinWidth;\n\n        if (colWidth < minWidth) {\n            return minWidth + 'px';\n        }\n        return colWidth + 'px';\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * @example\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    public getColumnByVisibleIndex(index: number): IgxColumnComponent {\n        return this.visibleColumns.find((col) =>\n            !col.columnGroup && !col.columnLayout &&\n            col.visibleIndex === index\n        );\n    }\n\n    /**\n     * Returns the `IgxRowDirective` by index.\n     * @example\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     */\n    public getRowByIndex(index: number): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * @example\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     */\n    public getRowByKey(keyValue: any): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * @example\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    public getCellByColumnVisibleIndex(rowIndex: number, index: number): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_visible_index(rowIndex, index);\n\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * @remarks\n     * Requires that the primaryKey property is set.\n     * @example\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Gets the total number of pages.\n     * @example\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return this._totalRecords >= 0 ? Math.ceil(this._totalRecords / this.perPage) : -1;\n    }\n\n    /**\n     * Gets if the current page is the first page.\n     * @example\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Goes to the next page, if the grid is not already at the last page.\n     * @example\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page, if the grid is not already at the first page.\n     * @example\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Returns the total number of records.\n     * @remarks\n     * Only functions when paging is enabled.\n     * @example\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n     */\n    @Input()\n    get totalRecords(): number {\n        return this._totalRecords >= 0 ? this._totalRecords : this.pagingState?.metadata.countRecords;\n    }\n\n    set totalRecords(total: number) {\n        if (total >= 0) {\n            this._totalRecords = total;\n            this._pipeTrigger++;\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * @example\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * @example\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showRowSelectors(): boolean {\n        return this.isRowSelectable && this.hasVisibleColumns && !this.hideRowSelectors;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showAddButton() {\n        return this.rowEditable && this.dataView.length === 0 && this.columns.length > 0;\n     }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showDragIcons(): boolean {\n        return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * Reorder columns in the main columnList and _columns collections.\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        this._reorderColumns(from, to, pos, list);\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * Reorders columns inside the passed column collection.\n     * When reordering column group collection, the collection is not flattened.\n     * In all other cases, the columns collection is flattened, this is why adittional calculations on the dropIndex are done.\n     * @hidden\n     */\n    protected _reorderColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition, columnCollection: any[],\n        inGroup = false) {\n        const fromIndex = columnCollection.indexOf(from);\n        const childColumnsCount = inGroup ? 1 : from.allChildren.length + 1;\n        columnCollection.splice(fromIndex, childColumnsCount);\n        let dropIndex = columnCollection.indexOf(to);\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n            if (!inGroup && to.columnGroup) {\n                dropIndex += to.allChildren.length;\n            }\n        }\n        columnCollection.splice(dropIndex, 0, from);\n    }\n\n    /**\n     * Reorder column group collection.\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        this._reorderColumns(from, to, pos, buffer, true);\n        parent.children.reset(buffer);\n    }\n    /**\n     * Places a column before or after the specified target column.\n     * @example\n     * ```typescript\n     * grid.moveColumn(column, target);\n     * ```\n     */\n    public moveColumn(column: IgxColumnComponent, target: IgxColumnComponent, pos: DropPosition = DropPosition.AfterDropTarget) {\n\n        if (column === target || (column.level !== target.level) ||\n            (column.topLevelParent !== target.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, target, pos);\n        }\n\n        if (target.pinned && !column.pinned) {\n            column.pin();\n        }\n\n        if (!target.pinned && column.pinned) {\n            column.unpin();\n        }\n\n        if (target.pinned && column.pinned) {\n            this._reorderColumns(column, target, pos, this._pinnedColumns);\n        }\n\n        if (!target.pinned && !column.pinned) {\n            this._reorderColumns(column, target, pos, this._unpinnedColumns);\n        }\n\n        this._moveColumns(column, target, pos);\n        this._columnsReordered(column, target);\n    }\n\n    /**\n     * Notiy changes, reset cache and populateVisibleIndexes.\n     * @hidden\n     */\n    private _columnsReordered(column: IgxColumnComponent, target) {\n        this.notifyChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        // after reordering is done reset cached column collections.\n        this.resetColumnCollections();\n        column.resetCaches();\n\n        const args = {\n            source: column,\n            target: target\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the desired page index.\n     * @example\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * @example\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public beginAddRowByIndex(rowID: any, index: number, asChild?: boolean) {\n        if (!this.rowEditable) {\n            console.warn('The grid must use row edit mode to perform row adding! Please set rowEditable to true.');\n            return;\n        }\n        this.endEdit(true);\n        this.cancelAddMode = false;\n        const isInPinnedArea = this.isRecordPinnedByViewIndex(index);\n        const pinIndex = this.pinnedRecords.findIndex(x => x[this.primaryKey] === rowID);\n        const unpinIndex = this.getUnpinnedIndexById(rowID);\n\n        if (this.expansionStates.get(rowID)) {\n            this.collapseRow(rowID);\n        }\n\n        this.addRowParent = {\n            rowID: rowID,\n            index: isInPinnedArea ? pinIndex : unpinIndex,\n            asChild: asChild,\n            isPinned: isInPinnedArea\n        };\n        this._pipeTrigger++;\n        this.cdr.detectChanges();\n        if (isInPinnedArea) {\n            this.calculateGridHeight();\n        }\n        const newRowIndex = this.addRowParent.index + 1;\n        // ensure adding row is in view.\n        const shouldScroll = this.navigation.shouldPerformVerticalScroll(newRowIndex, -1);\n        if (shouldScroll) {\n            this.navigateTo(newRowIndex, -1);\n        }\n        const row = this.getRowByIndex(index + 1);\n        row.animateAdd = true;\n        row.onAnimationEnd.pipe(first()).subscribe(() => {\n            row.animateAdd = false;\n            const cell = row.cells.find(c => c.editable);\n            if (cell) {\n                cell.setEditMode(true);\n                cell.activate();\n            }\n        });\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * @example\n     * ```typescript\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     */\n    public addRow(data: any): void {\n        // commit pending states prior to adding a row\n        this.endEdit(true);\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.notifyChanges();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * @example\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * @example\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData, this);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.crudService.exitCellEdit();\n                }\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`\n     * @remarks\n     * The row is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * @example\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.crudService.exitCellEdit();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector), this);\n            this.gridAPI.update_row(row, value);\n\n            // TODO: fix for #5934 and probably break for #5763\n            // consider adding of third optional boolean parameter in updateRow.\n            // If developer set this parameter to true we should call notifyChanges(true), and\n            // vise-versa if developer set it to false we should call notifyChanges(false).\n            // The parameter should default to false\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Returns the data that is contained in the row component.\n     * @remarks\n     * If the primary key is not specified the row selector match the row data.\n     * @example\n     * ```typescript\n     * const data = grid.getRowData(94741);\n     * ```\n     * @param rowSelector correspond to rowID\n     */\n    public getRowData(rowSelector: any) {\n        if (!this.primaryKey) {\n            return rowSelector;\n        }\n        const data = this.gridAPI.get_all_data(this.transactions.enabled);\n        const index = this.gridAPI.get_row_index_in_data(rowSelector);\n        return index < 0 ? {} : data[index];\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * @remarks\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * @example\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n\n\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        requestAnimationFrame(() => this.onSortingDone.emit(expression));\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * @example\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * @example\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * @remarks\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * @example\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * @example\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * @example\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     * @remarks\n     * Disable summaries for the listed columns.\n     * @example\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`.\n     * @remarks\n     * Otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`.\n     * @remarks\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * @example\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache();\n        this.cdr.detectChanges();\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name.\n     * @remarks\n     * Returns whether the operation is successful.\n     * @example\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * @example\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n    /**\n     * Pin the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.pinRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     * @param index The index at which to insert the row in the pinned collection.\n     */\n    public pinRow(rowID: any, index?: number): boolean {\n        if (this._pinnedRecordIDs.indexOf(rowID) !== -1) {\n            return false;\n        }\n        const row = this.gridAPI.get_row_by_key(rowID);\n\n        const eventArgs: IPinRowEventArgs = {\n            insertAtIndex: index,\n            isPinned: true,\n            rowID: rowID,\n            row: row\n        };\n        this.onRowPinning.emit(eventArgs);\n\n        this.endEdit(true);\n\n        const insertIndex = typeof eventArgs.insertAtIndex === 'number' ? eventArgs.insertAtIndex : this._pinnedRecordIDs.length;\n        this._pinnedRecordIDs.splice(insertIndex, 0, rowID);\n        this._pipeTrigger++;\n        if (this.gridAPI.grid) {\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Unpin the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.unpinRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    public unpinRow(rowID: any) {\n        const index = this._pinnedRecordIDs.indexOf(rowID);\n        if (index === -1) {\n            return false;\n        }\n        const row = this.gridAPI.get_row_by_key(rowID);\n        const eventArgs: IPinRowEventArgs = {\n            isPinned: false,\n            rowID: rowID,\n            row: row\n        };\n        this.onRowPinning.emit(eventArgs);\n        this.endEdit(true);\n        this._pinnedRecordIDs.splice(index, 1);\n        this._pipeTrigger++;\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n        return true;\n    }\n\n    get pinnedRowHeight() {\n        const containerHeight = this.pinContainer ? this.pinContainer.nativeElement.offsetHeight : 0;\n        return this.hasPinnedRecords ? containerHeight : 0;\n    }\n\n    get totalHeight() {\n        return this.calcHeight ? this.calcHeight + this.pinnedRowHeight : this.calcHeight;\n    }\n\n    /**\n     * Recalculates grid width/height dimensions.\n     * @remarks\n     * Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * @example\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * @remarks\n     * Returns how many times the grid contains the string.\n     * @example\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * @remarks\n     * Returns how many times the grid contains the string.\n     * @example\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * @remarks\n     * Returns how many times the grid contains the last search.\n     * @example\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     */\n    public refreshSearch(updateActiveInfo?: boolean, endEdit = true): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index &&\n                        compareMaps(match.metadata, activeInfo.metadata)) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText,\n                0,\n                this.lastSearchInfo.caseSensitive,\n                this.lastSearchInfo.exactMatch,\n                false,\n                endEdit);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * @example\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * @example\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * @example\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * @example\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * @example\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get hasVisibleColumns(): boolean {\n        if (this._hasVisibleColumns === undefined) {\n            return this.columnList ? this.columnList.some(c => !c.hidden) : false;\n        }\n        return this._hasVisibleColumns;\n    }\n\n    set hasVisibleColumns(value) {\n        this._hasVisibleColumns = value;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * @example\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * @example\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * @example\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * @example\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this.width && this.width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';\n        }\n        this.columnList.forEach((column: IgxColumnComponent) => {\n            if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                column.defaultWidth = columnWidthCombined + 'px';\n            } else {\n                column.defaultWidth = this._columnWidth;\n                column.resetCaches();\n            }\n        });\n        this.resetCachedWidths();\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow() {\n        if (this.maxLevelHeaderDepth) {\n            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));\n            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;\n            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {\n                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;\n            }\n            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this.calcGridHeadRow();\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n        if (this.pinnedRowHeight && this.calcHeight) {\n            this.calcHeight -= this.pinnedRowHeight;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getComputedHeight(elem) {\n        return elem.offsetHeight ? parseFloat(this.document.defaultView.getComputedStyle(elem).getPropertyValue('height')) : 0;\n    }\n    /**\n     * @hidden\n     */\n    protected getFooterHeight(): number {\n        return this.summariesHeight || this.getComputedHeight(this.tfoot.nativeElement);\n    }\n    /**\n     * @hidden\n     */\n    protected getTheadRowHeight(): number {\n        const height = this.getComputedHeight(this.theadRow.nativeElement);\n        return (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?\n            height - this.getFilterCellHeight() :\n            height;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            const height = this.getComputedHeight(this.toolbarHtml.nativeElement);\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                height : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingFooterHeight(): number {\n        let pagingHeight = 0;\n        if (this.footer) {\n            const height = this.getComputedHeight(this.footer.nativeElement);\n            pagingHeight = this.footer.nativeElement.firstElementChild ?\n                height : 0;\n        }\n        return pagingHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number {\n        const headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?\n            this.headerGroupsList[0].element.nativeElement : null;\n        const filterCellNativeEl = (headerGroupNativeEl) ?\n            headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;\n        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n        const actualTheadRow = this.getTheadRowHeight();\n        const footerHeight = this.getFooterHeight();\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingFooterHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const scrHeight = this.getComputedHeight(this.scr.nativeElement);\n        const renderedHeight = toolbarHeight + actualTheadRow +\n            footerHeight + pagingHeight + groupAreaHeight +\n            scrHeight;\n\n        let gridHeight = 0;\n\n        if (this.isPercentHeight) {\n            const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');\n            const autoSize = this._shouldAutoSize(renderedHeight);\n            if (autoSize || computed.indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseFloat(computed);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (Math.round(height) === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n        return height;\n    }\n\n    protected checkContainerSizeChange() {\n        const origHeight = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = 'none';\n        const height = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = '';\n        return origHeight !== height;\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        this.tbody.nativeElement.style.display = 'none';\n        let res = !this.nativeElement.parentElement ||\n            this.nativeElement.parentElement.clientHeight === 0 ||\n            this.nativeElement.parentElement.clientHeight === renderedHeight;\n        if (!isChromium()) {\n            // If grid causes the parent container to extend (for example when container is flex)\n            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.\n            res = this.checkContainerSizeChange();\n        }\n        this.tbody.nativeElement.style.display = '';\n        return res;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get outerWidth() {\n        return this.hasVerticalScroll() ? this.calcWidth + this.scrollSize : this.calcWidth;\n    }\n\n    /**\n     * @hidden @internal\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        computedWidth -= this.featureColumnsWidth();\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        // When all columns are hidden, return 0px width\n        if (!sumExistingWidths && !columnsToSize) {\n            return '0px';\n        }\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth + 'px';\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');\n            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;\n        } else {\n            width = parseInt(this.width, 10);\n        }\n\n        if (!width && this.nativeElement) {\n            width = this.nativeElement.offsetWidth;\n        }\n\n\n        if (this.width === null || !width) {\n            width = this.getColumnWidthSum();\n        }\n\n        if (this.hasVerticalScroll() && this.width !== null) {\n            width -= this.scrollSize;\n        }\n        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {\n            this.calcWidth = width;\n        }\n        this._derivePossibleWidth();\n    }\n\n    private getColumnWidthSum(): number {\n        let colSum = 0;\n        const cols = this.hasColumnLayouts ?\n            this.visibleColumns.filter(x => x.columnLayout) : this.visibleColumns.filter(x => !x.columnGroup);\n        cols.forEach((item) => {\n            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;\n            if (isWidthInPercent) {\n                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';\n            }\n            colSum += parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;\n        });\n        if (!colSum) {\n            return null;\n        }\n        this.cdr.detectChanges();\n        colSum += this.featureColumnsWidth();\n        return colSum;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public hasVerticalScroll() {\n        if (this._init) { return false; }\n        const isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;\n        return !!(this.calcWidth && this.dataView &&\n            this.dataView.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected onPinnedRowsChanged(change: QueryList<IgxGridRowComponent>) {\n        const diff = this.rowListDiffer.diff(change);\n        if (diff) {\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n\n        if (this.autoGenerate && this.columnList.length === 0 && this._autoGeneratedCols.length > 0) {\n            // In Ivy if there are nested conditional templates the content children are re-evaluated\n            // hence autogenerated columns are cleared and need to be reset.\n            this.columnList.reset(this._autoGeneratedCols);\n            return;\n        }\n        if (diff) {\n            let added = false;\n            let removed = false;\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n                record.item.pinned ? this._pinnedColumns.push(record.item) : this._unpinnedColumns.push(record.item);\n            });\n\n            this.initColumns(this.columnList);\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent | IgxColumnGroupComponent>) => {\n                const isColumnGroup = record.item instanceof IgxColumnGroupComponent;\n                if (!isColumnGroup) {\n                    // Clear Grouping\n                    this.gridAPI.clear_groupby(record.item.field);\n\n                    // Clear Filtering\n                    this.gridAPI.clear_filter(record.item.field);\n\n                    // Close filter row\n                    if (this.filteringService.isFilterRowVisible\n                        && this.filteringService.filteredColumn\n                        && this.filteringService.filteredColumn.field === record.item.field) {\n                        this.filteringRow.close();\n                    }\n\n                    // Clear Sorting\n                    this.gridAPI.clear_sort(record.item.field);\n\n                    // Remove column selection\n                    this.selectionService.deselectColumnsWithNoEvent([record.item.field]);\n                }\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                Promise.resolve().then(() => {\n                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.\n                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.\n                    this.notifyChanges(true);\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes(recalcFeatureWidth = true) {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches(recalcFeatureWidth);\n        this.cdr.detectChanges();\n        const hasScroll = this.hasVerticalScroll();\n        this.calculateGridWidth();\n        this.resetCaches(recalcFeatureWidth);\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalScroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n        }\n        if (this.zone.isStable) {\n            this.zone.run(() => {\n                this._applyWidthHostBinding();\n                this.cdr.detectChanges();\n            });\n        } else {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.zone.run(() => {\n                    this._applyWidthHostBinding();\n                });\n            });\n        }\n        this.resetCaches(recalcFeatureWidth);\n    }\n\n    private _applyWidthHostBinding() {\n        let width = this._width;\n        if (width === null) {\n            let currentWidth = this.calcWidth;\n            if (this.hasVerticalScroll()) {\n                currentWidth += this.scrollSize;\n            }\n            width = currentWidth + 'px';\n            this.resetCaches();\n        }\n        this._hostWidth = width;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * @example\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        if (this.pinning.columns === ColumnPinningPosition.Start) {\n            sum += this.featureColumnsWidth();\n        }\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10) || parseInt(this.hostWidth, 10) || this.calcWidth;\n        if (this.hasVerticalScroll() && !this.isPercentWidth) {\n            width -= this.scrollSize;\n        }\n        if (this.pinning.columns === ColumnPinningPosition.End) {\n            width -= this.featureColumnsWidth();\n        }\n\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = factory.create(this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        this._autoGeneratedCols = columns;\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.defaultWidth = this.columnWidthSetByUser ? this._columnWidth : column.defaultWidth ? column.defaultWidth : '';\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = this.columnList\n            .filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.hasColumnGroups ? this.columnList.filter((c) => !c.pinned) :\n            this.columnList.filter((c) => !c.pinned)\n                .sort((a, b) => this._unpinnedColumns.indexOf(a) - this._unpinnedColumns.indexOf(b));\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onHeaderSelectorClick(event) {\n        if (!this.isMultiRowSelectionEnabled) { return; }\n        this.selectionService.areAllRowSelected() ?\n            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get headSelectorBaseAriaLabel() {\n        if (this._filteringExpressionsTree.filteringOperands.length > 0) {\n            return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';\n        }\n\n        return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get totalRowsCountAfterFilter() {\n        if (this.data) {\n            return this.selectionService.allData.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped pinned row data, displayed in the grid.\n     * @example\n     * ```typescript\n     *      const pinnedDataView = this.grid.pinnedDataView;\n     * ```\n     */\n    get pinnedDataView(): any[] {\n        return this.pinnedRecords ? this.pinnedRecords : [];\n    }\n\n    /**\n     * Returns currently transformed paged/filtered/sorted/grouped unpinned row data, displayed in the grid.\n     * @example\n     * ```typescript\n     *      const pinnedDataView = this.grid.pinnedDataView;\n     * ```\n     */\n    get unpinnedDataView(): any[] {\n        return this.unpinnedRecords ? this.unpinnedRecords : this.verticalScrollContainer.igxForOf || [];\n    }\n\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped/pinned/unpinned row data, displayed in the grid.\n     * @example\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     */\n    get dataView(): any[] {\n        return this.isRowPinningToTop ?\n            [...this.pinnedDataView, ...this.unpinnedDataView] :\n            [...this.unpinnedDataView, ...this.pinnedDataView];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * @example\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * @example\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     */\n    public deselectRows(rowIDs: any[]) {\n        this.selectionService.deselectRowsWithNoEvent(rowIDs);\n        this.notifyChanges();\n    }\n\n    /**\n     * Selects all rows\n     * @remarks\n     * By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * @example\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n     */\n    public selectAllRows(onlyFilterData = true) {\n        const data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);\n        const rowIDs = this.selectionService.getRowIDs(data).filter(rID => !this.gridAPI.row_deleted_transaction(rID));\n        this.selectRows(rowIDs);\n    }\n\n    /**\n     * Deselects all rows\n     * @remarks\n     * By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will deselect all rows in the grid exept deleted rows.\n     * @example\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n     */\n    public deselectAllRows(onlyFilterData = true) {\n        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {\n            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));\n        } else {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearCellSelection(): void {\n        this.selectionService.clear(true);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.headerContainer.getScroll();\n        const vertical = this.verticalScrollContainer.getScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n\n    protected extractDataFromSelection(source: any[], formatters = false, headers = false): any[] {\n        let columnsArray: IgxColumnComponent[];\n        let record = {};\n        const selectedData = [];\n        const activeEl = this.selectionService.activeElement;\n        const totalItems = (this as any).totalItemCount ?? 0;\n        const isRemote = totalItems && totalItems > this.dataView.length;\n        const selectionMap = isRemote ? Array.from(this.selectionService.selection) :\n            Array.from(this.selectionService.selection).filter((tuple) => tuple[0] < source.length);\n\n        if (this.cellSelection === GridSelectionMode.single && activeEl) {\n            selectionMap.push([activeEl.row, new Set<number>().add(activeEl.column)]);\n        }\n\n        for (let [row, set] of selectionMap) {\n            row = this.paging ? row + (this.perPage * this.page) : row;\n            row = isRemote ? row - this.virtualizationState.startIndex : row;\n            if (!source[row] || source[row].detailsData !== undefined) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                columnsArray = this.getSelectableColumnsAt(each);\n                columnsArray.forEach((col) => {\n                    if (col) {\n                        const key = headers ? col.header || col.field : col.field;\n                        const value = source[row].ghostRecord ?\n                            resolveNestedPath(source[row].recordRef, col.field) : resolveNestedPath(source[row], col.field);\n                        record[key] = formatters && col.formatter ? col.formatter(value) : value;\n                    }\n                });\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    protected getSelectableColumnsAt(index) {\n        if (this.hasColumnLayouts) {\n            const visibleLayoutColumns = this.visibleColumns\n                .filter(col => col.columnLayout)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            const colLayout = visibleLayoutColumns[index];\n            return colLayout ? colLayout.children.toArray() : [];\n        } else {\n            const visibleColumns = this.visibleColumns\n                .filter(col => !col.columnGroup)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            return [visibleColumns[index]];\n        }\n    }\n\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * @remarks\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    public getSelectedData(formatters = false, headers = false) {\n        const source = this.filteredSortedData;\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n     * Get current selected columns.\n     * @example\n     * Returns an array with selected columns\n     * ```typescript\n     * const selectedColumns = this.grid.selectedColumns();\n     * ```\n     */\n    public selectedColumns(): IgxColumnComponent[] {\n        const fields = this.selectionService.getSelectedColumns();\n        return fields.map(field => this.getColumnByName(field)).filter(field => field);\n    }\n\n    /**\n     * Select specified columns.\n     * @example\n     * ```typescript\n     * this.grid.selectColumns(['ID','Name'], true);\n     * ```\n     * @param columns\n     * @param clearCurrentSelection if true clears the current selection\n     */\n    public selectColumns(columns: string[] | IgxColumnComponent[], clearCurrentSelection?: boolean) {\n        let fieldToSelect: string[] = [];\n        if (columns.length === 0 || typeof columns[0] === 'string') {\n            fieldToSelect = columns as string[];\n        } else {\n            (columns as IgxColumnComponent[]).forEach(col => {\n                if (col.columnGroup) {\n                    const children = col.allChildren.filter(c => !c.columnGroup).map(c => c.field);\n                    fieldToSelect = [...fieldToSelect, ...children];\n                } else {\n                    fieldToSelect.push(col.field);\n                }\n            });\n        }\n\n        this.selectionService.selectColumnsWithNoEvent(fieldToSelect, clearCurrentSelection);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselect specified columns by filed.\n     * @example\n     * ```typescript\n     * this.grid.deselectColumns(['ID','Name']);\n     * ```\n     * @param columns\n     */\n    public deselectColumns(columns: string[] | IgxColumnComponent[]) {\n        let fieldToDeselect: string[] = [];\n        if (columns.length === 0 || typeof columns[0] === 'string') {\n            fieldToDeselect = columns as string[];\n        } else {\n            (columns as IgxColumnComponent[]).forEach(col => {\n                if (col.columnGroup) {\n                    const children = col.allChildren.filter(c => !c.columnGroup).map(c => c.field);\n                    fieldToDeselect = [...fieldToDeselect, ...children];\n                } else {\n                    fieldToDeselect.push(col.field);\n                }\n            });\n        }\n        this.selectionService.deselectColumnsWithNoEvent(fieldToDeselect);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselects all columns\n     * @example\n     * ```typescript\n     * this.grid.deselectAllColumns();\n     * ```\n     */\n    public deselectAllColumns() {\n        this.selectionService.clearAllSelectedColumns();\n        this.notifyChanges();\n    }\n\n    /**\n     * Selects all columns\n     * @example\n     * ```typescript\n     * this.grid.deselectAllColumns();\n     * ```\n     */\n    public selectAllColumns() {\n        this.selectColumns(this.columnList.filter(c => !c.columnGroup));\n    }\n\n    protected extractDataFromColumnsSelection(source: any[], formatters = false, headers = false): any[] {\n        let record = {};\n        const selectedData = [];\n        const selectedColumns = this.selectedColumns();\n        if (selectedColumns.length === 0) {\n            return [];\n        }\n\n        for (let rowIndex = 0; rowIndex < source.length; rowIndex++) {\n            selectedColumns.forEach((col) => {\n                const key = headers ? col.header || col.field : col.field;\n                record[key] = formatters && col.formatter ? col.formatter(source[rowIndex][col.field])\n                    : source[rowIndex][col.field];\n            });\n\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    /**\n     *\n     * Returns an array of the current columns selection in the form of `[{ column.field: cell.value }, ...]`.\n     * @remarks\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    public getSelectedColumnsData(formatters = false, headers = false) {\n        const source = this.filteredSortedData ? this.filteredSortedData : this.data;\n        return this.extractDataFromColumnsSelection(source, formatters, headers);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public preventContainerScroll = (evt) => {\n        if (evt.target.scrollTop !== 0) {\n            this.verticalScrollContainer.addScrollTop(evt.target.scrollTop);\n            evt.target.scrollTop = 0;\n        }\n        if (evt.target.scrollLeft !== 0) {\n            this.headerContainer.scrollPosition += evt.target.scrollLeft;\n            evt.target.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public copyHandler(event) {\n        if (!this.clipboardOptions.enabled || this.crudService.cellInEditMode || (!isIE() && event.type === 'keydown')) {\n            return;\n        }\n\n        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);\n        const ev = { data, cancel: false } as IGridClipboardEvent;\n        this.onGridCopy.emit(ev);\n\n        if (ev.cancel) {\n            return;\n        }\n\n        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);\n        let result = transformer.prepareData();\n\n        if (!this.clipboardOptions.copyHeaders) {\n            result = result.substring(result.indexOf('\\n') + 1);\n        }\n\n        if (isIE()) {\n            (window as any).clipboardData.setData('Text', result);\n            return;\n        }\n\n        event.preventDefault();\n\n        /* Necessary for the hiearachical case but will probably have to\n           change how getSelectedData is propagated in the hiearachical grid\n        */\n        event.stopPropagation();\n        event.clipboardData.setData('text/plain', result);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showSnackbarFor(index: number) {\n        this.addRowSnackbar.actionText = index === -1 ? '' : this.snackbarActionText;\n        this.lastAddedRowIndex = index;\n        this.addRowSnackbar.show();\n    }\n\n    /**\n     * Navigates to a position in the grid based on provided `rowindex` and `visibleColumnIndex`.\n     * @remarks\n     * Also can execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * @example\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        const totalItems = (this as any).totalItemCount ?? this.dataView.length - 1;\n        if (rowIndex < 0 || rowIndex > totalItems || (visibleColIndex !== -1\n            && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        if (this.dataView.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        // If the target row is pinned no need to scroll as well.\n        const shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);\n        const shouldScrollHorizontally = this.navigation.shouldPerformHorizontalScroll(visibleColIndex, rowIndex);\n        if (shouldScrollVertically) {\n            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex, () => {\n                if (shouldScrollHorizontally) {\n                    this.navigation.performHorizontalScrollToCell(visibleColIndex, () =>\n                        this.executeCallback(rowIndex, visibleColIndex, cb));\n                } else {\n                    this.executeCallback(rowIndex, visibleColIndex, cb);\n                }\n            });\n        } else if (shouldScrollHorizontally) {\n            this.navigation.performHorizontalScrollToCell(visibleColIndex, () => {\n                if (shouldScrollVertically) {\n                    this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex, () =>\n                        this.executeCallback(rowIndex, visibleColIndex, cb));\n                } else {\n                    this.executeCallback(rowIndex, visibleColIndex, cb);\n                }\n            });\n        } else {\n            this.executeCallback(rowIndex, visibleColIndex, cb);\n        }\n    }\n\n    /**\n     * Returns `ICellPosition` which defines the next cell,\n     * according to the current position, that match specific criteria.\n     * @remarks\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * @example\n     * ```typescript\n     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n     * ```\n     */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData && !rec.detailsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n     * Returns `ICellPosition` which defines the previous cell,\n     * according to the current position, that match specific criteria.\n     * @remarks\n     * You can pass callback function as a third parameter of `getPreviousCell` method.\n     * The callback function accepts IgxColumnComponent as a param\n     * @example\n     * ```typescript\n     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n     * ```\n     */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData && !rec.detailsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex, true) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex, true), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) {\n            if ((this as any).totalItemCount) {\n                this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                    this.cdr.detectChanges();\n                    row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n                    const cbArgs = this.getNavigationArguments(row, visibleColIndex);\n                    cb(cbArgs);\n                });\n            }\n\n            if (this.dataView[rowIndex].detailsData) {\n                this.navigation.setActiveNode({ row: rowIndex });\n                this.cdr.detectChanges();\n            }\n\n            return;\n        }\n        const args = this.getNavigationArguments(row, visibleColIndex);\n        cb(args);\n    }\n\n    private getNavigationArguments(row, visibleColIndex) {\n        let targetType: GridKeydownTargetType, target;\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = 'groupRow';\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = 'summaryCell';\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = 'hierarchicalRow';\n                target = row;\n                break;\n            default:\n                targetType = 'dataCell';\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        return { targetType: targetType, target: target };\n    }\n\n    private getNextDataRowIndex(currentRowIndex, previous = false): number {\n        if (currentRowIndex < 0 || (currentRowIndex === 0 && previous) || (currentRowIndex >= this.dataView.length - 1 && !previous)) {\n            return currentRowIndex;\n        }\n        // find next/prev record that is editable.\n        const nextRowIndex = previous ? this.findPrevEditableDataRowIndex(currentRowIndex) :\n            this.dataView.findIndex((rec, index) =>\n                index > currentRowIndex && this.isEditableDataRecordAtIndex(index));\n        return nextRowIndex !== -1 ? nextRowIndex : currentRowIndex;\n    }\n\n    /**\n     * Returns the previous editable row index or -1 if no such row is found.\n     * @param currentIndex The index of the current editable record.\n     */\n    private findPrevEditableDataRowIndex(currentIndex): number {\n        let i = this.dataView.length;\n        while (i--) {\n            if (i < currentIndex && this.isEditableDataRecordAtIndex(i)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n\n    /**\n     * Returns if the record at the specified data view index is a an editable data record.\n     * If record is group rec, summary rec, child rec, ghost rec. etc. it is not editable.\n     * @param dataViewIndex The index of that record in the data view.\n     */\n    private isEditableDataRecordAtIndex(dataViewIndex) {\n        const rec = this.dataView[dataViewIndex];\n        return !rec.expression && !rec.summaries && !rec.childGridsData && !rec.detailsData &&\n            !this.isGhostRecordAtIndex(dataViewIndex);\n    }\n\n    /**\n     * Returns if the record at the specified data view index is a ghost.\n     * If record is pinned but is not in pinned area then it is a ghost record.\n     * @param dataViewIndex The index of that record in the data view.\n     */\n    private isGhostRecordAtIndex(dataViewIndex) {\n        const isPinned = this.isRecordPinned(this.dataView[dataViewIndex]);\n        const isInPinnedArea = this.isRecordPinnedByViewIndex(dataViewIndex);\n        return isPinned && !isInPinnedArea;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0 && !col.hidden).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.dataView.length &&\n            colIndex > - 1 && colIndex <= Math.max(...this.visibleColumns.map(c => c.visibleIndex))) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean, endEdit = true) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        if (endEdit) {\n            this.endEdit(false);\n        }\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n                metadata: matchInfo.metadata,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * @example\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                currentPinnedWidth += colWidth;\n                pinnedColumns.push(this._columns[i]);\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection = this._filteredSortedUnpinnedData): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = inCollection.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.unpinnedDataView.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.unpinnedDataView.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.isPinningToStart && this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n        data.forEach((dataRow, rowIndex) => {\n            columnItems.forEach((c) => {\n                const pipeArgs = this.getColumnByName(c.field).pipeArgs;\n                const value = c.formatter ? c.formatter(resolveNestedPath(dataRow, c.field)) :\n                    c.dataType === 'number' ? this.decimalPipe.transform(resolveNestedPath(dataRow, c.field),\n                        pipeArgs.digitsInfo, this.locale) :\n                        c.dataType === 'date' ? this.datePipe.transform(resolveNestedPath(dataRow, c.field),\n                            pipeArgs.format, pipeArgs.timezone, this.locale)\n                            : resolveNestedPath(dataRow, c.field);\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            const metadata = new Map<string, any>();\n                            metadata.set('pinned', this.isRecordPinnedByIndex(rowIndex));\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                                metadata: metadata,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            const metadata = new Map<string, any>();\n                            metadata.set('pinned', this.isRecordPinnedByIndex(rowIndex));\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                                metadata: metadata,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowDirective<IgxGridBaseDirective & GridType>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState() {\n        if (this.shouldOverlayLoading) {\n            // a new overlay should be shown\n            const overlaySettings: OverlaySettings = {\n                outlet: this.loadingOutlet,\n                closeOnOutsideClick: false,\n                positionStrategy: new ContainerPositionStrategy()\n            };\n            if (!this._loadingId) {\n                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);\n                this.overlayService.show(this._loadingId, overlaySettings);\n            }\n        } else {\n            if (this._loadingId) {\n                this.overlayService.hide(this._loadingId);\n                this._loadingId = null;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public repositionRowEditingOverlay(row: IgxRowDirective<IgxGridBaseDirective & GridType>) {\n        if (row && !this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        let settings = this.rowEditSettings;\n        const overlay = this.overlayService.getOverlayById(this.rowEditingOverlay.overlayId);\n        if (overlay) {\n            settings = overlay.settings;\n        }\n        settings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const pinned = this._pinnedRecordIDs.indexOf(rowID) !== -1;\n        const targetRow = !pinned ? this.gridAPI.get_row_by_key(rowID) : this.pinnedRows.find(x => x.rowID === rowID);\n        if (!targetRow) {\n            return;\n        }\n        settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const f = (obj: any) => {\n            let changes = 0;\n            Object.keys(obj).forEach(key => isObject(obj[key]) ? changes += f(obj[key]) : changes++);\n            return changes;\n        };\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? f(rowChanges) : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n        let rowEditArgs = row.createEditEventArgs();\n\n        if (!commit) {\n            this.transactions.endPending(false);\n        } else {\n            rowEditArgs = this.gridAPI.update_row(row, row.newData);\n            if (rowEditArgs?.cancel) {\n                return true;\n            }\n        }\n\n        this.crudService.endRowEdit();\n\n        const nonCancelableArgs = row.createDoneEditEventArgs(rowEditArgs.oldValue);\n        this.rowEditExit.emit(nonCancelableArgs);\n        this.closeRowEditingOverlay();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public gridOutletKeyboardHandler(event) {\n        // TODO: This should be removed after grid keyboard refactoring\n        // call stopPropagation for keydown event for the outlet not to propagate event to the grid\n        event.stopPropagation();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * @remarks\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     * @example\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n        let canceled = false;\n        // TODO: Merge the crudService with with BaseAPI service\n        if (!row && !cell) { return; }\n\n        if (row?.isAddRow) {\n            canceled = this.endAdd(commit, event);\n            return canceled;\n        }\n\n        if (commit) {\n            canceled = this.gridAPI.submit_value();\n            if (canceled) {\n                return true;\n            }\n        } else {\n            this.crudService.exitCellEdit();\n        }\n\n        canceled = this.crudService.exitRowEdit(commit);\n        this.crudService.rowEditingBlocked = canceled;\n        if (canceled) {\n            return true;\n        }\n\n        const activeCell = this.selectionService.activeElement;\n        if (event && activeCell) {\n            const rowIndex = activeCell.row;\n            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;\n            this.navigateTo(rowIndex, visibleColIndex, (c) => {\n                if (c.targetType === 'dataCell' && c.target) {\n                    c.target.activate(event);\n                }\n            });\n        }\n\n        return false;\n    }\n\n    public endAdd(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n        const cachedRowData = {...row.data};\n        let cancelable = false;\n        if (!row && !cell) {\n            return;\n        }\n        if (commit) {\n            this.onRowAdded.pipe(first()).subscribe((args: IRowDataEventArgs) => {\n                const rowData = args.data;\n                const pinnedIndex = this.pinnedRecords.findIndex(x => x[this.primaryKey] === rowData[this.primaryKey]);\n                // A check whether the row is in the current view\n                const viewIndex = pinnedIndex !== -1 ? pinnedIndex : this.findRecordIndexInView(rowData);\n                const dataIndex = this.filteredSortedData.findIndex(data => data[this.primaryKey] === rowData[this.primaryKey]);\n                const isInView = viewIndex !== -1 && !this.navigation.shouldPerformVerticalScroll(viewIndex, 0);\n                const showIndex = isInView ? -1 : dataIndex;\n                this.showSnackbarFor(showIndex);\n            });\n            cancelable = this.gridAPI.submit_add_value();\n            if (!cancelable) {\n                const args = row.createEditEventArgs();\n                this.rowEdit.emit(args);\n                if (args.cancel) {\n                    return args.cancel;\n                }\n                const parentId = this._getParentRecordId();\n                this.gridAPI.addRowToData(row.data, parentId);\n                const doneArgs = row.createDoneEditEventArgs(cachedRowData);\n                this.rowEditDone.emit(doneArgs);\n                this.crudService.endRowEdit();\n                if (this.addRowParent.isPinned) {\n                  this.pinRow(row.id);\n                }\n            }\n            this.addRowParent = null;\n            this.cancelAddMode = cancelable;\n        } else {\n            this.crudService.exitCellEdit();\n            this.cancelAddMode = true;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n        this._pipeTrigger++;\n        if (!this.cancelAddMode) {\n            this.cdr.detectChanges();\n            this.onRowAdded.emit({ data: row.data});\n        }\n        const nonCancelableArgs = row.createDoneEditEventArgs(cachedRowData);\n        this.rowEditExit.emit(nonCancelableArgs);\n        return this.cancelAddMode;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected _getParentRecordId() {\n        return this.addRowParent.asChild ? this.addRowParent.rowID : undefined;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public endRowEdit(commit = true, event?: Event) {\n        const canceled = this.endEdit(commit, event);\n\n        if (canceled) {\n            return true;\n        }\n\n        const activeCell = this.navigation.activeNode;\n        if (activeCell && activeCell.row !== -1) {\n            this.tbody.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public triggerPipes() {\n        this._pipeTrigger++;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public endAddRow() {\n        this.cancelAddMode = true;\n        this.triggerPipes();\n    }\n\n    protected findRecordIndexInView(rec) {\n        return this.dataView.findIndex(data => data[this.primaryKey] === rec[this.primaryKey]);\n    }\n\n    protected getUnpinnedIndexById(id) {\n        return this.unpinnedRecords.findIndex(x => x[this.primaryKey] === id);\n    }\n\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler = (event: WheelEvent) => {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading && (this.hasZeroResultFilter || this.hasNoData)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.hasZeroResultFilter) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.hasNoData) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    private get hasZeroResultFilter(): boolean {\n        return this.filteredData && this.filteredData.length === 0;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    private get hasNoData(): boolean {\n        return !this.data || this.dataLength === 0;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n            rowForOf.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get shouldOverlayLoading(): boolean {\n        return this.isLoading && !this.hasNoData && !this.hasZeroResultFilter;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isMultiRowSelectionEnabled(): boolean {\n        return this.rowSelection === GridSelectionMode.multiple;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRowSelectable(): boolean {\n        return this.rowSelection !== GridSelectionMode.none;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isCellSelectable() {\n        return this.cellSelection !== GridSelectionMode.none;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n                const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.find((sr) => sr.dataRowIndex === index) : null;\n                if (row && row instanceof IgxRowDirective) {\n                    this._restoreVirtState(row);\n                } else if (summaryRow) {\n                    this._restoreVirtState(summaryRow);\n                }\n            });\n        }\n    }\n\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    public openAdvancedFilteringDialog() {\n        if (!this._advancedFilteringOverlayId) {\n            this._advancedFilteringOverlaySettings.target =\n                (this as any).rootGrid ? (this as any).rootGrid.nativeElement : this.nativeElement;\n            this._advancedFilteringOverlaySettings.outlet = this.outlet;\n\n            this._advancedFilteringOverlayId = this.overlayService.attach(\n                IgxAdvancedFilteringDialogComponent,\n                this._advancedFilteringOverlaySettings,\n                {\n                    injector: this.viewRef.injector,\n                    componentFactoryResolver: this.resolver\n                });\n            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);\n        }\n    }\n\n    /**\n     * Closes the advanced filtering dialog.\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    public closeAdvancedFilteringDialog(applyChanges: boolean) {\n        if (this._advancedFilteringOverlayId) {\n            const advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);\n            const advancedFilteringDialog = advancedFilteringOverlay.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n\n            if (applyChanges) {\n                advancedFilteringDialog.applyChanges();\n            }\n            advancedFilteringDialog.closeDialog();\n        }\n    }\n\n    public getEmptyRecordObjectFor(rec) {\n        const row = { ...rec };\n        Object.keys(row).forEach(key => row[key] = undefined);\n        row[this.primaryKey] = this.generateRowID();\n        return row;\n    }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                 /* remove expansion states related to the cleared group\n                    and all with deeper hierarchy than the cleared group */\n                const newExpandState = grpExpandState.filter((val) => {\n                    return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                });\n                /* Do not set the new instance produced by filter\n                    when there are no differences between expansion states */\n                if (newExpandState.length !== grpExpandState.length) {\n                   this.grid.groupingExpansionState = newExpandState;\n                }\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        if (grid.crudService.cellInEditMode) {\n            grid.endEdit(true);\n        }\n\n        const expansionState = grid.groupingExpansionState;\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n        }\n        this.grid.groupingExpansionState = [...expansionState];\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    public groupBy_fully_expand_group(groupRow: IGroupByRecord) {\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        const expanded = state ? state.expanded : this.grid.groupsExpanded;\n        if (!expanded) {\n            this.groupBy_toggle_group(groupRow);\n        }\n        if (groupRow.groupParent) {\n            this.groupBy_fully_expand_group(groupRow.groupParent);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    TemplateRef,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { DataType } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode } from '../selection/selection.service';\nimport { GridType } from '../common/grid.interface';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultGroupByExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByExpandedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isActive();\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent', { static: true })\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    @HostBinding('attr.id')\n    public get attrCellID() {\n        return `${this.gridID}_${this.index}`;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.isActive() ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    public isActive() {\n        return this.grid.navigation.activeNode ? this.grid.navigation.activeNode.row === this.index : false;\n    }\n\n\n    @HostListener('pointerdown')\n    public activate() {\n        this.grid.navigation.setActiveNode({row: this.index}, 'groupRow');\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        this.grid.toggleGroup(this.groupRow);\n    }\n\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultGroupByExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultGroupByCollapsedTemplate;\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        const column = this.groupRow.column;\n        return (column && column.dataType) || DataType.String;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { HORIZONTAL_NAV_KEYS, HEADER_KEYS } from '../core/utils';\nimport { GridKeydownTargetType } from './common/enums';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n    public grid: IgxGridBaseDirective;\n\n    protected getNextPosition(rowIndex: number, colIndex: number, key: string, shift: boolean, ctrl: boolean, event: KeyboardEvent) {\n        if (!this.activeNode.layout) {\n            this.activeNode.layout = this.layout(this.activeNode.column || 0);\n        }\n        switch (key) {\n            case 'tab':\n            case ' ':\n            case 'spacebar':\n            case 'space':\n            case 'escape':\n            case 'esc':\n            case 'enter':\n            case 'f2':\n                super.getNextPosition(rowIndex, colIndex, key, shift, ctrl, event);\n                break;\n            case 'end':\n                rowIndex = ctrl ? this.findLastDataRowIndex() : this.activeNode.row;\n                colIndex = ctrl ? this.lastColIndexPerMRLBlock(this.lastIndexPerRow) : this.lastIndexPerRow;\n                break;\n            case 'home':\n                rowIndex = ctrl ? this.findFirstDataRowIndex() : this.activeNode.row;\n                colIndex = ctrl ? 0 : this.firstIndexPerRow;\n                break;\n            case 'arrowleft':\n            case 'left':\n                colIndex = ctrl ? this.firstIndexPerRow : this.getNextHorizontalCellPosition(true).column;\n                break;\n            case 'arrowright':\n            case 'right':\n                colIndex = ctrl ? this.lastIndexPerRow : this.getNextHorizontalCellPosition().column;\n                break;\n            case 'arrowup':\n            case 'up':\n                const prevPos = this.getNextVerticalPosition(true);\n                colIndex = ctrl ? this.activeNode.column : prevPos.column;\n                rowIndex = ctrl ? this.findFirstDataRowIndex() : prevPos.row;\n                break;\n            case 'arrowdown':\n            case 'down':\n                const nextPos = this.getNextVerticalPosition();\n                colIndex = ctrl ? this.activeNode.column : nextPos.column;\n                rowIndex = ctrl ? this.findLastDataRowIndex() : nextPos.row;\n                break;\n            default:\n                return;\n        }\n        const nextLayout = this.layout(colIndex);\n        const newLayout = key.includes('up') || key.includes('down') ? {rowStart: nextLayout.rowStart} : {colStart: nextLayout.colStart};\n        Object.assign(this.activeNode.layout, newLayout, {rowEnd: nextLayout.rowEnd});\n\n        if (ctrl && (key === 'home' || key === 'end')) { this.activeNode.layout = nextLayout; }\n        return { rowIndex, colIndex };\n    }\n\n    public isValidPosition(rowIndex: number, colIndex: number): boolean {\n        if (rowIndex < 0 || colIndex < 0 || this.grid.dataView.length - 1 < rowIndex ||\n            Math.max(...this.grid.visibleColumns.map(col => col.visibleIndex)) < colIndex ||\n            (this.activeNode.column !== colIndex && !this.isDataRow(rowIndex, true))) {\n            return false;\n        }\n        return true;\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColIndex: number): boolean {\n        if (!super.shouldPerformVerticalScroll(targetRowIndex, visibleColIndex)) { return false; }\n        if (!this.isDataRow(targetRowIndex) || visibleColIndex < 0) {\n            return super.shouldPerformVerticalScroll(targetRowIndex, visibleColIndex);\n        }\n\n        const targetRow = super.getRowElementByIndex(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollPos = this.getVerticalScrollPositions(targetRowIndex, visibleColIndex);\n        return (!targetRow || targetRow.offsetTop + scrollPos.topOffset < Math.abs(this.containerTopOffset)\n            || containerHeight && containerHeight < scrollPos.rowBottom -  Math.ceil(this.scrollTop));\n    }\n\n    public isColumnFullyVisible(visibleColIndex: number): boolean {\n        const targetCol = this.grid.getColumnByVisibleIndex(visibleColIndex);\n        if (this.isParentColumnFullyVisible(targetCol?.parent) || super.isColumnPinned(visibleColIndex, this.forOfDir())) { return true; }\n\n        const scrollPos = this.getChildColumnScrollPositions(visibleColIndex);\n        const colWidth = scrollPos.rightScroll - scrollPos.leftScroll;\n        if (this.displayContainerWidth < colWidth && this.displayContainerScrollLeft === scrollPos.leftScroll) { return true; }\n        return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        if (!this.forOfDir().getScroll().clientWidth || parent?.pinned) { return true; }\n\n        const index = this.forOfDir().igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= this.forOfDir().getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= this.forOfDir().getColumnScrollLeft(index);\n    }\n\n    private getChildColumnScrollPositions(visibleColIndex: number) {\n        const targetCol: IgxColumnComponent = this.grid.getColumnByVisibleIndex(visibleColIndex);\n        const parentVIndex = this.forOfDir().igxForOf.indexOf(targetCol.parent);\n        let leftScroll = this.forOfDir().getColumnScrollLeft(parentVIndex);\n        let rightScroll = this.forOfDir().getColumnScrollLeft(parentVIndex + 1);\n        targetCol.parent.children.forEach((c) => {\n            if (c.rowStart >= targetCol.rowStart && c.visibleIndex < targetCol.visibleIndex) {\n                leftScroll += parseInt(c.width, 10);\n            }\n            if (c.rowStart <= targetCol.rowStart && c.visibleIndex > targetCol.visibleIndex) {\n                rightScroll -= parseInt(c.width, 10);\n            }\n        });\n        return { leftScroll, rightScroll: rightScroll };\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleIndex: number) {\n        const targetCol = this.grid.getColumnByVisibleIndex(visibleIndex);\n        const rowSpan = targetCol.rowEnd && targetCol.rowEnd - targetCol.rowStart ? targetCol.rowEnd - targetCol.rowStart : 1;\n        const topOffset = this.grid.defaultRowHeight * (targetCol.rowStart - 1);\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        return { topOffset, rowTop, rowBottom: rowTop + (this.grid.defaultRowHeight * rowSpan) };\n    }\n\n    public performHorizontalScrollToCell(visibleColumnIndex: number, cb?: () => void) {\n        if (!this.shouldPerformHorizontalScroll(visibleColumnIndex)) { return; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const startScroll = scrollPos.rightScroll - this.displayContainerScrollLeft;\n        const nextScroll = !(this.displayContainerScrollLeft <= scrollPos.leftScroll) && this.displayContainerWidth >= startScroll ?\n            scrollPos.leftScroll : scrollPos.rightScroll - this.displayContainerWidth;\n        this.forOfDir().getScroll().scrollLeft = nextScroll;\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) { cb(); }\n            });\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        const children = this.parentByChildIndex(visibleColIndex || 0)?.children;\n        if (!super.isDataRow(rowIndex) || (children && children.length < 2) || visibleColIndex < 0) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColIndex, cb);\n        }\n\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const pos = this.getVerticalScrollPositions(rowIndex, visibleColIndex);\n        const row = super.getRowElementByIndex(rowIndex);\n        if ((this.scrollTop > pos.rowTop) && (!row || row.offsetTop + pos.topOffset < Math.abs(this.containerTopOffset))) {\n            pos.topOffset === 0 ? this.grid.verticalScrollContainer.scrollTo(rowIndex) :\n                this.grid.verticalScrollContainer.scrollPosition = pos.rowTop;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(Math.abs(pos.rowBottom - this.scrollTop - containerHeight));\n        }\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                if (cb) { cb(); }\n            });\n    }\n\n    getNextHorizontalCellPosition(previous = false) {\n        const parent = this.parentByChildIndex(this.activeNode.column);\n        if (!this.hasNextHorizontalPosition(previous, parent)) {\n            return { row: this.activeNode.row, column: this.activeNode.column };\n        }\n        const columns = previous ? parent.children.filter(c => c.rowStart <= this.activeNode.layout.rowStart)\n            .sort((a, b) => b.visibleIndex - a.visibleIndex) : parent.children.filter(c => c.rowStart <= this.activeNode.layout.rowStart);\n        let column = columns.find((col) => previous ?\n                col.visibleIndex < this.activeNode.column && this.rowEnd(col) > this.activeNode.layout.rowStart :\n                col.visibleIndex > this.activeNode.column && col.colStart > this.activeNode.layout.colStart);\n        if (!column || (previous && this.activeNode.layout.colStart === 1)) {\n            const index = previous ? parent.visibleIndex - 1 : parent.visibleIndex + 1;\n            const children = this.grid.columnList.find(cols => cols.columnLayout && cols.visibleIndex === index).children;\n            column = previous ? children.toArray().reverse().find(child => child.rowStart <= this.activeNode.layout.rowStart) :\n                children.find(child => this.rowEnd(child) > this.activeNode.layout.rowStart && child.colStart === 1);\n        }\n        return { row: this.activeNode.row, column: column.visibleIndex };\n    }\n\n    getNextVerticalPosition(previous = false) {\n        this.activeNode.column = this.activeNode.column || 0;\n        if (!this.hasNextVerticalPosition(previous)) {\n            return { row: this.activeNode.row, column: this.activeNode.column };\n        }\n        const currentRowStart = this.grid.getColumnByVisibleIndex(this.activeNode.column).rowStart;\n        const nextBlock = !this.isDataRow(this.activeNode.row) ||\n        (previous ? currentRowStart === 1 : currentRowStart === this.lastRowStartPerBlock());\n        const nextRI = previous ? this.activeNode.row - 1 : this.activeNode.row + 1;\n        if (nextBlock && !this.isDataRow(nextRI)) {\n            return {row: nextRI,  column: this.activeNode.column};\n        }\n        const children = this.parentByChildIndex(this.activeNode.column).children;\n        const col = previous ? this.getPreviousRowIndex(children, nextBlock) : this.getNextRowIndex(children, nextBlock);\n        return { row: nextBlock ? nextRI : this.activeNode.row, column: col.visibleIndex };\n    }\n\n    private getNextRowIndex(children, next) {\n        const rowStart = next ? 1 : this.rowEnd(this.grid.getColumnByVisibleIndex(this.activeNode.column));\n        const  col = children.filter(c => c.rowStart === rowStart);\n        return col.find(co => co.colStart === this.activeNode.layout.colStart) ||\n            col.sort((a, b) => b.visibleIndex - a.visibleIndex).find(co => co.colStart <= this.activeNode.layout.colStart);    }\n\n    private getPreviousRowIndex(children, prev) {\n        const end = prev ? Math.max(...children.map(c => this.rowEnd(c))) :\n            this.grid.getColumnByVisibleIndex(this.activeNode.column).rowStart;\n        const col = children.filter(c => this.rowEnd(c) ===  end);\n        return col.find(co => co.colStart === this.activeNode.layout.colStart) ||\n            col.sort((a, b) => b.visibleIndex - a.visibleIndex).find(co => co.colStart <= this.activeNode.layout.colStart);\n    }\n\n    headerNavigation(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (!HEADER_KEYS.has(key)) { return; }\n        event.preventDefault();\n        if (!this.activeNode.layout) {\n            this.activeNode.layout = this.layout(this.activeNode.column || 0);\n        }\n        const alt = event.altKey;\n        const ctrl = event.ctrlKey;\n        this.performHeaderKeyCombination(this.grid.getColumnByVisibleIndex(this.activeNode.column), key, event.shiftKey, ctrl, alt, event);\n        if (!ctrl && !alt && (key.includes('down') || key.includes('up'))) {\n            const children = this.parentByChildIndex(this.activeNode.column).children;\n            const col = key.includes('down') ? this.getNextRowIndex(children, false) : this.getPreviousRowIndex(children, false);\n            if (!col) { return; }\n            this.activeNode.column = col.visibleIndex;\n            const layout = this.layout(this.activeNode.column);\n            const nextLayout = {...this.activeNode.layout, rowStart: layout.rowStart, rowEnd: layout.rowEnd};\n            this.setActiveNode({row: this.activeNode.row, layout: nextLayout});\n            return;\n        }\n        this.horizontalNav(event, key, -1, 'headerCell');\n    }\n\n    protected horizontalNav(event: KeyboardEvent, key: string, rowIndex: number, tag: GridKeydownTargetType) {\n        const ctrl = event.ctrlKey;\n        if (!HORIZONTAL_NAV_KEYS.has(key) || event.altKey) { return; }\n        this.activeNode.row = rowIndex;\n\n        const newActiveNode = {\n            column: this.activeNode.column,\n            mchCache: {\n                level: this.activeNode.level,\n                visibleIndex: this.activeNode.column\n            }\n        };\n\n        if ((key.includes('left') || key === 'home') && this.activeNode.column > 0) {\n            newActiveNode.column = ctrl || key === 'home' ? this.firstIndexPerRow : this.getNextHorizontalCellPosition(true).column;\n        }\n        if ((key.includes('right') || key === 'end') && this.activeNode.column !== this.lastIndexPerRow) {\n            newActiveNode.column = ctrl || key === 'end' ? this.lastIndexPerRow : this.getNextHorizontalCellPosition().column;\n        }\n\n        if (tag === 'headerCell') {\n            const column = this.grid.getColumnByVisibleIndex(newActiveNode.column);\n            newActiveNode.mchCache.level = column.level;\n            newActiveNode.mchCache.visibleIndex = column.visibleIndex;\n        }\n\n        const layout = this.layout(newActiveNode.column);\n        const newLayout = {...this.activeNode.layout, colStart: layout.colStart, rowEnd: layout.rowEnd};\n        this.setActiveNode({row: this.activeNode.row, column: newActiveNode.column,\n            layout: newLayout, mchCache: newActiveNode.mchCache});\n        this.performHorizontalScrollToCell(newActiveNode.column);\n    }\n\n    private get lastIndexPerRow(): number {\n        const children = this.grid.visibleColumns.find(c => c.visibleIndex === this.lastLayoutIndex && c.columnLayout)\n            .children.toArray().reverse();\n        const column = children.find(co => co.rowStart === this.activeNode.layout.rowStart) ||\n        children.find(co => co.rowStart <= this.activeNode.layout.rowStart);\n        return column.visibleIndex;\n    }\n\n    private get firstIndexPerRow(): number {\n        const children = this.grid.visibleColumns.find(c => c.visibleIndex === 0 && c.columnLayout).children;\n        const column = children.find(co => co.rowStart === this.activeNode.layout.rowStart) ||\n        children.find(co => co.rowStart <= this.activeNode.layout.rowStart);\n        return column.visibleIndex;\n    }\n\n    private get lastLayoutIndex(): number {\n        return Math.max(...this.grid.visibleColumns.filter(c => c.columnLayout).map(col => col.visibleIndex));\n    }\n\n    private get scrollTop(): number {\n       return Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n    }\n\n    private lastColIndexPerMRLBlock(visibleIndex = this.activeNode.column): number {\n        return this.parentByChildIndex(visibleIndex).children.last.visibleIndex;\n    }\n\n    private lastRowStartPerBlock(visibleIndex = this.activeNode.column) {\n        return Math.max(...this.parentByChildIndex(visibleIndex).children.map(c => c.rowStart));\n    }\n\n    private rowEnd(column): number {\n        return column.rowEnd && column.rowEnd - column.rowStart ? column.rowStart + column.rowEnd - column.rowStart : column.rowStart + 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public layout(visibleIndex) {\n        const column = this.grid.getColumnByVisibleIndex(visibleIndex);\n        return {colStart: column.colStart, rowStart: column.rowStart,\n                colEnd: column.colEnd, rowEnd: column.rowEnd, columnVisibleIndex: column.visibleIndex };\n    }\n\n    private parentByChildIndex(visibleIndex) {\n        return this.grid.getColumnByVisibleIndex(visibleIndex)?.parent;\n\n    }\n\n    private hasNextHorizontalPosition(previous = false, parent) {\n        if (previous && parent.visibleIndex === 0 && this.activeNode.layout.colStart === 1 ||\n            !previous && parent.visibleIndex === this.lastLayoutIndex && this.activeNode.column === this.lastIndexPerRow) {\n            return false;\n        }\n        return true;\n    }\n\n    private hasNextVerticalPosition(prev = false) {\n        if ((prev && this.activeNode.row === 0 && (!this.isDataRow(this.activeNode.row) || this.activeNode.layout.rowStart === 1)) ||\n            (!prev && this.activeNode.row >= this.grid.dataView.length - 1 && this.activeNode.column === this.lastColIndexPerMRLBlock())) {\n            return false;\n        }\n        return true;\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, AfterContentInit, HostBinding, forwardRef, OnInit, AfterViewInit\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray, IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective, IgxGridDetailTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\nimport { FilterMode } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\n\nlet NEXT_ID = 0;\n\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * Grid provides a way to present and manipulate tabular data.\n * @igxModule IgxGridModule\n * @igxGroup Grids & Lists\n * @igxKeywords grid, table\n * @igxTheme igx-grid-theme\n * @remarks\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n * @example\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [\n        IgxGridNavigationService,\n        IgxGridSummaryService,\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService,\n        IgxColumnResizingService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseDirective implements GridType, OnInit, DoCheck, AfterContentInit, AfterViewInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden @internal\n     */\n    public groupingResult: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingMetadata: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n    private _showGroupArea = true;\n\n    /**\n     * Gets/Sets the value of the `id` attribute.\n     * @remarks\n     * If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * Gets/Sets the array of data that populates the `IgxGridComponent`.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Gets/Sets an array of objects containing the filtered data.\n     * @example\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * this.grid.filteredData = [...];\n     * ```\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * @example\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Gets/Sets the total number of records in the data source.\n     * @remarks\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * @example\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * this.grid1.totalItemCount = 55;\n     * ```\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private get _gridAPI(): IgxGridAPIService {\n        return this.gridAPI as IgxGridAPIService;\n    }\n    private _filteredData = null;\n\n    private childDetailTemplates: Map<any, any> = new Map();\n\n    /**\n     * Gets/Sets the group by state.\n     * @example\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * this.grid.groupingExpressions = [...];\n     * ```\n     * @remarks\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.groupingExpressionsChange.emit(this._groupingExpressions);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.notifyChanges();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (!this._init && JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.notifyChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public groupingExpressionsChange = new EventEmitter<IGroupingExpression[]>();\n\n    /**\n     * Gets/Sets a list of expansion states for group rows.\n     * @remarks\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    set groupingExpansionState(value) {\n        if (value !== this._groupingExpandState) {\n            this.groupingExpansionStateChange.emit(value);\n        }\n        this._groupingExpandState = value;\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @Output()\n    public groupingExpansionStateChange = new EventEmitter<IGroupByExpandState[]>();\n\n    /**\n     * Gets/Sets whether created groups are rendered expanded or collapsed.\n     * @remarks\n     * The default rendered state is expanded.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * Gets the hierarchical representation of the group by records.\n     * @example\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * Gets/Sets whether the grouped columns should be hidden.\n     * @remarks\n     * The default value is \"false\"\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * Gets/Sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * @remarks\n     * The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * @example\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n        this.notifyChanges();\n    }\n\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * Gets/Sets the template that will be rendered as a GroupBy drop area.\n     * @remarks\n     * The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * @example\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when columns are grouped/ungrouped.\n     * @remarks\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxGridDetailTemplateDirective, { read: IgxGridDetailTemplateDirective, static: false })\n    protected gridDetailsTemplate: IgxGridDetailTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef, static: true })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Gets the list of group rows.\n     * @example\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((item1, item2) => item1.index - item2.index);\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('record_template', { read: TemplateRef, static: true })\n    protected recordTemplate: TemplateRef<any>;\n\n    @ViewChild('detail_template_container', { read: TemplateRef, static: true })\n    protected detailTemplateContainer: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxGridDetailTemplateDirective, { read: TemplateRef, static: false })\n    public detailTemplate: TemplateRef<any> = null;\n\n    @ViewChild('group_template', { read: TemplateRef, static: true })\n    protected defaultGroupTemplate: TemplateRef<any>;\n\n    @ViewChild('summary_template', { read: TemplateRef, static: true })\n    protected summaryTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    public getDetailsContext(rowData, index) {\n        return {\n            $implicit: rowData,\n            index: index\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public trackChanges(index, rec) {\n        if (rec.detailsData !== undefined) {\n            return rec.detailsData;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public detailsViewFocused(container, rowIndex) {\n        this.navigation.setActiveNode({row: rowIndex});\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get hasDetails() {\n        return !!this.gridDetailsTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getRowTemplate(rowData) {\n        if (this.isGroupByRecord(rowData)) {\n            return this.defaultGroupTemplate;\n        } else if (this.isSummaryRow(rowData)) {\n            return this.summaryTemplate;\n        }  else if (this.hasDetails && this.isDetailRecord(rowData)) {\n                return this.detailTemplateContainer;\n        } else {\n            return this.recordTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isDetailRecord(record) {\n        return record.detailsData !== undefined;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isDetailActive(rowIndex) {\n        return this.navigation.activeNode ? this.navigation.activeNode.row === rowIndex : false;\n    }\n    /**\n     * @hidden @internal\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Gets/Sets the template reference for the group row.\n     * @example\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * this.grid.groupRowTemplate = myRowTemplate;\n     * ```\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.notifyChanges();\n    }\n\n\n    /**\n     * Gets/Sets the template reference of the `IgxGridComponent`'s group area.\n     * @example\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.notifyChanges();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * @remarks\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * @example\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n     *     { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n     *     { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n     *     { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n     * ]);\n     * ```\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        if (this.checkIfNoColumnField(expression)) {\n            return;\n        }\n        this.endEdit(true);\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Clears grouping for particular column, array of columns or all columns.\n     * @remarks\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * @example\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     * @param name Name of column or array of column names to be ungrouped.\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.notifyChanges(true);\n    }\n\n    public preventHeaderScroll(args) {\n        if (args.target.scrollLeft !== 0) {\n            (this.navigation as any).forOfDir().getScroll().scrollLeft =  args.target.scrollLeft;\n            args.target.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * @param group The group record.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * @param groupRow The group record to toggle.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * Expands the specified group and all of its parent groups.\n     * @param groupRow The group record to fully expand.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     */\n    public fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._fullyExpandGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * @example\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * @example\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    @Input()\n    public get showGroupArea(): boolean {\n        return this._showGroupArea;\n    }\n    public set showGroupArea(value: boolean) {\n        this._showGroupArea = value;\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList.length > 0 && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Gets if the grid's group by drop area is visible.\n     * @example\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_fully_expand_group(groupRow);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getContext(rowData: any, rowIndex: number, pinned?: boolean): any {\n        if (this.isDetailRecord(rowData)) {\n            const cachedData = this.childDetailTemplates.get(rowData.detailsData);\n            const rowID = this.primaryKey ? rowData.detailsData[this.primaryKey] : this.data.indexOf(rowData.detailsData);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData.detailsData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData),\n                    templateID: 'detailRow-' + rowID\n                };\n            } else {\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData.detailsData,\n                    templateID: 'detailRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        }\n        return {\n            $implicit: this.isGhostRecord(rowData) || this.isAddRowRecord(rowData) ? rowData.recordRef : rowData,\n            index: this.getDataViewIndex(rowIndex, pinned),\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow',\n            disabled: this.isGhostRecord(rowData),\n            addRow: this.isAddRowRecord(rowData) ? rowData.addRow : false\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public viewCreatedHandler(args) {\n        if (args.context.templateID.indexOf('detailRow') !== -1) {\n            this.childDetailTemplates.set(args.context.$implicit, args);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public viewMovedHandler(args) {\n        if (args.context.templateID.indexOf('detailRow') !== -1) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit;\n            const cachedData = this.childDetailTemplates.get(key);\n            cachedData.owner = args.owner;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.getComputedHeight(this.groupArea.nativeElement) : 0;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const rowIndex = this.groupingResult.indexOf(row);\n            const groupByRecord = this.groupingMetadata[rowIndex];\n            if (groupByRecord) {\n                this._fullyExpandGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column, this.groupingFlatResult);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        const column = this.getColumnByName(expression.fieldName);\n        return (column && column.header) || expression.fieldName;\n    }\n    /**\n     * @hidden @internal\n     */\n    public get iconTemplate() {\n        if (this.groupsExpanded) {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getColumnGroupable(fieldName: string): boolean {\n        const column = this.getColumnByName(fieldName);\n        return column && column.groupable;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isDetailRecord(rowData)) {\n                const cachedData = this.childDetailTemplates.get(rowData.detailsData);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n            this._headerFeaturesWidth = NaN;\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngDoCheck(): void {\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList.length > 0) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        if (this.groupingExpressions.length || this.hasDetails) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries || this.isDetailRecord(record)) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.dataView.forEach(process);\n            return this.extractDataFromSelection(source, formatters, headers);\n        } else {\n            return super.getSelectedData(formatters, headers);\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n\n    private checkIfNoColumnField(expression: IGroupingExpression | Array<IGroupingExpression> | any): boolean {\n        if (expression instanceof Array) {\n            for (const singleExpression of expression) {\n                if (!singleExpression.fieldName) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return !expression.fieldName;\n    }\n\n}\n","import { Directive, Optional, Input, NgModule, Host, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IGroupingExpression } from '../data-operations/grouping-expression.interface';\nimport { IPagingState } from '../data-operations/paging-state.interface';\nimport { DataType } from '../data-operations/data-util';\nimport { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand,\n    IgxStringFilteringOperand, IFilteringOperation} from '../data-operations/filtering-condition';\nimport { GridSelectionRange } from './selection/selection.service';\nimport { IGroupByExpandState } from '../data-operations/groupby-expand-state.interface';\nimport { IGroupingState } from '../data-operations/groupby-state.interface';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridComponent } from './grid/grid.component';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid/hierarchical-grid.component';\nimport { IPinningConfig } from './grid.common';\n\nexport interface IGridState {\n    columns?: IColumnState[];\n    filtering?: IFilteringExpressionsTree;\n    advancedFiltering?: IFilteringExpressionsTree;\n    paging?: IPagingState;\n    sorting?: ISortingExpression[];\n    groupBy?: IGroupingState;\n    cellSelection?: GridSelectionRange[];\n    rowSelection?: any[];\n    columnSelection?: string[];\n    rowPinning?: any[];\n    pinningConfig?: IPinningConfig;\n    expansion?: any[];\n    rowIslands?: IGridStateCollection[];\n    id?: string;\n}\n\nexport interface IGridStateCollection {\n    id: string;\n    parentRowID: any;\n    state: IGridState;\n}\n\nexport interface IGridStateOptions {\n    columns?: boolean;\n    filtering?: boolean;\n    advancedFiltering?: boolean;\n    sorting?: boolean;\n    groupBy?: boolean;\n    paging?: boolean;\n    cellSelection?: boolean;\n    rowSelection?: boolean;\n    columnSelection?: boolean;\n    rowPinning?: boolean;\n    pinningConfig?: boolean;\n    expansion?: boolean;\n    rowIslands?: boolean;\n}\n\nexport interface IColumnState {\n    pinned: boolean;\n    sortable: boolean;\n    filterable: boolean;\n    editable: boolean;\n    sortingIgnoreCase: boolean;\n    filteringIgnoreCase: boolean;\n    headerClasses: string;\n    headerGroupClasses: string;\n    maxWidth: string;\n    groupable: boolean;\n    movable: boolean;\n    hidden: boolean;\n    dataType: DataType;\n    hasSummary: boolean;\n    field: string;\n    width: any;\n    header: string;\n    resizable: boolean;\n    searchable: boolean;\n}\n\nexport type GridFeatures = keyof IGridStateOptions;\n\ninterface Feature {\n    getFeatureState: (context: IgxGridStateDirective) => IGridState;\n    restoreFeatureState: (context: IgxGridStateDirective, state: IColumnState[] | IPagingState | ISortingExpression[] |\n        IGroupingState | IFilteringExpressionsTree | GridSelectionRange[] | IPinningConfig | any[]) => void;\n}\n\n@Directive({\n    selector: '[igxGridState]'\n})\nexport class IgxGridStateDirective {\n\n    private featureKeys: GridFeatures[] = [];\n    private state: IGridState;\n    private currGrid: IgxGridBaseDirective;\n    private _options: IGridStateOptions = {\n        columns: true,\n        filtering: true,\n        advancedFiltering: true,\n        sorting: true,\n        groupBy: true,\n        paging: true,\n        cellSelection: true,\n        rowSelection: true,\n        columnSelection: true,\n        rowPinning: true,\n        expansion: true,\n        rowIslands: true\n    };\n    private FEATURES = {\n        sorting:  {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const sortingState = context.currGrid.sortingExpressions;\n                sortingState.forEach(s => {\n                    delete s.strategy;\n                    delete s.owner;\n                });\n                return { sorting: sortingState };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: ISortingExpression[]): void {\n                context.currGrid.sortingExpressions = state;\n            }\n        },\n        filtering: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const filteringState = context.currGrid.filteringExpressionsTree;\n                if (filteringState) {\n                    delete filteringState.owner;\n                    for (const item of filteringState.filteringOperands) {\n                        delete (item as IFilteringExpressionsTree).owner;\n                    }\n                }\n                return { filtering: filteringState };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: FilteringExpressionsTree): void {\n                const filterTree = context.createExpressionsTreeFromObject(state);\n                context.currGrid.filteringExpressionsTree = filterTree as FilteringExpressionsTree;\n            }\n        },\n        advancedFiltering: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const filteringState = context.currGrid.advancedFilteringExpressionsTree;\n                let advancedFiltering: any;\n                if (filteringState) {\n                    delete filteringState.owner;\n                    for (const item of filteringState.filteringOperands) {\n                        delete (item as IFilteringExpressionsTree).owner;\n                    }\n                    advancedFiltering = filteringState;\n                } else {\n                    advancedFiltering = {};\n                }\n                return { advancedFiltering: advancedFiltering };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: FilteringExpressionsTree): void {\n                const filterTree = context.createExpressionsTreeFromObject(state);\n                context.currGrid.advancedFilteringExpressionsTree = filterTree as FilteringExpressionsTree;\n            }\n        },\n        columns: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const gridColumns: IColumnState[] = context.currGrid.columns.map((c) => {\n                    return {\n                        pinned: c.pinned,\n                        sortable: c.sortable,\n                        filterable: c.filterable,\n                        editable: c.editable,\n                        sortingIgnoreCase: c.sortingIgnoreCase,\n                        filteringIgnoreCase: c.filteringIgnoreCase,\n                        headerClasses: c.headerClasses,\n                        headerGroupClasses: c.headerGroupClasses,\n                        maxWidth: c.maxWidth,\n                        groupable: c.groupable,\n                        movable: c.movable,\n                        hidden: c.hidden,\n                        dataType: c.dataType,\n                        hasSummary: c.hasSummary,\n                        field: c.field,\n                        width: c.width,\n                        header: c.header,\n                        resizable: c.resizable,\n                        searchable: c.searchable,\n                        selectable: c.selectable\n                    };\n                });\n                return { columns: gridColumns };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: IColumnState[]): void {\n                const newColumns = [];\n                const factory = context.resolver.resolveComponentFactory(IgxColumnComponent);\n                state.forEach((colState) => {\n                    const ref = factory.create(context.viewRef.injector);\n                    Object.assign(ref.instance, colState);\n                    ref.changeDetectorRef.detectChanges();\n                    newColumns.push(ref.instance);\n                });\n                context.currGrid.columnList.reset(newColumns);\n                context.currGrid.columnList.notifyOnChanges();\n            }\n        },\n        groupBy: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const grid = context.currGrid as IgxGridComponent;\n                const groupingExpressions = grid.groupingExpressions;\n                groupingExpressions.forEach(expr => {\n                    delete expr.strategy;\n                });\n                const expansionState = grid.groupingExpansionState;\n                const groupsExpanded = grid.groupsExpanded;\n\n                return { groupBy: { expressions: groupingExpressions, expansion: expansionState, defaultExpanded: groupsExpanded}  };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: IGroupingState): void {\n                const grid = context.currGrid as IgxGridComponent;\n                grid.groupingExpressions = state.expressions as IGroupingExpression[];\n                if (grid.groupsExpanded !== state.defaultExpanded) {\n                    grid.toggleAllGroupRows();\n                } else {\n                    grid.groupingExpansionState = state.expansion as IGroupByExpandState[];\n                }\n            }\n        },\n        paging: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const pagingState = context.currGrid.pagingState;\n                return { paging: pagingState };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: IPagingState): void {\n                if (context.currGrid.perPage !== state.recordsPerPage) {\n                    context.currGrid.perPage = state.recordsPerPage;\n                    context.currGrid.cdr.detectChanges();\n                }\n                context.currGrid.page = state.index;\n            }\n        },\n        rowSelection: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const selection = context.currGrid.selectedRows;\n                return { rowSelection: selection };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: any[]): void {\n                context.currGrid.selectRows(state);\n            }\n        },\n        cellSelection: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const selection = context.currGrid.getSelectedRanges().map(range => {\n                    return { rowStart: range.rowStart, rowEnd: range.rowEnd, columnStart: range.columnStart, columnEnd: range.columnEnd };\n                });\n                return { cellSelection: selection };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: GridSelectionRange[]): void {\n                state.forEach(r => {\n                    const range = { rowStart: r.rowStart, rowEnd: r.rowEnd, columnStart: r.columnStart, columnEnd: r.columnEnd};\n                    context.currGrid.selectRange(range);\n                });\n            }\n        },\n        columnSelection: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const selection = context.currGrid.selectedColumns().map(c => c.field);\n                return { columnSelection: selection };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: string[]): void {\n                context.currGrid.deselectAllColumns();\n                context.currGrid.selectColumns(state);\n            }\n        },\n        rowPinning: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const pinned = context.currGrid.pinnedRows.map(x => x.rowID);\n                return { rowPinning: pinned };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: any[]): void {\n                // clear current state.\n                context.currGrid.pinnedRows.forEach(row => row.unpin());\n                state.forEach(rowID => context.currGrid.pinRow(rowID));\n            }\n        },\n        pinningConfig: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                return { pinningConfig: context.currGrid.pinning };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: IPinningConfig): void {\n                context.currGrid.pinning = state;\n            }\n        },\n        expansion: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const expansionStates = Array.from(context.currGrid.expansionStates);\n                return { expansion: expansionStates };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: any[]): void {\n                const expansionStates = new Map<any, boolean>(state);\n                context.currGrid.expansionStates = expansionStates;\n            }\n        },\n        rowIslands: {\n            getFeatureState(context: IgxGridStateDirective): IGridState {\n                const childGridStates: IGridStateCollection[] = [];\n                const rowIslands = (context.currGrid as any).allLayoutList;\n                if (rowIslands) {\n                    rowIslands.forEach(rowIsland => {\n                        const childGrids = rowIsland.rowIslandAPI.getChildGrids();\n                        childGrids.forEach(chGrid => {\n                            const parentRowID = this.getParentRowID(chGrid);\n                            context.currGrid = chGrid;\n                            if (context.currGrid) {\n                                const childGridState = context.buildState(context.featureKeys) as IGridState;\n                                childGridStates.push({ id: `${rowIsland.id}`, parentRowID: parentRowID, state: childGridState });\n                            }\n                        });\n                    });\n                }\n                context.currGrid = context.grid;\n                return { rowIslands: childGridStates };\n            },\n            restoreFeatureState(context: IgxGridStateDirective, state: any): void {\n                const rowIslands = (context.currGrid as any).allLayoutList;\n                if (rowIslands) {\n                    rowIslands.forEach(rowIsland => {\n                        const childGrids = rowIsland.rowIslandAPI.getChildGrids();\n                        childGrids.forEach(chGrid => {\n                            const parentRowID = this.getParentRowID(chGrid);\n                            context.currGrid = chGrid;\n                            const childGridState = state.find(st => st.id === rowIsland.id && st.parentRowID === parentRowID);\n                            if (childGridState && context.currGrid) {\n                                context.restoreGridState(childGridState.state, context.featureKeys);\n                            }\n                        });\n                    });\n                }\n                context.currGrid = context.grid;\n            },\n            /**\n             * Traverses the hierarchy up to the root grid to return the ID of the expanded row.\n             */\n            getParentRowID(grid: IgxHierarchicalGridComponent) {\n                let childGrid, childRow;\n                while (grid.parent) {\n                    childRow = grid.childRow;\n                    childGrid = grid;\n                    grid = grid.parent;\n                }\n                return grid.hgridAPI.getParentRowId(childGrid);\n            }\n        }\n    };\n\n    /**\n     *  An object with options determining if a certain feature state should be saved.\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * public options = {selection: false, advancedFiltering: false};\n     * ```\n     */\n    @Input('igxGridState')\n    public get options(): IGridStateOptions {\n       return this._options;\n    }\n\n    public set options(value: IGridStateOptions) {\n        Object.assign(this._options, value);\n        if (!(this.grid instanceof IgxGridComponent)) {\n            delete this._options.groupBy;\n        } else {\n            delete this._options.rowIslands;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        @Host() @Optional() public grid: IgxGridBaseDirective,\n        private resolver: ComponentFactoryResolver,\n        private viewRef: ViewContainerRef) { }\n\n    /**\n     * Gets the state of a feature or states of all grid features, unless a certain feature is disabled through the `options` property.\n     * @param `serialize` determines whether the returned object will be serialized to JSON string. Default value is true.\n     * @param `feature` string or array of strings determining the features to be added in the state. If skipped, all features are added.\n     * @returns Returns the serialized to JSON string IGridState object, or the non-serialized IGridState object.\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * @ViewChild(IgxGridStateDirective, { static: true }) public state;\n     * let state = this.state.getState(); // returns string\n     * let state = this.state(false) // returns `IGridState` object\n     * ```\n     */\n    public getState(serialize = true, features?: GridFeatures | GridFeatures[]): IGridState | string  {\n        let state: IGridState | string;\n        this.currGrid = this.grid;\n        this.state = state = this.buildState(features) as IGridState;\n        if (serialize) {\n            state = JSON.stringify(state, this.stringifyCallback) as string;\n        }\n        return state;\n    }\n\n    /**\n     * Restores grid features' state based on the IGridState object passed as an argument.\n     * @param IGridState object to restore state from.\n     * @returns\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * @ViewChild(IgxGridStateDirective, { static: true }) public state;\n     * this.state.setState(gridState);\n     * ```\n     */\n    public setState(state: IGridState | string, features?: GridFeatures | GridFeatures[]) {\n        if (typeof state === 'string') {\n            state = JSON.parse(state) as IGridState;\n        }\n        this.currGrid = this.grid;\n        this.restoreGridState(state, features);\n        this.grid.cdr.detectChanges(); // TODO\n    }\n\n    /**\n     * Builds an IGridState object.\n     */\n    private buildState(keys?: GridFeatures | GridFeatures[]): IGridState {\n        this.applyFeatures(keys);\n        let gridState = {} as IGridState;\n        this.featureKeys.forEach(f => {\n            if (this.options[f]) {\n                if (!(this.grid instanceof IgxGridComponent) && f === 'groupBy') {\n                    return;\n                }\n                const feature = this.getFeature(f);\n                const featureState: IGridState = feature.getFeatureState(this);\n                gridState = Object.assign(gridState, featureState);\n            }\n        });\n        return gridState;\n    }\n\n    /**\n     * The method that calls corresponding methods to restore features from the passed IGridState object.\n     */\n    private restoreGridState(state: IGridState, features?: GridFeatures | GridFeatures[]) {\n        this.applyFeatures(features);\n        this.featureKeys.forEach(f => {\n            if (this.options[f]) {\n                const featureState = state[f];\n                if (featureState) {\n                    const feature = this.getFeature(f);\n                    feature.restoreFeatureState(this, featureState);\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns a collection of all grid features.\n     */\n    private applyFeatures(keys?: GridFeatures | GridFeatures[]) {\n        this.featureKeys = [];\n        if (!keys) {\n            for (const key of Object.keys(this.options)) {\n                this.featureKeys.push(key as GridFeatures);\n            }\n        } else if (Array.isArray(keys)) {\n            this.featureKeys = [...keys as GridFeatures[]];\n        } else {\n            this.featureKeys.push(keys);\n        }\n    }\n\n    /**\n     * This method builds a FilteringExpressionsTree from a provided object.\n     */\n    private createExpressionsTreeFromObject(exprTreeObject: FilteringExpressionsTree): FilteringExpressionsTree {\n        if (!exprTreeObject || !exprTreeObject.filteringOperands) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(exprTreeObject.operator, exprTreeObject.fieldName);\n\n        for (const item of exprTreeObject.filteringOperands) {\n            // Check if item is an expressions tree or a single expression.\n            if ((item as FilteringExpressionsTree).filteringOperands) {\n                const subTree = this.createExpressionsTreeFromObject((item as FilteringExpressionsTree));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                const expr = item as IFilteringExpression;\n                let dataType: string;\n                if (this.currGrid.columnList.length > 0) {\n                    dataType = this.currGrid.columnList.find(c => c.field === expr.fieldName).dataType;\n                } else {\n                    dataType = this.state.columns.find(c => c.field === expr.fieldName).dataType;\n                }\n                // when ESF, values are stored in Set.\n                // First those values are converted to an array before returning string in the stringifyCallback\n                // now we need to convert those back to Set\n                if (Array.isArray(expr.searchVal)) {\n                    expr.searchVal = new Set(expr.searchVal);\n                } else {\n                    expr.searchVal = (dataType === 'date') ? new Date(Date.parse(expr.searchVal)) : expr.searchVal;\n                }\n                expr.condition = this.generateFilteringCondition(dataType, expr.condition.name);\n                expressionsTree.filteringOperands.push(expr);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns the filtering logic function for a given dataType and condition (contains, greaterThan, etc.)\n     */\n    private generateFilteringCondition(dataType: string, name: string): IFilteringOperation {\n        let filters;\n        switch (dataType) {\n            case DataType.Boolean:\n                filters = IgxBooleanFilteringOperand.instance();\n                break;\n            case DataType.Number:\n                filters = IgxNumberFilteringOperand.instance();\n                break;\n            case DataType.Date:\n                filters = IgxDateFilteringOperand.instance();\n                break;\n            case DataType.String:\n            default:\n                filters = IgxStringFilteringOperand.instance();\n                break;\n        }\n        return filters.condition(name);\n    }\n\n    private stringifyCallback(key: string, val: any) {\n        if (key === 'searchVal' && val instanceof Set) {\n            return Array.from(val);\n        }\n        return val;\n    }\n\n    private getFeature(key: string): Feature {\n        const feature: Feature = this.FEATURES[key];\n        return feature;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxGridStateDirective],\n    exports: [IgxGridStateDirective]\n})\nexport class IgxGridStateModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IgxButtonModule } from '../../directives/button/button.directive';\nimport { IgxDatePickerModule } from '../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../icon/public_api';\nimport { IgxRippleModule } from '../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../input-group/public_api';\nimport { IgxFocusModule } from '../../directives/focus/focus.directive';\nimport { IgxToggleModule } from '../../directives/toggle/toggle.directive';\nimport { IgxForOfModule } from '../../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxTextHighlightModule } from '../../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../../directives/text-selection/text-selection.directive';\nimport { IgxCheckboxModule } from '../../checkbox/checkbox.component';\nimport { IgxBadgeModule } from '../../badge/badge.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxDragDropModule } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxButtonGroupModule } from '../../buttonGroup/buttonGroup.component';\nimport { IgxProgressBarModule } from '../../progressbar/progressbar.component';\nimport { IgxSelectModule } from '../../select/select.module';\nimport { IgxDropDownModule } from '../../drop-down/public_api';\nimport { IgxGridStateModule } from '../state.directive';\nimport { IgxSnackbarModule } from '../../snackbar/snackbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxFocusModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxProgressBarModule,\n        IgxSelectModule,\n        IgxGridStateModule,\n        IgxSnackbarModule\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxFocusModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxTextHighlightModule,\n        IgxGridStateModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxProgressBarModule,\n        IgxSelectModule,\n        IgxSnackbarModule\n    ]\n})\nexport class IgxGridSharedModules {}\n","import { EventEmitter, Input, Output, Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n * @hidden\n */\n@Directive()\nexport abstract class ItemPropertyValueChangedDirective {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\n@Directive()\nexport class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBaseDirective } from '../column-chooser-item-base';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IColumnVisibilityChangedEventArgs extends IBaseEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBaseDirective {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy, Directive } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBaseDirective } from './column-chooser-item-base';\nimport { ColumnDisplayOrder } from './common/enums';\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBaseDirective[] = [];\n        data.forEach((item: ColumnChooserItemBaseDirective) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\n@Directive()\nexport abstract class ColumnChooserBaseDirective implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     * @hidden\n     */\n    private _currentColumns = [];\n    /**\n     * @hidden\n     */\n    private _gridColumns = [];\n    /**\n     * @hidden\n     */\n    private _rawColumns = [];\n    /**\n     * @hidden\n     */\n    private _columnDisplayOrder: ColumnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     * @hidden\n     */\n    private _filterCriteria = '';\n    /**\n     * @hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     * @hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     * @hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     * @hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     * @hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     * @hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     * @hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     * @hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { ColumnChooserBaseDirective } from '../column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateClass } from '../../core/deprecateDecorators';\n\n@DeprecateClass(`The 'IgxColumnHiding' component is deprecated.\nPlease use the 'IgxColumnActions' component with the 'IgxColumnHiding' directive instead.`)\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBaseDirective implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     * @hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnHidingComponent,\n        IgxColumnHidingItemDirective\n    ],\n    imports: [\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxColumnHidingComponent\n    ],\n})\nexport class IgxColumnHidingModule {}\n","import { Component } from '@angular/core';\nimport { KEYS } from '../../../core/utils';\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\n\n/**\n * A component used for presenting Excel style clear filters UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-clear-filters',\n    templateUrl: './excel-style-clear-filters.component.html'\n})\nexport class IgxExcelStyleClearFiltersComponent {\n    constructor(public esf: IgxGridExcelStyleFilteringComponent) { }\n\n    /**\n     * @hidden @internal\n     */\n    public clearFilterClass() {\n        if (this.esf.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearFilter() {\n        this.esf.grid.filteringService.clearFilter(this.esf.column.field);\n        this.selectAllFilterItems();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    private selectAllFilterItems() {\n        this.esf.listData.forEach(filterListItem => {\n            filterListItem.isSelected = true;\n            filterListItem.indeterminate = false;\n        });\n        this.esf.detectChanges();\n    }\n}\n","import {\n    Component,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, AbsoluteScrollStrategy  } from '../../../services/public_api';\nimport { KEYS, IBaseEventArgs } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IgxInputDirective } from '../../../input-group/public_api';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs extends IBaseEventArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n    private destroy$ = new Subject<boolean>();\n\n    public dropDownOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('overlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public overlayOutlet: IgxOverlayOutletDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxSelectComponent, static: true })\n    protected dropdownConditions: IgxSelectComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective, static: true })\n    protected inputValuesDirective: IgxInputDirective;\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get conditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    ngAfterViewInit(): void {\n        this.dropDownOverlaySettings.outlet = this.overlayOutlet;\n        this.dropDownOverlaySettings.target = this.dropdownConditions.inputGroup.element.nativeElement;\n        this.dropDownOverlaySettings.excludeFromOutsideClick = [this.dropdownConditions.inputGroup.element.nativeElement as HTMLElement];\n        this.dropDownOverlaySettings.positionStrategy = new ConnectedPositioningStrategy();\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxSelectComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = DataUtil.parseValue(this.column.dataType, eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onOutletPointerDown(event) {\n        event.preventDefault();\n    }\n}\n","import {\n    Component,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent, static: true })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n}\n","import {\n    Component,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    AutoPositionStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/public_api';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n    private destroy$ = new Subject<boolean>();\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective, static: true })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open(esf) {\n        this._customDialogOverlaySettings.target =\n            this.overlayComponentId ?\n                this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement :\n                esf;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        } else {\n            this.toggle.close();\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    OnDestroy,\n    ViewChild\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { KEYS } from '../../../core/utils';\nimport { DataType } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down/public_api';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings, AutoPositionStrategy, AbsoluteScrollStrategy } from '../../../services/public_api';\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\nimport { takeUntil } from 'rxjs/operators';\n\n\n/**\n * A component used for presenting Excel style conditional filter UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-conditional-filter',\n    templateUrl: './excel-style-conditional-filter.component.html'\n})\nexport class IgxExcelStyleConditionalFilterComponent implements OnDestroy {\n    private shouldOpenSubMenu = true;\n    private destroy$ = new Subject<boolean>();\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('subMenu', { read: IgxDropDownComponent })\n    public subMenu: IgxDropDownComponent;\n\n    constructor(public esf: IgxGridExcelStyleFilteringComponent) {\n        this.esf.columnChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            if (this.esf.grid) {\n                this._subMenuOverlaySettings.outlet = this.esf.grid.outlet;\n            }\n        });\n\n        if (this.esf.grid) {\n            this._subMenuOverlaySettings.outlet = this.esf.grid.outlet;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.target = eventArgs.currentTarget;\n\n            const gridRect = this.esf.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.esf.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.esf.column.filters.condition(value);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public translateCondition(value: string): string {\n        return this.esf.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        if (this.esf.expressionsList && this.esf.expressionsList.length &&\n            this.esf.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.esf.expressionsList;\n        }\n\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        if (this.esf.overlayComponentId) {\n            this.esf.hide();\n        }\n        this.subMenu.close();\n        this.customDialog.open(this.esf.mainDropdown.nativeElement);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.esf.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n                (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get subMenuText() {\n        switch (this.esf.column.dataType) {\n            case DataType.Boolean:\n                return this.esf.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.esf.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.esf.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.esf.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get conditions() {\n        return this.esf.column.filters.conditionList();\n    }\n}\n","import { Component, Input } from '@angular/core';\r\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\r\n\r\n/**\r\n * A component used for presenting Excel style header UI.\r\n */\r\n@Component({\r\n    preserveWhitespaces: false,\r\n    selector: 'igx-excel-style-header',\r\n    templateUrl: './excel-style-header.component.html'\r\n})\r\nexport class IgxExcelStyleHeaderComponent {\r\n    constructor(public esf: IgxGridExcelStyleFilteringComponent) { }\r\n\r\n    /**\r\n     * Sets whether the column pinning icon should be shown in the header.\r\n     * Default value is `false`.\r\n     *\r\n     * @example\r\n     * ```html\r\n     * <igx-excel-style-header [showPinning]=\"true\"></igx-excel-style-header>\r\n     * ```\r\n     */\r\n    @Input()\r\n    showPinning: boolean;\r\n\r\n    /**\r\n     * Sets whether the column selecting icon should be shown in the header.\r\n     * Default value is `false`.\r\n     *\r\n     * @example\r\n     * ```html\r\n     * <igx-excel-style-header [showSelecting]=\"true\"></igx-excel-style-header>\r\n     * ```\r\n     */\r\n    @Input()\r\n    showSelecting: boolean;\r\n\r\n    /**\r\n     * Sets whether the column hiding icon should be shown in the header.\r\n     * Default value is `false`.\r\n     *\r\n     * @example\r\n     * ```html\r\n     * <igx-excel-style-header [showHiding]=\"true\"></igx-excel-style-header>\r\n     * ```\r\n     */\r\n    @Input()\r\n    showHiding: boolean;\r\n}\r\n","import {\n    Component\n} from '@angular/core';\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\n\n/**\n * A component used for presenting Excel style column hiding UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-hiding',\n    templateUrl: './excel-style-hiding.component.html'\n})\nexport class IgxExcelStyleHidingComponent {\n    constructor(public esf: IgxGridExcelStyleFilteringComponent) { }\n}\n","import { Component, HostBinding } from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxColumnGroupComponent } from '../../columns/column-group.component';\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\n\n/**\n * A component used for presenting Excel style column moving UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-moving',\n    templateUrl: './excel-style-moving.component.html'\n})\nexport class IgxExcelStyleMovingComponent {\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class') class = 'igx-excel-filter__move';\n\n    constructor(public esf: IgxGridExcelStyleFilteringComponent) { }\n\n    private get visibleColumns() {\n        return this.esf.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get canNotMoveLeft() {\n        return this.esf.column.visibleIndex === 0 ||\n            (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === 0 && this.esf.column.disablePinning) ||\n            (this.esf.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get canNotMoveRight() {\n        return this.esf.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.esf.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.esf.column.pinned) {\n            if (this.esf.column.isLastPinned && moveDirection === 1 && this.esf.grid.isPinningToStart) {\n                targetColumn = this.esf.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else if (this.esf.column.isFirstPinned && moveDirection === 0 && !this.esf.grid.isPinningToStart) {\n                targetColumn = this.esf.grid.unpinnedColumns[this.esf.grid.unpinnedColumns.length - 1];\n                moveDirection = 1;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.esf.grid.pinnedColumns);\n            }\n        } else if (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === 0 && moveDirection === 0 &&\n                    this.esf.grid.isPinningToStart) {\n            targetColumn = this.esf.grid.pinnedColumns[this.esf.grid.pinnedColumns.length - 1];\n            if (targetColumn.parent) {\n                targetColumn = targetColumn.topLevelParent;\n            }\n            moveDirection = 1;\n        } else if (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === this.esf.grid.unpinnedColumns.length - 1 &&\n            moveDirection === 1 && !this.esf.grid.isPinningToStart) {\n            targetColumn = this.esf.grid.pinnedColumns[0];\n            moveDirection = 0;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.esf.grid.unpinnedColumns);\n        }\n        this.esf.grid.moveColumn(this.esf.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.esf.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.esf.column.level && columns[index].parent === this.esf.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.esf.column.level && columns[index].parent === this.esf.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\n\n/**\n * A component used for presenting Excel style column pinning UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-pinning',\n    templateUrl: './excel-style-pinning.component.html'\n})\nexport class IgxExcelStylePinningComponent {\n    constructor(public esf: IgxGridExcelStyleFilteringComponent) { }\n}\n","import { Component } from '@angular/core';\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\n\n/**\n * A component used for presenting Excel style conditional filter UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-selecting',\n    templateUrl: './excel-style-selecting.component.html'\n})\nexport class IgxExcelStyleSelectingComponent {\n    constructor(public esf: IgxGridExcelStyleFilteringComponent) { }\n}\n","import {\n    Component,\n    ViewChild,\n    OnDestroy,\n    HostBinding,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\n\n/**\n * A component used for presenting Excel style column sorting UI.\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent implements OnDestroy {\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class') class = 'igx-excel-filter__sort';\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor(public esf: IgxGridExcelStyleFilteringComponent, private cdr: ChangeDetectorRef) {\n        this.esf.sortingChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.updateSelectedButtons(this.esf.column.field);\n        });\n     }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private updateSelectedButtons(fieldName: string) {\n        const sortIndex = this.esf.grid.sortingExpressions.findIndex(s => s.fieldName === fieldName);\n\n        this.cdr.detectChanges();\n        this.sortButtonGroup.buttons.forEach((b, i) => {\n            this.sortButtonGroup.deselectButton(i);\n        });\n\n        if (sortIndex !== -1 ) {\n            const sortDirection = this.esf.grid.sortingExpressions[sortIndex].dir;\n            this.sortButtonGroup.selectButton(sortDirection - 1);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.esf.grid.isColumnGrouped(this.esf.column.field)) {\n                this.sortButtonGroup.selectButton(sortDirection - 1);\n            } else {\n                this.esf.grid.clearSort(this.esf.column.field);\n            }\n        } else {\n            this.esf.grid.sort({ fieldName: this.esf.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { getNodeSizeViaRange, isIE, isLeftClick, PlatformUtil } from '../core/utils';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from './selection/selection.service';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\nimport { HammerGesturesManager } from '../core/touch';\nimport { ColumnType } from './common/column.interface';\nimport { RowType } from './common/row.interface';\nimport { GridSelectionMode } from './common/enums';\nimport { GridType } from './common/grid.interface';\nimport { ISearchInfo } from './grid/public_api';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n    protected _lastSearchInfo: ISearchInfo;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--new')\n    get isEmptyAddRowCell() {\n        return this.row.addRow && (this.value === undefined || this.value === null);\n    }\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: ColumnType;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: RowType;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    @Input()\n    public pinnedIndicator: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        if (this.grid.rowEditable && this.row.addRow) {\n            return this.addRowCellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get pinnedIndicatorTemplate() {\n        if (this.pinnedIndicator) {\n            return this.pinnedIndicator;\n        }\n        return this.defaultPinnedIndicator;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    @HostBinding('attr.id')\n    public get attrCellID() {\n        return `${this.row.gridID}_${this.rowIndex}_${ this.visibleColumnIndex}`;\n    }\n\n    @HostBinding('attr.title')\n    public get title() {\n        return this.editMode || this.cellTemplate ? '' : this.value;\n    }\n\n    @HostBinding('class.igx-grid__td--bool-true')\n    public get booleanClass() {\n        return this.column.dataType === 'boolean' && this.value;\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    get cellSelectionMode() {\n        return this._cellSelection;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    set lastSearchInfo(value: ISearchInfo) {\n        this._lastSearchInfo = value;\n        this.highlightText(this._lastSearchInfo.searchText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n    }\n\n    set cellSelectionMode(value) {\n        if (this._cellSelection === value) { return; }\n         this.zone.runOutsideAngular(() => {\n            value === GridSelectionMode.multiple ?\n            this.addPointerListeners(value) : this.removePointerListeners(this._cellSelection);\n        });\n        this._cellSelection = value;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-first')\n    firstPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.editable;\n    }\n\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    width = '';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--active')\n    public active = false;\n\n    @HostBinding('attr.aria-selected')\n    get ariaSelected() {\n        return this.selected || this.column.selected  || this.row.selected;\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * Gets whether the cell column is selected.\n     * ```typescript\n     * let isCellColumnSelected = this.cell.columnSelected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('class.igx-grid__td--column-selected')\n    get columnSelected() {\n        return this.selectionService.isColumnSelected(this.column.field);\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.cellInEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.cellInEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable && !this.row.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--row-pinned-first')\n    public displayPinnedChip = false;\n\n\n    @ViewChild('defaultCell', { read: TemplateRef, static: true })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultPinnedIndicator', { read: TemplateRef, static: true })\n    protected defaultPinnedIndicator: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef, static: true })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild('addRowCell', { read: TemplateRef, static: true})\n    protected addRowCellTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    /** @hidden @internal @deprecated */\n    public focused = this.active;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    private _highlight: IgxTextHighlightDirective;\n    private _cellSelection = GridSelectionMode.multiple;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone,\n        private touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil) { }\n\n    private addPointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.addEventListener('pointerup', this.pointerup);\n    }\n\n    private  removePointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.removeEventListener('pointerup', this.pointerup);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n            this.addPointerListeners(this.cellSelectionMode);\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.crudService.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.crudService.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        if (this.platformUtil.isIOS) {\n            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {\n                cssProps: { } /* don't disable user-select, etc */\n            } as HammerOptions);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n            this.removePointerListeners(this.cellSelectionMode);\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        this.touchManager.destroy();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                if (this.row.addRow) {\n                    this.gridAPI.update_add_cell(editableCell, editableCell.editValue);\n                    this.row.rowData = editableCell.rowData;\n                } else {\n                    this.gridAPI.update_cell(editableCell, editableCell.editValue);\n                }\n                /* This check is related with the following issue #6517:\n                 * when edit cell that belongs to a column which is sorted and press tab,\n                 * the next cell in edit mode is with wrong value /its context is not updated/;\n                 * So we reapply sorting before the next cell enters edit mode.\n                 * Also we need to keep the notifyChanges below, because of the current\n                 * change detection cycle when we have editing with enabled transactions\n                 */\n                if (this.grid.sortingExpressions.length && this.grid.sortingExpressions.indexOf(editableCell.column.field)) {\n                    this.grid.cdr.detectChanges();\n                }\n\n                if (this.crudService.cellEditingBlocked) {\n                    return true;\n                }\n\n                crud.exitCellEdit();\n            }\n            this.grid.tbody.nativeElement.focus({ preventScroll: true });\n            this.grid.notifyChanges();\n            crud.enterEditMode(this);\n            return false;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            if (this.row.addRow) {\n                this.gridAPI.submit_add_value();\n                this.row.rowData = editableCell.rowData;\n            } else {\n                this.gridAPI.submit_value();\n            }\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @deprecated\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateMethod(`'isCellSelected' is deprecated. Use 'selected' property instead.`)\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.enterEditMode(this);\n        } else {\n            this.grid.crudService.exitCellEdit();\n        }\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.grid.crudService.exitCellEdit();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (this.cellSelectionMode !== GridSelectionMode.multiple) {\n            this.activate(event);\n            return;\n        }\n        if (!isLeftClick(event)) {\n            event.preventDefault();\n            this.grid.navigation.setActiveNode({rowIndex: this.rowIndex, colIndex: this.visibleColumnIndex});\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            // Ensure RMB Click on edited cell does not end cell editing\n            if (!this.selected) {\n                this.gridAPI.submit_value();\n            }\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n        this.activate(event);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const isHierarchicalGrid =  this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n        if (isHierarchicalGrid && (!this.grid.navigation.activeNode.gridID || this.grid.navigation.activeNode.gridID !== this.gridID)) {\n            return;\n        }\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n            if (isIE()) { this.grid.tbody.nativeElement.focus({ preventScroll: true }); }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        const isHierarchicalGrid =  this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n        if (!isLeftClick(event) || (isHierarchicalGrid && (!this.grid.navigation.activeNode.gridID ||\n        this.grid.navigation.activeNode.gridID !== this.gridID))) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n            if (isIE()) { this.grid.tbody.nativeElement.focus({ preventScroll: true }); }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick = (event: MouseEvent | HammerInput) => {\n        if (event.type === 'doubletap') {\n            // prevent double-tap to zoom on iOS\n            (event as HammerInput).preventDefault();\n        }\n        if (this.grid.rowEditable && this.row.addRow) {\n            this.crudService.enterEditMode(this);\n        }\n        if (this.editable && !this.editMode && !this.row.deleted && !this.crudService.rowEditingBlocked) {\n            this.crudService.enterEditMode(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activate(event: FocusEvent | KeyboardEvent) {\n        const node = this.selectionNode;\n        const shouldEmitSelection = !this.selectionService.isActiveNode(node);\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n\n            const activeElement = this.selectionService.activeElement;\n            const row = activeElement ? this.gridAPI.get_row_by_index(activeElement.row) : null;\n            if ((this.crudService.rowEditingBlocked && row && this.row.rowID !== row.rowID) ||\n                (this.crudService.cell && this.crudService.cellEditingBlocked)) {\n                return;\n            }\n\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.cellInEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.grid.navigation.setActiveNode({ row: this.rowIndex, column: this.visibleColumnIndex });\n\n        this.selectionService.primaryButton = true;\n        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {\n            this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation\n            this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);\n        }\n        if (this.grid.isCellSelectable && shouldEmitSelection) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get searchMetadata() {\n        const meta = new Map<string, any>();\n        meta.set('pinned', this.grid.isRecordPinnedByViewIndex(this.row.index));\n        return meta;\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'igx-grid-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxGridFooterComponent {\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { OverlaySettings } from '../services/public_api';\nimport { IgxSelectModule } from '../select/public_api';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/public_api';\nimport { IPaginatorResourceStrings } from '../core/i18n/paginator-resources';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n@Component({\n    selector: 'igx-paginator',\n    templateUrl: 'paginator.component.html',\n})\nexport class IgxPaginatorComponent extends DisplayDensityBase {\n\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    public totalPages: number;\n    private _resourceStrings = CurrentResourceStrings.PaginatorResStrings;\n    private _overlaySettings: OverlaySettings = {};\n    protected _page = 0;\n    protected _totalRecords: number;\n    protected _selectOptions;\n    private defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];\n    protected _perPage = 15;\n\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    @HostBinding('class.igx-paginator--cosy')\n    public get classCosy(): boolean {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-paginator--compact')\n    public get classCompact(): boolean {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-paginator')\n    public get classComfortable(): boolean {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * An @Input property, sets current page of the `IgxPaginatorComponent`.\n     * The default is 0.\n     * ```typescript\n     * let page = this.paginator.page;\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public get page() {\n        return this._page;\n    }\n\n    public set page(value: number) {\n        this._page = value;\n        this.pageChange.emit(this._page);\n    }\n\n    /**\n     * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n     * The default is 15.\n     * ```typescript\n     * let itemsPerPage = this.paginator.perPage;\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public get perPage() {\n        return this._perPage;\n    }\n\n    public set perPage(value: number) {\n        this._perPage = Number(value);\n        this.perPageChange.emit(this._perPage);\n        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);\n        this.totalPages = Math.ceil(this.totalRecords / this._perPage);\n        if (this.totalPages !== 0 && this.page >= this.totalPages) {\n            this.page = this.totalPages - 1;\n        }\n    }\n\n    /**\n     * An @Input property that sets the total records.\n     * ```typescript\n     * let totalRecords = this.paginator.totalRecords;\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public get totalRecords() {\n        return this._totalRecords;\n    }\n\n    public set totalRecords(value: number) {\n        this._totalRecords = value;\n        this.totalPages = Math.ceil(this.totalRecords / this.perPage);\n    }\n\n    /**\n     * An @Input property that sets custom options in the select of the paginator\n     * ```typescript\n     * let options = this.paginator.selectOptions;\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public get selectOptions() {\n        return this._selectOptions;\n    }\n\n    public set selectOptions(value: Array<number>) {\n        this._selectOptions = this.sortUniqueOptions(value, this._perPage);\n        this.defaultSelectValues = [...value];\n    }\n\n    /**\n     * An @Input property that sets if the pager in the paginator should be enabled.\n     * ```html\n     * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public pagerEnabled = true;\n\n    /**\n     * An @Input property that sets if the pager in the paginator should be hidden.\n     * ```html\n     * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public pagerHidden = false;\n\n    /**\n     * An @Input property that sets if the dropdown in the paginator should be enabled.\n     * ```html\n     * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public dropdownEnabled = true;\n\n    /**\n     * An @Input property that sets if the dropdown in the paginator should be hidden.\n     * ```html\n     * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @Input()\n    public dropdownHidden = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings.\n     * ```html\n     * <igx-paginator [overlaySettings] = \"customOverlaySettings\"></igx-paginator>\n     * ```\n     */\n    @Input()\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings;\n    }\n\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = Object.assign({}, this._overlaySettings, value);\n    }\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    @Input()\n    set resourceStrings(value: IPaginatorResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): IPaginatorResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * @deprecated Use 'resourceStrings' instead.\n     * An @Input property, sets number of label of the select.\n     * The default is 'Items per page' localized string.\n     * ```html\n     * <igx-paginator label=\"My custom label\"></igx-paginator>\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    @DeprecateProperty(`'selectLabel' property is deprecated. Use 'resourceStrings' instead.`)\n    @Input()\n    public selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;\n\n    /**\n     * @deprecated Use 'resourceStrings' instead.\n     * An @Input property, sets a preposition between the current page and total pages.\n     * The default is 'of' localized string.\n     * @memberof IgxPaginatorComponent\n     */\n    @DeprecateProperty(`'prepositionPage' property is deprecated. Use 'resourceStrings' instead.`)\n    @Input()\n    public prepositionPage = CurrentResourceStrings.PaginatorResStrings.igx_paginator_pager_text;\n\n    /**\n     * Emitted when `perPage` property value of the paginator is changed.\n     * @example\n     * ```html\n     * <igx-paginator (perPageChange)=\"onPerPageChange($event)\"></igx-paginator>\n     * ```\n     * ```typescript\n     * public onPerPageChange(perPage: number) {\n     *   this.perPage = perPage;\n     * }\n     * ```\n     */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n\n    /**\n     * Emitted after the current page is changed.\n     * @example\n     * ```html\n     * <igx-paginator (pageChange)=\"onPageChange($event)\"></igx-paginator>\n     * ```\n     * ```typescript\n     * public onPageChange(page: number) {\n     *   this.currentPage = page;\n     * }\n     * ```\n     */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n\n    /**\n     * Returns if the first pager buttons should be disabled\n     */\n    get isFirstPageDisabled(): boolean {\n        return this.isFirstPage || !this.pagerEnabled;\n    }\n\n    /**\n     * Returns if the last pager buttons should be disabled\n     */\n    get isLastPageDisabled(): boolean {\n        return this.isLastPage || !this.pagerEnabled;\n    }\n\n    private sortUniqueOptions(values: Array<number>, newOption: number): number[] {\n        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);\n    }\n\n    /**\n     * Sets DisplayDensity for the <select> inside the paginator\n     * @hidden\n     */\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n     * @memberof IgxPaginatorComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.paginator.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.page = val;\n    }\n}\n\n@NgModule({\n    declarations: [IgxPaginatorComponent],\n    exports: [IgxPaginatorComponent],\n    imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule, IgxInputGroupModule]\n})\nexport class IgxPaginatorModule { }\n","import { Pipe, PipeTransform, Inject } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray, resolveNestedPath } from '../../core/utils';\nimport { GridType } from './grid.interface';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { ColumnDisplayOrder } from './enums';\nimport { IgxColumnActionsComponent } from '../column-actions/column-actions.component';\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyleClasses'\n})\nexport class IgxGridCellStyleClassesPipe implements PipeTransform {\n\n    transform(cssClasses: { [prop: string]: any }, _: any, data: any, field: string, index: number, __: number): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        for (const cssClass of Object.keys(cssClasses)) {\n            const callbackOrValue = cssClasses[cssClass];\n            const apply = typeof callbackOrValue === 'function' ?\n                callbackOrValue(data, field, resolveNestedPath(data, field), index) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        }\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(styles: { [prop: string]: any }, _: any, data: any, field: string, index: number, __: number): { [prop: string]: any } {\n        const css = {};\n        if (!styles) {\n            return css;\n        }\n\n        for (const prop of Object.keys(styles)) {\n            const res = styles[prop];\n            css[prop] = typeof res === 'function' ? res(data, field, resolveNestedPath(data, field), index) : res;\n        }\n\n        return css;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseDirective = this.gridAPI.grid;\n\n        if (grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'paginatorOptions',\n    pure: true,\n})\nexport class IgxGridPaginatorOptionsPipe implements PipeTransform {\n    public transform(values: Array<number>) {\n        return Array.from(new Set([...values])).sort((a, b) => a - b);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'visibleColumns',\n    pure: true\n})\nexport class IgxHasVisibleColumnsPipe implements PipeTransform {\n    transform(values: any[], hasVisibleColumns) {\n        if (!(values && values.length)) {\n            return values;\n        }\n        return hasVisibleColumns ? values : [];\n    }\n\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'gridRowPinning',\n    pure: true\n})\nexport class IgxGridRowPinningPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    public transform(collection: any[], id: string, isPinned = false, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n\n        if (grid.hasPinnedRecords && isPinned) {\n            const result = collection.filter(rec => grid.isRecordPinned(rec));\n            result.sort((rec1, rec2) => grid.getInitialPinnedIndex(rec1) - grid.getInitialPinnedIndex(rec2));\n            return result;\n        }\n\n        grid.unpinnedRecords = collection;\n        if (!grid.hasPinnedRecords) {\n            grid.pinnedRecords = [];\n            return isPinned ? [] : collection;\n        }\n\n        return collection.map((rec) => {\n            return grid.isRecordPinned(rec) ? { recordRef: rec, ghostRecord: true } : rec;\n        });\n    }\n}\n\n@Pipe({\n    name: 'columnActionEnabled',\n    pure: true\n})\nexport class IgxColumnActionEnabledPipe implements PipeTransform {\n\n    constructor(@Inject(IgxColumnActionsComponent) protected columnActions: IgxColumnActionsComponent) { }\n\n    public transform(\n        collection: IgxColumnComponent[],\n        actionFilter: (value: IgxColumnComponent, index: number, array: IgxColumnComponent[]) => boolean,\n        pipeTrigger: number\n    ): IgxColumnComponent[] {\n        if (!collection) {\n            return collection;\n        }\n        let copy = collection.slice(0);\n        if (copy.length && copy[0].grid.hasColumnLayouts) {\n            copy = copy.filter(c => c.columnLayout);\n        }\n        if (actionFilter) {\n            copy = copy.filter(actionFilter);\n        }\n        // Preserve the actionable collection for use in the component\n        this.columnActions.actionableColumns = copy;\n        return copy;\n    }\n}\n\n@Pipe({\n    name: 'filterActionColumns',\n    pure: true\n})\nexport class IgxFilterActionColumnsPipe implements PipeTransform {\n\n    constructor(@Inject(IgxColumnActionsComponent) protected columnActions: IgxColumnActionsComponent) { }\n\n    public transform(collection: IgxColumnComponent[], filterCriteria: string, pipeTrigger: number): IgxColumnComponent[] {\n        if (!collection) {\n            return collection;\n        }\n        let copy = collection.slice(0);\n        if (filterCriteria && filterCriteria.length > 0) {\n            const filterFunc = (c) => {\n                const filterText = c.header || c.field;\n                if (!filterText) { return false; }\n                return filterText.toLocaleLowerCase().indexOf(filterCriteria.toLocaleLowerCase()) >= 0 ||\n                    (c.children?.some(filterFunc) ?? false);\n            };\n            copy = collection.filter(filterFunc);\n        }\n        // Preserve the filtered collection for use in the component\n        this.columnActions.filteredColumns = copy;\n        return copy;\n    }\n}\n\n@Pipe({\n    name: 'sortActionColumns',\n    pure: true\n})\nexport class IgxSortActionColumnsPipe implements PipeTransform {\n\n    public transform(collection: IgxColumnComponent[], displayOrder: ColumnDisplayOrder, pipeTrigger: number): IgxColumnComponent[] {\n        if (displayOrder === ColumnDisplayOrder.Alphabetical) {\n            return collection.sort((a, b) => (a.header || a.field).localeCompare(b.header || b.field));\n        }\n        return collection;\n    }\n}\n\n@Pipe({ name: 'dataMapper' })\nexport class IgxGridDataMapperPipe implements PipeTransform {\n\n    transform(data: any[], field: string, _: number) {\n        return resolveNestedPath(data, field);\n    }\n}\n\n@Pipe({ name: 'igxStringReplace' })\nexport class IgxStringReplacePipe implements PipeTransform {\n\n    transform(value: string, search: string | RegExp, replacement: string): string {\n        return value.replace(search, replacement);\n    }\n}\n\n@Pipe({ name: 'transactionState' })\nexport class IgxGridTransactionStatePipe implements PipeTransform {\n\n    transform(row_id: any, field: string, rowEditable: boolean, transactions: any, _: any, __: any, ___: any) {\n        if (rowEditable) {\n            const rowCurrentState = transactions.getAggregatedValue(row_id, false);\n            if (rowCurrentState) {\n                const value = resolveNestedPath(rowCurrentState, field);\n                return value !== undefined && value !== null;\n            }\n        } else {\n            const transaction = transactions.getState(row_id);\n            const value = resolveNestedPath(transaction?.value ?? {}, field);\n            return transaction && transaction.value && (value || value === 0 || value === false);\n        }\n    }\n}\n\n@Pipe({ name: 'columnFormatter' })\nexport class IgxColumnFormatterPipe implements PipeTransform {\n\n    transform(value: any, formatter: (v: any) => any) {\n        return formatter(value);\n    }\n}\n\n@Pipe({\n    name: 'gridAddRow',\n    pure: true\n})\nexport class IgxGridAddRowPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    transform(collection: any, isPinned = false, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        if (!grid.rowEditable || !grid.addRowParent || grid.cancelAddMode || isPinned !== grid.addRowParent.isPinned) {\n            return collection;\n        }\n        const copy = collection.slice(0);\n        const parentIndex = grid.addRowParent.index;\n        const row = grid.getEmptyRecordObjectFor(collection[parentIndex]);\n        const rec = {\n            recordRef: row,\n            addRow: true\n        };\n        copy.splice(parentIndex + 1, 0, rec);\n        if (isPinned) {\n            grid.pinnedRecords = copy;\n        } else {\n            grid.unpinnedRecords = copy;\n        }\n        return copy;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe,\n    IgxGridCellStyleClassesPipe,\n    IgxGridPaginatorOptionsPipe,\n    IgxHasVisibleColumnsPipe,\n    IgxGridRowPinningPipe,\n    IgxColumnActionEnabledPipe,\n    IgxFilterActionColumnsPipe,\n    IgxSortActionColumnsPipe,\n    IgxGridDataMapperPipe,\n    IgxStringReplacePipe,\n    IgxGridTransactionStatePipe,\n    IgxColumnFormatterPipe,\n    IgxGridAddRowPipe\n} from './pipes';\n\n@NgModule({\n    declarations: [\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe,\n        IgxGridRowPinningPipe,\n        IgxColumnActionEnabledPipe,\n        IgxFilterActionColumnsPipe,\n        IgxSortActionColumnsPipe,\n        IgxGridDataMapperPipe,\n        IgxStringReplacePipe,\n        IgxGridTransactionStatePipe,\n        IgxGridAddRowPipe,\n        IgxColumnFormatterPipe\n    ],\n    exports: [\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe,\n        IgxGridRowPinningPipe,\n        IgxColumnActionEnabledPipe,\n        IgxFilterActionColumnsPipe,\n        IgxSortActionColumnsPipe,\n        IgxGridDataMapperPipe,\n        IgxStringReplacePipe,\n        IgxGridTransactionStatePipe,\n        IgxGridAddRowPipe,\n        IgxColumnFormatterPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './excel-style-search.component';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleColumnOperationsTemplateDirective,\n    IgxExcelStyleFilterOperationsTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleMovingComponent } from './excel-style-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../common/grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/public_api';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/public_api';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxProgressBarModule } from '../../../progressbar/progressbar.component';\nimport { IgxSelectModule } from './../../../select/select.module';\nimport { IgxExcelStylePinningComponent } from './excel-style-pinning.component';\nimport { IgxExcelStyleHeaderComponent } from './excel-style-header.component';\nimport { IgxExcelStyleHidingComponent } from './excel-style-hiding.component';\nimport { IgxExcelStyleSelectingComponent } from './excel-style-selecting.component';\nimport { IgxExcelStyleClearFiltersComponent } from './excel-style-clear-filters.component';\nimport { IgxExcelStyleConditionalFilterComponent } from './excel-style-conditional-filter.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleHeaderComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStylePinningComponent,\n        IgxExcelStyleHidingComponent,\n        IgxExcelStyleSelectingComponent,\n        IgxExcelStyleClearFiltersComponent,\n        IgxExcelStyleConditionalFilterComponent,\n        IgxExcelStyleMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleColumnOperationsTemplateDirective,\n        IgxExcelStyleFilterOperationsTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleColumnOperationsTemplateDirective,\n        IgxExcelStyleFilterOperationsTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleHeaderComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStylePinningComponent,\n        IgxExcelStyleHidingComponent,\n        IgxExcelStyleSelectingComponent,\n        IgxExcelStyleClearFiltersComponent,\n        IgxExcelStyleConditionalFilterComponent,\n        IgxExcelStyleMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleHeaderComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule,\n        IgxProgressBarModule,\n        IgxSelectModule,\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { IgxRowSelectorDirective, IgxHeadSelectorDirective } from './row-selectors';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxRowSelectorDirective,\n        IgxHeadSelectorDirective,\n        IgxGridDragSelectDirective\n    ],\n    exports: [\n        IgxRowSelectorDirective,\n        IgxHeadSelectorDirective,\n        IgxGridDragSelectDirective\n    ]\n})\nexport class IgxGridSelectionModule {}\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone,\n    HostListener,\n    OnDestroy\n} from '@angular/core';\nimport { Subject, fromEvent } from 'rxjs';\nimport { debounceTime, takeUntil} from 'rxjs/operators';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxColumnResizingService } from './resizing.service';\n\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    private readonly DEBOUNCE_TIME = 200;\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(this.DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(this.DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxColumnResizingService } from './resizing.service';\nimport { IgxGridColumnResizerComponent } from './resizer.component';\nimport { IgxResizeHandleDirective } from './resize-handle.directive';\nimport { IgxColumnResizerDirective } from './resizer.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxGridColumnResizerComponent,\n        IgxResizeHandleDirective,\n        IgxColumnResizerDirective\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        IgxGridColumnResizerComponent,\n        IgxResizeHandleDirective,\n        IgxColumnResizerDirective\n    ],\n    providers: [\n        IgxColumnResizingService\n    ]\n})\nexport class IgxGridResizingModule {}\n","import { Directive, Input, OnDestroy, ElementRef, Renderer2, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { DropPosition, IgxColumnMovingService } from './moving.service';\nimport { Subject, interval } from 'rxjs';\nimport { IgxColumnMovingDragDirective } from './moving.drag.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\n\n\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                this.cms.icon.innerText = 'lock';\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    event.target.id === 'right' ? this.horizontalScroll.scrollPosition += 15 :\n                        this.horizontalScroll.scrollPosition -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnMovingDragDirective } from './moving.drag.directive';\nimport { IgxColumnMovingDropDirective } from './moving.drop.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnMovingDropDirective,\n        IgxColumnMovingDragDirective\n    ],\n    exports: [\n        IgxColumnMovingDropDirective,\n        IgxColumnMovingDragDirective\n    ]\n})\nexport class IgxColumnMovingModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridType } from '../common/grid.interface';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxSummaryRowComponent } from './summary-row.component';\nimport { IgxSummaryDataPipe } from './grid-root-summary.pipe';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxGridPipesModule } from '../common/grid-pipes.module';\n\n\n@NgModule({\n    declarations: [\n        IgxSummaryCellComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryDataPipe\n    ],\n    imports: [\n        IgxGridPipesModule,\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxSummaryCellComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryDataPipe\n    ]\n})\nexport class IgxGridSummaryModule {}\n","import { Directive } from '@angular/core';\nimport { ColumnChooserItemBaseDirective } from '../column-chooser-item-base';\n\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBaseDirective {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        return this.column.pinnable;\n    }\n    /**\n     * Returns whether a column have pinning enabled\n     */\n    public get pinningDisabled() {\n        return this.column.disablePinning;\n    }\n}\n","\nimport { Component, ChangeDetectorRef } from '@angular/core';\nimport { ColumnChooserBaseDirective } from '../column-chooser-base';\nimport { IgxColumnPinningItemDirective } from './pinning.directive';\nimport { DeprecateMethod, DeprecateClass } from '../../core/deprecateDecorators';\n\n\n@DeprecateClass(`The 'IgxColumnPinning' component is deprecated.\nPlease use the 'IgxColumnActions' component with the 'IgxColumnPinning' directive instead.`)\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBaseDirective {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get pinnableColumns() {\n        return this.columnItems.filter((col) => !col.pinningDisabled);\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { IgxColumnPinningItemDirective } from './pinning.directive';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { IgxGridSharedModules } from '../common/shared.module';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnPinningItemDirective,\n        IgxColumnPinningComponent\n    ],\n    imports: [\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxColumnPinningComponent\n    ]\n})\nexport class IgxColumnPinningModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnHidingDirective } from './column-hiding.directive';\nimport { IgxColumnPinningDirective } from './column-pinning.directive';\nimport { IgxColumnActionsComponent } from './column-actions.component';\nimport { IgxGridPipesModule } from '../common/grid-pipes.module';\n\n@NgModule({\n    declarations: [\n        IgxColumnHidingDirective,\n        IgxColumnPinningDirective,\n        IgxColumnActionsComponent,\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxGridPipesModule\n    ],\n    exports: [\n        IgxColumnHidingDirective,\n        IgxColumnPinningDirective,\n        IgxColumnActionsComponent\n    ]\n})\nexport class IgxColumnActionsModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridToolbarCustomContentDirective } from './toolbar.directive';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnHidingModule } from '../hiding/hiding.module';\nimport { IgxColumnPinningModule } from '../pinning/pinning.module';\nimport { IgxColumnActionsModule } from '../column-actions/column-actions.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxColumnHidingModule,\n        IgxColumnPinningModule,\n        IgxColumnActionsModule\n    ],\n    exports: [\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective\n    ]\n})\nexport class IgxGridToolbarModule {}\n","import {\n    AfterContentInit,\n    Component,\n    ChangeDetectionStrategy,\n    forwardRef,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxColumnGroupComponent } from './column-group.component';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            const columns = this.grid && this.grid.pinnedColumns && this.grid.unpinnedColumns ?\n            this.grid.pinnedColumns.concat(this.grid.unpinnedColumns) : [];\n            if (!this._hidden && !columns.find(c => c.field === this.field)) {\n                this.grid.resetColumnCollections();\n            }\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /*\n     * Gets whether the group contains the first pinned child column of the column layout.\n     * ```typescript\n     * let hasFirstPinnedChildColumn = this.columnLayout.hasFirstPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasFirstPinnedChildColumn() {\n        return this.children.some(child => child.isFirstPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n            .filter(x => !x.columnGroup && !x.hidden)\n            .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({ column: child, index: vIndex });\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxColumnGroupComponent } from './column-group.component';\nimport { IgxColumnLayoutComponent } from './column-layout.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxCollapsibleIndicatorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './templates.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxFilterCellTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCollapsibleIndicatorTemplateDirective,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    exports: [\n        IgxFilterCellTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCollapsibleIndicatorTemplateDirective,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ]\n})\nexport class IgxGridColumnModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridFilteringCellComponent } from './grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './grid-filtering-row.component';\nimport { IgxGridSharedModules } from '../../common/shared.module';\nimport { IgxGridPipesModule } from '../../common/grid-pipes.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxGridPipesModule\n    ],\n    exports: [\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent\n    ]\n})\nexport class IgxGridFilteringModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n@Pipe({\n  name: 'sortingIndex',\n  pure: true\n})\nexport class SortingIndexPipe implements PipeTransform {\n\n  transform(columnField: string, sortingExpressions: ISortingExpression[]): number {\n    let sortIndex = sortingExpressions.findIndex(expression => expression.fieldName === columnField);\n    return sortIndex !== -1 ? ++sortIndex : null;\n  }\n\n}\n\n","import { NgModule } from '@angular/core';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnMovingModule } from '../moving/moving.module';\nimport { IgxGridFilteringModule } from '../filtering/base/filtering.module';\nimport { IgxGridResizingModule } from '../resizing/resize.module';\nimport { SortingIndexPipe } from './sorting-index.pipe';\n\n@NgModule({\n    declarations: [\n        IgxGridHeaderComponent,\n        IgxGridHeaderGroupComponent,\n        SortingIndexPipe\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxGridFilteringModule,\n        IgxColumnMovingModule,\n        IgxGridResizingModule\n    ],\n    exports: [\n        IgxGridHeaderComponent,\n        IgxGridHeaderGroupComponent\n    ]\n})\nexport class IgxGridHeadersModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxGridFooterComponent } from './grid-footer/grid-footer.component';\nimport {\n    IgxGridBodyDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.directive';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxPaginatorModule } from '../paginator/paginator.component';\nimport { IgxGridPipesModule } from './common/grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxRowDragModule } from './row-drag.directive';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxGridSelectionModule } from './selection/selection.module';\nimport { IgxGridResizingModule } from './resizing/resize.module';\nimport { IgxColumnMovingModule } from './moving/moving.module';\nimport { IgxGridSharedModules } from './common/shared.module';\nimport { IgxGridSummaryModule } from './summaries/summary.module';\nimport { IgxGridToolbarModule } from './toolbar/toolbar.module';\nimport { IgxColumnHidingModule } from './hiding/hiding.module';\nimport { IgxColumnPinningModule } from './pinning/pinning.module';\nimport { IgxColumnActionsModule } from './column-actions/column-actions.module';\nimport { IgxGridColumnModule } from './columns/column.module';\nimport { IgxGridHeadersModule } from './headers/headers.module';\nimport { IgxGridFilteringModule } from './filtering/base/filtering.module';\nimport { IgxRowDirective } from './row.directive';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxRowDirective,\n        IgxGridCellComponent,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxGridBodyDirective,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    entryComponents: [\n        IgxAdvancedFilteringDialogComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxGridBodyDirective,\n        IgxColumnHidingModule,\n        IgxColumnPinningModule,\n        IgxColumnActionsModule,\n        IgxGridColumnModule,\n        IgxGridHeadersModule,\n        IgxGridPipesModule,\n        IgxGridFilteringModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridFooterComponent,\n        IgxGridResizingModule,\n        IgxColumnMovingModule,\n        IgxGridSelectionModule,\n        IgxGridSummaryModule,\n        IgxGridToolbarModule,\n        IgxAdvancedFilteringDialogComponent,\n        IgxGridSharedModules\n    ],\n    imports: [\n        IgxGridColumnModule,\n        IgxGridHeadersModule,\n        IgxColumnMovingModule,\n        IgxGridResizingModule,\n        IgxColumnPinningModule,\n        IgxGridSelectionModule,\n        IgxGridSummaryModule,\n        IgxGridToolbarModule,\n        IgxColumnHidingModule,\n        IgxColumnActionsModule,\n        IgxGridPipesModule,\n        IgxGridFilteringModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridSharedModules\n    ],\n    providers: [\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridType } from '../common/grid.interface';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IGridSortingStrategy } from '../../data-operations/sorting-strategy';\nimport { GridPagingMode } from '../common/enums';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], sorting: IGridSortingStrategy,\n        id: string, pipeTrigger: number, pinned?): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions, sorting, grid);\n        }\n        grid.setFilteredSortedData(result, pinned);\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'gridGroupBy',\n    pure: true\n})\nexport class IgxGridGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n        let result: IGroupByResult;\n        const fullResult: IGroupByResult = { data: [], metadata: [] };\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            result = {\n                data: collection,\n                metadata: collection\n            };\n        } else {\n            state.expansion = grid.groupingExpansionState;\n            state.defaultExpanded = grid.groupsExpanded;\n            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);\n        }\n        grid.groupingFlatResult = result.data;\n        grid.groupingResult = fullResult.data;\n        grid.groupingMetadata = fullResult.metadata;\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n        if (!this.gridAPI.grid.paging || this.gridAPI.grid.pagingMode !== GridPagingMode.local) {\n            return collection;\n        }\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n        const total = this.gridAPI.grid._totalRecords >= 0 ? this.gridAPI.grid._totalRecords : collection.data.length;\n        DataUtil.correctPagingState(state, total);\n\n        const result = {\n            data: DataUtil.page(cloneArray(collection.data), state, total),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state, total)\n        };\n        if (this.gridAPI.grid.page !== state.index) {\n            this.gridAPI.grid.page = state.index;\n        }\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number, filteringPipeTrigger: number, pinned?) {\n        const grid = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: filterStrategy,\n            advancedExpressionsTree: advancedExpressionsTree\n        };\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state, grid);\n        grid.setFilteredData(result, pinned);\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowDirective } from '../row.directive';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxGridRowComponent) }]\n})\nexport class IgxGridRowComponent extends IgxRowDirective<IgxGridComponent> {\n\n    @HostBinding('class.igx-grid__tr--mrl')\n    get hasColumnLayouts(): boolean {\n        return this.grid.hasColumnLayouts;\n    }\n\n    getContext(col, row) {\n        return {\n            $implicit: col,\n            row: row\n        };\n    }\n\n    get mrlRightPinnedOffset(): string {\n        return !this.grid.isPinningToStart ?\n            - this.grid.pinnedWidth - this.grid.headerFeaturesWidth + 'px' :\n            null;\n    }\n\n    getContextMRL(pinnedCols, row) {\n        return {\n            $implicit: pinnedCols,\n            row: row\n        };\n    }\n\n    get expanded() {\n        return this.gridAPI.get_row_expansion_state(this.rowData);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\ninterface ISkipRecord {\n    skip?: boolean;\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult,\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, showSummary, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return collection.data;\n        }\n\n        return this.addSummaryRows(id, collection, summaryPosition, showSummary);\n    }\n\n    private addSummaryRows(gridId: string, collection: IGroupByResult, summaryPosition: GridSummaryPosition, showSummary): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&\n            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {\n            const groups: Array<IGroupByRecord & ISkipRecord> = [];\n            groups.push(collection.metadata[0]);\n            while (groups[groups.length - 1].groupParent) {\n                groups.push(groups[groups.length - 1].groupParent);\n            }\n            groups.reverse();\n            groups.forEach(g => g.skip = true);\n            collection.data.splice(0, 0, ...groups);\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            const record = collection.data[i];\n            let skipAdd = false;\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n            if (grid.isGroupByRecord(record)) {\n                skipAdd = !!record.skip;\n                record.skip = null;\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n            if (!skipAdd) {\n                recordsWithSummary.push(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && showSummary && (groupByRecord && !grid.isExpandedGroup(groupByRecord))) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            const showSummaries = showSummary ? false : (groupByRecord && !grid.isExpandedGroup(groupByRecord));\n            if (groupByRecord === null || showSummaries) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridAPIService } from './grid-api.service';\n\n/** @hidden */\n@Pipe({\n    name: 'gridDetails',\n    pure: true\n})\nexport class IgxGridDetailsPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n    public transform(collection: any[], hasDetails: boolean, expansionStates:  Map<any, boolean>, pipeTrigger: number) {\n        if (!hasDetails) {\n            return collection;\n        }\n        const res = this.addDetailRows(collection, expansionStates);\n        return res;\n    }\n\n    protected addDetailRows(collection: any[], expansionStates: Map<any, boolean>) {\n        const result = [];\n        collection.forEach((v) => {\n            result.push(v);\n            if (!this.gridAPI.grid.isGroupByRecord(v) && !this.gridAPI.grid.isSummaryRow(v) &&\n                this.gridAPI.get_row_expansion_state(v)) {\n                const detailsObj = { detailsData: v };\n                result.push(detailsObj);\n            }\n        });\n        return result;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Inject,\n    Input,\n    NgZone,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseDirective } from './public_api';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { GridType } from '../common/grid.interface';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-expandable-grid-cell',\n    templateUrl: 'expandable-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridExpandableCellComponent extends IgxGridCellComponent implements OnInit {\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil);\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n   /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n   /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        const expansionState = this.gridAPI.get_row_expansion_state(this.row.rowData);\n        this.gridAPI.set_row_expansion_state(this.row.rowID, !expansionState, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get showExpanderIndicator() {\n        const isGhost = this.row.pinned && this.row.disabled;\n        return !this.editMode && (!this.row.pinned || isGhost);\n    }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGridDetailTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\nimport { IgxGridDetailsPipe } from './grid.details.pipe';\nimport { IgxGridExpandableCellComponent } from './expandable-cell.component';\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGridDetailTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe,\n    IgxGridDetailsPipe,\n    IgxGridExpandableCellComponent\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridExpandableCellComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGridDetailTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe,\n    IgxGridDetailsPipe,\n    IgxGridCommonModule\n  ],\n  imports: [\n    IgxGridCommonModule,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class IgxGridModule {}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services/public_api';\nimport { Injectable } from '@angular/core';\nimport { ColumnType } from '../common/column.interface';\nimport { mergeObjects } from '../../core/utils';\n\n@Injectable()\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public allow_expansion_state_change(rowID, expanded): boolean {\n        const grid = this.grid;\n        const row = grid.records.get(rowID);\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return false;\n        }\n        return true;\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: ColumnType): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selectionService.isRowSelected(child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    public get_rec_by_id(rowID) {\n        return this.grid.records.get(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n\n    public addRowToData(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n\n            const state = this.grid.transactions.getState(parentRowID);\n            // we should not allow adding of rows as child of deleted row\n            if (state && state.type === TransactionType.DELETE) {\n                throw Error(`Cannot add child row to deleted parent row`);\n            }\n\n            const parentRecord = this.grid.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.grid.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.grid.primaryKey && this.grid.foreignKey) {\n                data[this.grid.foreignKey] = parentRowID;\n                super.addRowToData(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.grid.childDataKey;\n                if (this.grid.transactions.enabled) {\n                    const rowId = this.grid.primaryKey ? data[this.grid.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.grid.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.grid.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n            }\n        } else {\n            super.addRowToData(data);\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild,\n    DoCheck\n} from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from '../common/events';\nimport {\n    HierarchicalTransaction,\n    HierarchicalState,\n    TransactionType,\n    TransactionEventOrigin,\n    StateUpdateEvent\n} from '../../services/transaction/transaction';\nimport { HierarchicalTransactionService } from '../../services/public_api';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { mergeObjects } from '../../core/utils';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid/grid)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        IgxGridSummaryService,\n        IgxGridNavigationService,\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxTreeGridComponent) },\n        IgxFilteringService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService\n    ]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseDirective implements GridType, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n    protected _transactions: HierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public flatData: any[];\n\n    /**\n     * @hidden\n     */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    // Kind of stupid\n    private get _gridAPI(): IgxTreeGridAPIService {\n        return this.gridAPI as IgxTreeGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('record_template', { read: TemplateRef, static: true })\n    protected recordTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('summary_template', { read: TemplateRef, static: true })\n    protected summaryTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n\n        this.transactions.onStateUpdate.pipe(takeUntil<any>(this.destroy$)).subscribe((event: StateUpdateEvent) => {\n            let actions = [];\n            if (event.origin === TransactionEventOrigin.REDO) {\n                actions = event.actions ? event.actions.filter(x => x.transaction.type === TransactionType.DELETE) : [];\n            } else if (event.origin === TransactionEventOrigin.UNDO) {\n                actions = event.actions ? event.actions.filter(x => x.transaction.type === TransactionType.ADD) : [];\n            }\n            if (actions.length) {\n                for (const action of actions) {\n                    this.deselectChildren(action.transaction.id);\n                }\n            }\n        });\n    }\n\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.notifyChanges();\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n        this.selectionService.clearHeaderCBState();\n        this._pipeTrigger++;\n    }\n\n   protected findRecordIndexInView(rec) {\n        return this.dataView.findIndex(x => x.data[this.primaryKey] === rec[this.primaryKey]);\n    }\n\n    protected getUnpinnedIndexById(id) {\n        return this.unpinnedRecords.findIndex(x => x.data[this.primaryKey] === id);\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    public getDefaultExpandState(record: ITreeGridRecord) {\n        return record.children && record.children.length && record.level < this.expansionDepth;\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n     * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     *\n     * ```typescript\n     * this.grid.collapseAll();\n     *  ```\n     * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        super.refreshGridState();\n        if (this.primaryKey && this.foreignKey) {\n            const rowID = args.data[this.foreignKey];\n            this.summaryService.clearSummaryCache({rowID: rowID});\n            this._pipeTrigger++;\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        super.endEdit(true);\n        this.gridAPI.addRowToData(data, parentRowID);\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected _getParentRecordId() {\n        if (this.addRowParent.asChild) {\n            return super._getParentRecordId();\n        } else if (this.addRowParent.rowID !== null && this.addRowParent.rowID !== undefined) {\n            const spawnedForRecord =  this._gridAPI.get_rec_by_id(this.addRowParent.rowID);\n            return spawnedForRecord?.parent?.rowID;\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.unpinnedDataView.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.unpinnedDataView.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData: any, rowIndex: number, pinned?: boolean): any {\n        return {\n            $implicit: this.isGhostRecord(rowData) || this.isAddRowRecord(rowData) ? rowData.recordRef : rowData,\n            index: this.getDataViewIndex(rowIndex, pinned),\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow',\n            disabled: this.isGhostRecord(rowData) ? rowData.recordRef.isFilteredOutParent === undefined : false,\n            addRow: this.isAddRowRecord(rowData) ? rowData.addRow : false\n        };\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getInitialPinnedIndex(rec) {\n        return this._pinnedRecordIDs.indexOf(rec.rowID);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        let source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.unpinnedDataView.forEach(process);\n        source = this.isRowPinningToTop ? [...this.pinnedDataView, ...source] : [...source, ...this.pinnedDataView];\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    public getEmptyRecordObjectFor(rec) {\n        const row = {...rec};\n        const data = rec || {};\n        row.data = {... data};\n        Object.keys(row.data).forEach(key => {\n            // persist foreign key if one is set.\n            if (this.foreignKey && key === this.foreignKey) {\n                row.data[key] = rec.data[key];\n            } else {\n                row.data[key] = undefined;\n            }\n        });\n        let id = this.generateRowID();\n        const rootRecPK = this.foreignKey && this.rootRecords && this.rootRecords.length > 0 ?\n         this.rootRecords[0].data[this.foreignKey] : null;\n        if (id === rootRecPK) {\n            // safeguard in case generated id matches the root foreign key.\n            id = this.generateRowID();\n        }\n        row.rowID = id;\n        row.data[this.primaryKey] = id;\n        return row;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n     */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @description A recursive way to deselect all selected children of a given record\n     * @param recordID ID of the record whose children to deselect\n     * @hidden\n     * @internal\n     */\n    private deselectChildren(recordID): void {\n        const selectedChildren = [];\n        const rowToDeselect = (this.getRowByKey(recordID) as IgxTreeGridRowComponent).treeRow;\n        this.selectionService.deselectRow(recordID);\n        this._gridAPI.get_selected_children(rowToDeselect, selectedChildren);\n        if (selectedChildren.length > 0) {\n            selectedChildren.forEach(x => this.deselectChildren(x));\n        }\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, DoCheck, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowDirective<IgxTreeGridComponent> implements DoCheck {\n    private _treeRow: ITreeGridRecord;\n\n    @ViewChildren('treeCell')\n    protected _cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Gets whether the row is pinned.\n     * ```typescript\n     * let isPinned = row.pinned;\n     * ```\n     */\n    public get pinned() {\n        return this.grid.isRecordPinned(this._treeRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public get isRoot(): boolean {\n        let treeRec = this.treeRow;\n        const isPinnedArea = this.pinned && !this.disabled;\n        if (isPinnedArea) {\n            treeRec = this.grid.unpinnedRecords.find(x => x.data === this.rowData);\n        }\n        return treeRec.level === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public get hasChildren(): boolean {\n        return true;\n    }\n\n    /**\n     * Sets whether the row is pinned.\n     * Default value is `false`.\n     * ```typescript\n     * this.grid.selectedRows[0].pinned = true;\n     * ```\n     */\n    public set pinned(value: boolean) {\n        if (value) {\n            this.grid.pinRow(this.rowID);\n        } else {\n            this.grid.unpinRow(this.rowID);\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).set_row_expansion_state(this._treeRow.rowID, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n\n    /**\n     * Spawns the add child row UI for the specific row.\n     * @example\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.beginAddChild();\n     * ```\n     * @param rowID\n     */\n    public beginAddChild() {\n        this.grid.beginAddRowByIndex(this.rowID, this.index, true);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseDirective } from '../grid/public_api';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { GridType } from '../common/grid.interface';\nimport { IGridSortingStrategy } from '../../data-operations/sorting-strategy';\nimport { GridPagingMode } from '../common/enums';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = grid.transactions.enabled ?\n        flatData.filter(rec => !grid.transactions.getState(this.getRowID(primaryKey, rec))) : flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        sorting: IGridSortingStrategy,\n        id: string,\n        pipeTrigger: number,\n        pinned?: boolean): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions, sorting, null, grid);\n        }\n\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.setFilteredSortedData(filteredSortedData, pinned);\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging || grid.pagingMode !== GridPagingMode.local) {\n            return collection;\n        }\n\n        const len = grid._totalRecords >= 0 ? grid._totalRecords : collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state, len);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n        return collection;\n    }\n}\n\n/**\n * This pipe maps the original record to ITreeGridRecord format used in TreeGrid.\n */\n@Pipe({\n    name: 'treeGridNormalizeRecord',\n    pure: true\n})\nexport class IgxTreeGridNormalizeRecordsPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService> gridAPI;\n    }\n\n    transform(collection: any[], pipeTrigger: number): any[] {\n        const grid =  this.gridAPI.grid;\n        const primaryKey = grid.primaryKey;\n        // using flattened data because origin data may be hierarchical.\n        const flatData = grid.flatData;\n        const res = flatData.map(rec =>\n            ({\n                    rowID: grid.primaryKey ? rec[primaryKey] : rec,\n                    data: rec,\n                    level: 0,\n                    children: []\n            }));\n        return res;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input\n} from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { IgxGridExpandableCellComponent } from '../grid/expandable-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxTreeGridCellComponent extends IgxGridExpandableCellComponent {\n\n    private get treeGridAPI(): IgxTreeGridAPIService {\n        return this.gridAPI as IgxTreeGridAPIService;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.set_row_expansion_state(this.row.rowID, !this.row.expanded, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition, showSummaryOnCollapse: boolean,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition, showSummaryOnCollapse);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[],\n        summaryPosition: GridSummaryPosition, showSummaryOnCollapse: boolean): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isCollapsed = !record.expanded && record.children && record.children.length > 0 && showSummaryOnCollapse;\n            if (isCollapsed) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe, IgxTreeGridNormalizeRecordsPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxTreeGridNormalizeRecordsPipe\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    IgxGridCommonModule,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class IgxTreeGridModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\nprivate resolver;\n\n    /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid', { static: true })\n    public hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        public element: ElementRef,\n        resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef) {\n            this.resolver = resolver;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        // handler logic that re-emits hgrid events on the row island\n        this.setupEventEmitters();\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.layout.onGridInitialized.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n    private setupEventEmitters() {\n        const destructor = takeUntil(this.hGrid.destroy$);\n\n        const factory = this.resolver.resolveComponentFactory(IgxGridComponent);\n        // exclude outputs related to two-way binding functionality\n        const inputNames = factory.inputs.map(input => input.propName);\n        const outputs = factory.outputs.filter(o => {\n            const matchingInputPropName = o.propName.slice(0, o.propName.indexOf('Change'));\n            return inputNames.indexOf(matchingInputPropName) === -1;\n        });\n        outputs.forEach(output => {\n            if (this.hGrid[output.propName]) {\n                this.hGrid[output.propName].pipe(destructor).subscribe((args) => {\n                    if (!args) {\n                        args = {};\n                    }\n                    args.owner = this.hGrid;\n                    this.layout[output.propName].emit(args);\n                });\n            }\n        });\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { SUPPORTED_KEYS, NAVIGATION_KEYS } from '../../core/utils';\nimport { Injectable } from '@angular/core';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxRowDirective, IgxGridBaseDirective } from '../grid/public_api';\nimport { GridType } from '../common/grid.interface';\nimport { IPathSegment } from './hierarchical-grid-base.directive';\n\n@Injectable()\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected _pendingNavigation = false;\n\n\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (!this.activeNode || !(SUPPORTED_KEYS.has(key) || (key === 'tab' && this.grid.crudService.cell)) &&\n        !this.grid.crudService.rowEditingBlocked && !this.grid.rowInEditMode) { return; }\n\n        const targetGrid = this.getClosestElemByTag(event.target, 'igx-hierarchical-grid');\n        if (targetGrid !== this.grid.nativeElement) {\n            return;\n        }\n\n        if (this._pendingNavigation && NAVIGATION_KEYS.has(key)) {\n            // In case focus needs to be moved from one grid to another, however there is a pending scroll operation\n            // which is an async operation, any additional navigation keys should be ignored\n            // untill operation complete.\n            event.preventDefault();\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n\n    public navigateInBody(rowIndex, visibleColIndex, cb: Function = null): void {\n        const rec = this.grid.dataView[rowIndex];\n        if (rec && this.grid.isChildGridRecord(rec)) {\n             // target is child grid\n            const virtState = this.grid.verticalScrollContainer.state;\n             const inView = rowIndex >= virtState.startIndex && rowIndex <= virtState.startIndex + virtState.chunkSize;\n             const isNext =  this.activeNode.row < rowIndex;\n             const targetLayoutIndex = isNext ? null : this.grid.childLayoutKeys.length - 1;\n             if (inView) {\n                this._moveToChild(rowIndex, visibleColIndex, isNext, targetLayoutIndex, cb);\n            } else {\n                let scrollAmount = this.grid.verticalScrollContainer.getScrollForIndex(rowIndex, !isNext);\n                scrollAmount += isNext ? 1 : -1;\n                this.grid.verticalScrollContainer.getScroll().scrollTop = scrollAmount;\n                this._pendingNavigation = true;\n                this.grid.verticalScrollContainer.onChunkLoad.pipe(first()).subscribe(() => {\n                    this._moveToChild(rowIndex, visibleColIndex, isNext, targetLayoutIndex, cb);\n                    this._pendingNavigation = false;\n                });\n            }\n            return;\n        }\n\n        const isLast = rowIndex === this.grid.dataView.length;\n        if ((rowIndex === -1 || isLast) &&\n            this.grid.parent !== null) {\n            // reached end of child grid\n            const nextSiblingIndex = this.nextSiblingIndex(isLast);\n            if (nextSiblingIndex !== null) {\n                this.grid.parent.navigation._moveToChild(this.grid.childRow.index, visibleColIndex, isLast, nextSiblingIndex, cb);\n            } else {\n                this._moveToParent(isLast, visibleColIndex, cb);\n            }\n            return;\n        }\n\n        if (this.grid.parent) {\n            const isNext = this.activeNode && typeof this.activeNode.row === 'number' ? rowIndex > this.activeNode.row : false;\n            const cbHandler = (args) => {\n                this._handleScrollInChild(rowIndex, isNext);\n                cb(args);\n            };\n            if (!this.activeNode) {\n                this.activeNode = { row: null, column: null };\n            }\n            super.navigateInBody(rowIndex, visibleColIndex, cbHandler);\n            return;\n        }\n\n        if (!this.activeNode) {\n            this.activeNode = { row: null, column: null };\n        }\n        super.navigateInBody(rowIndex, visibleColIndex, cb);\n    }\n\n    public shouldPerformVerticalScroll(index, visibleColumnIndex = -1, isNext?) {\n        const targetRec = this.grid.dataView[index];\n        if (this.grid.isChildGridRecord(targetRec)) {\n            const scrollAmount = this.grid.verticalScrollContainer.getScrollForIndex(index, !isNext);\n            const currScroll = this.grid.verticalScrollContainer.getScroll().scrollTop;\n            const shouldScroll = !isNext ? scrollAmount > currScroll : currScroll < scrollAmount;\n            return shouldScroll;\n        } else {\n            return super.shouldPerformVerticalScroll(index, visibleColumnIndex);\n        }\n    }\n\n    focusTbody(event) {\n        if (!this.activeNode || this.activeNode.row === null) {\n            this.activeNode = {\n                row: 0,\n                column: 0\n            };\n\n            this.grid.navigateTo(0, 0, (obj) => {\n                this.grid.clearCellSelection();\n                obj.target.activate(event);\n            });\n\n        } else {\n            super.focusTbody(event);\n        }\n    }\n\n    protected nextSiblingIndex(isNext) {\n        const layoutKey = this.grid.childRow.layout.key;\n        const layoutIndex = this.grid.parent.childLayoutKeys.indexOf(layoutKey);\n        const nextIndex = isNext ? layoutIndex + 1 : layoutIndex - 1;\n        if (nextIndex <= this.grid.parent.childLayoutKeys.length - 1 && nextIndex > -1) {\n            return nextIndex;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Handles scrolling in child grid and ensures target child row is in main grid view port.\n     * @param rowIndex The row index which should be in view.\n     * @param isNext  Optional. Whether we are navigating to next. Used to determine scroll direction.\n     * @param cb  Optional.Callback function called when operation is complete.\n     */\n    protected _handleScrollInChild(rowIndex: number, isNext?: boolean, cb?: Function) {\n        const shouldScroll = this.shouldPerformVerticalScroll(rowIndex, -1, isNext);\n        if (shouldScroll) {\n            this.grid.navigation.performVerticalScrollToCell(rowIndex, -1, () => {\n                this.positionInParent(rowIndex, isNext, cb);\n            });\n        } else {\n            this.positionInParent(rowIndex, isNext, cb);\n        }\n    }\n\n    /**\n     *\n     * @param rowIndex Row index that should come in view.\n     * @param isNext  Whether we are navigating to next. Used to determine scroll direction.\n     * @param cb  Optional.Callback function called when operation is complete.\n     */\n    protected positionInParent(rowIndex, isNext, cb?: Function) {\n        const rowObj = this.grid.getRowByIndex(rowIndex);\n        if (!rowObj) {\n            if (cb) {\n                cb();\n            }\n            return;\n        }\n        const positionInfo = this.getPositionInfo(rowObj, isNext);\n        if (!positionInfo.inView) {\n            // stop event from triggering multiple times before scrolling is complete.\n            this._pendingNavigation = true;\n            const scrollableGrid = isNext ? this.getNextScrollableDown(this.grid) : this.getNextScrollableUp(this.grid);\n            scrollableGrid.grid.verticalScrollContainer.recalcUpdateSizes();\n            scrollableGrid.grid.verticalScrollContainer.addScrollTop(positionInfo.offset);\n            scrollableGrid.grid.verticalScrollContainer.onChunkLoad.pipe(first()).subscribe(() => {\n                this._pendingNavigation = false;\n                if (cb) {\n                    cb();\n                }\n            });\n        } else {\n            if (cb) {\n                cb();\n            }\n        }\n    }\n\n    /**\n     * Moves navigation to child grid.\n     * @param parentRowIndex The parent row index, at which the child grid is rendered.\n     * @param childLayoutIndex Optional. The index of the child row island to which the child grid belongs to. Uses first if not set.\n     */\n    protected _moveToChild(parentRowIndex: number, visibleColIndex: number, isNext: boolean, childLayoutIndex?: number, cb?: Function) {\n        const ri = typeof childLayoutIndex !== 'number' ?\n         this.grid.childLayoutList.first : this.grid.childLayoutList.toArray()[childLayoutIndex];\n        const rowId = this.grid.dataView[parentRowIndex].rowID;\n        const pathSegment: IPathSegment = {\n            rowID: rowId,\n            rowIslandKey: ri.key\n        };\n        const childGrid =  this.grid.hgridAPI.getChildGrid([pathSegment]);\n        const targetIndex = isNext ? 0 : childGrid.dataView.length - 1;\n        const targetRec =  childGrid.dataView[targetIndex];\n        if (!targetRec) {\n            // if no target rec, then move on in next sibling or parent\n            childGrid.navigation.navigateInBody(targetIndex, visibleColIndex, cb);\n            return;\n        }\n        if (childGrid.isChildGridRecord(targetRec)) {\n            // if target is a child grid record should move into it.\n            this.grid.navigation.activeNode.row = null;\n            childGrid.navigation.activeNode = { row: targetIndex, column: this.activeNode.column};\n            childGrid.navigation._handleScrollInChild(targetIndex, isNext, () => {\n                const targetLayoutIndex = isNext ? 0 : childGrid.childLayoutList.toArray().length - 1;\n                childGrid.navigation._moveToChild(targetIndex, visibleColIndex, isNext, targetLayoutIndex, cb);\n            });\n            return;\n        }\n\n        const childGridNav =  childGrid.navigation;\n        this.clearActivation();\n        const lastVisibleIndex = childGridNav.lastColumnIndex;\n        const columnIndex = visibleColIndex <= lastVisibleIndex ? visibleColIndex : lastVisibleIndex;\n        childGridNav.activeNode = { row: targetIndex, column: columnIndex};\n        childGrid.tbody.nativeElement.focus({preventScroll: true});\n        this._pendingNavigation = false;\n        childGrid.navigation._handleScrollInChild(targetIndex, isNext, () => {\n            childGrid.navigateTo(targetIndex, columnIndex, cb);\n        });\n    }\n\n    /**\n     * Moves navigation back to parent grid.\n     * @param rowIndex\n     */\n    protected _moveToParent(isNext: boolean, columnIndex, cb?) {\n        const indexInParent = this.grid.childRow.index;\n        const hasNextTarget = this.hasNextTarget(this.grid.parent, indexInParent, isNext);\n        if (!hasNextTarget) {\n            return;\n        }\n        this.clearActivation();\n        const targetRowIndex =  isNext ? indexInParent + 1 : indexInParent - 1;\n        const lastVisibleIndex = this.grid.parent.navigation.lastColumnIndex;\n        const nextColumnIndex = columnIndex <= lastVisibleIndex ? columnIndex : lastVisibleIndex;\n        this._pendingNavigation = true;\n        const cbFunc = (args) => {\n            this._pendingNavigation = false;\n            cb(args);\n            args.target.grid.tbody.nativeElement.focus();\n        };\n        this.grid.parent.navigation.navigateInBody(targetRowIndex, nextColumnIndex, cbFunc);\n    }\n\n    /**\n     * Gets information on the row position relative to the root grid view port.\n     * Returns whether the row is in view and its offset.\n     * @param rowObj\n     * @param isNext\n     */\n    protected getPositionInfo(rowObj: IgxRowDirective<IgxGridBaseDirective & GridType>, isNext: boolean) {\n        let rowElem = rowObj.nativeElement;\n        if (rowObj instanceof IgxChildGridRowComponent) {\n            const childLayoutKeys = this.grid.childLayoutKeys;\n            const riKey = isNext ? childLayoutKeys[0] : childLayoutKeys[childLayoutKeys.length - 1];\n            const pathSegment: IPathSegment = {\n                rowID: rowObj.rowData.rowID,\n                rowIslandKey: riKey\n            };\n            const childGrid =  this.grid.hgridAPI.getChildGrid([pathSegment]);\n            rowElem = childGrid.tfoot.nativeElement;\n        }\n        const gridBottom = this._getMinBottom(this.grid);\n        const diffBottom =\n        rowElem.getBoundingClientRect().bottom - gridBottom;\n        const gridTop = this._getMaxTop(this.grid);\n        const diffTop = rowElem.getBoundingClientRect().bottom -\n        rowElem.offsetHeight - gridTop;\n        const isInView = isNext ? diffBottom <= 0 : diffTop >= 0;\n        const calcOffset =  isNext ? diffBottom : diffTop;\n\n        return { inView: isInView, offset: calcOffset };\n    }\n\n    private clearActivation() {\n        // clear if previous activation exists.\n        if (this.activeNode) {\n            this.activeNode.row = null;\n        }\n    }\n\n    private hasNextTarget(grid, index: number, isNext: boolean) {\n        const targetRowIndex =  isNext ? index + 1 : index - 1;\n        const hasTargetRecord = !!grid.dataView[targetRowIndex];\n        if (hasTargetRecord) {\n            return true;\n        } else {\n            let hasTargetRecordInParent = false;\n            if (grid.parent) {\n                const indexInParent = grid.childRow.index;\n                hasTargetRecordInParent = this.hasNextTarget(grid.parent, indexInParent, isNext);\n            }\n            return hasTargetRecordInParent;\n        }\n    }\n\n    /**\n     * Gets closest element by its tag name.\n     * @param sourceElem The element from which to start the search.\n     * @param targetTag The target element tag name, for which to search.\n     */\n    protected getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the max top view in the current grid hierarchy.\n     * @param grid\n     */\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            const pinnedRowsHeight = currGrid.hasPinnedRecords && currGrid.isRowPinningToTop ? currGrid.pinnedRowHeight : 0;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top + pinnedRowsHeight);\n        }\n        return top;\n    }\n\n    /**\n     * Gets the min bottom view in the current grid hierarchy.\n     * @param grid\n     */\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            const pinnedRowsHeight = currGrid.hasPinnedRecords && !currGrid.isRowPinningToTop ? currGrid.pinnedRowHeight : 0;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom - pinnedRowsHeight);\n        }\n        return bottom;\n    }\n\n    /**\n     * Finds the next grid that allows scrolling down.\n     * @param grid The grid from which to begin the search.\n     */\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n        let scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n            scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    /**\n     * Finds the next grid that allows scrolling up.\n     * @param grid The grid from which to begin the search.\n     */\n    private getNextScrollableUp(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n}\n","import {\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef,\n    Directive,\n    Output,\n    EventEmitter,\n    LOCALE_ID\n} from '@angular/core';\nimport { IgxGridBaseDirective, IgxGridTransaction } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxOverlayService, IgxTransactionService, Transaction, TransactionService, State } from '../../services/public_api';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnGroupComponent } from '../columns/column-group.component';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return new IgxTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\n@Directive()\nexport abstract class IgxHierarchicalGridBaseDirective extends IgxGridBaseDirective {\n    public abstract rootGrid;\n\n    public abstract expandChildren: boolean;\n\n    @Input()\n    public hasChildrenKey: string;\n\n    @Input()\n    public showExpandAll = false;\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * @example\n     * ```typescript\n     *  <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" (onDataPreLoad)=\"handleEvent()\">\n     *  </igx-hierarchical-grid>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Gets the outlet used to attach the grid's overlays to.\n     * @remark\n     * If set, returns the outlet defined outside the grid. Otherwise returns the grid's internal outlet directive.\n     */\n    get outlet() {\n        return this.rootGrid ? this.rootGrid.resolveOutlet() : this.resolveOutlet();\n    }\n\n    /**\n     * Sets the outlet used to attach the grid's overlays to.\n     */\n    set outlet(val: any) {\n        this._userOutletDirective = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public childRow: IgxChildGridRowComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected transactionFactory: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Inject(LOCALE_ID) localeId: string) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions,\n            localeId);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n        this.initPinning();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.directive';\nimport { IgxGridBaseDirective, GridBaseAPIService } from '../grid/public_api';\nimport { GridType } from '../common/grid.interface';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseDirective & GridType> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n\n    public get_row_expansion_state(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            const ri = record.rowID;\n            const states = this.grid.expansionStates;\n            const expanded = states.get(ri);\n            if (expanded !== undefined) {\n                return expanded;\n            } else {\n                return this.grid.getDefaultExpandState(record);\n            }\n        } else {\n            inState = !!super.get_row_expansion_state(record);\n        }\n        return inState && (this.grid as any).childLayoutList.length !== 0;\n    }\n\n    public allow_expansion_state_change(rowID, expanded): boolean {\n        const rec = this.get_rec_by_id(rowID);\n        const grid = (this.grid as any);\n        if (grid.hasChildrenKey && !rec[grid.hasChildrenKey]) {\n            return false;\n        }\n        return !!rec && this.grid.expansionStates.get(rowID) !== expanded;\n    }\n\n    public get_rec_by_id(rowID): any {\n        const data = this.get_all_data(false);\n        const index = this.get_row_index_in_data(rowID, data);\n        return data[index];\n    }\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxRowIslandAPIService {\n    public rowIsland: IgxRowIslandComponent;\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy,\n    DoCheck,\n    IterableChangeRecord,\n    LOCALE_ID\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services/public_api';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\n\nimport { IgxOverlayService } from '../../services/public_api';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxActionStripComponent } from '../../action-strip/action-strip.component';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService,\n                IgxGridSelectionService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseDirective\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._defaultExpandState  = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._defaultExpandState;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * Emitted after a grid is being initialized for this row island.\n     * The emitting is done in `ngAfterViewInit`.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridInitialized)=\"gridInitialized($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridInitialized = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    private ri_columnListDiffer;\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService,\n        @Inject(LOCALE_ID) localeId: string) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions,\n            localeId\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    @ContentChildren(IgxActionStripComponent, { read: IgxActionStripComponent, descendants: false })\n    public actionStrips: QueryList<IgxActionStripComponent>;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n        this.rowIslandAPI.rowIsland = this;\n        this.ri_columnListDiffer = this.differs.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    ngDoCheck() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            Promise.resolve().then(() => {\n                this.updateColumnList();\n            });\n         });\n\n         // handle column changes so that they are passed to child grid instances when onColumnChange is emitted.\n         this.ri_columnListDiffer.diff(this.childColumns);\n         this.childColumns.toArray().forEach(x => x.onColumnChange.pipe(takeUntil(x.destroy$)).subscribe(() => this.updateColumnList()));\n         this.childColumns.changes.pipe(takeUntil(this.destroy$)).subscribe((change: QueryList<IgxColumnComponent> ) => {\n            const diff = this.ri_columnListDiffer.diff(change);\n            if (diff) {\n                diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                    record.item.onColumnChange.pipe(takeUntil(record.item.destroy$)).subscribe(() => this.updateColumnList());\n                });\n            }\n         });\n         this.actionStrip = this.actionStrips.first;\n         if (this.actionStrip) {\n            this.actionStrip.menuOverlaySettings.outlet = this.outlet;\n        }\n    }\n\n    protected updateChildren() {\n        if (this.children.first === this) {\n            this.children.reset(this.children.toArray().slice(1));\n        }\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n        this._init = false;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    AfterViewInit,\n    AfterContentInit,\n    OnInit,\n    OnDestroy,\n    DoCheck\n} from '@angular/core';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IgxColumnComponent, } from '../columns/column.component';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxTransactionService } from '../../services/public_api';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseDirective\n    implements GridType, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n\n    /**\n     * Gets/Sets the value of the `id` attribute.\n     * @remarks\n     * If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n    public set id(value: string) {\n        this.h_id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Gets/Sets the total number of records in the data source.\n     * @remarks\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * @example\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * this.grid1.totalItemCount = 55;\n     * ```\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._defaultExpandState  = value;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._defaultExpandState ;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef, static: true })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    /**\n     * @hidden\n     */\n    public hideActionStrip(event: MouseEvent) {\n        if (!this.parent) {\n            // hide child layout actions strips when\n            // moving outside root grid.\n            super.hideActionStrip(event);\n            this.allLayoutList.forEach(ri => {\n                ri.actionStrip?.hide();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        if (this._transactions instanceof IgxTransactionService) {\n            // transaction service cannot be injected in a derived class in a factory manner\n            this._transactions = new IgxTransactionService();\n        }\n        this.expansionStatesChange.pipe(takeUntil(this.destroy$)).subscribe((value: Map<any, boolean>) => {\n            const res = Array.from(value.entries()).filter(({1: v}) => v === true).map(([k]) => k);\n        });\n        super.ngOnInit();\n    }\n\n    public ngDoCheck() {\n        if (this._cdrRequestRepaint && !this._init) {\n            this.updateSizes();\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.headerContainer.getScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this._displayDensity = this.rootGrid._displayDensity;\n                this.notifyChanges(true);\n                this.cdr.markForCheck();\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n\n        this.actionStrip = this.parentIsland ? this.parentIsland.actionStrip : this.actionStrip;\n\n        this.headSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.headSelectorsTemplates :\n            this.headSelectorsTemplates;\n\n        this.rowSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.rowSelectorsTemplates :\n            this.rowSelectorsTemplates;\n        this.dragIndicatorIconTemplate = this.parentIsland ?\n            this.parentIsland.dragIndicatorIconTemplate :\n            this.dragIndicatorIconTemplate;\n        this.rowExpandedIndicatorTemplate  = this.rootGrid.rowExpandedIndicatorTemplate;\n        this.rowCollapsedIndicatorTemplate   = this.rootGrid.rowCollapsedIndicatorTemplate;\n        this.headerCollapseIndicatorTemplate = this.rootGrid.headerCollapseIndicatorTemplate;\n        this.headerExpandIndicatorTemplate = this.rootGrid.headerExpandIndicatorTemplate;\n        this.hasChildrenKey = this.parentIsland ?\n         this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :\n         this.rootGrid.hasChildrenKey;\n         this.showExpandAll = this.parentIsland ?\n         this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;\n\n        this.excelStyleFilteringComponents = this.parentIsland ?\n            this.parentIsland.excelStyleFilteringComponents :\n            this.excelStyleFilteringComponents;\n    }\n\n    private updateSizes() {\n        if (document.body.contains(this.nativeElement) && this.isPercentWidth) {\n            this.reflow();\n\n            this.hgridAPI.getChildGrids(false).forEach((grid) => {\n                grid.updateSizes();\n            });\n        }\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        if (this.isPercentHeight && this.parent) {\n            return true;\n        }\n        return super._shouldAutoSize(renderedHeight);\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutKeys = this.parent ?\n            this.parentIsland.children.map((item) => item.key) :\n            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$)).subscribe(() =>\n            this.onRowIslandChange()\n        );\n        super.ngAfterContentInit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /** @hidden */\n    public featureColumnsWidth() {\n        return super.featureColumnsWidth(this.headerHierarchyExpander);\n    }\n\n    /**\n     * @hidden\n     */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n\n    protected setupColumns() {\n        if (this.parentIsland && this.parentIsland.childColumns.length > 0 && !this.autoGenerate) {\n            this.createColumnsList(this.parentIsland.childColumns.toArray());\n        }\n        super.setupColumns();\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        Promise.resolve().then(() => {\n            this.updateColumnList();\n            const cols = change.filter(c => c.gridAPI.grid === this);\n            if (cols.length > 0 || this.autoGenerate) {\n                this.columnList.reset(cols);\n                super.onColumnsChanged(this.columnList);\n            }\n        });\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes(false);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        if (this.isGhostRecord(record)) {\n            record = record.recordRef;\n        }\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData, rowIndex, pinned): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: this.isGhostRecord(rowData) || this.isAddRowRecord(rowData) ? rowData.recordRef : rowData,\n                templateID: 'dataRow',\n                index: this.getDataViewIndex(rowIndex, pinned),\n                disabled: this.isGhostRecord(rowData),\n                addRow: this.isAddRowRecord(rowData) ? rowData.addRow : false\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate() {\n        const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;\n        if (!expanded && this.showExpandAll) {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        } else {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDragGhostCustomTemplate(): TemplateRef<any> {\n        if (this.parentIsland) {\n            return this.parentIsland.getDragGhostCustomTemplate();\n        }\n        return super.getDragGhostCustomTemplate();\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n   toggleAll() {\n    const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;\n    if (!expanded && this.showExpandAll) {\n        this.expandAll();\n    } else {\n        this.collapseAll();\n    }\n   }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public hasExpandedRecords() {\n       if (this.expandChildren) {\n            return true;\n       }\n       let hasExpandedEntry = false;\n       this.expansionStates.forEach((value, key) => {\n           if (value) {\n            hasExpandedEntry = value;\n           }\n        });\n        return hasExpandedEntry;\n    }\n\n    public getDefaultExpandState(record: any) {\n        if (this.hasChildrenKey && !record[this.hasChildrenKey]) {\n            return false;\n        }\n        return this.expandChildren;\n\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        return this.gridAPI.get_row_expansion_state(record);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.notifyChanges(true);\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.notifyChanges(true);\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getScroll();\n        const hScr = this.headerContainer.getScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component, OnInit, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { PlatformUtil } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: '../cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n    // protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil\n        ) {\n            super(selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil);\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            if (grid !== this.grid && grid.navigation.activeNode) {\n                grid.navigation.clearActivation();\n                grid.selectionService.initKeyboardState();\n                grid.selectionService.clear();\n            }\n\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public activate(event: FocusEvent) {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        this.grid.navigation.activeNode.gridID = this.gridID;\n        super.activate(event);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowDirective<IgxHierarchicalGridComponent> {\n\n    protected expanderClass = 'igx-grid__hierarchical-expander';\n\n    /**\n     * @hidden\n     */\n    public get expanderClassResolved() {\n        return {\n            [this.expanderClass]: !this.pinned || this.disabled,\n            [`${this.expanderClass}--empty`]: this.pinned && !this.disabled\n        };\n    }\n\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    protected _cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef })\n    public expander: ElementRef<HTMLElement>;\n\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n   @ViewChild('defaultEmptyTemplate', { read: TemplateRef, static: true })\n   protected defaultEmptyTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    public get expanded() {\n        return this.gridAPI.get_row_expansion_state(this.rowData);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expandedClass() {\n        return this.expanded && !this.pinned;\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n   /**\n    * @hidden\n    */\n   public expanderClick(event) {\n        event.stopPropagation();\n        this.toggle();\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        this.endEdit(grid.rootGrid);\n        this.gridAPI.set_row_expansion_state(this.rowID, !this.expanded);\n        grid.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public select = () => {\n        this.grid.selectRows([this.rowID]);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public deselect = () => {\n        this.grid.deselectRows([this.rowID]);\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate() {\n        let expandable = true;\n        if (this.grid.hasChildrenKey) {\n            expandable = this.rowData[this.grid.hasChildrenKey];\n        }\n        if (!expandable || (this.pinned && !this.disabled)) {\n            return this.defaultEmptyTemplate;\n        }\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    protected endEdit(grid: IgxHierarchicalGridComponent) {\n        if (grid.crudService.cellInEditMode) {\n            grid.endEdit();\n        }\n        grid.hgridAPI.getChildGrids(true).forEach(g => {\n            if (g.crudService.cellInEditMode) {\n            g.endEdit();\n        }});\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridPagingMode } from '../common/enums';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = new Map<any, boolean>(),\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        if (grid.verticalScrollContainer.isRemote) {\n            return collection;\n        }\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.gridAPI.get_row_expansion_state(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging || this.gridAPI.grid.pagingMode !== GridPagingMode.local) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const total = this.gridAPI.grid._totalRecords >= 0 ? this.gridAPI.grid._totalRecords : collection.length;\n        const result: any[] = DataUtil.page(cloneArray(collection), state, total);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n\n    }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridComponent } from '../grid/grid.component';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    IgxGridModule,\n  ],\n  entryComponents: [\n    IgxGridComponent\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/public_api';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-navbar-action,[igxNavbarAction]'\n})\nexport class IgxNavbarActionDirective { }\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-navbar-title,[igxNavbarTitle]'\n})\nexport class IgxNavbarTitleDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     * Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     * ```typescript\n     *  @ViewChild(\"MyChild\")\n     * public navBar: IgxNavbarComponent;\n     * ngAfterViewInit(){\n     *     let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     * }\n     * ```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    public get isTitleContentVisible(): boolean {\n        return this.titleContent ? true : false;\n    }\n\n    /**\n     * Sets whether the action button of the `IgxNavbarComponent` is visible.\n     * ```html\n     * <igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     * ```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     * An @Input property that sets the icon of the `IgxNavbarComponent`.\n     * ```html\n     * <igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     * ```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     * An @Input property that sets the title of the `IgxNavbarComponent`.\n     * ```html\n     * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     * ```\n     */\n    @Input() public title: string;\n\n    /**\n     * The event that will be thrown when the action is executed,\n     * provides reference to the `IgxNavbar` component as argument\n     * ```typescript\n     * public actionExc(event){\n     *     alert(\"Action Execute!\");\n     * }\n     *  //..\n     * ```\n     * ```html\n     * <igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     * An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     * ```html\n     * <igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     * ```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavbarActionDirective, { read: IgxNavbarActionDirective })\n    protected actionIconTemplate: IgxNavbarActionDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavbarTitleDirective, { read: IgxNavbarTitleDirective })\n    protected titleContent: IgxNavbarTitleDirective;\n\n    /**\n     * @hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxNavbarActionDirective, IgxNavbarTitleDirective],\n    exports: [IgxNavbarComponent, IgxNavbarActionDirective, IgxNavbarTitleDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    SimpleChange,\n    ViewChild,\n    Renderer2\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\nimport { PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    private _isOpen = false;\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-nav-drawer')\n    public cssClass = true;\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [(isOpen)]='model.isOpen'></igx-nav-drawer>\n     * ```\n     */\n    @Input()\n    public get isOpen() {\n        return this._isOpen;\n    }\n    public set isOpen(value) {\n        this._isOpen = value;\n        this.isOpenChange.emit(this._isOpen);\n    }\n\n    /**\n     * @hidden\n     */\n    @Output() public isOpenChange = new EventEmitter<boolean>();\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n\n    /**\n     * Enables/disables the animation, when toggling the drawer. Set to `false` by default.\n     * ````html\n     * <igx-nav-drawer [disableAnimation]=\"true\"></igx-nav-drawer>\n     * ````\n     */\n    @HostBinding ('class.igx-nav-drawer--disable-animation')\n    @Input() public disableAnimation = false;\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 68px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '68px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside', { static: true }) private _drawer: ElementRef;\n    @ViewChild('overlay', { static: true }) private _overlay: ElementRef;\n    @ViewChild('dummy', { static: true }) private _styleDummy: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        protected renderer: Renderer2,\n        private _touchManager: HammerGesturesManager,\n        private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.isOpen) {\n            this.setDrawerWidth(this.isOpen ? this.width : (this.miniTemplate ? this.miniWidth : ''));\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    // force class for width calc. TODO?\n                    this.renderer.addClass(this.styleDummy, this.css.drawer);\n                    this.renderer.addClass(this.styleDummy, this.css.mini);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.removeClass(this.styleDummy, this.css.drawer);\n                    this.renderer.removeClass(this.styleDummy, this.css.mini);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    // force class for width calc. TODO?\n                    this.renderer.addClass(this.styleDummy, this.css.drawer);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.removeClass(this.styleDummy, this.css.drawer);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                if (this.drawer) {\n                    this.renderer.setStyle(this.drawer, 'width', width);\n                }\n            });\n        } else {\n            this.renderer.setStyle(this.drawer, 'width', width);\n        }\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver && this.platformUtil.isBrowser) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        if (!this.platformUtil.isBrowser) {\n            return;\n        }\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.addClass(this.overlay, 'panning');\n            this.renderer.addClass(this.drawer, 'panning');\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.removeClass(this.overlay, 'panning');\n        this.renderer.removeClass(this.drawer, 'panning');\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setStyle(this.drawer, '-webkit-transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}\n *\n * @context {@link IgxTicksComponent.context}\n */\n@Directive({\n    selector: '[igxSliderTickLabel]'\n})\nexport class IgxTickLabelTemplateDirective {}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nexport enum IgxSliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\n/**\n * Slider Tick labels Orientation\n */\nexport enum TickLabelsOrientation {\n    Horizontal,\n    TopToBottom,\n    BottomToTop\n}\n\n/**\n * Slider Ticks orientation\n */\nexport enum TicksOrientation {\n    Top,\n    Bottom,\n    Mirror\n}\n","import {\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\nimport { Subject } from 'rxjs';\nimport { IgxDirectionality } from '../../services/direction/directionality';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _isActive = false;\n    private _isPressed = false;\n    private _destroy$ = new Subject<boolean>();\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public deactiveState: boolean;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @Output()\n    public onHoverChange = new EventEmitter<boolean>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.z-index')\n    public zIndex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb--pressed')\n    public get thumbPressedClass() {\n        return this.isActive && this._isPressed;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor(private _elementRef: ElementRef, private _dir: IgxDirectionality) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.onHoverChange.emit(true);\n    }\n\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.onHoverChange.emit(false);\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n        this.zIndex = 0;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n        this.zIndex = 1;\n    }\n\n    /**\n     * Show thumb label and ripple.\n     */\n    public showThumbIndicators() {\n        this.toggleThumbIndicators(true);\n    }\n\n    /**\n     * Hide thumb label and ripple.\n     */\n    public hideThumbIndicators() {\n        this.toggleThumbIndicators(false);\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = this._dir.rtl ? this.thumbPositionX - mouseX : mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thàn a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n\n    private toggleThumbIndicators(visible: boolean) {\n        this._isPressed = visible;\n\n        if (this.continuous || this.deactiveState) {\n            this._isActive = false;\n        } else {\n            this._isActive = visible;\n        }\n\n    }\n}\n","import { Component, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';\nimport { SliderHandle } from '../slider.common';\n\n@Component({\n    selector: 'igx-thumb-label',\n    templateUrl: 'thumb-label.component.html'\n})\nexport class IgxThumbLabelComponent {\n    private _active: boolean;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public deactiveState: boolean;\n\n    @HostBinding('class.igx-slider__label-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__label-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__label-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this.active;\n    }\n\n    @HostBinding('class.igx-slider__label-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this.active;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get active() {\n        return this._active;\n    }\n\n    public set active(val: boolean) {\n        if (this.continuous || this.deactiveState) {\n            this._active = false;\n        } else {\n            this._active = val;\n        }\n    }\n}\n","import { Component, Input, TemplateRef, HostBinding } from '@angular/core';\nimport { TicksOrientation, TickLabelsOrientation } from '../slider.common';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-ticks',\n    templateUrl: 'ticks.component.html',\n})\nexport class IgxTicksComponent {\n    @Input()\n    public primaryTicks: number;\n\n    @Input()\n    public secondaryTicks: number;\n\n    @Input()\n    public primaryTickLabels: boolean;\n\n    @Input()\n    public secondaryTickLabels: boolean;\n\n    @Input()\n    public ticksOrientation: TicksOrientation;\n\n    @Input()\n    public tickLabelsOrientation: TickLabelsOrientation;\n\n    @Input()\n    public maxValue: number;\n\n    @Input()\n    public minValue: number;\n\n    @Input()\n    public labelsViewEnabled: boolean;\n\n    @Input()\n    public labels: Array<number | string | boolean | null | undefined>;\n\n    @Input()\n    public tickLabelTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks')\n    public ticksClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks--top')\n    public get ticksTopClass() {\n        return this.ticksOrientation === TicksOrientation.Top;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks--tall')\n    public get hasPrimaryClass() {\n        return this.primaryTicks > 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__tick-labels--top-bottom')\n    public get labelsTopToBottomClass() {\n        return this.tickLabelsOrientation === TickLabelsOrientation.TopToBottom;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__tick-labels--bottom-top')\n    public get labelsBottomToTopClass() {\n        return this.tickLabelsOrientation === TickLabelsOrientation.BottomToTop;\n    }\n\n    /**\n     * Returns the template context corresponding to\n     * {@link IgxTickLabelTemplateDirective}\n     *\n     * ```typescript\n     * return {\n     *  $implicit //returns the value per each tick label.\n     *  isPrimery //returns if the tick is primary.\n     *  labels // returns the {@link labels} collection.\n     *  index // returns the index per each tick of the whole sequence.\n     * }\n     * ```\n     *\n     * @param idx the index per each tick label.\n     */\n    public context(idx: number): any {\n        return {\n            $implicit: this.tickLabel(idx),\n            isPrimary: this.isPrimary(idx),\n            labels: this.labels,\n            index: idx\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public get ticksLength() {\n        return this.primaryTicks > 0 ?\n                ((this.primaryTicks - 1) * this.secondaryTicks) + this.primaryTicks :\n                this.secondaryTicks > 0 ? this.secondaryTicks : 0;\n    }\n\n    public hiddenTickLabels(idx: number) {\n        return this.isPrimary(idx) ? this.primaryTickLabels : this.secondaryTickLabels;\n    }\n\n    /**\n     * @hidden\n     */\n    public isPrimary(idx: number) {\n        return this.primaryTicks <= 0 ? false :\n            idx % (this.secondaryTicks + 1) === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public tickLabel(idx: number) {\n        if (this.labelsViewEnabled) {\n            return this.labels[idx];\n        }\n\n        const labelStep = (Math.max(this.minValue, this.maxValue) - Math.min(this.minValue, this.maxValue)) / (this.ticksLength - 1);\n        const labelVal = labelStep * idx;\n\n        return (this.minValue + labelVal).toFixed(2);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'spreadTickLabels'\n})\nexport class IgxTickLabelsPipe implements PipeTransform {\n\n\n    public transform(labels: Array<string | number | boolean | null | undefined>, secondaryTicks: number) {\n        if (!labels) {\n            return;\n        }\n\n        const result = [];\n        labels.forEach(item => {\n            result.push(item);\n            for (let i = 0; i < secondaryTicks; i++) {\n                result.push('');\n            }\n        });\n\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ChangeDetectorRef,\n    OnChanges,\n    NgZone,\n    AfterContentInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, Observable, timer, pipe } from 'rxjs';\nimport { takeUntil, throttleTime } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    IgxSliderType,\n    ISliderValueChangeEventArgs,\n    TicksOrientation,\n    TickLabelsOrientation,\n    IgxTickLabelTemplateDirective\n} from './slider.common';\nimport { IgxThumbLabelComponent } from './label/thumb-label.component';\nimport { IgxTicksComponent } from './ticks/ticks.component';\nimport { IgxTickLabelsPipe } from './ticks/tick.pipe';\nimport { resizeObservable } from '../core/utils';\nimport { IgxDirectionality } from '../services/direction/directionality';\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider/slider)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html'\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentInit,\n    OnChanges,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _continuous = false;\n    private _disabled = false;\n    private _step = 1;\n    private _value: number | IRangeSliderValue = 0;\n\n    // ticks\n    private _primaryTicks = 0;\n    private _secondaryTicks = 0;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = IgxSliderType.SLIDER;\n\n    private _destroyer$ = new Subject<boolean>();\n    private _indicatorsDestroyer$ = new Subject<boolean>();\n    private _indicatorsTimer: Observable<any>;\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks', { static: true })\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxThumbLabelComponent)\n    private labelRefs: QueryList<IgxThumbLabelComponent> = new QueryList<IgxThumbLabelComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    private get labelFrom(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.FROM);\n    }\n\n    private get labelTo(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track', { static: true })\n    public trackRef: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTickLabelTemplateDirective, { read: TemplateRef, static: false })\n    public tickLabelTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`.\n     * The slider can be IgxSliderType.SLIDER(default) or IgxSliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`.\n     * The slider can be IgxSliderType.SLIDER(default) or IgxSliderType.RANGE.\n     * ```typescript\n     * sliderType: IgxSliderType = IgxSliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: IgxSliderType) {\n        this._type = type;\n\n        if (type === IgxSliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     * An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     * ```html\n     * <igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = this.valueToFraction(this.upperBound, 0, 1);\n        this._pMin = this.valueToFraction(this.lowerBound, 0, 1);\n\n        this.positionHandlersAndUpdateTrack();\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * ```typescript\n     * return {\n     *  $implicit // returns the value of the label,\n     *  labels // returns the labels collection the user has passed.\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.normalizeByStep(this.value);\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     * An @Input property that disables or enables UI interaction.\n     * ```html\n     * <igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n\n        if (this._hasViewInit) {\n            this.changeThumbFocusableState(disable);\n        }\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._continuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not show bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        this._continuous = continuous;\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the minimal value of the `IgxSliderComponent`.\n     * ```typescript\n     *  @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let sliderMin = this.slider.minValue;\n     * }\n     * ```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            return;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.positionHandlersAndUpdateTrack();\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let sliderMax = this.slider.maxValue;\n     * }\n     *  ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            return;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.positionHandlersAndUpdateTrack();\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let sliderLowBound = this.slider.lowerBound;\n     * }\n     * ```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh min travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound, 0, 1);\n        this.positionHandlersAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     * }\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound, 0, 1);\n        this.positionHandlersAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link IgxSliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link IgxSliderType.RANGE}.\n     * The returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * public sliderValue(event){\n     *     let sliderVal = this.slider.value;\n     * }\n     * ```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link IgxSliderType.SLIDER}.\n     * The argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link IgxSliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     * rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     * };\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (this._hasViewInit) {\n            this.setValue(value, true);\n            this.positionHandlersAndUpdateTrack();\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * Returns the number of the presented primary ticks.\n     * ```typescript\n     * const primaryTicks = this.slider.primaryTicks;\n     * ```\n     */\n    @Input()\n    public get primaryTicks() {\n        if (this.labelsViewEnabled) {\n            return this._primaryTicks = this.labels.length;\n        }\n        return this._primaryTicks;\n    }\n\n    /**\n     * Sets the number of primary ticks. If {@link @labels} is enabled, this property won't function.\n     * Insted enable ticks by {@link showTicks} property.\n     * ```typescript\n     * this.slider.primaryTicks = 5;\n     * ```\n     */\n    public set primaryTicks(val: number) {\n        if (val <= 1) {\n            return;\n        }\n\n        this._primaryTicks = val;\n    }\n\n    /**\n     * Returns the number of the presented secondary ticks.\n     * ```typescript\n     * const secondaryTicks = this.slider.secondaryTicks;\n     * ```\n     */\n    @Input()\n    public get secondaryTicks() {\n        return this._secondaryTicks;\n    }\n\n    /**\n     * Sets the number of secondary ticks. The property functions even when {@link labels} is enabled,\n     * but all secondary ticks won't present any tick labels.\n     * ```typescript\n     * this.slider.secondaryTicks = 5;\n     * ```\n     */\n    public set secondaryTicks(val: number) {\n        if (val < 1 ) {\n            return;\n        }\n\n        this._secondaryTicks = val;\n    }\n\n    /**\n     * Show/hide slider ticks\n     * ```html\n     * <igx-slier [showTicks]=\"true\" [primaryTicks]=\"5\"></igx-slier>\n     * ```\n     */\n    @Input()\n    public showTicks = false;\n\n    /**\n     * show/hide primary tick labels\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [primaryTickLabels]=\"false\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public primaryTickLabels = true;\n\n    /**\n     * show/hide secondary tick labels\n     * ```html\n     * <igx-slider [secondaryTicks]=\"5\" [secondaryTickLabels]=\"false\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public secondaryTickLabels = true;\n\n    /**\n     * Changes ticks orientation:\n     * bottom - The default orienation, below the slider track.\n     * top - Above the slider track\n     * mirror - combines top and bottom orientation.\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [ticksOrientation]=\"ticksOrientation\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public ticksOrientation: TicksOrientation = TicksOrientation.Bottom;\n\n    /**\n     * Changes tick labels rotation:\n     * horizontal - The default rotation\n     * toptobottom - Rotates tick labels vertically to 90deg\n     * bottomtotop - Rotate tick labels vertically to -90deg\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [secondaryTicks]=\"3\" [tickLabelsOrientation]=\"tickLabelsOrientaiton\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public tickLabelsOrientation = TickLabelsOrientation.Horizontal;\n\n    /**\n     * @hidden\n     */\n    public get deactivateThumbLabel() {\n        return ((this.primaryTicks && this.primaryTickLabels) || (this.secondaryTicks && this.secondaryTickLabels)) &&\n            (this.ticksOrientation === TicksOrientation.Top || this.ticksOrientation === TicksOrientation.Mirror);\n    }\n\n    /**\n     * This event is emitted every time the value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     * }\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n    /**\n     * This event is emitted at the end of every slide interaction.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     * }\n     * ```\n     * ```html\n     * <igx-slider (onValueChanged)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<number | IRangeSliderValue>();\n\n\n    constructor(\n        private renderer: Renderer2,\n        private _el: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _ngZone: NgZone,\n        private _dir: IgxDirectionality) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event: PointerEvent) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbFrom;\n        activeThumb.nativeElement.setPointerCapture($event.pointerId);\n        this.showSliderIndicators();\n\n        $event.preventDefault();\n    }\n\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup', ['$event'])\n    public onPointerUp($event: PointerEvent) {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbTo;\n        activeThumb.nativeElement.releasePointerCapture($event.pointerId);\n\n        this.hideSliderIndicators();\n        this.onValueChanged.emit(this.value);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    /**\n     * Returns whether the `IgxSliderComponent` type is RANGE.\n     * ```typescript\n     *  @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let sliderRange = this.slider.isRange;\n     * }\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === IgxSliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     * }\n     * ```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     * Sets the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     *  @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *     this.slider.lowerValue = 120;\n     * }\n     * ```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     * Returns the upper value of the `IgxSliderComponent`.\n     * ```typescript\n     *  @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * public upperValue(event){\n     *     let upperValue = this.slider.upperValue;\n     * }\n     * ```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     * Sets the upper value of the `IgxSliderComponent`.\n     * ```typescript\n     *  @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * public upperValue(event){\n     *     this.slider.upperValue = 120;\n     * }\n     * ```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     * ```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     * ```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     * ```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public get showTopTicks() {\n        return this.ticksOrientation === TicksOrientation.Top ||\n            this.ticksOrientation === TicksOrientation.Mirror;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showBottomTicks() {\n        return this.ticksOrientation === TicksOrientation.Bottom ||\n            this.ticksOrientation === TicksOrientation.Mirror;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes) {\n        if (changes.minValue && changes.maxValue &&\n                changes.minValue.currentValue < changes.maxValue.currentValue) {\n            this._maxValue = changes.maxValue.currentValue;\n            this._minValue = changes.minValue.currentValue;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    public ngAfterContentInit() {\n        this.setValue(this._value, false);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlersAndUpdateTrack();\n        this.setTickInterval();\n        this.changeThumbFocusableState(this.disabled);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const thumbFrom = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            this.positionHandler(thumbFrom, null, this.lowerValue);\n            this.subscribeTo(thumbFrom, this.thumbChanged.bind(this));\n            this.changeThumbFocusableState(this.disabled);\n        });\n\n        this.labelRefs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const labelFrom = this.labelRefs.find((label: IgxThumbLabelComponent) => label.type === SliderHandle.FROM);\n            this.positionHandler(null, labelFrom, this.lowerValue);\n        });\n\n        this._ngZone.runOutsideAngular(() => {\n            resizeObservable(this._el.nativeElement).pipe(\n                throttleTime(40),\n                takeUntil(this._destroyer$)).subscribe(() => this._ngZone.run( () => {\n                    this.stepDistance = this.calculateStepDistance();\n                }));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroyer$.next(true);\n        this._destroyer$.complete();\n\n        this._indicatorsDestroyer$.next(true);\n        this._indicatorsDestroyer$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: IRangeSliderValue | number): void {\n        if (!value) {\n            return;\n        }\n\n        this.normalizeByStep(value);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n     public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlersAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlersAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    public onHoverChange(state: boolean) {\n        return state ? this.showSliderIndicators() : this.hideSliderIndicators();\n    }\n\n\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n        return value;\n    }\n\n    private findClosestThumb(event: PointerEvent) {\n        if (this.isRange) {\n            this.closestHandle(event);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this._upperValue === undefined) {\n            this._upperValue = this.lowerBound;\n        }\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandler(thumbHandle: ElementRef, labelHandle: ElementRef, position: number) {\n        const percent = `${this.valueToFraction(position) * 100}%`;\n        const dir = this._dir.rtl ? 'right' : 'left';\n\n        if (thumbHandle) {\n            thumbHandle.nativeElement.style[dir] = percent;\n        }\n\n        if (labelHandle) {\n            labelHandle.nativeElement.style[dir] = percent;\n        }\n    }\n\n    private positionHandlersAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandler(this.thumbTo, this.labelTo, this.value as number);\n        } else {\n            this.positionHandler(this.thumbTo, this.labelTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandler(this.thumbFrom, this.labelFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    private closestHandle(event: PointerEvent) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = event.clientX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (fromOffset === toOffset && toOffset < xPointer) {\n            this.thumbTo.nativeElement.focus();\n        } else if (fromOffset === toOffset && toOffset > xPointer ) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval() {\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n\n        const renderCallbackExecution = !this.continuous ? this.generateTickMarks('white', interval) : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', renderCallbackExecution);\n    }\n\n    private showSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this._indicatorsTimer) {\n            this._indicatorsDestroyer$.next(true);\n            this._indicatorsTimer = null;\n        }\n\n        this.thumbTo.showThumbIndicators();\n        this.labelTo.active = true;\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbIndicators();\n        }\n\n        if (this.labelFrom) {\n            this.labelFrom.active = true;\n        }\n\n    }\n\n    private hideSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        this._indicatorsTimer = timer(this.thumbLabelVisibilityDuration);\n        this._indicatorsTimer.pipe(takeUntil(this._indicatorsDestroyer$)).subscribe(() => {\n            this.thumbTo.hideThumbIndicators();\n            this.labelTo.active = false;\n            if (this.thumbFrom) {\n                this.thumbFrom.hideThumbIndicators();\n            }\n\n            if (this.labelFrom) {\n                this.labelFrom.active = false;\n            }\n        });\n    }\n\n    private toggleSliderIndicators() {\n        this.showSliderIndicators();\n        this.hideSliderIndicators();\n    }\n\n    private changeThumbFocusableState(state: boolean) {\n        const value = state ? -1 : 1;\n\n        if (this.isRange) {\n            this.thumbFrom.tabindex = value;\n        }\n\n        this.thumbTo.tabindex = value;\n\n        this._cdr.detectChanges();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    /**\n     * @hidden\n     * Normalizе the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep(value: IRangeSliderValue | number) {\n        if (this.isRange) {\n            this.value =  {\n                lower: (value as IRangeSliderValue).lower - ((value as IRangeSliderValue).lower % this.step),\n                upper: (value as IRangeSliderValue).upper - ((value as IRangeSliderValue).upper % this.step)\n            };\n        } else {\n            this.value = (value as number) - ((value as number) % this.step);\n        }\n\n        this._cdr.detectChanges();\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            trackLeftIndention = this._dir.rtl ? -trackLeftIndention : trackLeftIndention;\n            this.renderer.setStyle(this.trackRef.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.trackRef.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroyer$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    public setValue(value: number | IRangeSliderValue, triggerChange: boolean) {\n        let res;\n        if (!this.isRange) {\n            this.upperValue = value as number - (value as number % this.step);\n            res = this.upperValue;\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n            res = {lower: this.lowerValue, upper: this.upperValue};\n        }\n\n        if (triggerChange) {\n            this._onChangeCallback(res);\n        }\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxTickLabelTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent,\n        IgxTicksComponent,\n        IgxTickLabelsPipe],\n    exports: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxTickLabelTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent,\n        IgxTicksComponent],\n    imports: [CommonModule, FormsModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs, mkenum } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport const SwitchLabelPosition = mkenum({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nexport type SwitchLabelPosition = (typeof SwitchLabelPosition)[keyof typeof SwitchLabelPosition];\n\nexport interface IChangeSwitchEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n *\n * The Switch component is a binary choice selection component.\n *\n * @igxModule IgxSwitchModule\n *\n * @igxTheme igx-switch-theme, igx-tooltip-theme\n *\n * @igxKeywords switch, states, tooltip\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * @example\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * @hidden\n     * @internal\n     */\n    protected _value: any;\n    /**\n     * Returns a reference to the native checkbox element.\n     *\n     * @example\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     *\n     * @example\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     *\n     * @example\n     * ```typescript\n     * let labelPlaceholder = this.switch.placeholderLabel;\n     * ```\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element of the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     *\n     * @example\n     * ```html\n     * <igx-switch [value]=\"switchValue\"></igx-switch>\n     * ```\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     *\n     * @example\n     * ```html\n     * <igx-switch name=\"Switch1\"></igx-switch>\n     * ```\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     *\n     * @example\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     *\n     * @example\n     * ```html\n     *  <igx-switch [checked]=\"true\"></igx-switch>\n     * ```\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [disabled]=\"true\"><igx-switch>\n     * ```\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     *\n     * @example\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     * @hidden\n     * @internal\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IBaseEventArgs } from '../core/utils';\nimport { Subscription } from 'rxjs';\n\nexport interface ISelectTabEventArgs extends IBaseEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit, OnDestroy {\n    private _currentBottomNavId = NEXT_ID++;\n    private _panelsChanges$: Subscription;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent))\n    public viewTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabComponent))\n    public contentTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get tabs(): QueryList<IgxTabComponent> {\n        return this.hasContentTabs ? this.contentTabs : this.viewTabs;\n    }\n\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent))\n    public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${this._currentBottomNavId}`;\n\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * @hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.setPanelsAttributes();\n        this._panelsChanges$ = this.panels.changes.subscribe(() => {\n            this.setPanelsAttributes();\n        });\n\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._panelsChanges$) {\n            this._panelsChanges$.unsubscribe();\n        }\n    }\n\n    private setPanelsAttributes() {\n        const panelsArray = Array.from(this.panels);\n        for (let index = 0; index < this.panels.length; index++) {\n            const tabPanels = panelsArray[index] as IgxTabPanelComponent;\n            tabPanels.nativeElement.setAttribute('id', this.getTabPanelId(index));\n            tabPanels.nativeElement.setAttribute('aria-labelledby', this.getTabId(index));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        if (this.hasContentTabs) {\n            this.selectedIndex = args.tab.index;\n            this.contentTabs.forEach((t) => {\n                if (t !== args.tab) {\n                    this._deselectTab(t);\n                }\n            });\n        } else {\n            if (args.panel) {\n                this.selectedIndex = args.panel.index;\n                this.panels.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this._deselectPanel(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n\n    private _deselectTab(aTab: IgxTabComponent) {\n        aTab.isSelected = false;\n        this.onTabDeselected.emit({ tab: aTab, panel: null });\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabId(index: number): string {\n        return `igx-tab-${this._currentBottomNavId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabPanelId(index: number): string {\n        return `igx-tab-panel-${this._currentBottomNavId}-${index}`;\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\nexport class IgxTabPanelComponent implements AfterContentInit {\n\n    /**\n     * @hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n\n    /**\n     * @hidden\n     */\n    private _isSelected = false;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * Returns the native element of the tab-panel component\n     * ```typescript\n     *  const mytabPanelElement: HTMLElement = tabPanel.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this.relatedTab ? this.relatedTab.changesCount : 0;\n    }\n\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this._isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public relatedPanel: IgxTabPanelComponent;\n\n    /**\n     * @hidden\n     */\n    private _label: string;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedPanel ? this.relatedPanel.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     * @hidden\n     */\n    private _icon: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedPanel ? this.relatedPanel.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**\n     * @hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    private _disabled = false;\n\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    public _selected = false;\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    set isSelected(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.isSelected = newValue;\n        } else if (this._selected !== newValue) {\n            this._selected = newValue;\n            if (this._selected) {\n                this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n            }\n        }\n    }\n    get isSelected(): boolean {\n        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;\n    }\n\n    /**\n     * @hidden @internal\n     * Set to true when the tab is automatically generated from the IgxBottomNavComponent when tab panels are defined.\n     */\n    @Input()\n    public autoGenerated: boolean;\n\n    @HostBinding('class.igx-bottom-nav__menu-item--selected')\n    public get cssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--disabled')\n    public get cssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item')\n    public get cssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get index(): number {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /** @hidden */\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /** @hidden */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {\n            return this.relatedPanel.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    public get context(): any {\n        return this.relatedPanel ? this.relatedPanel : this;\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        if (this.relatedPanel) {\n            this.relatedPanel.select();\n        } else {\n            this._selected = true;\n            this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.autoGenerated) {\n            this.select();\n        }\n    }\n\n    public elementRef(): ElementRef {\n        return this._element;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    hasContentTabs: boolean;\n    scrollElement(element: any, scrollRight: boolean) {}\n    performSelectionChange(newTab: IgxTabItemBase) {}\n    transformContentAnimation(tab: IgxTabItemBase, duration: number) {}\n    transformIndicatorAnimation(element: HTMLElement, duration?: number) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabItemBase {\n    abstract readonly nativeTabItem: ElementRef;\n    get index(): number { return 0; }\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabsGroupBase {\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n","import {\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    AfterViewInit,\n    OnDestroy\n} from '@angular/core';\nimport { KEYS } from '../core/utils';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {\n    /**\n     * Gets the group associated with the tab.\n     * ```html\n     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n     * ```\n     */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /** @hidden */\n    private _icon: string;\n\n    /**\n     * An @Input property that sets the value of the `icon`.\n     * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n     * ```html\n     * <igx-tab-item label=\"Tab 1\" icon=\"home\">\n     * ```\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedGroup ? this.relatedGroup.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /** @hidden */\n    private _label: string;\n\n    /**\n     * An @Input property that sets the value of the `label`.\n     * ```html\n     * <igx-tabs-item label=\"Tab 2\" icon=\"folder\">\n     * ```\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedGroup ? this.relatedGroup.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     * @hidden @internal\n     * Set to true when the tab item is automatically generated from the IgxTabsComponent when tab groups are defined.\n     */\n    @Input()\n    public autoGenerated: boolean;\n\n    /** @hidden */\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /** @hidden */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected customTabTemplateDir: IgxTabItemTemplateDirective;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    private _isSelected = false;\n    private _disabled = false;\n    private _resizeObserver: ResizeObserver;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef, private _ngZone: NgZone) {\n        super();\n        this._nativeTabItem = _element;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--selected')\n    public get provideCssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--disabled')\n    public get provideCssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item')\n    public get provideCssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    ngAfterViewInit(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                this._tabs.transformIndicatorAnimation(this._nativeTabItem.nativeElement, 0);\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver.disconnect();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (this.autoGenerated) {\n            this.select();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event: KeyboardEvent) {\n        const tabsArray = this._tabs.tabs.toArray();\n        const startIndex = tabsArray.indexOf(this);\n        let finalIndex = -1;\n        let currentIndex = startIndex;\n\n        switch (event.key) {\n            case KEYS.RIGHT_ARROW:\n            case KEYS.RIGHT_ARROW_IE:\n                do {\n                    currentIndex++;\n                    if (currentIndex === tabsArray.length) {\n                        currentIndex = -1;\n                        continue;\n                    } else if ((tabsArray[currentIndex] as IgxTabItemComponent).disabled === false) {\n                        finalIndex = currentIndex;\n                        break;\n                    }\n                }\n                while (currentIndex !== startIndex);\n                break;\n            case KEYS.LEFT_ARROW:\n            case KEYS.LEFT_ARROW_IE:\n                do {\n                    currentIndex--;\n                    if (currentIndex === -1) {\n                        currentIndex = tabsArray.length;\n                        continue;\n                    } else if ((tabsArray[currentIndex] as IgxTabItemComponent).disabled === false) {\n                        finalIndex = currentIndex;\n                        break;\n                    }\n                }\n                while (currentIndex !== startIndex);\n                break;\n            case KEYS.HOME:\n                event.preventDefault();\n                finalIndex = tabsArray.find(t => (t as IgxTabItemComponent).disabled === false).index;\n                break;\n            case KEYS.END:\n                event.preventDefault();\n                finalIndex = tabsArray.slice().reverse().find(t => (t as IgxTabItemComponent).disabled === false).index;\n                break;\n            case KEYS.ENTER:\n                if (!this.autoGenerated) {\n                    this.nativeTabItem.nativeElement.click();\n                }\n                break;\n            case KEYS.SPACE:\n            case KEYS.SPACE_IE:\n                event.preventDefault();\n                if (!this.autoGenerated) {\n                    this.nativeTabItem.nativeElement.click();\n                }\n                break;\n            default:\n                break;\n        }\n\n        if (finalIndex > -1) {\n            const tab = tabsArray[finalIndex];\n            tab.nativeTabItem.nativeElement.focus();\n\n            if (this.autoGenerated) {\n                tab.select();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n     * \tGets whether the tab is disabled.\n     * ```\n     * const disabledItem = this.myTabComponent.tabs.first.disabled;\n     * ```\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    @Input()\n    get isSelected(): boolean {\n        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;\n    }\n    set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n        this._ngZone.runOutsideAngular(() => {\n            if (this._resizeObserver) {\n                if (this._isSelected) {\n                    this._resizeObserver.observe(this._element.nativeElement);\n                } else {\n                    this._resizeObserver.disconnect();\n                }\n            }\n        });\n        this.tabindex = newValue ? 0 : -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {\n            return this.relatedGroup.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return this.relatedGroup ? this.relatedGroup : this;\n    }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent extends IgxTabsGroupBase implements AfterContentInit {\n    /**\n     * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n     * ```html\n     * <igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets the value of the `icon`.\n     * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n     * ```html\n     * <igx-tabs-group label=\"Tab 1\" icon=\"home\">\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * An @Input property that sets the value of the `label`.\n     * ```html\n     * <igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n     * ```\n     */\n    @Input()\n    public label: string;\n\n    /**\n     * Sets/gets whether a tab group is selected.\n     * ```typescript\n     * this.tabGroup.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected = this.tabGroup.isSelected;\n     * ```\n     * @memberof IgxTabsGroupComponent\n     */\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this.relatedTab : null);\n        }\n    }\n\n    /**\n     * Returns the native element of the tabs-group component\n     * ```typescript\n     *  const mytabsGroupElement: HTMLElement = tabsGroup.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n    private _isSelected = false;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     * ```typescript\n     *  @ViewChild(\"MyChild\")\n     * public tab : IgxTabsGroupComponent;\n     * ngAfterViewInit(){\n     *     this.tab.select();\n     * }\n     * ```\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this.relatedTab);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabItemBase } from './tabs.common';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { mkenum, PlatformUtil } from '../core/utils';\n\nexport const IgxTabsType = mkenum({\n    FIXED: 'fixed',\n    CONTENTFIT: 'contentfit'\n});\nexport type IgxTabsType = (typeof IgxTabsType)[keyof typeof IgxTabsType];\n\nlet NEXT_TABS_ID = 0;\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n    private _currentTabsId = NEXT_TABS_ID++;\n\n    /**\n     * Provides an observable collection of all `IgxTabsGroupComponent`s.\n     * ```typescript\n     * const groupItems = this.myTabComponent.groups;\n     * ```\n     */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.\n     * ```typescript\n     * const tabItems = this.myTabComponent.contentTabs;\n     * ```\n     */\n    @ContentChildren(forwardRef(() => IgxTabItemComponent))\n    public contentTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * An @Input property that sets the value of the `selectedIndex`.\n     * Default value is 0.\n     * ```html\n     * <igx-tabs selectedIndex=\"1\">\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-tabs [(selectedIndex)]=\"model.selectedIndex\">\n     * ```\n     */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        const newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;\n        if (this._selectedIndex !== newIndex) {\n            if (this.tabs && this.tabs.length > 0) {\n                const newTab = this.tabs.toArray()[newIndex];\n                if (newTab) {\n                   this.performSelectionChange(newTab);\n                }\n            } else {\n                this._selectedIndex = newIndex;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public selectedIndexChange = new EventEmitter<number>();\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs type=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('type')\n    public type: string | IgxTabsType = 'contentfit';\n\n    /**\n     * Sets/gets the `id` of the tabs.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-tabs-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-tabs id=\"my-first-tabs\"></igx-tabs>\n     * ```\n     * @memberof IgxTabsComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tabs-${this._currentTabsId}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output()\n    public onTabItemDeselected = new EventEmitter();\n\n    /**\n     * Emitted when a tab item is selected.\n     * ```html\n     * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemSelected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output()\n    public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer', { static: true })\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { static: true })\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer', { static: true })\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tabsContainer', { static: true })\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort', { static: true })\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.viewTabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public viewTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    public get tabs(): QueryList<IgxTabItemComponent> {\n        if (this.hasContentTabs) {\n            return this.contentTabs;\n        }\n        return this.viewTabs;\n    }\n\n    /**\n     * @hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * Enables/disables the transition animation of the tabs' content. Set to `false` by default.\n     * ````html\n     * <igx-tabs [disableAnimation]=\"true\"></igx-tabs>\n     */\n    @Input()\n    public disableAnimation = false;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = -1;\n    private _resizeObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFoundInGroups = this.groups.find((group) => group.icon != null && group.label != null);\n        const iconLabelFoundInTabs = this.contentTabs.find((tab) => tab.icon != null && tab.label != null);\n        let css: string;\n        switch (IgxTabsType[this.type.toUpperCase()]) {\n            case IgxTabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef, private _ngZone: NgZone, private platformUtil: PlatformUtil) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (this._selectedIndex === -1) {\n            this.tabs.forEach((t) => {\n                if (t.isSelected) {\n                    this._selectedIndex = t.index;\n                }\n            });\n        }\n\n        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {\n            this._selectedIndex = 0;\n        }\n\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                const newTab = this.tabs.toArray()[this._selectedIndex];\n                if (newTab) {\n                    this.performSelection(newTab);\n                } else {\n                    this.hideIndicator();\n                }\n            });\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver = new ResizeObserver(() => {\n                    if (!this.hasContentTabs && this._selectedIndex >= 0 && this._selectedIndex < this.tabs.length) {\n                        const newTab = this.tabs.toArray()[this._selectedIndex];\n                        this.transformContentAnimation(newTab, 0);\n                    }\n                });\n\n                this._resizeObserver.observe(this.tabsContainer.nativeElement);\n            });\n        }\n\n        this.setGroupsAttributes();\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.setGroupsAttributes();\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n        if (this._resizeObserver) {\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver.disconnect();\n            });\n        }\n    }\n\n    private setGroupsAttributes() {\n        const groupsArray = Array.from(this.groups);\n        for (let index = 0; index < this.groups.length; index++) {\n            const tabsGroup = groupsArray[index] as IgxTabsGroupComponent;\n            tabsGroup.nativeElement.setAttribute('id', this.getTabsGroupId(index));\n            tabsGroup.nativeElement.setAttribute('aria-labelledby', this.getTabItemId(index));\n        }\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        requestAnimationFrame(() => {\n            const currentTab = this.tabs.toArray()[this.selectedIndex];\n            if (currentTab) {\n                this.performSelectionChange(currentTab);\n            } else if (this.selectedIndex >= this.tabs.length) {\n                this.performSelectionChange(this.tabs.last);\n            } else {\n                this.hideIndicator();\n            }\n        });\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public performSelectionChange(newTab: IgxTabItemBase): void {\n        const oldTab = this.selectedTabItem;\n        if (oldTab) {\n            this.performDeselection(oldTab);\n        }\n        if (newTab) {\n            this.performSelection(newTab);\n        } else {\n            // if there is no new selected tab hide the selection indicator\n            this.hideIndicator();\n        }\n        this.selectedIndexChange.emit(this._selectedIndex);\n    }\n\n    private performDeselection(oldTab: IgxTabItemBase): void {\n        oldTab.setSelectedInternal(false);\n        const oldTabRelatedGroup = this.groups.toArray()[oldTab.index];\n        if (oldTabRelatedGroup) {\n            oldTabRelatedGroup.setSelectedInternal(false);\n        }\n        this._selectedIndex = -1;\n        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });\n    }\n\n    private performSelection(newTab: IgxTabItemBase): void {\n        newTab.setSelectedInternal(true);\n        this._selectedIndex = newTab.index;\n\n        let newTabRelatedGroup = null;\n        if (!this.hasContentTabs && this.groups) {\n            newTabRelatedGroup = this.groups.toArray()[newTab.index];\n            if (newTabRelatedGroup) {\n                newTabRelatedGroup.setSelectedInternal(true);\n            }\n        }\n\n        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });\n\n        requestAnimationFrame(() => {\n            const transitionDuration  =  this.disableAnimation ? 0 : 0.2;\n            // bring the new selected tab into view if it is not\n            this.bringNewTabIntoView(newTab);\n            // animate the new selection indicator\n            this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);\n            // animate the new tab's group content\n            if (!this.hasContentTabs) {\n                this.transformContentAnimation(newTab, transitionDuration);\n            }\n        });\n    }\n\n    private bringNewTabIntoView(newTab: IgxTabItemBase): void {\n        const tabNativeElement = newTab.nativeTabItem.nativeElement;\n\n        // Scroll left if there is need\n        if (tabNativeElement.offsetLeft < this.offset) {\n            this.scrollElement(tabNativeElement, false);\n        }\n\n        // Scroll right if there is need\n        const viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;\n        const delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this.scrollElement(tabNativeElement, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabItemId(index: number): string {\n        return `igx-tab-item-${this._currentTabsId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabsGroupId(index: number): string {\n        return `igx-tabs-group-${this._currentTabsId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    // animation for the new panel/group (not needed for tab only mode)\n    public transformContentAnimation(tab: IgxTabItemBase, duration: number): void {\n        const contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;\n        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n        this.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    /**\n     * @hidden\n     */\n    public transformIndicatorAnimation(element: HTMLElement, duration = 0.3): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'visible';\n            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n            this.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n            this.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n        }\n    }\n\n    public hideIndicator(): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'hidden';\n        }\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport enum TimeParts {\n    Hour = 'hour',\n    Minute = 'minute',\n    Seconds = 'seconds',\n    amPM = 'ampm'\n}\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    secondsList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedSeconds: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showSecondsList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextSeconds();\n    prevSeconds();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollSecondsIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(\n        @Inject(IGX_TIME_PICKER_COMPONENT) public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef\n    ) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__secondsList')\n    get secondsCSS(): boolean {\n        return this.type === 'secondsList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'secondsList': {\n                this.timePicker.nextSeconds();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'secondsList': {\n                this.timePicker.prevSeconds();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.secondsList) {\n            this.timePicker.secondsList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1 ||\n            listName.indexOf('secondsList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.secondsList) {\n            this.timePicker.secondsList.nativeElement.focus();\n        } else if (listName.indexOf('secondsList') !== -1 && this.timePicker.secondsList\n            && listName.indexOf('minutesList') && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('secondsList') !== -1 ||\n            listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxSecondsItem]'\n})\nexport class IgxSecondsItemDirective {\n\n    @Input('igxSecondsItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedSeconds;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedSeconds && this.itemList.isActive;\n    }\n\n    get isSelectedSeconds(): boolean {\n        return this.timePicker.selectedSeconds === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollSecondsIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Pipe, PipeTransform, Inject } from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n */\n@Pipe({ name: 'displayFormat' })\nexport class TimeDisplayFormatPipe implements PipeTransform {\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        let hour, minutes, seconds, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showSecondsList) {\n            seconds = sections[sections.length - (this.timePicker.showAmPmList ? 2 : 1)];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n            hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n            minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('ss') !== -1 && seconds.indexOf(prompt) !== -1) {\n            seconds = seconds === prompt + prompt ? '00' : seconds.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('ss') === -1 && seconds !== undefined) {\n            seconds = seconds.indexOf(prompt) !== -1 ? seconds.replace(regExp, '') : seconds;\n            const secondsVal = parseInt(seconds, 10);\n            seconds = !secondsVal ? '0' : secondsVal < 10 && secondsVal !== 0 ? seconds.replace('0', '') : seconds;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n            amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = `${hour}:${minutes}:${seconds}`;\n        if (!hour) {\n            // remove the hours\n            result = result.slice(result.indexOf(':') + 1);\n        }\n        if (!minutes) {\n            if (hour) {\n                // get the hours and seconds and concat them\n                result = result.slice(0, result.indexOf(':')) +\n                    result.slice(result.lastIndexOf(':'), result.length);\n            } else {\n                // remove the minutes\n                result = result.slice(result.indexOf(':') + 1);\n            }\n        }\n        if (!seconds) {\n            // remove the seconds\n            result = result.slice(0, result.lastIndexOf(':'));\n        }\n\n        return amPM ? `${result} ${amPM}` : result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n */\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, seconds, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        // TODO: Pending refactoring.\n        value = (this.timePicker as any).displayValue;\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showSecondsList) {\n            seconds = sections[sections.length - (this.timePicker.showAmPmList ? 2 : 1)];\n            seconds = seconds.replace(regExp, '');\n\n            const leadZeroSeconds = (parseInt(seconds, 10) < 10 && !seconds.startsWith('0')) || seconds === '0';\n            seconds = leadZeroSeconds ? '0' + seconds : seconds;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = `${hour}:${minutes}:${seconds}`;\n        if (!hour) {\n            // remove the hours\n            result = result.slice(result.indexOf(':') + 1);\n        }\n        if (!minutes) {\n            if (hour) {\n                // get the hours and seconds and concat them\n                result = result.slice(0, result.indexOf(':')) +\n                    result.slice(result.lastIndexOf(':'), result.length);\n            } else {\n                // remove the minutes\n                result = result.slice(result.indexOf(':') + 1);\n            }\n        }\n        if (!seconds) {\n            // remove the seconds\n            result = result.slice(0, result.lastIndexOf(':'));\n        }\n\n        return amPM ? `${result} ${amPM}` : result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit,\n    Injector,\n    ChangeDetectorRef,\n    AfterViewChecked\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxMinuteItemDirective,\n    IgxSecondsItemDirective,\n    IgxItemListDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler, Subscription } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT, TimeParts } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, IBaseEventArgs, IBaseCancelableBrowserEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\n\n\nlet NEXT_ID = 0;\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\nconst noop = () => { };\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\n\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit,\n    AfterViewChecked {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     * public date: Date = new Date(Date.now());\n     *  //...\n     * <igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n    /**\n     * @hidden @internal\n     */\n    timeParts: any = Object.assign({}, TimeParts);\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     * @ViewChild(\"MyPick\")\n     * public pick: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n     */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n     */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n     */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of cancel button.\n     */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes: 1, seconds: 1}`\n     * ```html\n     * <igx-time-picker [itemsDelta]=\"{hours:3, minutes:5, seconds:10}\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set itemsDelta(value) {\n        this._itemsDelta = { hours: 1, minutes: 1, seconds: 1, ...value };\n    }\n\n    get itemsDelta(): { hours: number, minutes: number, seconds: number } {\n        return this._itemsDelta;\n    }\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     * ```html\n     * public min: string = \"09:00\";\n     *  //..\n     * <igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     * ```html\n     * public max: string = \"18:00\";\n     *  //..\n     * <igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     * The seconds, minutes and hour spinning will wrap around by default.\n     * ```html\n     * <igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     * <igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `s` : seconds field without leading zero <br>\n     * `ss` : seconds field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     * <igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00:00 LL' : '00:00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.trimMask();\n        }\n\n        if (!this.showSecondsList) {\n            this.trimMask();\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n\n        this.determineCursorPos();\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     * ```html\n     * public mode = InteractionMode.DROPDOWN;\n     *  //..\n     * <igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: true,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = value;\n    }\n\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings ? this._overlaySettings :\n            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);\n    }\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     * ```typescript\n     *  @ViewChild(\"toast\")\n     * private toast: IgxToastComponent;\n     * public onValueChanged(timepicker){\n     *     this.toast.show()\n     * }\n     *  //...\n     *  ```\n     *  ```html\n     * <igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     * <igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     * public min: string = \"09:00\";\n     * public max: string = \"18:00\";\n     *  @ViewChild(\"toast\")\n     * private toast: IgxToastComponent;\n     * public onValidationFailed(timepicker){\n     *     this.toast.show();\n     * }\n     *  //...\n     *  ```\n     *  ```html\n     * <igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     * <igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('secondsList')\n    public secondsList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef, static: true })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef, static: true })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxLabelDirective)\n    public labelDirective: IgxLabelDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _inputElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective, { read: IgxInputDirective })\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective })\n    private _inputDirectiveUserTemplate: IgxInputDirective;\n\n    @ViewChild(IgxInputGroupComponent, { read: IgxInputGroupComponent })\n    private _inputGroup: IgxInputGroupComponent;\n\n    private _overlaySettings: OverlaySettings;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n\n    /**\n     * @hidden\n     */\n    public _secondsItems = [];\n\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n     */\n    public cleared = false;\n\n    /**\n     * @hidden\n     */\n    public isNotEmpty = false;\n\n    /**\n     * @hidden\n     */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n\n    /**\n     * @hidden\n     */\n    public selectedSeconds: string;\n\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    /** @hidden @internal */\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n    private _itemsDelta: { hours: number, minutes: number, seconds: number } = { hours: 1, minutes: 1, seconds: 1 };\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n    private _isSecondsListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _secondsView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedSeconds: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _hoursPos = new Set();\n    private _minutesPos = new Set();\n    private _secondsPos = new Set();\n    private _amPmPos = new Set();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this._value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /** @hidden @internal */\n    applyDisabledStyleForItem(period: string, value: string) {\n        if (!this.minValue || !this.maxValue) {\n            return false;\n        }\n        const minValueDate: Date = this.convertMinMaxValue(this.minValue);\n        const maxValueDate: Date = this.convertMinMaxValue(this.maxValue);\n        let hour: number = parseInt(this.selectedHour, 10);\n        let minute: number = parseInt(this.selectedMinute, 10);\n        let seconds: number = parseInt(this.selectedSeconds, 10);\n        let amPM: string = this.selectedAmPm;\n        const date = new Date(minValueDate);\n        switch (period) {\n            case TimeParts.Hour:\n                hour = parseInt(value, 10);\n                break;\n\n            case TimeParts.Minute:\n                minute = parseInt(value, 10);\n                break;\n\n            case TimeParts.Seconds:\n                seconds = parseInt(value, 10);\n                break;\n\n            case TimeParts.amPM:\n                amPM = value;\n                break;\n        }\n\n        if (amPM === 'PM') {\n            hour += 12;\n        }\n        date.setHours(hour);\n        date.setMinutes(minute);\n        date.setSeconds(seconds);\n        return date < minValueDate || date > maxValueDate;\n\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    //#endregion\n\n    private trimMask(): void {\n        this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n    }\n\n    /**\n     * @hidden\n     */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     * ```typescript\n     * @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     * }\n     * ```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get secondsView(): string[] {\n        return this._secondsView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showSecondsList(): boolean {\n        return this.format.indexOf('s') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validSecondsEntries(): any[] {\n        const secondsEntries = [];\n        for (let i = 0; i < 60; i++) {\n            secondsEntries.push(i);\n        }\n        return secondsEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        this._generateSeconds();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n        this._ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.toggleRef && this._inputGroup) {\n            this.toggleRef.element.style.width = this._inputGroup.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    this._updateValidityOnBlur();\n                }\n            });\n\n            this.determineCursorPos();\n\n            if (this._ngControl) {\n                this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            }\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // if one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of the time picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog(this.getInputGroupElement());\n    }\n\n    constructor(\n        private _injector: Injector,\n        private _cdr: ChangeDetectorRef) { }\n\n    private determineCursorPos(): void {\n        this.clearCursorPos();\n        for (const char of this.format) {\n            switch (char) {\n                case 'H':\n                case 'h':\n                    this._hoursPos.size === 0 ? this._hoursPos.add(this.format.indexOf(char)) :\n                        this._hoursPos.add(this.format.lastIndexOf(char));\n                    this._hoursPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'M':\n                case 'm':\n                    this._minutesPos.size === 0 ? this._minutesPos.add(this.format.indexOf(char)) :\n                        this._minutesPos.add(this.format.lastIndexOf(char));\n                    this._minutesPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'S':\n                case 's':\n                    this._secondsPos.size === 0 ? this._secondsPos.add(this.format.indexOf(char)) :\n                        this._secondsPos.add(this.format.lastIndexOf(char));\n                    this._secondsPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'T':\n                case 't':\n                    this._amPmPos.size === 0 ? this._amPmPos.add(this.format.indexOf(char)) :\n                        this._amPmPos.add(this.format.lastIndexOf(char));\n                    this._amPmPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n            }\n        }\n    }\n\n    private clearCursorPos() {\n        this._hoursPos.forEach(v => this._hoursPos.delete(v));\n        this._minutesPos.forEach(v => this._minutesPos.delete(v));\n        this._secondsPos.forEach(v => this._secondsPos.delete(v));\n        this._amPmPos.forEach(v => this._amPmPos.delete(v));\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n            const leadZeroSeconds = (item < 10 && this.format.indexOf('ss') !== -1);\n\n            const leadZero = {\n                hour: leadZeroHour,\n                minute: leadZeroMinute,\n                seconds: leadZeroSeconds\n            }[viewType];\n\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedSeconds, formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const seconds = value.getSeconds();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            formattedSeconds = seconds < 10 && format.indexOf('ss') !== -1 ? '0' + seconds : `${seconds}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('ss', formattedSeconds).replace('s', formattedSeconds)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateSecondsView(start: any, end: any): void {\n        this._secondsView = this._viewToString(this._secondsItems.slice(start, end), 'seconds');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateSeconds(): void {\n        const secondsItemsCount = 60 / this.itemsDelta.seconds;\n\n        if (secondsItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._secondsItems);\n            this._isSecondsListLoop = false;\n        }\n\n        for (let i = 0; i < secondsItemsCount; i++) {\n            this._secondsItems.push(i * this.itemsDelta.seconds);\n        }\n\n        if (secondsItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._secondsItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        if (this.selectedSeconds) {\n            date.setSeconds(parseInt(this.selectedSeconds, 10));\n        }\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n            this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    /** @hidden @internal */\n    public convertMinMaxValue(value: string): Date {\n        if (!value) {\n            return;\n        }\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, seconds, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showSecondsList) {\n            seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            date.setSeconds(parseInt(seconds, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this.convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this.convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n        let validS = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showSecondsList) {\n            const seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            validS = this.validSecondsEntries.indexOf(parseInt(seconds.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM && validS;\n    }\n\n    private _getCursorPosition(): number {\n        return this._inputElementRef.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this._inputElementRef.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _spinSeconds(currentVal: Date, sDelta: number, sign: number) {\n        let seconds = currentVal.getSeconds() + (sign * sDelta);\n\n        if (seconds < 0 || seconds >= 60) {\n            seconds = this.isSpinLoop ? seconds - (sign * 60) : currentVal.getSeconds();\n        }\n\n        currentVal.setSeconds(seconds);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showSecondsList) {\n                this.selectedSeconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedSeconds === undefined) {\n            this.selectedSeconds = !this.showSecondsList && this.value ? this.value.getSeconds().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedSeconds = this.selectedSeconds;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateSecondsView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedSeconds) {\n            this.scrollSecondsIntoView(this.selectedSeconds);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            } else if (this.secondsList) {\n                this.secondsList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this.convertMinMaxValue(this.displayValue);\n\n        if (this.displayValue === this.parseMask(false)) {\n            return;\n        }\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            const input = this._inputDirective || this._inputDirectiveUserTemplate;\n            if (this._inputGroup.isFocused) {\n                input.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                input.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._inputElementRef ? this._inputElementRef.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public getInputGroupElement() {\n        return this._inputGroup ? this._inputGroup.element.nativeElement : null;\n    }\n\n\n    /**\n     * opens the dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.toggleRef.collapsed) {\n            return this._onDropDownClosed();\n        }\n        const settings = this.overlaySettings;\n\n        if (target && settings && settings.positionStrategy) {\n            settings.target = target;\n        }\n        if (this.outlet) {\n            settings.outlet = this.outlet;\n        }\n\n        this.toggleRef.open(settings);\n        this._initializeContainer();\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     * scrhintoView(picker) {\n     * picker.scrollHourIntoView('2');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrhintoView(picker)\"></igx-time-picker>\n     * ```\n     * @param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     * scrMintoView(picker) {\n     * picker.scrollMinuteIntoView('3');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrMintoView(picker)\"></igx-time-picker>\n     * ```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a seconds item into view.\n     * ```typescript\n     * scrMintoView(picker) {\n     * picker.scrollSecondsIntoView('4');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrMintoView(picker)\"></igx-time-picker>\n     * ```\n     * @param item to be scrolled in view.\n     */\n    public scrollSecondsIntoView(item: string): void {\n        if (this.showSecondsList) {\n            const secondsIntoView = this._scrollItemIntoView(item,\n                this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n            if (secondsIntoView) {\n                this._secondsView = secondsIntoView.view;\n                this.selectedSeconds = secondsIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     * scrAmPmIntoView(picker) {\n     * picker.scrollAmPmIntoView('PM');\n     * }\n     *  ```\n     * ```html\n     * <igx-time-picker #picker format=\"h:mm tt\" (onOpened)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     * ```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextSeconds() {\n        const nextSeconds = this._nextItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n        this._secondsView = nextSeconds.view;\n        this.selectedSeconds = nextSeconds.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevSeconds() {\n        const prevSeconds = this._prevItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n        this._secondsView = prevSeconds.view;\n        this.selectedSeconds = prevSeconds.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this.value ? this._formatTime(this.value, this.format) : this.parseMask(false);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedSeconds = this._prevSelectedSeconds;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let hInView = this.picker.hoursInView;\n     * }\n     * ```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let minInView = this.picker.minutesInView;\n     * }\n     * ```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the seconds currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let minInView = this.picker.secondsInView;\n     * }\n     * ```\n     */\n    public secondsInView(): string[] {\n        return this._secondsView.filter((seconds) => seconds !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     * ```html\n     *  @ViewChild(\"MyChild\")\n     * private picker: IgxTimePickerComponent;\n     * ngAfterViewInit(){\n     *     let ApInView = this.picker.ampmInView;\n     * }\n     * ```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     * <igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n            this.displayValue = this.parseMask(false);\n            requestAnimationFrame(() => {\n                this._setCursorPosition(0);\n            });\n            // TODO: refactoring - this.value should be null #6585\n            this.value?.setHours(0, 0, 0);\n\n            if (oldVal.getTime() !== this.value?.getTime() || this.isReset()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const inputMask: string = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = inputMask !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (inputMask.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(inputMask)) {\n                const newVal = this.convertMinMaxValue(inputMask);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: new Date(inputMask),\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || inputMask.length === 0 || !this.isNotEmpty) {\n            this.isNotEmpty = false;\n            // TODO: refactoring - this.value should be null #6585\n            this.value?.setHours(0, 0, 0);\n            this.displayValue = inputMask;\n            if (oldVal.getTime() !== this.value?.getTime() || this.isReset()) {\n                // TODO: Do not emit event when the editor is empty #6482\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        if (this.mode === InteractionMode.DropDown) {\n            const value = event.target.value;\n\n            this.isNotEmpty = value !== '';\n            this.displayValue = value;\n\n            if (value && (value !== this.parseMask() || value !== this.parseMask(false))) {\n                if (this._isEntryValid(value)) {\n                    const newVal = this.convertMinMaxValue(value);\n                    if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                        this.value = newVal;\n                    }\n                } else {\n                    const args: IgxTimePickerValidationFailedEventArgs = {\n                        timePicker: this,\n                        currentValue: value,\n                        setThroughUI: false\n                    };\n                    this.onValidationFailed.emit(args);\n                }\n            }\n        }\n\n        if (this.toggleRef.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    public mouseDown(event: MouseEvent): void {\n        // if the click is not on the input but in input group\n        // e.g. on prefix or suffix, prevent default and this way prevent blur\n        if (event.target !== this.getEditElement()) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this.convertMinMaxValue(this.minValue) : this.convertMinMaxValue('00:00');\n        const max = this.maxValue ? this.convertMinMaxValue(this.maxValue) : this.convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n            const sDelta = this.itemsDelta.seconds;\n\n            if (this.cursorOnHours(cursor, this.showHoursList)) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n            if (this.cursorOnMinutes(cursor, this.showHoursList, this.showMinutesList)) {\n                this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n            if (this.cursorOnSeconds(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList)) {\n                this.value = this._spinSeconds(currentVal, sDelta, sign);\n            }\n            if (this.cursorOnAmPm(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList, this.showAmPmList)) {\n                const sections = this.displayValue.split(/[\\s:]+/);\n                sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                this.value = currentVal;\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this._inputElementRef.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n\n    private cursorOnHours(cursor: number, showHours: boolean): boolean {\n        return showHours && this._hoursPos.has(cursor);\n    }\n\n    private cursorOnMinutes(cursor: number, showHours: boolean, showMinutes: boolean): boolean {\n        return showMinutes &&\n            (showHours && this._minutesPos.has(cursor)) ||\n            (!showHours && this._minutesPos.has(cursor));\n    }\n\n    private cursorOnSeconds(cursor: number, showHours: boolean, showMinutes: boolean, showSeconds: boolean): boolean {\n        return showSeconds &&\n            (showHours && showMinutes && this._secondsPos.has(cursor)) ||\n            ((!showHours || !showMinutes) && this._secondsPos.has(cursor)) ||\n            (!showHours && !showMinutes && this._secondsPos.has(cursor));\n    }\n\n    private cursorOnAmPm(cursor: number, showHours: boolean, showMinutes: boolean,\n        showSeconds: boolean, showAmPm: boolean): boolean {\n        return showAmPm &&\n            (showHours && showMinutes && showSeconds && this._amPmPos.has(cursor)) ||\n            ((!showHours || !showMinutes || !showSeconds) && this._amPmPos.has(cursor)) ||\n            (!showHours && (!showMinutes || !showSeconds) && this._amPmPos.has(cursor));\n    }\n\n    private _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this._inputDirective || this._inputDirectiveUserTemplate;\n        if (this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n\n    // Workaround method for #8135\n    // TODO: It must be removed in #6482\n    private isReset(): boolean {\n        return this.value?.getHours() === 0\n            && this.value?.getMinutes() === 0\n            && this.value?.getSeconds() === 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxMinuteItemDirective,\n        IgxSecondsItemDirective,\n        IgxItemListDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule,\n        IgxTextSelectionModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { CommonModule } from '@angular/common';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    HorizontalAlignment,\n    VerticalAlignment,\n    GlobalPositionStrategy,\n} from '../services/public_api';\nimport { mkenum } from '../core/utils';\n\nlet NEXT_ID = 0;\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport const IgxToastPosition = mkenum({\n    Bottom: 'bottom',\n    Middle: 'middle',\n    Top: 'top'\n});\n\nexport type IgxToastPosition = (typeof IgxToastPosition)[keyof typeof IgxToastPosition];\n\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n})\nexport class IgxToastComponent extends IgxToggleDirective\n    implements IToggleView, OnInit, OnDestroy {\n    private d$ = new Subject<boolean>();\n    private _isVisible = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toast')\n    public cssClass = 'igx-toast';\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown)=\"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding)=\"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden)=\"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Gets/Sets the container used for the toast element.\n     * @remarks\n     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     * @example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-toast [outlet]=\"outlet\"></igx-toast>\n     * //..\n     * ```\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible]=\"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-toast [(isVisible)]=\"model.isVisible\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public get isVisible() {\n        return this._isVisible;\n    }\n\n    public set isVisible(value) {\n        this._isVisible = value;\n        this.isVisibleChange.emit(this._isVisible);\n    }\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public isVisibleChange = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated Place your message in the toast content instead.\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @DeprecateProperty(`'message' property is deprecated.\n    You can use place the message in the toast content or pass it as parameter to the show method instead.`)\n    @Input()\n    public set message(value: string) {\n        this.toastMessage = value;\n    }\n\n    public get message() {\n        return this.toastMessage;\n    }\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position]=\"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = 'bottom';\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    toastMessage = '';\n\n    /**\n     * @hidden\n     */\n    private timeoutId: number;\n\n    constructor(\n        private _element: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Optional() navService: IgxNavigationService,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService\n    ) {\n        super(_element, cdr, overlayService, navService);\n    }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(message?: string): void {\n        clearInterval(this.timeoutId);\n\n        const overlaySettings: OverlaySettings = {\n            positionStrategy: new GlobalPositionStrategy({\n                horizontalDirection: HorizontalAlignment.Center,\n                verticalDirection:\n                    this.position === 'bottom'\n                        ? VerticalAlignment.Bottom\n                        : this.position === 'middle'\n                        ? VerticalAlignment.Middle\n                        : VerticalAlignment.Top,\n            }),\n            closeOnEscape: false,\n            closeOnOutsideClick: false,\n            modal: false,\n            outlet: this.outlet,\n        };\n\n        if (message !== undefined) {\n            this.toastMessage = message;\n        }\n\n        this.onShowing.emit(this);\n        super.open(overlaySettings);\n\n        if (this.autoHide) {\n            this.timeoutId = window.setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        clearInterval(this.timeoutId);\n        this.onHiding.emit(this);\n        super.close();\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        super.toggle();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.onOpened.pipe(takeUntil(this.d$)).subscribe(() => {\n            this.onShown.emit(this);\n            this.isVisible = true;\n        });\n\n        this.onClosed.pipe(takeUntil(this.d$)).subscribe(() => {\n            this.onHidden.emit(this);\n            this.isVisible = false;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.d$.next(true);\n        this.d$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule],\n})\nexport class IgxToastModule {}\n","import { Component, QueryList, Input, ContentChildren, AfterContentInit, HostBinding, Output, EventEmitter } from '@angular/core';\nimport { IgxSplitterPaneComponent } from './splitter-pane/splitter-pane.component';\n\n/**\n * An enumeration that defines the `SplitterComponent` panes orientation.\n */\nexport enum SplitterType {\n    Horizontal,\n    Vertical\n}\n\n/**\n * Provides a framework for a simple layout, splitting the view horizontally or vertically\n * into multiple smaller resizable and collapsible areas.\n * @igxModule IgxSplitterModule\n *\n * @igxParent Layouts\n *\n * @igxTheme igx-splitter-theme\n *\n * @igxKeywords splitter panes layout\n *\n * @igxGroup presentation\n *\n * @example\n * ```html\n * <igx-splitter>\n *  <igx-splitter-pane>\n *      ...\n *  </igx-splitter-pane>\n *  <igx-splitter-pane>\n *      ...\n *  </igx-splitter-pane>\n * </igx-splitter>\n * ```\n */\n@Component({\n    selector: 'igx-splitter',\n    templateUrl: './splitter.component.html'\n})\nexport class IgxSplitterComponent implements AfterContentInit {\n    private _type: SplitterType = SplitterType.Horizontal;\n    /**\n     * Gets/Sets the splitter orientation.\n     * @example\n     * ```html\n     * <igx-splitter [type]=\"type\">...</igx-splitter>\n     * ```\n     */\n    @Input()\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value;\n        if (this.panes) {\n            // if type is changed runtime, should reset sizes.\n            this.panes.forEach(x => x.size = 'auto');\n        }\n    }\n\n    /**\n     * Gets the list of splitter panes.\n     * @example\n     * ```typescript\n     * const panes = this.splitter.panes;\n     * ```\n     */\n    @ContentChildren(IgxSplitterPaneComponent, { read: IgxSplitterPaneComponent })\n    public panes!: QueryList<IgxSplitterPaneComponent>;\n\n    /**\n     * @hidden @internal\n     * Gets the `flex-direction` property of the current `SplitterComponent`.\n     */\n    @HostBinding('style.flex-direction')\n    public get direction(): string {\n        return this.type === SplitterType.Horizontal ? 'row' : 'column';\n    }\n\n    /**\n     * @hidden @internal\n     * Gets/Sets the `overflow` property of the current splitter.\n     */\n    @HostBinding('style.overflow')\n    public overflow = 'hidden';\n\n    /**\n     * @hidden @internal\n     * Sets/Gets the `display` property of the current splitter.\n     */\n    @HostBinding('style.display')\n    public display = 'flex';\n\n    /**\n     * @hidden @internal\n     * A field that holds the initial size of the main `IgxSplitterPaneComponent` in each pair of panes divided by a splitter bar.\n     */\n    private initialPaneSize!: number;\n\n    /**\n     * @hidden @internal\n     * A field that holds the initial size of the sibling pane in each pair of panes divided by a gripper.\n     * @memberof SplitterComponent\n     */\n    private initialSiblingSize!: number;\n\n    /**\n     * @hidden @internal\n     * The main pane in each pair of panes divided by a gripper.\n     */\n    private pane!: IgxSplitterPaneComponent;\n\n    /**\n     * The sibling pane in each pair of panes divided by a splitter bar.\n     */\n    private sibling!: IgxSplitterPaneComponent;\n\n    /** @hidden @internal */\n    public ngAfterContentInit(): void {\n        this.panes.forEach(pane => pane.owner = this);\n        this.assignFlexOrder();\n        this.panes.changes.subscribe(() => {\n            this.panes.forEach(pane => pane.owner = this);\n            this.assignFlexOrder();\n        });\n    }\n\n    /**\n     * @hidden @internal\n     * This method performs  initialization logic when the user starts dragging the splitter bar between each pair of panes.\n     * @param pane - the main pane associated with the currently dragged bar.\n     */\n    public onMoveStart(pane: IgxSplitterPaneComponent) {\n        const panes = this.panes.toArray();\n        this.pane = pane;\n        this.sibling = panes[panes.indexOf(this.pane) + 1];\n\n        const paneRect = this.pane.element.getBoundingClientRect();\n        this.initialPaneSize = this.type === SplitterType.Horizontal ? paneRect.width : paneRect.height;\n        if (this.pane.size === 'auto') {\n            this.pane.size = this.type === SplitterType.Horizontal ? paneRect.width : paneRect.height;\n        }\n\n        const siblingRect = this.sibling.element.getBoundingClientRect();\n        this.initialSiblingSize = this.type === SplitterType.Horizontal ? siblingRect.width : siblingRect.height;\n        if (this.sibling.size === 'auto') {\n            this.sibling.size = this.type === SplitterType.Horizontal ? siblingRect.width : siblingRect.height;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     * This method performs calculations concerning the sizes of each pair of panes when the bar between them is dragged.\n     * @param delta - The difference along the X (or Y) axis between the initial and the current point when dragging the bar.\n     */\n    public onMoving(delta: number) {\n        const min = parseInt(this.pane.minSize, 10) || 0;\n        const max = parseInt(this.pane.maxSize, 10) || this.initialPaneSize + this.initialSiblingSize;\n        const minSibling = parseInt(this.sibling.minSize, 10) || 0;\n        const maxSibling = parseInt(this.sibling.maxSize, 10) || this.initialPaneSize + this.initialSiblingSize;\n\n        const paneSize = this.initialPaneSize - delta;\n        const siblingSize = this.initialSiblingSize + delta;\n        if (paneSize < min || paneSize > max || siblingSize < minSibling || siblingSize > maxSibling) {\n            return;\n        }\n\n        this.pane.size = paneSize + 'px';\n        this.sibling.size = siblingSize + 'px';\n    }\n\n    /**\n     * @hidden @internal\n     * This method assigns the order of each pane.\n     */\n    private assignFlexOrder() {\n        let k = 0;\n        this.panes.forEach((pane: IgxSplitterPaneComponent) => {\n            pane.order = k;\n            k += 2;\n        });\n    }\n\n    /** @hidden @internal */\n    public getPaneSiblingsByOrder(order: number, barIndex: number): Array<IgxSplitterPaneComponent> {\n        const panes = this.panes.toArray();\n        const prevPane = panes[order - barIndex - 1];\n        const nextPane = panes[order - barIndex];\n        const siblings = [prevPane, nextPane];\n        return siblings;\n    }\n}\n","import { Component, HostBinding, Input, ElementRef, Output, EventEmitter } from '@angular/core';\n\n/**\n * Represents individual resizable/collapsible panes.\n * @igxModule IgxSplitterModule\n *\n * @igxParent IgxSplitterComponent\n *\n * @igxKeywords pane\n *\n * @igxGroup presentation\n *\n * @remarks\n *  Users can control the resize behavior via the min and max size properties.\n */\n@Component({\n    selector: 'igx-splitter-pane',\n    templateUrl: './splitter-pane.component.html'\n})\nexport class IgxSplitterPaneComponent {\n\n    private _size = 'auto';\n    private _collapsed = false;\n\n    /** @hidden @internal */\n    public owner;\n\n    /**\n     * Gets/Sets the size of the current pane.\n     *  * @example\n     * ```html\n     * <igx-splitter>\n     *  <igx-splitter-pane [size]='size'>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     */\n    @Input()\n    get size() {\n        return this._size;\n    }\n\n    set size(value) {\n        this._size = value;\n        this.el.nativeElement.style.flex = this.flex;\n    }\n\n    /**\n     * Gets/Sets the minimum allowed size of the current pane.\n     * @example\n     * ```html\n     * <igx-splitter>\n     *  <igx-splitter-pane [minSize]='minSize'>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     */\n    @Input()\n    public minSize!: string;\n\n    /**\n     * Gets/Set the maximum allowed size of the current pane.\n     * @example\n     * ```html\n     * <igx-splitter>\n     *  <igx-splitter-pane [maxSize]='maxSize'>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     */\n    @Input()\n    public maxSize!: string;\n\n    /**\n     * Gets/Sets whether pane is resizable.\n     * @example\n     * ```html\n     * <igx-splitter>\n     *  <igx-splitter-pane [resizable]='false'>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     * @remarks\n     * If pane is not resizable its related splitter bar cannot be dragged.\n     */\n    @Input()\n    public resizable = true;\n\n    /**\n     * Event fired when collapsed state of pane is changed.\n     * @example\n     * ```html\n     * <igx-splitter>\n     *  <igx-splitter-pane (onToggle)='onPaneToggle($event)'>...</igx-splitter-pane>\n     * </igx-splitter>\n     * ```\n     */\n    @Output()\n    public onToggle = new EventEmitter<IgxSplitterPaneComponent>();\n\n\n    /** @hidden @internal */\n    @HostBinding('style.order')\n    public order!: number;\n\n    /**\n     *\n     * @hidden @internal\n     * Gets the host native element.\n     */\n    public get element(): any {\n        return this.el.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     * Gets/Sets the `overflow`.\n     */\n    @HostBinding('style.overflow')\n    public overflow = 'auto';\n\n    /**\n     * @hidden @internal\n     * Gets/Sets the `minHeight` and `minWidth` properties of the current pane.\n     */\n    @HostBinding('style.min-height')\n    @HostBinding('style.min-width')\n    public minHeight = 0;\n\n    /**\n     * @hidden @internal\n     * Gets/Sets the `maxHeight` and `maxWidth` properties of the current `IgxSplitterPaneComponent`.\n     */\n    @HostBinding('style.max-height')\n    @HostBinding('style.max-width')\n    public maxHeight = '100%';\n\n    /**\n     * @hidden @internal\n     * Gets the `flex` property of the current `IgxSplitterPaneComponent`.\n     */\n    @HostBinding('style.flex')\n    public get flex() {\n        const grow = this.size !== 'auto' ? 0 : 1;\n        const shrink = this.size !== 'auto' ? 0 : 1;\n\n        return `${grow} ${shrink} ${this.size}`;\n    }\n\n    /**\n     * @hidden @internal\n     * Gets/Sets the 'display' property of the current pane.\n     */\n    @HostBinding('style.display')\n    public display = 'flex';\n\n    /**\n     * Gets/Sets whether current pane is collapsed.\n     * @example\n     * ```typescript\n     * const isCollapsed = pane.collapsed;\n     * ```\n     */\n    @Input()\n    public set collapsed(value) {\n        this._collapsed = value;\n        this.display = this._collapsed ? 'none' : 'flex' ;\n    }\n\n    public get collapsed() {\n        return this._collapsed;\n    }\n\n    /** @hidden @internal */\n    private _getSiblings() {\n        const panes = this.owner.panes.toArray();\n        const index = panes.indexOf(this);\n        const siblings = [];\n        if (index !== 0) {\n            siblings.push(panes[index - 1]);\n        }\n        if (index !== panes.length - 1) {\n            siblings.push(panes[index + 1]);\n        }\n        return siblings;\n    }\n\n    /**\n     * Toggles the collapsed state of the pane.\n     * @example\n     * ```typescript\n     * pane.toggle();\n     * ```\n     */\n    public toggle() {\n        // reset sibling sizes when pane collapse state changes.\n        this._getSiblings().forEach(sibling => sibling.size = 'auto');\n        this.collapsed = !this.collapsed;\n        this.onToggle.emit(this);\n    }\n\n    constructor(private el: ElementRef) { }\n}\n","import {Component, EventEmitter, HostBinding, HostListener, Input, Output} from '@angular/core';\nimport {SplitterType} from '../splitter.component';\nimport {IgxSplitterPaneComponent} from '../splitter-pane/splitter-pane.component';\nimport {DragDirection, IDragMoveEventArgs, IDragStartEventArgs} from '../../directives/drag-drop/drag-drop.directive';\n\n\nexport const SPLITTER_INTERACTION_KEYS = new Set('right down left up arrowright arrowdown arrowleft arrowup'.split(' '));\n\n/**\n * @hidden @internal\n * Represents the draggable bar that visually separates panes and allows for changing their sizes.\n */\n@Component({\n    selector: 'igx-splitter-bar',\n    templateUrl: './splitter-bar.component.html'\n})\nexport class IgxSplitBarComponent {\n    /**\n     * Set css class to the host element.\n     */\n    @HostBinding('class.igx-splitter-bar-host')\n    public cssClass = 'igx-splitter-bar-host';\n\n    /**\n     * Gets/Sets the orientation.\n     */\n    @Input()\n    public type: SplitterType = SplitterType.Horizontal;\n\n    /**\n     * Sets/gets the element order.\n     */\n    @HostBinding('style.order')\n    @Input()\n    public order!: number;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindex() {\n        return this.resizeDisallowed ? null : 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.aria-orientation')\n    public get orientation() {\n        return this.type === SplitterType.Horizontal ? 'horizontal' : 'vertical';\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get cursor() {\n        if (this.resizeDisallowed) {\n            return '';\n        }\n        return this.type === SplitterType.Horizontal ? 'col-resize' : 'row-resize';\n    }\n\n    /**\n     * Sets/gets the `SplitPaneComponent` associated with the current `SplitBarComponent`.\n     * @memberof SplitBarComponent\n     */\n    @Input()\n    public pane!: IgxSplitterPaneComponent;\n\n    /**\n     * Sets/Gets the `SplitPaneComponent` sibling components associated with the current `SplitBarComponent`.\n     */\n    @Input()\n    public siblings!: Array<IgxSplitterPaneComponent>;\n\n    /**\n     * An event that is emitted whenever we start dragging the current `SplitBarComponent`.\n     */\n    @Output()\n    public moveStart = new EventEmitter<IgxSplitterPaneComponent>();\n\n    /**\n     * An event that is emitted while we are dragging the current `SplitBarComponent`.\n     */\n    @Output()\n    public moving = new EventEmitter<number>();\n\n    /**\n     * A temporary holder for the pointer coordinates.\n     */\n    private startPoint!: number;\n\n    /**\n     * @hidden @internal\n     */\n    public get prevButtonHidden() {\n        return this.siblings[0].collapsed && !this.siblings[1].collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown', ['$event'])\n    keyEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        event.stopPropagation();\n        if (SPLITTER_INTERACTION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n            switch (key) {\n                case 'arrowup':\n                case 'up':\n                    if (this.type === SplitterType.Vertical) {\n                        if (ctrl) {\n                            this.onCollapsing(false);\n                            break;\n                        }\n                        if (!this.resizeDisallowed) {\n                            event.preventDefault();\n                            this.moveStart.emit(this.pane);\n                            this.moving.emit(10);\n                        }\n                    }\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    if (this.type === SplitterType.Vertical) {\n                        if (ctrl) {\n                            this.onCollapsing(true);\n                            break;\n                        }\n                        if (!this.resizeDisallowed) {\n                            event.preventDefault();\n                            this.moveStart.emit(this.pane);\n                            this.moving.emit(-10);\n                        }\n                    }\n                    break;\n                case 'arrowleft':\n                case 'left':\n                    if (this.type === SplitterType.Horizontal) {\n                        if (ctrl) {\n                            this.onCollapsing(false);\n                            break;\n                        }\n                        if (!this.resizeDisallowed) {\n                            event.preventDefault();\n                            this.moveStart.emit(this.pane);\n                            this.moving.emit(10);\n                        }\n                    }\n                    break;\n                case 'arrowright':\n                case 'right':\n                    if (this.type === SplitterType.Horizontal) {\n                        if (ctrl) {\n                            this.onCollapsing(true);\n                            break;\n                        }\n                        if (!this.resizeDisallowed) {\n                            event.preventDefault();\n                            this.moveStart.emit(this.pane);\n                            this.moving.emit(-10);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dragDir() {\n        return this.type === SplitterType.Horizontal ? DragDirection.VERTICAL : DragDirection.HORIZONTAL;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get nextButtonHidden() {\n        return this.siblings[1].collapsed && !this.siblings[0].collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onDragStart(event: IDragStartEventArgs) {\n        if (this.resizeDisallowed) {\n            event.cancel = true;\n            return;\n        }\n        this.startPoint = this.type === SplitterType.Horizontal ? event.startX : event.startY;\n        this.moveStart.emit(this.pane);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onDragMove(event: IDragMoveEventArgs) {\n        const isHorizontal = this.type === SplitterType.Horizontal;\n        const curr =  isHorizontal ? event.pageX : event.pageY;\n        const delta = this.startPoint - curr;\n        if (delta !== 0) {\n            this.moving.emit(delta);\n            event.cancel = true;\n            event.owner.element.nativeElement.style.transform = '';\n        }\n    }\n\n    protected get resizeDisallowed() {\n        const relatedTabs = this.siblings;\n        return !!relatedTabs.find(x => x.resizable === false || x.collapsed === true);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onCollapsing(next: boolean) {\n        const prevSibling = this.siblings[0];\n        const nextSibling = this.siblings[1];\n        let target;\n        if (next) {\n            // if next is clicked when prev pane is hidden, show prev pane, else hide next pane.\n            target = prevSibling.collapsed ? prevSibling : nextSibling;\n        } else {\n            // if prev is clicked when next pane is hidden, show next pane, else hide prev pane.\n            target = nextSibling.collapsed ? nextSibling : prevSibling;\n        }\n        target.toggle();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxSplitBarComponent } from './splitter-bar/splitter-bar.component';\nimport { IgxSplitterPaneComponent } from './splitter-pane/splitter-pane.component';\nimport { IgxSplitterComponent } from './splitter.component';\nimport { IgxIconModule } from '../icon/public_api';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\n\n@NgModule({\n    imports: [\n        CommonModule, IgxIconModule, IgxDragDropModule\n    ],\n    declarations: [\n        IgxSplitterComponent,\n        IgxSplitterPaneComponent,\n        IgxSplitBarComponent\n    ],\n    exports: [\n        IgxSplitterComponent,\n        IgxSplitterPaneComponent\n    ]\n})\nexport class IgxSplitterModule { }\n","import { Component, ContentChild, Pipe, PipeTransform, Output, EventEmitter, HostListener, Directive } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { IgxInputDirective, IgxInputState } from '../input-group/public_api';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputGroupBase } from '../input-group/input-group.common';\nimport { DatePickerUtil } from '../date-picker/date-picker.utils';\nimport { IgxDateTimeEditorDirective } from '../directives/date-time-editor/public_api';\n\n/**\n * Represents a range between two dates.\n */\nexport interface DateRange {\n    start: Date;\n    end: Date;\n}\n\n/** @hidden @internal */\n@Pipe({ name: 'dateRange' })\nexport class DateRangePickerFormatPipe implements PipeTransform {\n    public transform(values: DateRange, appliedFormat?: string,\n        locale?: string, formatter?: (_: DateRange) => string): string {\n        if (!values || !values.start && !values.end) {\n            return '';\n        }\n        if (formatter) {\n            return formatter(values);\n        }\n        const { start, end } = values;\n        const startDate = appliedFormat ? DatePickerUtil.formatDate(start, appliedFormat, locale || 'en') : start?.toLocaleDateString();\n        const endDate = appliedFormat ? DatePickerUtil.formatDate(end, appliedFormat, locale || 'en') : end?.toLocaleDateString();\n        let formatted;\n        if (start) {\n            formatted = `${startDate} - `;\n            if (end) {\n                formatted += endDate;\n            }\n        }\n\n        return formatted ? formatted : '';\n    }\n}\n\n/** @hidden @internal */\n@Component({\n    template: ``,\n    selector: `igx-date-range-base`,\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxDateRangeInputsBaseComponent }]\n})\nexport class IgxDateRangeInputsBaseComponent extends IgxInputGroupComponent {\n    @ContentChild(NgControl)\n    protected ngControl: NgControl;\n\n    @ContentChild(IgxDateTimeEditorDirective)\n    public dateTimeEditor: IgxDateTimeEditorDirective;\n\n    @ContentChild(IgxInputDirective)\n    public inputDirective: IgxInputDirective;\n\n    /** @hidden @internal */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public setFocus(): void {\n        this.input.focus();\n    }\n\n    /** @hidden @internal */\n    public updateInputValue(value: Date) {\n        if (this.ngControl) {\n            this.ngControl.control.setValue(value);\n        } else {\n            this.dateTimeEditor.value = value;\n        }\n    }\n\n    /** @hidden @internal */\n    public updateInputValidity(state: IgxInputState) {\n        this.inputDirective.valid = state;\n    }\n}\n\n/**\n * Templates the default icon in the `IgxDateRangePicker`.\n *\n * @igxModule IgxDateRangePickerModule\n *\n * @igxKeyWords date range icon, date picker icon\n *\n * @igxGroup scheduling\n *\n * @example\n * ```html\n * <igx-date-range-picker>\n *   <igx-picker-toggle igxSuffix>\n *      <igx-icon>calendar_view_day</igx-icon>\n *   </igx-picker-toggle>\n * </igx-date-range-picker>\n * ```\n */\n@Component({\n    template: `<ng-content></ng-content>`,\n    selector: 'igx-picker-toggle'\n})\nexport class IgxPickerToggleComponent {\n    @Output()\n    public clicked = new EventEmitter();\n\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        // do not focus input on click\n        event.stopPropagation();\n        this.clicked.emit();\n    }\n}\n\n/**\n * Defines the start input for a date range picker\n *\n * @igxModule IgxDateRangePickerModule\n *\n * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme\n *\n * @igxKeywords date, range, date range, date picker\n *\n * @igxGroup scheduling\n *\n * @remarks\n * When templating, start input has to be templated separately\n *\n * @example\n * ```html\n * <igx-date-range-picker mode=\"dropdown\">\n *      <igx-date-range-start>\n *          <input igxInput igxDateTimeEditor type=\"text\">\n *      </igx-date-range-start>\n *      ...\n * </igx-date-range-picker>\n * ```\n */\n@Component({\n    selector: 'igx-date-range-start',\n    templateUrl: '../input-group/input-group.component.html',\n    providers: [\n        { provide: IgxInputGroupBase, useExisting: IgxDateRangeStartComponent },\n        { provide: IgxDateRangeInputsBaseComponent, useExisting: IgxDateRangeStartComponent }\n    ]\n})\nexport class IgxDateRangeStartComponent extends IgxDateRangeInputsBaseComponent { }\n\n/**\n * Defines the end input for a date range picker\n *\n * @igxModule IgxDateRangeModule\n *\n * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme\n *\n * @igxKeywords date, range, date range, date picker\n *\n * @igxGroup scheduling\n *\n * @remarks\n * When templating, end input has to be template separately\n *\n * @example\n * ```html\n * <igx-date-range-picker mode=\"dropdown\">\n *      <igx-date-range-end>\n *          <input igxInput igxDateTimeEditor type=\"text\">\n *      </igx-date-range-end>\n *      ...\n * </igx-date-range-picker>\n * ```\n */\n@Component({\n    selector: 'igx-date-range-end',\n    templateUrl: '../input-group/input-group.component.html',\n    providers: [\n        { provide: IgxInputGroupBase, useExisting: IgxDateRangeEndComponent },\n        { provide: IgxDateRangeInputsBaseComponent, useExisting: IgxDateRangeEndComponent }\n    ]\n})\nexport class IgxDateRangeEndComponent extends IgxDateRangeInputsBaseComponent { }\n\n@Directive({\n    selector: '[igxDateRangeSeparator]'\n})\nexport class IgxDateRangeSeparatorDirective {\n}\n","import {\n    AfterViewInit, Component, ContentChild, ContentChildren, ElementRef,\n    EventEmitter, HostBinding, Inject, Injector, Input, LOCALE_ID,\n    OnChanges, OnDestroy, OnInit, Optional, Output, QueryList,\n    SimpleChanges, TemplateRef, ViewChild\n} from '@angular/core';\nimport {\n    AbstractControl, ControlValueAccessor, NgControl,\n    NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator\n} from '@angular/forms';\nimport { fromEvent, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { IgxCalendarComponent, WEEKDAYS } from '../calendar/public_api';\nimport { DateRangeType } from '../core/dates';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { InteractionMode } from '../core/enums';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IToggleView } from '../core/navigation';\nimport { IBaseCancelableBrowserEventArgs, IBaseEventArgs, KEYS } from '../core/utils';\nimport { DatePickerUtil } from '../date-picker/date-picker.utils';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxInputDirective, IgxInputGroupComponent, IgxInputState, IgxLabelDirective } from '../input-group/public_api';\nimport { AutoPositionStrategy, OverlaySettings, PositionSettings } from '../services/public_api';\nimport {\n    DateRange, IgxDateRangeEndComponent, IgxDateRangeInputsBaseComponent,\n    IgxDateRangeSeparatorDirective, IgxDateRangeStartComponent, IgxPickerToggleComponent\n} from './date-range-picker-inputs.common';\n\nconst SingleInputDatesConcatenationString = ' - ';\n\n/**\n * Provides the ability to select a range of dates from a calendar UI or editable inputs.\n *\n * @igxModule IgxDateRangeModule\n *\n * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme\n *\n * @igxKeywords date, range, date range, date picker\n *\n * @igxGroup scheduling\n *\n * @remarks\n * It displays the range selection in a single or two input fields.\n * The default template displays a single *readonly* input field\n * while projecting `igx-date-range-start` and `igx-date-range-end`\n * displays two *editable* input fields.\n *\n * @example\n * ```html\n * <igx-date-range-picker mode=\"dropdown\"></igx-date-range-picker>\n * ```\n */\n@Component({\n    selector: 'igx-date-range-picker',\n    templateUrl: './date-range-picker.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateRangePickerComponent, multi: true },\n        { provide: NG_VALIDATORS, useExisting: IgxDateRangePickerComponent, multi: true }\n    ]\n})\nexport class IgxDateRangePickerComponent extends DisplayDensityBase\n    implements IToggleView, OnChanges, OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, Validator {\n    /**\n     * Display calendar in either `dialog` or `dropdown` mode.\n     * @remarks\n     * Default mode is `dialog`\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker mode=\"dropdown\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * The number of displayed month views.\n     *\n     * @remarks\n     * Default is `2`.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [monthsViewNumber]=\"3\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public monthsViewNumber = 2;\n\n    /**\n     * Gets/Sets whether dates that are not part of the current month will be displayed.\n     *\n     * @remarks\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [hideOutsideDays]=\"true\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public hideOutsideDays: boolean;\n\n    /**\n     * The start day of the week.\n     *\n     * @remarks\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [weekStart]=\"1\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public weekStart = WEEKDAYS.SUNDAY;\n\n    /**\n     * Locale settings used for value formatting and calendar.\n     *\n     * @remarks\n     * Uses Angular's `LOCALE_ID` by default. Affects both input mask and display format if those are not set.\n     * If a `locale` is set, it must be registered via `registerLocaleData`.\n     * Please refer to https://angular.io/guide/i18n#i18n-pipes.\n     * If it is not registered, `Intl` will be used for formatting.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker locale=\"jp\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public locale: string;\n\n    /**\n     * A custom formatter function, applied on the selected or passed in date.\n     *\n     * @example\n     * ```typescript\n     * private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     * private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *\n     * public formatter(date: Date): string {\n     *  return `${this.dayFormatter.format(date)} - ${this.monthFormatter.format(date)} - ${date.getFullYear()}`;\n     * }\n     * ```\n     * ```html\n     * <igx-date-range-picker [formatter]=\"formatter\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public formatter: (val: DateRange) => string;\n\n    /**\n     * The default text of the calendar dialog `done` button.\n     *\n     * @remarks\n     * Default value is `Done`.\n     * The button will only show up in `dialog` mode.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker doneButtonText=\"完了\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public doneButtonText = 'Done';\n\n    /**\n     * Custom overlay settings that should be used to display the calendar.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker [overlaySettings]=\"customOverlaySettings\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * The format used when editable inputs are not focused.\n     *\n     * @remarks\n     * Uses Angular's DatePipe.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker displayFormat=\"EE/M/yy\"></igx-date-range-picker>\n     * ```\n     *\n     */\n    @Input()\n    public displayFormat: string;\n\n    /**\n     * The expected user input format and placeholder.\n     *\n     * @remarks\n     * Default is `\"'MM/dd/yyyy'\"`\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker inputFormat=\"dd/MM/yy\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public inputFormat: string;\n\n    /**\n     * The minimum value in a valid range.\n     *\n     * @example\n     * <igx-date-range-picker [minValue]=\"minDate\"></igx-date-range-picker>\n     */\n    @Input()\n    public set minValue(value: Date | string) {\n        this._minValue = value;\n        this.onValidatorChange();\n    }\n\n    public get minValue(): Date | string {\n        return this._minValue;\n    }\n\n    /**\n     * The maximum value in a valid range.\n     *\n     * @example\n     * <igx-date-range-picker [maxValue]=\"maxDate\"></igx-date-range-picker>\n     */\n    @Input()\n    public set maxValue(value: Date | string) {\n        this._maxValue = value;\n        this.onValidatorChange();\n    }\n\n    public get maxValue(): Date | string {\n        return this._maxValue;\n    }\n\n    /**\n     * Enables/Disables the `IgxDateRangePickerComponent`.\n     *  @example\n     * ```html\n     * <igx-date-range-picker [disabled]=\"'true'\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `placeholder` for single-input `IgxDateRangePickerComponent`.\n     *   @example\n     * ```html\n     * <igx-date-range-picker [placeholder]=\"'Choose your dates'\"></igx-date-range-picker>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * Emitted when a range is selected.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker (rangeSelected)=\"handleSelected($event)\"></igx-date-range-picker>\n     * ```\n     */\n    @Output()\n    public rangeSelected = new EventEmitter<DateRange>();\n\n    /**\n     * Emitted when the calendar starts opening, cancelable.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker (onOpening)=\"handleOpening($event)\"></igx-date-range-picker>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted when the `IgxDateRangeComponent` is opened.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker (onOpened)=\"handleOpened($event)\"></igx-date-range-picker>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<IBaseEventArgs>();\n\n    /**\n     * Emitted when the calendar starts closing, cancelable.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker (onClosing)=\"handleClosing($event)\"></igx-date-range-picker>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<IBaseCancelableBrowserEventArgs>();\n\n    /**\n     * Emitted when the `IgxDateRangeComponent` is closed.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker (onClosed)=\"handleClosed($event)\"></igx-date-range-picker>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<IBaseEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-date-range-picker')\n    public cssClass = 'igx-date-range-picker';\n\n    /** @hidden @internal */\n    @ViewChild(IgxCalendarComponent)\n    public calendar: IgxCalendarComponent;\n\n    /** @hidden @internal */\n    @ViewChild(IgxInputGroupComponent)\n    public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild(IgxInputDirective)\n    public inputDirective: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ViewChild(IgxToggleDirective)\n    public toggleDirective: IgxToggleDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(IgxPickerToggleComponent, { descendants: true })\n    public toggleComponents: QueryList<IgxPickerToggleComponent>;\n\n    /** @hidden @internal */\n    @ContentChildren(IgxDateRangeInputsBaseComponent)\n    public projectedInputs: QueryList<IgxDateRangeInputsBaseComponent>;\n\n    @ContentChild(IgxLabelDirective)\n    public label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    @ContentChild(IgxDateRangeSeparatorDirective, { read: TemplateRef })\n    public dateSeparatorTemplate: TemplateRef<any>;\n\n    /** @hidden @internal */\n    public dateSeparator = CurrentResourceStrings.DateRangePickerResStrings.igx_date_range_picker_date_separator;\n\n    /** @hidden @internal */\n    public get appliedFormat(): string {\n        return DatePickerUtil.getLocaleDateFormat(this.locale, this.displayFormat)\n            || DatePickerUtil.DEFAULT_INPUT_FORMAT;\n    }\n\n    /** @hidden @internal */\n    public get singleInputFormat(): string {\n        if (this.placeholder !== '') {\n            return this.placeholder;\n        }\n\n        const format = this.appliedFormat;\n        return `${format}${SingleInputDatesConcatenationString}${format}`;\n    }\n\n    /** @hidden @internal */\n    public get hasProjectedInputs(): boolean {\n        return this.projectedInputs?.length > 0;\n    }\n\n    private get dropdownOverlaySettings(): OverlaySettings {\n        return Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);\n    }\n\n    private get dialogOverlaySettings(): OverlaySettings {\n        return Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return (error && error.required) ? true : false;\n        }\n\n        return false;\n    }\n\n    private _value: DateRange;\n    private _collapsed = true;\n    private _ngControl: NgControl;\n    private $destroy = new Subject();\n    private _statusChanges$: Subscription;\n    private $toggleClickNotifier = new Subject();\n    private _minValue: Date | string;\n    private _maxValue: Date | string;\n    private _positionSettings: PositionSettings;\n    private _focusedInput: IgxDateRangeInputsBaseComponent;\n    private _dialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: true\n    };\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false\n    };\n    private onChangeCallback = (dateRange: DateRange) => { };\n    private onTouchCallback = () => { };\n    private onValidatorChange = () => { };\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Inject(LOCALE_ID) private localeId: any,\n        private _injector: Injector) {\n        super(_displayDensityOptions);\n        this.locale = this.locale || this.localeId;\n    }\n\n    /**\n     * Opens the date range picker's dropdown or dialog.\n     *\n     * @example\n     * ```html\n     * <igx-date-range-picker #dateRange></igx-date-range-picker>\n     *\n     * <button (click)=\"dateRange.open()\">Open Dialog</button\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings): void {\n        if (!this.collapsed || this.disabled) { return; }\n\n        this.updateCalendar();\n        const settings = this.mode === InteractionMode.Dialog ? this.dialogOverlaySettings : this.dropdownOverlaySettings;\n        this.toggleDirective.open(Object.assign(settings, overlaySettings));\n    }\n\n    /**\n     * Closes the date range picker's dropdown or dialog.\n     *\n     * @example\n     * html```\n     * <igx-date-range-picker #dateRange></igx-date-range-picker>\n     *\n     * <button (click)=\"dateRange.close()\">Close Dialog</button>\n     * ```\n     */\n    public close(): void {\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    /**\n     * Toggles the date range picker's dropdown or dialog\n     *\n     * @example\n     * html```\n     * <igx-date-range-picker #dateRange></igx-date-range-picker>\n     *\n     * <button (click)=\"dateRange.toggle()\">Toggle Dialog</button>\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings): void {\n        if (!this.collapsed) {\n            this.close();\n        } else {\n            this.open(overlaySettings);\n        }\n    }\n\n    /**\n     * Gets calendar state.\n     *\n     * ```typescript\n     * let state = this.dateRange.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * The currently selected value / range from the calendar\n     *\n     * @remarks\n     * The current value is of type `DateRange`\n     *\n     * @example\n     * ```typescript\n     * const newValue: DateRange = { start: new Date(\"2/2/2012\"), end: new Date(\"3/3/2013\")};\n     * this.dateRangePicker.value = newValue;\n     * ```\n     */\n    public get value(): DateRange {\n        return this._value;\n    }\n\n    @Input()\n    public set value(value: DateRange) {\n        this.updateValue(value);\n        this.onChangeCallback(value);\n    }\n\n    private updateValue(value: DateRange) {\n        this._value = value ? value : null;\n        this.updateInputs();\n    }\n\n    /**\n     * Selects a range of dates. If no `endDate` is passed, range is 1 day (only `startDate`)\n     *\n     * @example\n     * ```typescript\n     * public selectFiveDayRange() {\n     *  const inFiveDays = new Date(new Date().setDate(today.getDate() + 5));\n     *  const today = new Date();\n     *  this.dateRange.selectRange(today, inFiveDays);\n     * }\n     * ```\n     */\n    public selectRange(startDate: Date, endDate?: Date): void {\n        endDate = endDate ?? startDate;\n        const dateRange = [startDate, endDate];\n        this.calendar.selectDate(dateRange);\n        this.handleSelection(dateRange);\n    }\n\n    /** @hidden @internal */\n    public writeValue(value: DateRange): void {\n        this.updateValue(value);\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void {\n        this.onTouchCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public validate(control: AbstractControl): ValidationErrors | null {\n        const value: DateRange = control.value;\n        const errors = {};\n        if (value) {\n            if (this.hasProjectedInputs) {\n                const startInput = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent) as IgxDateRangeStartComponent;\n                const endInput = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent) as IgxDateRangeEndComponent;\n                if (!startInput.dateTimeEditor.value) {\n                    Object.assign(errors, { 'startValue': true });\n                }\n                if (!endInput.dateTimeEditor.value) {\n                    Object.assign(errors, { 'endValue': true });\n                }\n            }\n\n            const min = DatePickerUtil.parseDate(this.minValue);\n            const max = DatePickerUtil.parseDate(this.maxValue);\n            const start = DatePickerUtil.parseDate(value.start);\n            const end = DatePickerUtil.parseDate(value.end);\n            if ((min && start && DatePickerUtil.lessThanMinValue(start, min, false))\n                || (min && end && DatePickerUtil.lessThanMinValue(end, min, false))) {\n                Object.assign(errors, { 'minValue': true });\n            }\n            if ((max && start && DatePickerUtil.greaterThanMaxValue(start, max, false))\n                || (max && end && DatePickerUtil.greaterThanMaxValue(end, max, false))) {\n                Object.assign(errors, { 'maxValue': true });\n            }\n        }\n\n        return Object.keys(errors).length > 0 ? errors : null;\n    }\n\n    /** @hidden @internal */\n    public registerOnValidatorChange?(fn: any): void {\n        this.onValidatorChange = fn;\n    }\n\n    /** @hidden @internal */\n    public setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden @internal */\n    get separatorClass(): string {\n        return this.getComponentDensityClass('igx-date-range-picker__label');\n    }\n\n    /** @hidden */\n    public ngOnInit(): void {\n        this._ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /** @hidden */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.attachOnKeydown();\n        }\n        this.subscribeToDateEditorEvents();\n        this.configPositionStrategy();\n        this.configOverlaySettings();\n        this.cacheFocusedInput();\n        this.attachOnTouched();\n\n        const subsToClicked = () => {\n            this.$toggleClickNotifier.next();\n            this.toggleComponents.forEach(toggle => {\n                toggle.clicked.pipe(takeUntil(this.$toggleClickNotifier)).subscribe(() => this.open());\n            });\n        };\n        this.toggleComponents.changes.pipe(takeUntil(this.$destroy)).subscribe(() => subsToClicked());\n        subsToClicked();\n\n        this.setRequiredToInputs();\n\n        if (this._ngControl) {\n            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        // delay invocations until the current change detection cycle has completed\n        Promise.resolve().then(() => {\n            this.updateDisabledState();\n            this.initialSetValue();\n            this.updateInputs();\n        });\n        this.updateDisplayFormat();\n        this.updateInputFormat();\n    }\n\n    /** @hidden @internal */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes['locale']) {\n            this.inputFormat = DatePickerUtil.getDefaultInputFormat(this.locale || 'en') || DatePickerUtil.DEFAULT_INPUT_FORMAT;\n        }\n        if (changes['displayFormat'] && this.hasProjectedInputs) {\n            this.updateDisplayFormat();\n        }\n        if (changes['inputFormat'] && this.hasProjectedInputs) {\n            this.updateInputFormat();\n        }\n        if (changes['disabled']) {\n            this.updateDisabledState();\n        }\n    }\n\n    /** @hidden @internal */\n    public ngOnDestroy(): void {\n        this.$destroy.next();\n        this.$destroy.complete();\n        this.$toggleClickNotifier.next();\n        this.$toggleClickNotifier.complete();\n    }\n\n    /** @hidden @internal */\n    public handleOpening(event: IBaseCancelableBrowserEventArgs): void {\n        const args = { owner: this, cancel: event.cancel, event: event.event };\n        this.onOpening.emit(args);\n        event.cancel = args.cancel;\n        if (!args.cancel) {\n            this._collapsed = false;\n        }\n    }\n\n    /** @hidden @internal */\n    public handleOpened(): void {\n        this.calendar.daysView.focusActiveDate();\n        this.onOpened.emit({ owner: this });\n    }\n\n    /** @hidden @internal */\n    public handleClosing(event: IBaseCancelableBrowserEventArgs): void {\n        if (this.value && !this.value.start && !this.value.end) {\n            this.value = null;\n        }\n\n        const args = { owner: this, cancel: event.cancel, event: event.event };\n        this.onClosing.emit(args);\n        event.cancel = args.cancel;\n        if (args.cancel) {\n            return;\n        }\n\n        if (this.mode === InteractionMode.DropDown && event.event && !this.element.nativeElement.contains(event.event.target)) {\n            // outside click\n            this.updateValidityOnBlur();\n        } else {\n            // input click\n            if (this.hasProjectedInputs && this._focusedInput) {\n                this._focusedInput.setFocus();\n                this._focusedInput = null;\n            }\n            if (this.inputDirective) {\n                this.inputDirective.focus();\n            }\n        }\n    }\n\n    private updateValidityOnBlur() {\n        this.onTouchCallback();\n        if (this._ngControl) {\n            if (this.hasProjectedInputs) {\n                this.projectedInputs.forEach(i => {\n                    if (!this._ngControl.valid) {\n                        i.updateInputValidity(IgxInputState.INVALID);\n                    } else {\n                        i.updateInputValidity(IgxInputState.INITIAL);\n                    }\n                });\n            }\n\n            if (this.inputDirective) {\n                if (!this._ngControl.valid) {\n                    this.inputDirective.valid = IgxInputState.INVALID;\n                } else {\n                    this.inputDirective.valid = IgxInputState.INITIAL;\n                }\n            }\n        }\n    }\n\n    /** @hidden @internal */\n    public handleClosed(): void {\n        this._collapsed = true;\n        this.onClosed.emit({ owner: this });\n    }\n\n    /** @hidden @internal */\n    public onKeyDown(event: KeyboardEvent): void {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                if (event.altKey) {\n                    this.close();\n                }\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.open();\n                }\n                break;\n            case KEYS.ESCAPE:\n            case KEYS.ESCAPE_IE:\n                this.close();\n                break;\n        }\n    }\n\n    /** @hidden @internal */\n    public handleSelection(selectionData: Date[]): void {\n        this.value = this.extractRange(selectionData);\n        this.rangeSelected.emit(this.value);\n    }\n\n    protected onStatusChanged = () => {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            if (this.inputGroup) {\n                this.inputDirective.valid = this.getInputState(this.inputGroup.isFocused);\n            } else if (this.hasProjectedInputs) {\n                this.projectedInputs\n                    .forEach(i => { i.inputDirective.valid = this.getInputState(i.isFocused); });\n            }\n        }\n        this.setRequiredToInputs();\n    }\n\n    private updateDisabledState() {\n        if (this.hasProjectedInputs) {\n            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent) as IgxDateRangeStartComponent;\n            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent) as IgxDateRangeEndComponent;\n            start.inputDirective.disabled = this.disabled;\n            end.inputDirective.disabled = this.disabled;\n            return;\n        }\n        if (this.inputDirective) {\n            this.inputDirective.disabled = this.disabled;\n        }\n    }\n\n    private getInputState(focused: boolean): IgxInputState {\n        if (focused) {\n            return this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n        } else {\n            return this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n        }\n    }\n\n    private setRequiredToInputs(): void {\n        // workaround for igxInput setting required\n        Promise.resolve().then(() => {\n            const isRequired = this.required;\n            if (this.inputGroup && this.inputGroup.isRequired !== isRequired) {\n                this.inputGroup.isRequired = isRequired;\n            } else if (this.hasProjectedInputs && this._ngControl) {\n                this.projectedInputs.forEach(i => i.isRequired = isRequired);\n            }\n        });\n    }\n\n    private parseMinValue(value: string | Date): Date | null {\n        let minValue: Date = DatePickerUtil.parseDate(value);\n        if (!minValue && this.hasProjectedInputs) {\n            const start = this.projectedInputs.filter(i => i instanceof IgxDateRangeStartComponent)[0];\n            if (start) {\n                minValue = DatePickerUtil.parseDate(start.dateTimeEditor.minValue);\n            }\n        }\n\n        return minValue;\n    }\n\n    private parseMaxValue(value: string | Date): Date | null {\n        let maxValue: Date = DatePickerUtil.parseDate(value);\n        if (!maxValue && this.projectedInputs) {\n            const end = this.projectedInputs.filter(i => i instanceof IgxDateRangeEndComponent)[0];\n            if (end) {\n                maxValue = DatePickerUtil.parseDate(end.dateTimeEditor.maxValue);\n            }\n        }\n\n        return maxValue;\n    }\n\n    private updateCalendar(): void {\n        this.calendar.disabledDates = [];\n        const minValue = this.parseMinValue(this.minValue);\n        if (minValue) {\n            this.calendar.disabledDates.push({ type: DateRangeType.Before, dateRange: [minValue] });\n        }\n        const maxValue = this.parseMaxValue(this.maxValue);\n        if (maxValue) {\n            this.calendar.disabledDates.push({ type: DateRangeType.After, dateRange: [maxValue] });\n        }\n\n        const range: Date[] = [];\n        if (this.value?.start && this.value?.end) {\n            if (DatePickerUtil.greaterThanMaxValue(this.value.start, this.value.end)) {\n                this.swapEditorDates();\n            }\n            if (this.valueInRange(this.value, minValue, maxValue)) {\n                range.push(this.value.start, this.value.end);\n            }\n        }\n\n        if (range.length > 0) {\n            this.calendar.selectDate(range);\n        } else {\n            this.calendar.deselectDate();\n        }\n        this.calendar.viewDate = range[0] || new Date();\n    }\n\n    private swapEditorDates(): void {\n        if (this.hasProjectedInputs) {\n            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent) as IgxDateRangeStartComponent;\n            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent) as IgxDateRangeEndComponent;\n            [start.dateTimeEditor.value, end.dateTimeEditor.value] = [end.dateTimeEditor.value, start.dateTimeEditor.value];\n            [this.value.start, this.value.end] = [this.value.end, this.value.start];\n        }\n    }\n\n    private valueInRange(value: DateRange, minValue?: Date, maxValue?: Date): boolean {\n        if (minValue && DatePickerUtil.lessThanMinValue(value.start, minValue, false)) {\n            return false;\n        }\n        if (maxValue && DatePickerUtil.greaterThanMaxValue(value.end, maxValue, false)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private extractRange(selection: Date[]): DateRange {\n        return {\n            start: selection[0],\n            end: selection.length > 0 ? selection[selection.length - 1] : null\n        };\n    }\n\n    private attachOnKeydown(): void {\n        fromEvent(this.element.nativeElement, 'keydown')\n            .pipe(takeUntil(this.$destroy))\n            .subscribe((evt: KeyboardEvent) => this.onKeyDown(evt));\n    }\n\n    private subscribeToDateEditorEvents(): void {\n        if (this.hasProjectedInputs) {\n            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent) as IgxDateRangeStartComponent;\n            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent) as IgxDateRangeEndComponent;\n            if (start && end) {\n                start.dateTimeEditor.valueChange\n                    .pipe(takeUntil(this.$destroy))\n                    .subscribe(value => {\n                        if (this.value) {\n                            this.value = { start: value, end: this.value.end };\n                        } else {\n                            this.value = { start: value, end: null };\n                        }\n                    });\n                end.dateTimeEditor.valueChange\n                    .pipe(takeUntil(this.$destroy))\n                    .subscribe(value => {\n                        if (this.value) {\n                            this.value = { start: this.value.start, end: value };\n                        } else {\n                            this.value = { start: null, end: value };\n                        }\n                    });\n            }\n        }\n    }\n\n    private attachOnTouched(): void {\n        if (this.hasProjectedInputs) {\n            this.projectedInputs.forEach(i => {\n                fromEvent(i.dateTimeEditor.nativeElement, 'blur')\n                    .pipe(takeUntil(this.$destroy))\n                    .subscribe(() => {\n                        if (this.collapsed) {\n                            this.updateValidityOnBlur();\n                        }\n                    });\n            });\n        } else {\n            fromEvent(this.inputDirective.nativeElement, 'blur')\n                .pipe(takeUntil(this.$destroy))\n                .subscribe(() => {\n                    if (this.collapsed) {\n                        this.updateValidityOnBlur();\n                    }\n                });\n        }\n    }\n\n    private cacheFocusedInput(): void {\n        if (this.hasProjectedInputs) {\n            this.projectedInputs.forEach(i => {\n                fromEvent(i.dateTimeEditor.nativeElement, 'focus')\n                    .pipe(takeUntil(this.$destroy))\n                    .subscribe(() => this._focusedInput = i);\n            });\n        }\n    }\n\n    private configPositionStrategy(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n        this._dropDownOverlaySettings.positionStrategy = new AutoPositionStrategy(this._positionSettings);\n        this.dropdownOverlaySettings.target = this.element.nativeElement;\n    }\n\n    private configOverlaySettings(): void {\n        if (this.overlaySettings !== null) {\n            this._dropDownOverlaySettings = Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);\n            this._dialogOverlaySettings = Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);\n        }\n    }\n\n    private initialSetValue() {\n        // if there is no value and no ngControl on the picker but we have inputs we may have value set through\n        // their ngModels - we should generate our initial control value\n        if ((!this.value || (!this.value.start && !this.value.end)) && this.hasProjectedInputs && !this._ngControl) {\n            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);\n            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);\n            this._value = {\n                start: start.dateTimeEditor.value,\n                end: end.dateTimeEditor.value\n            };\n        }\n    }\n\n    private updateInputs(): void {\n        const start = this.projectedInputs?.find(i => i instanceof IgxDateRangeStartComponent) as IgxDateRangeStartComponent;\n        const end = this.projectedInputs?.find(i => i instanceof IgxDateRangeEndComponent) as IgxDateRangeEndComponent;\n        if (start && end) {\n            start.updateInputValue(this.value?.start ?? null);\n            end.updateInputValue(this.value?.end ?? null);\n        }\n    }\n\n    private updateDisplayFormat(): void {\n        this.projectedInputs.forEach(i => {\n            const input = i as IgxDateRangeInputsBaseComponent;\n            input.dateTimeEditor.displayFormat = this.displayFormat;\n        });\n    }\n\n    private updateInputFormat(): void {\n        this.projectedInputs.forEach(i => {\n            const input = i as IgxDateRangeInputsBaseComponent;\n            if (input.dateTimeEditor.inputFormat !== this.inputFormat) {\n                input.dateTimeEditor.inputFormat = this.inputFormat;\n            }\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDateRangePickerComponent } from './date-range-picker.component';\nimport { IgxCalendarModule } from '../calendar/public_api';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxInputGroupModule } from '../input-group/public_api';\nimport { IgxIconModule } from '../icon/public_api';\nimport {\n    IgxDateRangeStartComponent, IgxDateRangeEndComponent,\n    DateRangePickerFormatPipe,\n    IgxPickerToggleComponent,\n    IgxDateRangeSeparatorDirective,\n    IgxDateRangeInputsBaseComponent\n} from './date-range-picker-inputs.common';\nimport { IgxDateTimeEditorModule } from '../directives/date-time-editor/public_api';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDateRangePickerComponent,\n        IgxDateRangeStartComponent,\n        IgxDateRangeEndComponent,\n        IgxDateRangeInputsBaseComponent,\n        DateRangePickerFormatPipe,\n        IgxPickerToggleComponent,\n        IgxDateRangeSeparatorDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxToggleModule,\n        IgxCalendarModule,\n        IgxInputGroupModule,\n        IgxDateTimeEditorModule\n    ],\n    exports: [\n        IgxDateRangePickerComponent,\n        IgxDateRangeStartComponent,\n        IgxDateRangeEndComponent,\n        IgxDateRangeSeparatorDirective,\n        IgxDateTimeEditorModule,\n        IgxPickerToggleComponent\n    ]\n})\nexport class IgxDateRangePickerModule { }\n"]}