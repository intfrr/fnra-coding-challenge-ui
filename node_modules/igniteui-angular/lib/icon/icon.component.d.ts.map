{"version":3,"file":"icon.component.d.ts","sources":["icon.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, OnInit, TemplateRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { IgxIconService } from './icon.service';\nexport declare class IgxIconComponent implements OnInit, OnDestroy {\n    private _el;\n    private iconService;\n    private ref;\n    private noLigature;\n    private explicitLigature;\n    private svgImage;\n    private destroy$;\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *\n     * @hidden\n     * @internal\n     */\n    cssClass: string;\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     * constructor(private cdRef:ChangeDetectorRef) {}\n     * ngAfterViewInit() {\n     *     this.icon.ariaHidden = false;\n     *     this.cdRef.detectChanges();\n     * }\n     * ```\n     */\n    ariaHidden: boolean;\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * @example\n     * ```html\n     * <igx-icon id=\"igx-icon-1\" fontSet=\"material\">settings</igx-icon>\n     * ```\n     */\n    id: string;\n    /**\n     * An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n     * @example\n     * ```html\n     * <igx-icon fontSet=\"material\">settings</igx-icon>\n     * ```\n     */\n    font: string;\n    /**\n     * An @Input property that allows you to disable the `active` property. By default it's applied.\n     * @example\n     * ```html\n     * <igx-icon [isActive]=\"false\">settings</igx-icon>\n     * ```\n     */\n    active: boolean;\n    /**\n     * An @Input property that allows you to change the `iconColor` of the icon.\n     * @example\n     * ```html\n     * <igx-icon color=\"blue\">settings</igx-icon>\n     * ```\n     */\n    iconColor: string;\n    /**\n     *  An @Input property that allows you to set the `iconName` of the icon.\n     *  @example\n     * ```html\n     * <igx-icon name=\"contains\" fontSet=\"filter-icons\"></igx-icon>\n     * ```\n     */\n    iconName: string;\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    el: ElementRef;\n    constructor(_el: ElementRef, iconService: IgxIconService, ref: ChangeDetectorRef);\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     *  An accessor that returns the value of the font property.\n     * @example\n     * ```typescript\n     *  @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string;\n    /**\n     *  An accessor that returns the value of the active property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean;\n    /**\n     *  An accessor that returns inactive property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    get getInactive(): boolean;\n    /**\n     * An accessor that returns the opposite value of the `iconColor` property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    get getIconColor(): string;\n    /**\n     * An accessor that returns the value of the iconName property.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string;\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string;\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyIcon\")\n     * public icon: IgxIconComponent;\n     * ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement>;\n    /**\n     * @hidden\n     * @internal\n     */\n    private updateIconClass;\n}\n"]}