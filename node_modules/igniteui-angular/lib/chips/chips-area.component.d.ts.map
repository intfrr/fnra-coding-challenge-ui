{"version":3,"file":"chips-area.component.d.ts","sources":["chips-area.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, IterableDiffers, QueryList, DoCheck, AfterViewInit, OnDestroy, ElementRef } from '@angular/core';\nimport { IgxChipComponent, IChipSelectEventArgs, IChipKeyDownEventArgs, IChipEnterDragAreaEventArgs, IBaseChipEventArgs } from './chip.component';\nimport { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { Subject } from 'rxjs';\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipsAreaComponent;\n}\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n/**\n * The chip area allows you to perform more complex scenarios with chips that require interaction,\n * like dragging, selection, navigation, etc.\n *\n * @igxModule IgxChipsModule\n *\n * @igxTheme igx-chip-theme\n *\n * @igxKeywords chip area, chip\n *\n * @igxGroup display\n *\n * @example\n * ```html\n * <igx-chips-area>\n *    <igx-chip *ngFor=\"let chip of chipList\" [id]=\"chip.id\">\n *        <span>{{chip.text}}</span>\n *    </igx-chip>\n * </igx-chips-area>\n * ```\n */\nexport declare class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n    cdr: ChangeDetectorRef;\n    element: ElementRef;\n    private _iterableDiffers;\n    /**\n     * @hidden\n     * @internal\n     */\n    class: string;\n    /**\n     * @hidden\n     * @internal\n     */\n    get hostClass(): string;\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    width: number;\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    height: number;\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     */\n    onReorder: EventEmitter<IChipsAreaReorderEventArgs>;\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     */\n    onSelection: EventEmitter<IChipsAreaSelectEventArgs>;\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     */\n    onMoveStart: EventEmitter<IBaseChipsAreaEventArgs>;\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     */\n    onMoveEnd: EventEmitter<IBaseChipsAreaEventArgs>;\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * @example\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    chipsList: QueryList<IgxChipComponent>;\n    private modifiedChipsArray;\n    private _differ;\n    protected destroy$: Subject<boolean>;\n    constructor(cdr: ChangeDetectorRef, element: ElementRef, _iterableDiffers: IterableDiffers);\n    /**\n     * @hidden\n     * @internal\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected positionChipAtIndex(chipIndex: any, targetIndex: any, shiftRestLeft: any, originalEvent: any): boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs): void;\n}\n"]}