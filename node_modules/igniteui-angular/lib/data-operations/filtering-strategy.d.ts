import { IFilteringExpression } from './filtering-expression.interface';
import { IFilteringExpressionsTree } from './filtering-expressions-tree';
import { GridType } from '../grids/common/grid.interface';
export interface IFilteringStrategy {
    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree, grid?: GridType): any[];
}
export declare class NoopFilteringStrategy implements IFilteringStrategy {
    private static _instance;
    private constructor();
    static instance(): NoopFilteringStrategy;
    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[];
}
export declare abstract class BaseFilteringStrategy implements IFilteringStrategy {
    abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree, grid?: GridType): any[];
    protected abstract getFieldValue(rec: object, fieldName: string, isDate?: boolean): any;
    findMatchByExpression(rec: object, expr: IFilteringExpression, isDate?: boolean): boolean;
    matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression, grid?: GridType): boolean;
}
export declare class FilteringStrategy extends BaseFilteringStrategy {
    private static _instace;
    constructor();
    static instance(): FilteringStrategy;
    filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree: IFilteringExpressionsTree, grid: GridType): T[];
    protected getFieldValue(rec: object, fieldName: string, isDate?: boolean): any;
}
