{"version":3,"file":"grid-toolbar.component.d.ts","sources":["grid-toolbar.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, TemplateRef, AfterViewInit } from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityBase } from '../../core/displayDensity';\nimport { IgxCsvExporterService, IgxExcelExporterService } from '../../services/public_api';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxButtonDirective } from '../../directives/button/button.directive';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxDropDownComponent } from '../../drop-down/drop-down.component';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnActionsComponent } from '../column-actions/column-actions.component';\nimport { IgxIconService } from '../../icon/public_api';\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\nexport declare class IgxGridToolbarComponent extends DisplayDensityBase implements AfterViewInit {\n    gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>;\n    cdr: ChangeDetectorRef;\n    excelExporter: IgxExcelExporterService;\n    csvExporter: IgxCsvExporterService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    private iconService;\n    /**\n     * @hidden\n     */\n    gridID: string;\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    get filterColumnsPrompt(): string;\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    set filterColumnsPrompt(value: string);\n    private _filterColumnsPrompt;\n    private _isExporting;\n    /**\n     * @hidden\n     * @internal\n     */\n    class: string;\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    get defaultDropDownsMaxHeight(): string;\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    columnHidingDropdown: IgxDropDownComponent;\n    /**\n     * Provides a reference to the `IgxColumnActionsComponent` for column hiding.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    columnHidingUI: IgxColumnActionsComponent;\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    columnHidingButton: IgxButtonDirective;\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    exportDropdown: IgxDropDownComponent;\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    exportButton: IgxButtonDirective;\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    columnPinningDropdown: IgxDropDownComponent;\n    /**\n     * Provides a reference to the `IgxColumnActionsComponent` for column pinning.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    columnPinningUI: IgxColumnActionsComponent;\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    columnPinningButton: IgxButtonDirective;\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    get grid(): IgxGridBaseDirective;\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    get shouldShowExportButton(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get isExporting(): boolean;\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    get shouldShowExportExcelButton(): boolean;\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    get shouldShowExportCsvButton(): boolean;\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    get pinnedColumnsCount(): number;\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n    get hostClass(): string;\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, cdr: ChangeDetectorRef, excelExporter: IgxExcelExporterService, csvExporter: IgxCsvExporterService, _displayDensityOptions: IDisplayDensityOptions, iconService: IgxIconService);\n    private _positionSettings;\n    private _overlaySettings;\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    getTitle(): string;\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    getExportText(): string;\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    getExportExcelText(): string;\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    getExportCsvText(): string;\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    exportClicked(): void;\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    exportToExcelClicked(): void;\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    exportToCsvClicked(): void;\n    private setIsExporting;\n    private performExport;\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    toggleColumnHidingUI(): void;\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    toggleColumnPinningUI(): void;\n    /**\n     * @hidden @internal\n     */\n    showAdvancedFilteringUI(): void;\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    get context(): any;\n    /** @hidden */\n    get customContentTemplate(): TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden @internal\n     */\n    onClosingColumnHiding(args: any): void;\n    /**\n     * @hidden @internal\n     */\n    onClosingColumnPinning(args: any): void;\n}\n"]}