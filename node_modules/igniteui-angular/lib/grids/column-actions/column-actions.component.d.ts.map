{"version":3,"file":"column-actions.component.d.ts","sources":["column-actions.component.d.ts"],"names":[],"mappingssourcesContent":["import { QueryList, EventEmitter, IterableDiffers, IterableDiffer, DoCheck } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { ColumnDisplayOrder } from '../common/enums';\nimport { IgxColumnActionsBaseDirective } from './column-actions-base.directive';\nimport { IgxCheckboxComponent, IChangeCheckboxEventArgs } from '../../checkbox/checkbox.component';\nimport { IColumnToggledEventArgs } from '../common/events';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\n/**\n * Providing reference to `IgxColumnActionsComponent`:\n * ```typescript\n *  @ViewChild('columnActions', { read: IgxColumnActionsComponent })\n *  public columnActions: IgxColumnActionsComponent;\n */\nexport declare class IgxColumnActionsComponent implements DoCheck {\n    private differs;\n    protected _differ: IterableDiffer<any> | null;\n    constructor(differs: IterableDiffers);\n    /**\n     * @hidden @internal\n     */\n    actionableColumns: IgxColumnComponent[];\n    /**\n     * @hidden @internal\n     */\n    filteredColumns: IgxColumnComponent[];\n    /**\n     * Gets the grid columns to provide an action for.\n     * @deprecated\n     * @example\n     * ```typescript\n     * let gridColumns = this.columnActions.columns;\n     * ```\n     */\n    get columns(): IgxColumnComponent[];\n    set columns(value: IgxColumnComponent[]);\n    /**\n     * Gets/sets the title of the column actions component.\n     * @example\n     * ```html\n     * <igx-column-actions [title]=\"'Pin Columns'\"></igx-column-actions>\n     * ```\n     */\n    title: string;\n    /**\n     * @hidden @internal\n     */\n    private _filterColumnsPrompt;\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * @example\n     * ```typescript\n     * let filterColumnsPrompt = this.columnActions.filterColumnsPrompt;\n     * ```\n     */\n    get filterColumnsPrompt(): string;\n    /**\n     * Sets the prompt that is displayed in the filter input.\n     * @example\n     * ```html\n     * <igx-column-actions [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-actions>\n     * ```\n     */\n    set filterColumnsPrompt(value: string);\n    /**\n     * Shows/hides the columns filtering input from the UI.\n     * @example\n     * ```html\n     *  <igx-column-actions [hideFilter]=\"true\"></igx-column-actions>\n     * ```\n     */\n    hideFilter: boolean;\n    /**\n     * Gets the checkbox components representing column items currently present in the dropdown\n     * @example\n     * ```typescript\n     * let columnItems =  this.columnActions.columnItems;\n     * ```\n     */\n    columnItems: QueryList<IgxCheckboxComponent>;\n    /**\n     * @hidden @internal\n     */\n    private _filterCriteria;\n    /**\n     * Gets the value which filters the columns list.\n     * @example\n     * ```typescript\n     * let filterCriteria =  this.columnActions.filterCriteria;\n     * ```\n     */\n    get filterCriteria(): string;\n    /**\n     * Sets the value which filters the columns list.\n     * @example\n     * ```html\n     *  <igx-column-actions [filterCriteria]=\"'ID'\"></igx-column-actions>\n     * ```\n     */\n    set filterCriteria(value: string);\n    /**\n     * @hidden @internal\n     */\n    private _columnDisplayOrder;\n    /**\n     * Gets the display order of the columns.\n     * @example\n     * ```typescript\n     * let columnDisplayOrder = this.columnActions.columnDisplayOrder;\n     * ```\n     */\n    get columnDisplayOrder(): ColumnDisplayOrder;\n    /**\n     * Sets the display order of the columns.\n     * @example\n     * ```typescript\n     * this.columnActions.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder);\n    /**\n     * Gets/sets the max height of the columns area.\n     * @remarks\n     * The default max height is 100%.\n     * @example\n     * ```html\n     * <igx-column-actions [columnsAreaMaxHeight]=\"200px\"></igx-column-actions>\n     * ```\n     */\n    columnsAreaMaxHeight: string;\n    /**\n     * @hidden @internal\n     */\n    private _uncheckAllText;\n    /**\n     * Gets the text of the button that unchecks all columns.\n     * @remarks\n     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.\n     * @example\n     * ```typescript\n     * let uncheckAllText = this.columnActions.uncheckAllText;\n     * ```\n     */\n    get uncheckAllText(): string;\n    /**\n     * Sets the text of the button that unchecks all columns.\n     * @example\n     * ```html\n     * <igx-column-actions [uncheckAllText]=\"'Show All'\"></igx-column-actions>\n     * ```\n     */\n    set uncheckAllText(value: string);\n    /**\n     * @hidden @internal\n     */\n    private _checkAllText;\n    /**\n     * Gets the text of the button that checks all columns.\n     * @remarks\n     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.\n     * @example\n     * ```typescript\n     * let uncheckAllText = this.columnActions.uncheckAllText;\n     * ```\n     */\n    get checkAllText(): string;\n    /**\n     * Sets the text of the button that checks all columns.\n     * @remarks\n     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.\n     * @example\n     * ```html\n     * <igx-column-actions [checkAllText]=\"'Hide All'\"></igx-column-actions>\n     * ```\n     */\n    set checkAllText(value: string);\n    /**\n     * Gets/sets the indentation of columns in the column list based on their hierarchy level.\n     * @example\n     * ```\n     * <igx-column-actions [indentation]=\"15\"></igx-column-actions>\n     * ```\n     */\n    indentation: number;\n    /**\n     * An event that is emitted after a column's checked state is changed.\n     * Provides references to the `column` and the `checked` properties as event arguments.\n     * ```html\n     *  <igx-column-actions (onColumnToggled)=\"onColumnToggled($event)\"></igx-column-actions>\n     * ```\n     */\n    onColumnToggled: EventEmitter<IColumnToggledEventArgs>;\n    /**\n     * @hidden @internal\n     */\n    private _pipeTrigger;\n    /**\n     * @hidden @internal\n     */\n    get pipeTrigger(): number;\n    /**\n     * @hidden @internal\n     */\n    actionsDirective: IgxColumnActionsBaseDirective;\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     */\n    cssClass: string;\n    /**\n     * @hidden @internal\n     */\n    get checkAllDisabled(): boolean;\n    /**\n     * @hidden @internal\n     */\n    get uncheckAllDisabled(): boolean;\n    /**\n     * Gets/Sets the grid to provide column actions for.\n     * @example\n     * ```typescript\n     * let grid = this.columnActions.grid;\n     * ```\n     */\n    grid: IgxGridBaseDirective;\n    /**\n     * @hidden @internal\n     */\n    private _id;\n    /**\n     * Gets/Sets the value of the `id` attribute.\n     * @remarks\n     * If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-column-actions [id]=\"'igx-actions-1'\"></igx-column-actions>\n     * ```\n     */\n    get id(): string;\n    set id(value: string);\n    /**\n     * @hidden @internal\n     */\n    get titleID(): string;\n    /**\n     * @hidden @internal\n     */\n    trackChanges: (index: any, col: any) => string;\n    /**\n     * @hidden @internal\n     */\n    ngDoCheck(): void;\n    /**\n     * Unchecks all columns and performs the appropriate action.\n     * @example\n     * ```typescript\n     * this.columnActions.uncheckAllColumns();\n     * ```\n     */\n    uncheckAllColumns(): void;\n    /**\n     * Checks all columns and performs the appropriate action.\n     * @example\n     * ```typescript\n     * this.columnActions.checkAllColumns();\n     * ```\n     */\n    checkAllColumns(): void;\n    /**\n     * @hidden @internal\n     */\n    toggleColumn(event: IChangeCheckboxEventArgs, column: IgxColumnComponent): void;\n}\n"]}