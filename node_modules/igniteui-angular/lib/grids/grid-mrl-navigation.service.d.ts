import { IgxGridBaseDirective } from './grid-base.directive';
import { IgxGridNavigationService } from './grid-navigation.service';
import { GridKeydownTargetType } from './common/enums';
/** @hidden */
export declare class IgxGridMRLNavigationService extends IgxGridNavigationService {
    grid: IgxGridBaseDirective;
    protected getNextPosition(rowIndex: number, colIndex: number, key: string, shift: boolean, ctrl: boolean, event: KeyboardEvent): {
        rowIndex: number;
        colIndex: number;
    };
    isValidPosition(rowIndex: number, colIndex: number): boolean;
    shouldPerformVerticalScroll(targetRowIndex: number, visibleColIndex: number): boolean;
    isColumnFullyVisible(visibleColIndex: number): boolean;
    private isParentColumnFullyVisible;
    private getChildColumnScrollPositions;
    getVerticalScrollPositions(rowIndex: number, visibleIndex: number): {
        topOffset: number;
        rowTop: number;
        rowBottom: number;
    };
    performHorizontalScrollToCell(visibleColumnIndex: number, cb?: () => void): void;
    performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void): void;
    getNextHorizontalCellPosition(previous?: boolean): {
        row: number;
        column: any;
    };
    getNextVerticalPosition(previous?: boolean): {
        row: number;
        column: any;
    };
    private getNextRowIndex;
    private getPreviousRowIndex;
    headerNavigation(event: KeyboardEvent): void;
    protected horizontalNav(event: KeyboardEvent, key: string, rowIndex: number, tag: GridKeydownTargetType): void;
    private get lastIndexPerRow();
    private get firstIndexPerRow();
    private get lastLayoutIndex();
    private get scrollTop();
    private lastColIndexPerMRLBlock;
    private lastRowStartPerBlock;
    private rowEnd;
    /**
     * @hidden
     * @internal
     */
    layout(visibleIndex: any): {
        colStart: number;
        rowStart: number;
        colEnd: number;
        rowEnd: number;
        columnVisibleIndex: number;
    };
    private parentByChildIndex;
    private hasNextHorizontalPosition;
    private hasNextVerticalPosition;
}
