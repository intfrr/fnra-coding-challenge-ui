import { EventEmitter } from '@angular/core';
import { IBaseEventArgs } from '../core/utils';
import * as ɵngcc0 from '@angular/core';
export interface IValueChangedEventArgs extends IBaseEventArgs {
    oldValue: any;
    newValue: any;
}
/**
 * @hidden
 */
export declare abstract class ItemPropertyValueChangedDirective {
    private _object;
    private _propName;
    get object(): any;
    set object(value: any);
    get value(): any;
    set value(value: any);
    valueChanged: EventEmitter<IValueChangedEventArgs>;
    constructor(propName: string);
    protected onValueChanged(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ItemPropertyValueChangedDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ItemPropertyValueChangedDirective, never, never, { "value": "value"; }, { "valueChanged": "valueChanged"; }, never>;
}
/** @hidden */
export declare class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {
    prop: string;
    get column(): any;
    set column(value: any);
    indentation: number;
    container: any;
    constructor(prop: string);
    get name(): any;
    get level(): any;
    get calcIndent(): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColumnChooserItemBaseDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ColumnChooserItemBaseDirective, never, never, { "indentation": "indentation"; "column": "column"; "container": "container"; }, {}, never>;
}

//# sourceMappingURL=column-chooser-item-base.d.ts.map