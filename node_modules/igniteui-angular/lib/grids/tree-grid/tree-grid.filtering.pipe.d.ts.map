{"version":3,"file":"tree-grid.filtering.pipe.d.ts","sources":["tree-grid.filtering.pipe.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { BaseFilteringStrategy, IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseDirective } from '../grid/public_api';\nimport { GridType } from '../common/grid.interface';\n/** @hidden */\nexport declare class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree, grid?: GridType): ITreeGridRecord[];\n    private filterImpl;\n    protected getFieldValue(rec: object, fieldName: string, isDate?: boolean): any;\n}\n/** @hidden */\nexport declare class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI;\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);\n    transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, filterStrategy: IFilteringStrategy, advancedFilteringExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number, filteringPipeTrigger: number, pinned?: any): ITreeGridRecord[];\n    private resetFilteredOutProperty;\n    private expandAllRecursive;\n    private updateNonProcessedRecord;\n    private filter;\n}\n"]}