{"version":3,"file":"grid-filtering.service.d.ts","sources":["grid-filtering.service.d.ts"],"names":[],"mappingssourcesContent":["import { OnDestroy, NgModuleRef } from '@angular/core';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { IgxIconService } from '../../icon/icon.service';\n/**\n * @hidden\n */\nexport declare class ExpressionUI {\n    expression: IFilteringExpression;\n    beforeOperator: FilteringLogic;\n    afterOperator: FilteringLogic;\n    isSelected: boolean;\n    isVisible: boolean;\n}\n/**\n * @hidden\n */\nexport declare class IgxFilteringService implements OnDestroy {\n    private gridAPI;\n    private _moduleRef;\n    private iconService;\n    private _overlayService;\n    private columnsWithComplexFilter;\n    private areEventsSubscribed;\n    private destroy$;\n    private isFiltering;\n    private columnToExpressionsMap;\n    private columnStartIndex;\n    private _componentOverlayId;\n    private _filterMenuPositionSettings;\n    private _filterMenuOverlaySettings;\n    private column;\n    private lastActiveNode;\n    isFilterRowVisible: boolean;\n    filteredColumn: IgxColumnComponent;\n    selectedExpression: IFilteringExpression;\n    columnToMoreIconHidden: Map<string, boolean>;\n    activeFilterCell: number;\n    grid: IgxGridBaseDirective;\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, _moduleRef: NgModuleRef<any>, iconService: IgxIconService, _overlayService: IgxOverlayService);\n    ngOnDestroy(): void;\n    toggleFilterDropdown(element: any, column: any, classRef: any): void;\n    initFilteringSettings(): void;\n    hideExcelFiltering(): void;\n    /**\n     * Subscribe to grid's events.\n     */\n    subscribeToEvents(): void;\n    /**\n     * Close filtering row if a column is hidden.\n     */\n    hideFilteringRowOnColumnVisibilityChange(col: IgxColumnComponent): void;\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    filterInternal(field: string, expressions?: FilteringExpressionsTree | Array<ExpressionUI>): void;\n    /**\n     * Execute filtering on the grid.\n     */\n    filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree, ignoreCase?: boolean): void;\n    /**\n     * Clears the filter of a given column if name is provided. Otherwise clears the filters of all columns.\n     */\n    clearFilter(field: string): void;\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    filterGlobal(value: any, condition: any, ignoreCase?: any): void;\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    registerSVGIcons(): void;\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    getExpressions(columnId: string): ExpressionUI[];\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    refreshExpressions(): void;\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    removeExpression(columnId: string, indexToRemove: number): void;\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    createSimpleFilteringTree(columnId: string, expressionUIList?: any): FilteringExpressionsTree;\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    isFilterComplex(columnId: string): boolean;\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    getOperatorAsString(operator: FilteringLogic): any;\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    getChipLabel(expression: IFilteringExpression): any;\n    /**\n     * Updates the content of a filterCell.\n     */\n    updateFilteringCell(column: IgxColumnComponent): void;\n    get filteredData(): any[];\n    private isFilteringTreeComplex;\n    private getChildAndOperatorsCount;\n    generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression, operator: FilteringLogic, expressionsUIs: ExpressionUI[]): void;\n    private generateExpressionsListRecursive;\n    isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean;\n}\n"]}