import { VerticalAlignment, HorizontalAlignment, Util } from '../services/overlay/utilities';
import { fadeOut, fadeIn } from '../animations/main';
import { isIE } from '../core/utils';
import { BaseFitPositionStrategy } from '../services/overlay/position/base-fit-position-strategy';
/** @hidden @internal */
export class SelectPositioningStrategy extends BaseFitPositionStrategy {
    constructor(select, settings) {
        super();
        this.select = select;
        this._selectDefaultSettings = {
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Top,
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        // Global variables required for cases of !initialCall (page scroll/overlay repositionAll)
        this.global_yOffset = 0;
        this.global_xOffset = 0;
        this.global_styles = {};
        this.settings = Object.assign({}, this._selectDefaultSettings, settings);
    }
    /** @inheritdoc */
    position(contentElement, size, document, initialCall, target) {
        this.select.scrollContainer.scrollTop = 0;
        const targetElement = target || this.settings.target;
        const rects = super.calculateElementRectangles(contentElement, targetElement);
        // selectFit obj, to be used for both cases of initialCall and !initialCall(page scroll/overlay repositionAll)
        const selectFit = {
            verticalOffset: this.global_yOffset,
            horizontalOffset: this.global_xOffset,
            targetRect: rects.targetRect,
            contentElementRect: rects.elementRect,
            styles: this.global_styles,
            scrollContainer: this.select.scrollContainer,
            scrollContainerRect: this.select.scrollContainer.getBoundingClientRect()
        };
        if (initialCall) {
            // Fill in the required selectFit object properties.
            selectFit.viewPortRect = Util.getViewportRect(document);
            selectFit.itemElement = this.getInteractionItemElement();
            selectFit.itemRect = selectFit.itemElement.getBoundingClientRect();
            // Calculate input and selected item elements style related variables
            selectFit.styles = this.calculateStyles(selectFit, targetElement);
            selectFit.scrollAmount = this.calculateScrollAmount(selectFit);
            // Calculate how much to offset the overlay container.
            this.calculateYoffset(selectFit);
            this.calculateXoffset(selectFit);
            super.updateViewPortFit(selectFit);
            // container does not fit in viewPort and is out on Top or Bottom
            if (selectFit.fitVertical.back < 0 || selectFit.fitVertical.forward < 0) {
                this.fitInViewport(contentElement, selectFit);
            }
            this.select.scrollContainer.scrollTop = selectFit.scrollAmount;
        }
        this.setStyles(contentElement, selectFit);
    }
    /**
     * Calculate selected item scroll position.
     */
    calculateScrollAmount(selectFit) {
        const itemElementRect = selectFit.itemRect;
        const scrollContainer = selectFit.scrollContainer;
        const scrollContainerRect = selectFit.scrollContainerRect;
        const scrollDelta = scrollContainerRect.top - itemElementRect.top;
        let scrollPosition = scrollContainer.scrollTop - scrollDelta;
        const dropDownHeight = scrollContainer.clientHeight;
        scrollPosition -= dropDownHeight / 2;
        scrollPosition += itemElementRect.height / 2;
        return Math.round(Math.min(Math.max(0, scrollPosition), scrollContainer.scrollHeight - scrollContainerRect.height));
    }
    /**
     * Position the items outer container so selected item text is positioned over input text and if header
     * And/OR footer - both header/footer are visible
     * @param selectFit selectFit to use for computation.
     */
    fitInViewport(contentElement, selectFit) {
        const footer = selectFit.scrollContainerRect.bottom - selectFit.contentElementRect.bottom;
        const header = selectFit.scrollContainerRect.top - selectFit.contentElementRect.top;
        const lastItemFitSize = selectFit.targetRect.bottom + selectFit.styles.itemTextToInputTextDiff - footer;
        const firstItemFitSize = selectFit.targetRect.top - selectFit.styles.itemTextToInputTextDiff - header;
        // out of viewPort on Top
        if (selectFit.fitVertical.back < 0) {
            const possibleScrollAmount = selectFit.scrollContainer.scrollHeight -
                selectFit.scrollContainerRect.height - selectFit.scrollAmount;
            if (possibleScrollAmount + selectFit.fitVertical.back > 0 && firstItemFitSize > selectFit.viewPortRect.top) {
                selectFit.scrollAmount -= selectFit.fitVertical.back;
                selectFit.verticalOffset -= selectFit.fitVertical.back;
                this.global_yOffset = selectFit.verticalOffset;
            }
            else {
                selectFit.verticalOffset = 0;
                this.global_yOffset = 0;
            }
            // out of viewPort on Bottom
        }
        else if (selectFit.fitVertical.forward < 0) {
            if (selectFit.scrollAmount + selectFit.fitVertical.forward > 0 && lastItemFitSize < selectFit.viewPortRect.bottom) {
                selectFit.scrollAmount += selectFit.fitVertical.forward;
                selectFit.verticalOffset += selectFit.fitVertical.forward;
                this.global_yOffset = selectFit.verticalOffset;
            }
            else {
                selectFit.verticalOffset = -selectFit.contentElementRect.height + selectFit.targetRect.height;
                this.global_yOffset = selectFit.verticalOffset;
            }
        }
    }
    /**
     * Sets element's style which effectively positions the provided element
     * @param element Element to position
     * @param selectFit selectFit to use for computation.
     * @param initialCall should be true if this is the initial call to the position method calling setStyles
     */
    setStyles(contentElement, selectFit) {
        super.setStyle(contentElement, selectFit.targetRect, selectFit.contentElementRect, selectFit);
        contentElement.style.width = `${selectFit.styles.contentElementNewWidth}px`; // manage container based on paddings?
        this.global_styles.contentElementNewWidth = selectFit.styles.contentElementNewWidth;
    }
    /**
     * Calculate the necessary input and selected item styles to be used for positioning item text over input text.
     * Calculate & Set default items container width.
     * @param selectFit selectFit to use for computation.
     */
    calculateStyles(selectFit, target) {
        const styles = {};
        const inputElementStyles = window.getComputedStyle(target);
        const itemElementStyles = window.getComputedStyle(selectFit.itemElement);
        const numericInputFontSize = parseFloat(inputElementStyles.fontSize);
        const numericItemFontSize = parseFloat(itemElementStyles.fontSize);
        const inputTextToInputTop = (selectFit.targetRect.bottom - selectFit.targetRect.top - numericInputFontSize) / 2;
        const itemTextToItemTop = (selectFit.itemRect.height - numericItemFontSize) / 2;
        // Adjust for input top padding
        const negateInputPaddings = (parseFloat(inputElementStyles.paddingTop) -
            parseFloat(inputElementStyles.paddingBottom)) / 2;
        styles.itemTextToInputTextDiff = Math.round(itemTextToItemTop - inputTextToInputTop + negateInputPaddings);
        const numericLeftPadding = parseFloat(itemElementStyles.paddingLeft);
        const numericTextIndent = parseFloat(itemElementStyles.textIndent);
        styles.itemTextPadding = numericLeftPadding;
        styles.itemTextIndent = numericTextIndent;
        // 24 is the input's toggle ddl icon width
        styles.contentElementNewWidth = selectFit.targetRect.width + 24 + numericLeftPadding * 2;
        return styles;
    }
    /**
     * Obtain the selected item if there is such one or otherwise use the first one
     */
    getInteractionItemElement() {
        let itemElement;
        if (this.select.selectedItem) {
            itemElement = this.select.selectedItem.element.nativeElement;
            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay
            if (isIE()) {
                this.select.scrollContainer.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);
            }
        }
        else {
            itemElement = this.select.getFirstItemElement();
        }
        return itemElement;
    }
    /**
     * Calculate how much to offset the overlay container for Y-axis.
     */
    calculateYoffset(selectFit) {
        selectFit.verticalOffset = -(selectFit.itemRect.top - selectFit.contentElementRect.top +
            selectFit.styles.itemTextToInputTextDiff - selectFit.scrollAmount);
        this.global_yOffset = selectFit.verticalOffset;
    }
    /**
     * Calculate how much to offset the overlay container for X-axis.
     */
    calculateXoffset(selectFit) {
        selectFit.horizontalOffset = selectFit.styles.itemTextIndent - selectFit.styles.itemTextPadding;
        this.global_xOffset = selectFit.horizontalOffset;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LXBvc2l0aW9uaW5nLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3NlbGVjdC9zZWxlY3QtcG9zaXRpb25pbmctc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixFQUEwQixJQUFJLEVBQXdCLE1BQU0sK0JBQStCLENBQUM7QUFFM0ksT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBRWxHLHdCQUF3QjtBQUN4QixNQUFNLE9BQU8seUJBQTBCLFNBQVEsdUJBQXVCO0lBY2xFLFlBQW1CLE1BQXFCLEVBQUUsUUFBMkI7UUFDakUsS0FBSyxFQUFFLENBQUM7UUFETyxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBWmhDLDJCQUFzQixHQUFHO1lBQzdCLG1CQUFtQixFQUFFLG1CQUFtQixDQUFDLEtBQUs7WUFDOUMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsTUFBTTtZQUMzQyxvQkFBb0IsRUFBRSxtQkFBbUIsQ0FBQyxJQUFJO1lBQzlDLGtCQUFrQixFQUFFLGlCQUFpQixDQUFDLEdBQUc7WUFDekMsYUFBYSxFQUFFLE1BQU07WUFDckIsY0FBYyxFQUFFLE9BQU87U0FDMUIsQ0FBQztRQVVGLDBGQUEwRjtRQUNsRixtQkFBYyxHQUFHLENBQUMsQ0FBQztRQUNuQixtQkFBYyxHQUFHLENBQUMsQ0FBQztRQUNuQixrQkFBYSxHQUFpQixFQUFFLENBQUM7UUFOckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsc0JBQXNC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LEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxnQkFBZ0IsQ0FBQyxTQUFvQjtRQUN6QyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7UUFDaEcsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7SUFDckQsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVydGljYWxBbGlnbm1lbnQsIEhvcml6b250YWxBbGlnbm1lbnQsIFBvc2l0aW9uU2V0dGluZ3MsIFNpemUsIFV0aWwsIENvbm5lY3RlZEZpdCwgUG9pbnQgIH0gZnJvbSAnLi4vc2VydmljZXMvb3ZlcmxheS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgSVBvc2l0aW9uU3RyYXRlZ3kgfSBmcm9tICcuLi9zZXJ2aWNlcy9vdmVybGF5L3Bvc2l0aW9uJztcbmltcG9ydCB7IGZhZGVPdXQsIGZhZGVJbiB9IGZyb20gJy4uL2FuaW1hdGlvbnMvbWFpbic7XG5pbXBvcnQgeyBJZ3hTZWxlY3RCYXNlIH0gZnJvbSAnLi9zZWxlY3QuY29tbW9uJztcbmltcG9ydCB7IGlzSUUgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IEJhc2VGaXRQb3NpdGlvblN0cmF0ZWd5IH0gZnJvbSAnLi4vc2VydmljZXMvb3ZlcmxheS9wb3NpdGlvbi9iYXNlLWZpdC1wb3NpdGlvbi1zdHJhdGVneSc7XG5cbi8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdFBvc2l0aW9uaW5nU3RyYXRlZ3kgZXh0ZW5kcyBCYXNlRml0UG9zaXRpb25TdHJhdGVneSBpbXBsZW1lbnRzIElQb3NpdGlvblN0cmF0ZWd5IHtcblxuICAgIHByaXZhdGUgX3NlbGVjdERlZmF1bHRTZXR0aW5ncyA9IHtcbiAgICAgICAgaG9yaXpvbnRhbERpcmVjdGlvbjogSG9yaXpvbnRhbEFsaWdubWVudC5SaWdodCxcbiAgICAgICAgdmVydGljYWxEaXJlY3Rpb246IFZlcnRpY2FsQWxpZ25tZW50LkJvdHRvbSxcbiAgICAgICAgaG9yaXpvbnRhbFN0YXJ0UG9pbnQ6IEhvcml6b250YWxBbGlnbm1lbnQuTGVmdCxcbiAgICAgICAgdmVydGljYWxTdGFydFBvaW50OiBWZXJ0aWNhbEFsaWdubWVudC5Ub3AsXG4gICAgICAgIG9wZW5BbmltYXRpb246IGZhZGVJbixcbiAgICAgICAgY2xvc2VBbmltYXRpb246IGZhZGVPdXRcbiAgICB9O1xuXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgcHVibGljIHNldHRpbmdzOiBQb3NpdGlvblNldHRpbmdzO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHNlbGVjdDogSWd4U2VsZWN0QmFzZSwgc2V0dGluZ3M/OiBQb3NpdGlvblNldHRpbmdzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9zZWxlY3REZWZhdWx0U2V0dGluZ3MsIHNldHRpbmdzKTtcbiAgICB9XG5cbiAgICAvLyBHbG9iYWwgdmFyaWFibGVzIHJlcXVpcmVkIGZvciBjYXNlcyBvZiAhaW5pdGlhbENhbGwgKHBhZ2Ugc2Nyb2xsL292ZXJsYXkgcmVwb3NpdGlvbkFsbClcbiAgICBwcml2YXRlIGdsb2JhbF95T2Zmc2V0ID0gMDtcbiAgICBwcml2YXRlIGdsb2JhbF94T2Zmc2V0ID0gMDtcbiAgICBwcml2YXRlIGdsb2JhbF9zdHlsZXM6IFNlbGVjdFN0eWxlcyA9IHt9O1xuXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgcG9zaXRpb24oY29udGVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzaXplOiBTaXplLCBkb2N1bWVudD86IERvY3VtZW50LCBpbml0aWFsQ2FsbD86IGJvb2xlYW4sIHRhcmdldD86IFBvaW50IHwgSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWxlY3Quc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSB0YXJnZXQgfHwgdGhpcy5zZXR0aW5ncy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IHJlY3RzID0gc3VwZXIuY2FsY3VsYXRlRWxlbWVudFJlY3RhbmdsZXMoY29udGVudEVsZW1lbnQsIHRhcmdldEVsZW1lbnQpO1xuICAgICAgICAvLyBzZWxlY3RGaXQgb2JqLCB0byBiZSB1c2VkIGZvciBib3RoIGNhc2VzIG9mIGluaXRpYWxDYWxsIGFuZCAhaW5pdGlhbENhbGwocGFnZSBzY3JvbGwvb3ZlcmxheSByZXBvc2l0aW9uQWxsKVxuICAgICAgICBjb25zdCBzZWxlY3RGaXQ6IFNlbGVjdEZpdCA9IHtcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0OiB0aGlzLmdsb2JhbF95T2Zmc2V0LFxuICAgICAgICAgICAgaG9yaXpvbnRhbE9mZnNldDogdGhpcy5nbG9iYWxfeE9mZnNldCxcbiAgICAgICAgICAgIHRhcmdldFJlY3Q6IHJlY3RzLnRhcmdldFJlY3QsXG4gICAgICAgICAgICBjb250ZW50RWxlbWVudFJlY3Q6IHJlY3RzLmVsZW1lbnRSZWN0LFxuICAgICAgICAgICAgc3R5bGVzOiB0aGlzLmdsb2JhbF9zdHlsZXMsXG4gICAgICAgICAgICBzY3JvbGxDb250YWluZXI6IHRoaXMuc2VsZWN0LnNjcm9sbENvbnRhaW5lcixcbiAgICAgICAgICAgIHNjcm9sbENvbnRhaW5lclJlY3Q6IHRoaXMuc2VsZWN0LnNjcm9sbENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpbml0aWFsQ2FsbCkge1xuICAgICAgICAgICAgLy8gRmlsbCBpbiB0aGUgcmVxdWlyZWQgc2VsZWN0Rml0IG9iamVjdCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgc2VsZWN0Rml0LnZpZXdQb3J0UmVjdCA9IFV0aWwuZ2V0Vmlld3BvcnRSZWN0KGRvY3VtZW50KTtcbiAgICAgICAgICAgIHNlbGVjdEZpdC5pdGVtRWxlbWVudCA9IHRoaXMuZ2V0SW50ZXJhY3Rpb25JdGVtRWxlbWVudCgpO1xuICAgICAgICAgICAgc2VsZWN0Rml0Lml0ZW1SZWN0ID0gc2VsZWN0Rml0Lml0ZW1FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgaW5wdXQgYW5kIHNlbGVjdGVkIGl0ZW0gZWxlbWVudHMgc3R5bGUgcmVsYXRlZCB2YXJpYWJsZXNcbiAgICAgICAgICAgIHNlbGVjdEZpdC5zdHlsZXMgPSB0aGlzLmNhbGN1bGF0ZVN0eWxlcyhzZWxlY3RGaXQsIHRhcmdldEVsZW1lbnQpO1xuXG4gICAgICAgICAgICBzZWxlY3RGaXQuc2Nyb2xsQW1vdW50ID0gdGhpcy5jYWxjdWxhdGVTY3JvbGxBbW91bnQoc2VsZWN0Rml0KTtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBob3cgbXVjaCB0byBvZmZzZXQgdGhlIG92ZXJsYXkgY29udGFpbmVyLlxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVZb2Zmc2V0KHNlbGVjdEZpdCk7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVhvZmZzZXQoc2VsZWN0Rml0KTtcblxuICAgICAgICAgICAgc3VwZXIudXBkYXRlVmlld1BvcnRGaXQoc2VsZWN0Rml0KTtcbiAgICAgICAgICAgIC8vIGNvbnRhaW5lciBkb2VzIG5vdCBmaXQgaW4gdmlld1BvcnQgYW5kIGlzIG91dCBvbiBUb3Agb3IgQm90dG9tXG4gICAgICAgICAgICBpZiAoc2VsZWN0Rml0LmZpdFZlcnRpY2FsLmJhY2sgPCAwIHx8IHNlbGVjdEZpdC5maXRWZXJ0aWNhbC5mb3J3YXJkIDwgMCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpdEluVmlld3BvcnQoY29udGVudEVsZW1lbnQsIHNlbGVjdEZpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC5zY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wID0gc2VsZWN0Rml0LnNjcm9sbEFtb3VudDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0eWxlcyhjb250ZW50RWxlbWVudCwgc2VsZWN0Rml0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgc2VsZWN0ZWQgaXRlbSBzY3JvbGwgcG9zaXRpb24uXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVTY3JvbGxBbW91bnQoc2VsZWN0Rml0OiBTZWxlY3RGaXQpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBpdGVtRWxlbWVudFJlY3QgPSBzZWxlY3RGaXQuaXRlbVJlY3Q7XG4gICAgICAgIGNvbnN0IHNjcm9sbENvbnRhaW5lciA9IHNlbGVjdEZpdC5zY3JvbGxDb250YWluZXI7XG4gICAgICAgIGNvbnN0IHNjcm9sbENvbnRhaW5lclJlY3QgPSBzZWxlY3RGaXQuc2Nyb2xsQ29udGFpbmVyUmVjdDtcbiAgICAgICAgY29uc3Qgc2Nyb2xsRGVsdGEgPSBzY3JvbGxDb250YWluZXJSZWN0LnRvcCAtIGl0ZW1FbGVtZW50UmVjdC50b3A7XG4gICAgICAgIGxldCBzY3JvbGxQb3NpdGlvbiA9IHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AgLSBzY3JvbGxEZWx0YTtcblxuICAgICAgICBjb25zdCBkcm9wRG93bkhlaWdodCA9IHNjcm9sbENvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gICAgICAgIHNjcm9sbFBvc2l0aW9uIC09IGRyb3BEb3duSGVpZ2h0IC8gMjtcbiAgICAgICAgc2Nyb2xsUG9zaXRpb24gKz0gaXRlbUVsZW1lbnRSZWN0LmhlaWdodCAvIDI7XG5cbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5taW4oTWF0aC5tYXgoMCwgc2Nyb2xsUG9zaXRpb24pLCBzY3JvbGxDb250YWluZXIuc2Nyb2xsSGVpZ2h0IC0gc2Nyb2xsQ29udGFpbmVyUmVjdC5oZWlnaHQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3NpdGlvbiB0aGUgaXRlbXMgb3V0ZXIgY29udGFpbmVyIHNvIHNlbGVjdGVkIGl0ZW0gdGV4dCBpcyBwb3NpdGlvbmVkIG92ZXIgaW5wdXQgdGV4dCBhbmQgaWYgaGVhZGVyXG4gICAgICogQW5kL09SIGZvb3RlciAtIGJvdGggaGVhZGVyL2Zvb3RlciBhcmUgdmlzaWJsZVxuICAgICAqIEBwYXJhbSBzZWxlY3RGaXQgc2VsZWN0Rml0IHRvIHVzZSBmb3IgY29tcHV0YXRpb24uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZpdEluVmlld3BvcnQoY29udGVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzZWxlY3RGaXQ6IFNlbGVjdEZpdCkge1xuICAgICAgICBjb25zdCBmb290ZXIgPSBzZWxlY3RGaXQuc2Nyb2xsQ29udGFpbmVyUmVjdC5ib3R0b20gLSBzZWxlY3RGaXQuY29udGVudEVsZW1lbnRSZWN0LmJvdHRvbTtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gc2VsZWN0Rml0LnNjcm9sbENvbnRhaW5lclJlY3QudG9wIC0gc2VsZWN0Rml0LmNvbnRlbnRFbGVtZW50UmVjdC50b3A7XG4gICAgICAgIGNvbnN0IGxhc3RJdGVtRml0U2l6ZSA9IHNlbGVjdEZpdC50YXJnZXRSZWN0LmJvdHRvbSArIHNlbGVjdEZpdC5zdHlsZXMuaXRlbVRleHRUb0lucHV0VGV4dERpZmYgLSBmb290ZXI7XG4gICAgICAgIGNvbnN0IGZpcnN0SXRlbUZpdFNpemUgPSBzZWxlY3RGaXQudGFyZ2V0UmVjdC50b3AgLSBzZWxlY3RGaXQuc3R5bGVzLml0ZW1UZXh0VG9JbnB1dFRleHREaWZmIC0gaGVhZGVyO1xuICAgICAgICAvLyBvdXQgb2Ygdmlld1BvcnQgb24gVG9wXG4gICAgICAgIGlmIChzZWxlY3RGaXQuZml0VmVydGljYWwuYmFjayA8IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlU2Nyb2xsQW1vdW50ID0gc2VsZWN0Rml0LnNjcm9sbENvbnRhaW5lci5zY3JvbGxIZWlnaHQgLVxuICAgICAgICAgICAgICAgIHNlbGVjdEZpdC5zY3JvbGxDb250YWluZXJSZWN0LmhlaWdodCAtIHNlbGVjdEZpdC5zY3JvbGxBbW91bnQ7XG4gICAgICAgICAgICBpZiAocG9zc2libGVTY3JvbGxBbW91bnQgKyBzZWxlY3RGaXQuZml0VmVydGljYWwuYmFjayA+IDAgJiYgZmlyc3RJdGVtRml0U2l6ZSA+IHNlbGVjdEZpdC52aWV3UG9ydFJlY3QudG9wKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Rml0LnNjcm9sbEFtb3VudCAtPSBzZWxlY3RGaXQuZml0VmVydGljYWwuYmFjaztcbiAgICAgICAgICAgICAgICBzZWxlY3RGaXQudmVydGljYWxPZmZzZXQgLT0gc2VsZWN0Rml0LmZpdFZlcnRpY2FsLmJhY2s7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxfeU9mZnNldCA9IHNlbGVjdEZpdC52ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Rml0LnZlcnRpY2FsT2Zmc2V0ID0gMCA7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxfeU9mZnNldCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIC8vIG91dCBvZiB2aWV3UG9ydCBvbiBCb3R0b21cbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RGaXQuZml0VmVydGljYWwuZm9yd2FyZCA8IDApIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RGaXQuc2Nyb2xsQW1vdW50ICsgc2VsZWN0Rml0LmZpdFZlcnRpY2FsLmZvcndhcmQgPiAwICYmIGxhc3RJdGVtRml0U2l6ZSA8IHNlbGVjdEZpdC52aWV3UG9ydFJlY3QuYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Rml0LnNjcm9sbEFtb3VudCArPSBzZWxlY3RGaXQuZml0VmVydGljYWwuZm9yd2FyZDtcbiAgICAgICAgICAgICAgICBzZWxlY3RGaXQudmVydGljYWxPZmZzZXQgKz0gc2VsZWN0Rml0LmZpdFZlcnRpY2FsLmZvcndhcmQ7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxfeU9mZnNldCA9IHNlbGVjdEZpdC52ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Rml0LnZlcnRpY2FsT2Zmc2V0ID0gLXNlbGVjdEZpdC5jb250ZW50RWxlbWVudFJlY3QuaGVpZ2h0ICsgc2VsZWN0Rml0LnRhcmdldFJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsX3lPZmZzZXQgPSBzZWxlY3RGaXQudmVydGljYWxPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGVsZW1lbnQncyBzdHlsZSB3aGljaCBlZmZlY3RpdmVseSBwb3NpdGlvbnMgdGhlIHByb3ZpZGVkIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBFbGVtZW50IHRvIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHNlbGVjdEZpdCBzZWxlY3RGaXQgdG8gdXNlIGZvciBjb21wdXRhdGlvbi5cbiAgICAgKiBAcGFyYW0gaW5pdGlhbENhbGwgc2hvdWxkIGJlIHRydWUgaWYgdGhpcyBpcyB0aGUgaW5pdGlhbCBjYWxsIHRvIHRoZSBwb3NpdGlvbiBtZXRob2QgY2FsbGluZyBzZXRTdHlsZXNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc2V0U3R5bGVzKGNvbnRlbnRFbGVtZW50OiBIVE1MRWxlbWVudCwgc2VsZWN0Rml0OiBTZWxlY3RGaXQpIHtcbiAgICAgICAgc3VwZXIuc2V0U3R5bGUoY29udGVudEVsZW1lbnQsIHNlbGVjdEZpdC50YXJnZXRSZWN0LCBzZWxlY3RGaXQuY29udGVudEVsZW1lbnRSZWN0LCBzZWxlY3RGaXQpO1xuICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3NlbGVjdEZpdC5zdHlsZXMuY29udGVudEVsZW1lbnROZXdXaWR0aH1weGA7IC8vIG1hbmFnZSBjb250YWluZXIgYmFzZWQgb24gcGFkZGluZ3M/XG4gICAgICAgIHRoaXMuZ2xvYmFsX3N0eWxlcy5jb250ZW50RWxlbWVudE5ld1dpZHRoID0gc2VsZWN0Rml0LnN0eWxlcy5jb250ZW50RWxlbWVudE5ld1dpZHRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgbmVjZXNzYXJ5IGlucHV0IGFuZCBzZWxlY3RlZCBpdGVtIHN0eWxlcyB0byBiZSB1c2VkIGZvciBwb3NpdGlvbmluZyBpdGVtIHRleHQgb3ZlciBpbnB1dCB0ZXh0LlxuICAgICAqIENhbGN1bGF0ZSAmIFNldCBkZWZhdWx0IGl0ZW1zIGNvbnRhaW5lciB3aWR0aC5cbiAgICAgKiBAcGFyYW0gc2VsZWN0Rml0IHNlbGVjdEZpdCB0byB1c2UgZm9yIGNvbXB1dGF0aW9uLlxuICAgICAqL1xuICAgIHByaXZhdGUgY2FsY3VsYXRlU3R5bGVzKHNlbGVjdEZpdDogU2VsZWN0Rml0LCB0YXJnZXQ6IFBvaW50IHwgSFRNTEVsZW1lbnQpOiBTZWxlY3RTdHlsZXMgIHtcbiAgICAgICAgY29uc3Qgc3R5bGVzOiBTZWxlY3RTdHlsZXMgPSB7fTtcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtZW50U3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0IGFzIEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBpdGVtRWxlbWVudFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNlbGVjdEZpdC5pdGVtRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG51bWVyaWNJbnB1dEZvbnRTaXplID0gcGFyc2VGbG9hdChpbnB1dEVsZW1lbnRTdHlsZXMuZm9udFNpemUpO1xuICAgICAgICBjb25zdCBudW1lcmljSXRlbUZvbnRTaXplID0gcGFyc2VGbG9hdChpdGVtRWxlbWVudFN0eWxlcy5mb250U2l6ZSk7XG4gICAgICAgIGNvbnN0IGlucHV0VGV4dFRvSW5wdXRUb3AgPSAoc2VsZWN0Rml0LnRhcmdldFJlY3QuYm90dG9tIC0gc2VsZWN0Rml0LnRhcmdldFJlY3QudG9wIC0gbnVtZXJpY0lucHV0Rm9udFNpemUpIC8gMjtcbiAgICAgICAgY29uc3QgaXRlbVRleHRUb0l0ZW1Ub3AgPSAoc2VsZWN0Rml0Lml0ZW1SZWN0LmhlaWdodCAtIG51bWVyaWNJdGVtRm9udFNpemUpIC8gMjtcbiAgICAgICAgIC8vIEFkanVzdCBmb3IgaW5wdXQgdG9wIHBhZGRpbmdcbiAgICAgICAgY29uc3QgbmVnYXRlSW5wdXRQYWRkaW5ncyA9IChcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGlucHV0RWxlbWVudFN0eWxlcy5wYWRkaW5nVG9wKSAtXG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdChpbnB1dEVsZW1lbnRTdHlsZXMucGFkZGluZ0JvdHRvbSlcbiAgICAgICAgICAgICkgLyAyO1xuICAgICAgICBzdHlsZXMuaXRlbVRleHRUb0lucHV0VGV4dERpZmYgPSBNYXRoLnJvdW5kKGl0ZW1UZXh0VG9JdGVtVG9wIC0gaW5wdXRUZXh0VG9JbnB1dFRvcCArIG5lZ2F0ZUlucHV0UGFkZGluZ3MpO1xuXG4gICAgICAgIGNvbnN0IG51bWVyaWNMZWZ0UGFkZGluZyA9IHBhcnNlRmxvYXQoaXRlbUVsZW1lbnRTdHlsZXMucGFkZGluZ0xlZnQpO1xuICAgICAgICBjb25zdCBudW1lcmljVGV4dEluZGVudCA9IHBhcnNlRmxvYXQoaXRlbUVsZW1lbnRTdHlsZXMudGV4dEluZGVudCk7XG5cbiAgICAgICAgc3R5bGVzLml0ZW1UZXh0UGFkZGluZyA9IG51bWVyaWNMZWZ0UGFkZGluZztcbiAgICAgICAgc3R5bGVzLml0ZW1UZXh0SW5kZW50ID0gbnVtZXJpY1RleHRJbmRlbnQ7XG4gICAgICAgIC8vIDI0IGlzIHRoZSBpbnB1dCdzIHRvZ2dsZSBkZGwgaWNvbiB3aWR0aFxuICAgICAgICBzdHlsZXMuY29udGVudEVsZW1lbnROZXdXaWR0aCA9IHNlbGVjdEZpdC50YXJnZXRSZWN0LndpZHRoICsgMjQgKyBudW1lcmljTGVmdFBhZGRpbmcgKiAyO1xuXG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2J0YWluIHRoZSBzZWxlY3RlZCBpdGVtIGlmIHRoZXJlIGlzIHN1Y2ggb25lIG9yIG90aGVyd2lzZSB1c2UgdGhlIGZpcnN0IG9uZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbnRlcmFjdGlvbkl0ZW1FbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgbGV0IGl0ZW1FbGVtZW50O1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Quc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICBpdGVtRWxlbWVudCA9IHRoaXMuc2VsZWN0LnNlbGVjdGVkSXRlbS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBELlAuIEZlYiAyMiAyMDE5LCAjMzkyMSBGb3JjZSBpdGVtIHNjcm9sbCBiZWZvcmUgbWVhc3VyaW5nIGluIElFMTEsIGR1ZSB0byBiYXNlIHNjcm9sbFRvSXRlbSBkZWxheVxuICAgICAgICAgICAgaWYgKGlzSUUoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0LnNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AgPSB0aGlzLnNlbGVjdC5jYWxjdWxhdGVTY3JvbGxQb3NpdGlvbih0aGlzLnNlbGVjdC5zZWxlY3RlZEl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbUVsZW1lbnQgPSB0aGlzLnNlbGVjdC5nZXRGaXJzdEl0ZW1FbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1FbGVtZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBob3cgbXVjaCB0byBvZmZzZXQgdGhlIG92ZXJsYXkgY29udGFpbmVyIGZvciBZLWF4aXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVZb2Zmc2V0KHNlbGVjdEZpdDogU2VsZWN0Rml0KSB7XG4gICAgICAgIHNlbGVjdEZpdC52ZXJ0aWNhbE9mZnNldCA9IC0oc2VsZWN0Rml0Lml0ZW1SZWN0LnRvcCAtIHNlbGVjdEZpdC5jb250ZW50RWxlbWVudFJlY3QudG9wICtcbiAgICAgICAgICAgIHNlbGVjdEZpdC5zdHlsZXMuaXRlbVRleHRUb0lucHV0VGV4dERpZmYgLSBzZWxlY3RGaXQuc2Nyb2xsQW1vdW50KTtcbiAgICAgICAgdGhpcy5nbG9iYWxfeU9mZnNldCA9IHNlbGVjdEZpdC52ZXJ0aWNhbE9mZnNldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgaG93IG11Y2ggdG8gb2Zmc2V0IHRoZSBvdmVybGF5IGNvbnRhaW5lciBmb3IgWC1heGlzLlxuICAgICAqL1xuICAgIHByaXZhdGUgY2FsY3VsYXRlWG9mZnNldChzZWxlY3RGaXQ6IFNlbGVjdEZpdCkge1xuICAgICAgICBzZWxlY3RGaXQuaG9yaXpvbnRhbE9mZnNldCA9IHNlbGVjdEZpdC5zdHlsZXMuaXRlbVRleHRJbmRlbnQgLSBzZWxlY3RGaXQuc3R5bGVzLml0ZW1UZXh0UGFkZGluZztcbiAgICAgICAgdGhpcy5nbG9iYWxfeE9mZnNldCA9IHNlbGVjdEZpdC5ob3Jpem9udGFsT2Zmc2V0O1xuICAgIH1cbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0Rml0IGV4dGVuZHMgQ29ubmVjdGVkRml0IHtcbiAgICBpdGVtRWxlbWVudD86IEhUTUxFbGVtZW50O1xuICAgIHNjcm9sbENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgc2Nyb2xsQ29udGFpbmVyUmVjdDogQ2xpZW50UmVjdDtcbiAgICBpdGVtUmVjdD86IENsaWVudFJlY3Q7XG4gICAgc3R5bGVzPzogU2VsZWN0U3R5bGVzO1xuICAgIHNjcm9sbEFtb3VudD86IG51bWJlcjtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0U3R5bGVzIHtcbiAgICBpdGVtVGV4dFBhZGRpbmc/OiBudW1iZXI7XG4gICAgaXRlbVRleHRJbmRlbnQ/OiBudW1iZXI7XG4gICAgaXRlbVRleHRUb0lucHV0VGV4dERpZmY/OiBudW1iZXI7XG4gICAgY29udGVudEVsZW1lbnROZXdXaWR0aD86IG51bWJlcjtcbiAgICBudW1lcmljTGVmdFBhZGRpbmc/OiBudW1iZXI7XG59XG4iXX0=