import { Component, ElementRef, HostBinding, Input, TemplateRef, ViewChild, ChangeDetectorRef } from '@angular/core';
import { IgxIconService } from './icon.service';
import { first, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
/**
 * Icon provides a way to include material icons to markup
 *
 * @igxModule IgxIconModule
 *
 * @igxTheme igx-icon-theme
 *
 * @igxKeywords icon, picture
 *
 * @igxGroup Display
 *
 * @remarks
 *
 * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons
 * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance
 * of the icon.
 *
 * @example
 * ```html
 * <igx-icon color="#00ff00" isActive="true">home</igx-icon>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './icon.service';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["noLigature"];
const _c1 = ["explicitLigature"];
const _c2 = ["svgImage"];
function IgxIconComponent_ng_template_0_Template(rf, ctx) { }
function IgxIconComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
function IgxIconComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg");
    ɵngcc0.ɵɵelement(1, "use");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("href", ctx_r5.getSvgKey);
} }
function IgxIconComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c3 = ["*"];
let NEXT_ID = 0;
export class IgxIconComponent {
    constructor(_el, iconService, ref) {
        this._el = _el;
        this.iconService = iconService;
        this.ref = ref;
        this.destroy$ = new Subject();
        /**
         *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-icon';
        /**
         *  This allows you to disable the `aria-hidden` attribute. By default it's applied.
         * @example
         * ```typescript
         * @ViewChild("MyIcon") public icon: IgxIconComponent;
         * constructor(private cdRef:ChangeDetectorRef) {}
         * ngAfterViewInit() {
         *     this.icon.ariaHidden = false;
         *     this.cdRef.detectChanges();
         * }
         * ```
         */
        this.ariaHidden = true;
        /**
         * An @Input property that sets the value of the `id` attribute.
         * @example
         * ```html
         * <igx-icon id="igx-icon-1" fontSet="material">settings</igx-icon>
         * ```
         */
        this.id = `igx-icon-${NEXT_ID++}`;
        /**
         * An @Input property that allows you to disable the `active` property. By default it's applied.
         * @example
         * ```html
         * <igx-icon [isActive]="false">settings</igx-icon>
         * ```
         */
        this.active = true;
        this.el = _el;
        this.font = this.iconService.defaultFontSet;
        this.iconService.registerFontSetAlias('material', 'material-icons');
        this.iconService.iconLoaded.pipe(first(e => e.name === this.iconName && e.fontSet === this.font), takeUntil(this.destroy$))
            .subscribe(_ => this.ref.detectChanges());
    }
    /**
     * @hidden
     * @internal
     */
    ngOnInit() {
        this.updateIconClass();
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     *  An accessor that returns the value of the font property.
     * @example
     * ```typescript
     *  @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconFont = this.icon.getFontSet;
     * }
     * ```
     */
    get getFontSet() {
        return this.font;
    }
    /**
     *  An accessor that returns the value of the active property.
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getActive;
     * }
     * ```
     */
    get getActive() {
        return this.active;
    }
    /**
     *  An accessor that returns inactive property.
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getInactive;
     * }
     * ```
     */
    get getInactive() {
        return !this.active;
    }
    /**
     * An accessor that returns the opposite value of the `iconColor` property.
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconColor = this.icon.getIconColor;
     * }
     * ```
     */
    get getIconColor() {
        return this.iconColor;
    }
    /**
     * An accessor that returns the value of the iconName property.
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconName = this.icon.getIconName;
     * }
     * ```
     */
    get getIconName() {
        return this.iconName;
    }
    /**
     *  An accessor that returns the key of the SVG image.
     *  The key consists of the fontSet and the iconName separated by underscore.
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let svgKey = this.icon.getSvgKey;
     * }
     * ```
     */
    get getSvgKey() {
        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {
            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);
        }
        return null;
    }
    /**
     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconTemplate = this.icon.template;
     * }
     * ```
     */
    get template() {
        if (this.iconName) {
            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {
                return this.svgImage;
            }
            return this.noLigature;
        }
        return this.explicitLigature;
    }
    /**
     * @hidden
     * @internal
     */
    updateIconClass() {
        const className = this.iconService.fontSetClassName(this.font);
        this.el.nativeElement.classList.add(className);
        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {
            this.el.nativeElement.classList.add(this.iconName);
        }
    }
}
IgxIconComponent.ɵfac = function IgxIconComponent_Factory(t) { return new (t || IgxIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxIconService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxIconComponent, selectors: [["igx-icon"]], viewQuery: function IgxIconComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noLigature = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.explicitLigature = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.svgImage = _t.first);
    } }, hostVars: 8, hostBindings: function IgxIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-hidden", ctx.ariaHidden)("id", ctx.id);
        ɵngcc0.ɵɵstyleProp("color", ctx.getIconColor);
        ɵngcc0.ɵɵclassProp("igx-icon", ctx.cssClass)("igx-icon--inactive", ctx.getInactive);
    } }, inputs: { id: "id", active: ["isActive", "active"], font: ["fontSet", "font"], iconColor: ["color", "iconColor"], iconName: ["name", "iconName"] }, ngContentSelectors: _c3, decls: 7, vars: 1, consts: [["noLigature", ""], ["explicitLigature", ""], ["svgImage", ""], [4, "ngTemplateOutlet"]], template: function IgxIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, IgxIconComponent_ng_template_0_Template, 0, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxIconComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, IgxIconComponent_ng_template_4_Template, 2, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, IgxIconComponent_ng_container_6_Template, 1, 0, "ng-container", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template);
    } }, directives: [ɵngcc2.NgTemplateOutlet], encapsulation: 2 });
IgxIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IgxIconService },
    { type: ChangeDetectorRef }
];
IgxIconComponent.propDecorators = {
    noLigature: [{ type: ViewChild, args: ['noLigature', { read: TemplateRef, static: true },] }],
    explicitLigature: [{ type: ViewChild, args: ['explicitLigature', { read: TemplateRef, static: true },] }],
    svgImage: [{ type: ViewChild, args: ['svgImage', { read: TemplateRef, static: true },] }],
    cssClass: [{ type: HostBinding, args: ['class.igx-icon',] }],
    ariaHidden: [{ type: HostBinding, args: ['attr.aria-hidden',] }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    font: [{ type: Input, args: ['fontSet',] }],
    active: [{ type: Input, args: ['isActive',] }],
    iconColor: [{ type: Input, args: ['color',] }],
    iconName: [{ type: Input, args: ['name',] }],
    getInactive: [{ type: HostBinding, args: ['class.igx-icon--inactive',] }],
    getIconColor: [{ type: HostBinding, args: ['style.color',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxIconComponent, [{
        type: Component,
        args: [{
                selector: 'igx-icon',
                template: "<ng-template #noLigature></ng-template>\n\n<ng-template #explicitLigature>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #svgImage>\n    <svg>\n        <use [attr.href]=\"getSvgKey\"></use>\n    </svg>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.IgxIconService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-icon']
        }], ariaHidden: [{
            type: HostBinding,
            args: ['attr.aria-hidden']
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], active: [{
            type: Input,
            args: ['isActive']
        }], font: [{
            type: Input,
            args: ['fontSet']
        }], getInactive: [{
            type: HostBinding,
            args: ['class.igx-icon--inactive']
        }], getIconColor: [{
            type: HostBinding,
            args: ['style.color']
        }], noLigature: [{
            type: ViewChild,
            args: ['noLigature', { read: TemplateRef, static: true }]
        }], explicitLigature: [{
            type: ViewChild,
            args: ['explicitLigature', { read: TemplateRef, static: true }]
        }], svgImage: [{
            type: ViewChild,
            args: ['svgImage', { read: TemplateRef, static: true }]
        }], iconColor: [{
            type: Input,
            args: ['color']
        }], iconName: [{
            type: Input,
            args: ['name']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,