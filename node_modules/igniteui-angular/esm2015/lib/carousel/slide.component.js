import { Component, Input, HostBinding, Output, EventEmitter, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export var Direction;
(function (Direction) {
    Direction[Direction["NONE"] = 0] = "NONE";
    Direction[Direction["NEXT"] = 1] = "NEXT";
    Direction[Direction["PREV"] = 2] = "PREV";
})(Direction || (Direction = {}));
/**
 * A slide component that usually holds an image and/or a caption text.
 * IgxSlideComponent is usually a child component of an IgxCarouselComponent.
 *
 * ```
 * <igx-slide [input bindings] >
 *    <ng-content></ng-content>
 * </igx-slide>
 * ```
 *
 * @export
 */
export class IgxSlideComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._active = false;
        this._destroy$ = new Subject();
        /**
         * Returns the class of the slide component.
         * ```typescript
         * let class =  this.slide.cssClass;
         * ```
         * @memberof IgxSlideComponent
         */
        this.cssClass = 'igx-slide';
        this.previous = false;
        /**
         * @hidden
         */
        this.activeChange = new EventEmitter();
    }
    /**
     * Returns the `tabIndex` of the slide component.
     * ```typescript
     * let tabIndex =  this.carousel.tabIndex;
     * ```
     * @memberof IgxSlideComponent
     */
    get tabIndex() {
        return this.active ? 0 : null;
    }
    /**
     * Returns the `aria-selected` of the slide.
     *
     * ```typescript
     * let slide = this.slide.ariaSelected;
     * ```
     *
     */
    get ariaSelected() {
        return this.active;
    }
    /**
     * Returns the `aria-live` of the slide.
     *
     * ```typescript
     * let slide = this.slide.ariaLive;
     * ```
     *
     */
    get ariaLive() {
        return this.active ? 'polite' : null;
    }
    /**
     * Gets/sets the `active` state of the slide.
     * ```html
     * <igx-carousel>
     *  <igx-slide [active] ="false"></igx-slide>
     * <igx-carousel>
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-carousel>
     *  <igx-slide [(active)] ="model.isActive"></igx-slide>
     * <igx-carousel>
     * ```
     * @memberof IgxSlideComponent
     */
    get active() {
        return this._active;
    }
    set active(value) {
        this._active = !!value;
        this.activeChange.emit(this._active);
    }
    /**
     * Returns a reference to the carousel element in the DOM.
     * ```typescript
     * let nativeElement =  this.slide.nativeElement;
     * ```
     * @memberof IgxSlideComponent
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @hidden
     */
    get isDestroyed() {
        return this._destroy$;
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
    }
}
IgxSlideComponent.ɵfac = function IgxSlideComponent_Factory(t) { return new (t || IgxSlideComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxSlideComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxSlideComponent, selectors: [["igx-slide"]], hostVars: 8, hostBindings: function IgxSlideComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex)("aria-selected", ctx.ariaLive);
        ɵngcc0.ɵɵclassProp("igx-slide", ctx.cssClass)("igx-slide--previous", ctx.previous)("igx-slide--current", ctx.active);
    } }, inputs: { previous: "previous", active: "active", index: "index", direction: "direction" }, outputs: { activeChange: "activeChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function IgxSlideComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
IgxSlideComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxSlideComponent.propDecorators = {
    index: [{ type: Input }],
    direction: [{ type: Input }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    ariaLive: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    cssClass: [{ type: HostBinding, args: ['class.igx-slide',] }],
    active: [{ type: HostBinding, args: ['class.igx-slide--current',] }, { type: Input }],
    previous: [{ type: HostBinding, args: ['class.igx-slide--previous',] }, { type: Input }],
    activeChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSlideComponent, [{
        type: Component,
        args: [{
                selector: 'igx-slide',
                template: "<ng-content></ng-content>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-slide']
        }], previous: [{
            type: HostBinding,
            args: ['class.igx-slide--previous']
        }, {
            type: Input
        }], activeChange: [{
            type: Output
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], ariaSelected: [{
            type: HostBinding,
            args: ['attr.aria-selected']
        }], ariaLive: [{
            type: HostBinding,
            args: ['attr.aria-selected']
        }], active: [{
            type: HostBinding,
            args: ['class.igx-slide--current']
        }, {
            type: Input
        }], index: [{
            type: Input
        }], direction: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,