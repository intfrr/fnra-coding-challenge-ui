import { Injectable } from '@angular/core';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export class IgxComboAPIService {
    constructor() {
        this.disableTransitions = false;
    }
    register(combo) {
        this.combo = combo;
    }
    clear() {
        this.combo = null;
    }
    get valueKey() {
        return this.combo.valueKey !== null && this.combo.valueKey !== undefined ? this.combo.valueKey : null;
    }
    get item_focusable() {
        return false;
    }
    get isRemote() {
        return this.combo.isRemote;
    }
    add_custom_item() {
        if (!this.combo) {
            return;
        }
        this.combo.addItemToCollection();
    }
    get comboID() {
        return this.combo.id;
    }
    set_selected_item(itemID, event) {
        const selected = this.combo.isItemSelected(itemID);
        if (itemID === null || itemID === undefined) {
            return;
        }
        if (!selected) {
            this.combo.selectItems([itemID], false, event);
        }
        else {
            this.combo.deselectItems([itemID], event);
        }
    }
    is_item_selected(itemID) {
        return this.combo.isItemSelected(itemID);
    }
}
IgxComboAPIService.ɵfac = function IgxComboAPIService_Factory(t) { return new (t || IgxComboAPIService)(); };
IgxComboAPIService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: IgxComboAPIService, factory: IgxComboAPIService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxComboAPIService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8uYXBpLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvY29tYm8vY29tYm8uYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7QUFDQTtBQUNBLEdBQUc7O0FBRUgsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQUZBO0FBQ0UsUUFHUyx1QkFBa0IsR0FBRyxLQUFLLENBQUM7QUFDdEMsSUErQ0EsQ0FBQztBQUNELElBL0NXLFFBQVEsQ0FBQyxLQUFtQjtBQUN2QyxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQzNCLElBQUksQ0FBQztBQUNMLElBRVcsS0FBSztBQUFLLFFBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDMUIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFXLFFBQVE7QUFDdkIsUUFBUSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDOUcsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFXLGNBQWM7QUFBSyxRQUMxQixPQUFPLEtBQUssQ0FBQztBQUNyQixJQUFJLENBQUM7QUFDTCxJQUFJLElBQVcsUUFBUTtBQUFLLFFBQ3BCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0wsSUFDVyxlQUFlO0FBQUssUUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDekIsWUFBWSxPQUFPO0FBQ25CLFNBQVM7QUFDVCxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUN6QyxJQUFJLENBQUM7QUFDTCxJQUNJLElBQVcsT0FBTztBQUFLLFFBQ25CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDN0IsSUFBSSxDQUFDO0FBQ0wsSUFDVyxpQkFBaUIsQ0FBQyxNQUFXLEVBQUUsS0FBYTtBQUFJLFFBQ25ELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNELFFBQVEsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7QUFDckQsWUFBWSxPQUFPO0FBQ25CLFNBQVM7QUFDVCxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDdkIsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzRCxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDVyxnQkFBZ0IsQ0FBQyxNQUFXO0FBQUksUUFDbkMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqRCxJQUFJLENBQUM7QUFDTDs4Q0FwREMsVUFBVTs7OztnREFDVDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4Q29tYm9CYXNlIH0gZnJvbSAnLi9jb21iby5jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIElneENvbWJvQVBJU2VydmljZSB7XG4gICAgcHJvdGVjdGVkIGNvbWJvOiBJZ3hDb21ib0Jhc2U7XG5cbiAgICBwdWJsaWMgZGlzYWJsZVRyYW5zaXRpb25zID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXIoY29tYm86IElneENvbWJvQmFzZSkge1xuICAgICAgICB0aGlzLmNvbWJvID0gY29tYm87XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tYm8gPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdmFsdWVLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvLnZhbHVlS2V5ICE9PSBudWxsICYmIHRoaXMuY29tYm8udmFsdWVLZXkgIT09IHVuZGVmaW5lZCA/IHRoaXMuY29tYm8udmFsdWVLZXkgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXRlbV9mb2N1c2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBpc1JlbW90ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tYm8uaXNSZW1vdGU7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZF9jdXN0b21faXRlbSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbWJvKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21iby5hZGRJdGVtVG9Db2xsZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjb21ib0lEKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvLmlkO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRfc2VsZWN0ZWRfaXRlbShpdGVtSUQ6IGFueSwgZXZlbnQ/OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuY29tYm8uaXNJdGVtU2VsZWN0ZWQoaXRlbUlEKTtcbiAgICAgICAgaWYgKGl0ZW1JRCA9PT0gbnVsbCB8fCBpdGVtSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29tYm8uc2VsZWN0SXRlbXMoW2l0ZW1JRF0sIGZhbHNlLCBldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbWJvLmRlc2VsZWN0SXRlbXMoW2l0ZW1JRF0sIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc19pdGVtX3NlbGVjdGVkKGl0ZW1JRDogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvLmlzSXRlbVNlbGVjdGVkKGl0ZW1JRCk7XG4gICAgfVxufVxuIl19