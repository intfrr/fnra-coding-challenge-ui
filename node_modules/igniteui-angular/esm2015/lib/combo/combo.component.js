import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgModule, Output, TemplateRef, ViewChild, Optional, Inject, Injector } from '@angular/core';
import { IgxComboItemDirective, IgxComboEmptyDirective, IgxComboHeaderItemDirective, IgxComboHeaderDirective, IgxComboFooterDirective, IgxComboAddItemDirective, IgxComboToggleIconDirective, IgxComboClearIconDirective } from './combo.directives';
import { FormsModule, ReactiveFormsModule, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { IgxCheckboxModule } from '../checkbox/checkbox.component';
import { IgxSelectionAPIService } from '../core/selection';
import { cloneArray } from '../core/utils';
import { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { IgxForOfModule, IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { IgxIconModule, IgxIconService } from '../icon/public_api';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxDropDownModule } from '../drop-down/public_api';
import { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxComboItemComponent } from './combo-item.component';
import { IgxComboDropDownComponent } from './combo-dropdown.component';
import { IgxComboFilteringPipe, IgxComboGroupingPipe } from './combo.pipes';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../services/public_api';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { IGX_COMBO_COMPONENT } from './combo.common';
import { IgxComboAddItemComponent } from './combo-add-item.component';
import { IgxComboAPIService } from './combo.api';
import { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';
import { IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';
import { caseSensitive } from '@igniteui/material-icons-extended';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../core/selection';
import * as ɵngcc2 from './combo.api';
import * as ɵngcc3 from '../icon/public_api';
import * as ɵngcc4 from '../input-group/input-group.component';
import * as ɵngcc5 from '../directives/input/input.directive';
import * as ɵngcc6 from '@angular/common';
import * as ɵngcc7 from '../directives/suffix/suffix.directive';
import * as ɵngcc8 from '../drop-down/drop-down-navigation.directive';
import * as ɵngcc9 from '../directives/for-of/for_of.directive';
import * as ɵngcc10 from '../icon/icon.component';
import * as ɵngcc11 from '@angular/forms';
import * as ɵngcc12 from '../directives/button/button.directive';
import * as ɵngcc13 from '../directives/ripple/ripple.directive';

const _c0 = ["searchInput"];
const _c1 = ["dropdownItemContainer"];
const _c2 = ["inputGroup"];
const _c3 = ["comboInput"];
const _c4 = ["primitive"];
const _c5 = ["complex"];
function IgxComboComponent_igx_suffix_12_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxComboComponent_igx_suffix_12_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_igx_suffix_12_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r22.clearIconTemplate);
} }
function IgxComboComponent_igx_suffix_12_igx_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 26);
    ɵngcc0.ɵɵtext(1, " clear ");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxComboComponent_igx_suffix_12_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-suffix", 25);
    ɵngcc0.ɵɵlistener("click", function IgxComboComponent_igx_suffix_12_Template_igx_suffix_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.handleClearItems($event); });
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_igx_suffix_12_ng_container_1_Template, 2, 1, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(2, IgxComboComponent_igx_suffix_12_igx_icon_2_Template, 2, 0, "igx-icon", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.clearIconTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.clearIconTemplate);
} }
function IgxComboComponent_ng_container_14_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c6 = function (a0) { return { $implicit: a0 }; };
function IgxComboComponent_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_ng_container_14_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r3.toggleIconTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c6, ctx_r3.collapsed));
} }
function IgxComboComponent_igx_icon_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.dropdown.collapsed ? "arrow_drop_down" : "arrow_drop_up", " ");
} }
function IgxComboComponent_igx_input_group_18_igx_suffix_3_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-suffix");
    ɵngcc0.ɵɵelementStart(1, "igx-icon", 31);
    ɵngcc0.ɵɵlistener("click", function IgxComboComponent_igx_input_group_18_igx_suffix_3_Template_igx_icon_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r30 = ɵngcc0.ɵɵnextContext(2); return ctx_r30.toggleCaseSensitive(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r29 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("isActive", ctx_r29.filteringOptions.caseSensitive);
} }
function IgxComboComponent_igx_input_group_18_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 28);
    ɵngcc0.ɵɵelementStart(1, "input", 29, 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function IgxComboComponent_igx_input_group_18_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.searchValue = $event; })("ngModelChange", function IgxComboComponent_igx_input_group_18_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.handleInputChange($event); })("keyup", function IgxComboComponent_igx_input_group_18_Template_input_keyup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35.handleKeyUp($event); })("keydown", function IgxComboComponent_igx_input_group_18_Template_input_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r36 = ɵngcc0.ɵɵnextContext(); return ctx_r36.handleKeyDown($event); })("focus", function IgxComboComponent_igx_input_group_18_Template_input_focus_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r37 = ɵngcc0.ɵɵnextContext(); return ctx_r37.dropdown.onBlur($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, IgxComboComponent_igx_input_group_18_igx_suffix_3_Template, 2, 1, "igx-suffix", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r6.displayDensity);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r6.searchValue);
    ɵngcc0.ɵɵattribute("placeholder", ctx_r6.searchPlaceholder)("aria-owns", ctx_r6.dropdown.id)("aria-labelledby", ctx_r6.ariaLabelledBy);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.showSearchCaseIcon);
} }
function IgxComboComponent_ng_container_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxComboComponent_igx_combo_item_22_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c7 = function (a0, a1, a2, a3, a4) { return { $implicit: a0, data: a1, valueKey: a2, groupKey: a3, displayKey: a4 }; };
function IgxComboComponent_igx_combo_item_22_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_igx_combo_item_22_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r38 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r40 = ɵngcc0.ɵɵnextContext();
    const _r20 = ɵngcc0.ɵɵreference(36);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r40.headerItemTemplate ? ctx_r40.headerItemTemplate : _r20)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction5(2, _c7, item_r38, ctx_r40.data, ctx_r40.valueKey, ctx_r40.groupKey, ctx_r40.displayKey));
} }
function IgxComboComponent_igx_combo_item_22_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, null, 33);
} }
const _c8 = function (a0, a1, a2, a3) { return { $implicit: a0, data: a1, valueKey: a2, displayKey: a3 }; };
function IgxComboComponent_igx_combo_item_22_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_igx_combo_item_22_ng_container_2_ng_container_1_Template, 2, 0, "ng-container", 27);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r38 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r41 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r41.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(2, _c8, item_r38, ctx_r41.data, ctx_r41.valueKey, ctx_r41.displayKey));
} }
function IgxComboComponent_igx_combo_item_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-combo-item", 32);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_igx_combo_item_22_ng_container_1_Template, 2, 8, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(2, IgxComboComponent_igx_combo_item_22_ng_container_2_Template, 2, 7, "ng-container", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r38 = ctx.$implicit;
    const rowIndex_r39 = ctx.index;
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("itemHeight", ctx_r9.itemHeight)("value", item_r38)("isHeader", item_r38.isHeader)("index", rowIndex_r39);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r38.isHeader);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !item_r38.isHeader);
} }
function IgxComboComponent_div_25_div_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxComboComponent_div_25_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 37);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_div_25_div_1_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r47 = ɵngcc0.ɵɵnextContext(2);
    const _r16 = ɵngcc0.ɵɵreference(32);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r47.emptyTemplate ? ctx_r47.emptyTemplate : _r16);
} }
function IgxComboComponent_div_25_igx_combo_add_item_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxComboComponent_div_25_igx_combo_add_item_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-combo-add-item", 38);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_div_25_igx_combo_add_item_2_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r48 = ɵngcc0.ɵɵnextContext(2);
    const _r18 = ɵngcc0.ɵɵreference(34);
    ɵngcc0.ɵɵproperty("itemHeight", ctx_r48.itemHeight)("tabindex", ctx_r48.dropdown.collapsed ? -1 : ctx_r48.customValueFlag ? 1 : -1)("index", ctx_r48.virtualScrollContainer.igxForOf.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r48.addItemTemplate ? ctx_r48.addItemTemplate : _r18);
} }
function IgxComboComponent_div_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵtemplate(1, IgxComboComponent_div_25_div_1_Template, 2, 1, "div", 35);
    ɵngcc0.ɵɵtemplate(2, IgxComboComponent_div_25_igx_combo_add_item_2_Template, 2, 4, "igx-combo-add-item", 36);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.filteredData.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.isAddButtonVisible());
} }
function IgxComboComponent_ng_container_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxComboComponent_ng_template_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const display_r51 = ctx.$implicit;
    const key_r53 = ctx.displayKey;
    ɵngcc0.ɵɵtextInterpolate1(" ", display_r51[key_r53], "\n");
} }
function IgxComboComponent_ng_template_29_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const display_r54 = ctx.$implicit;
    ɵngcc0.ɵɵtextInterpolate1(" ", display_r54, "\n");
} }
function IgxComboComponent_ng_template_31_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "The list is empty");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxComboComponent_ng_template_33_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 39);
    ɵngcc0.ɵɵtext(1, "Add item");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxComboComponent_ng_template_35_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const item_r56 = ctx.$implicit;
    const key_r57 = ctx.valueKey;
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r56[key_r57], "\n");
} }
const _c9 = [[["", "igxLabel", ""]], [["igx-prefix"]], [["igx-hint"], ["", "igxHint", ""]], [["igx-suffix"]]];
const _c10 = function (a0, a1, a2, a3, a4) { return [a0, a1, a2, a3, a4]; };
const _c11 = ["[igxLabel]", "igx-prefix", "igx-hint, [igxHint]", "igx-suffix"];
var DataTypes;
(function (DataTypes) {
    DataTypes["EMPTY"] = "empty";
    DataTypes["PRIMITIVE"] = "primitive";
    DataTypes["COMPLEX"] = "complex";
    DataTypes["PRIMARYKEY"] = "valueKey";
})(DataTypes || (DataTypes = {}));
/**
 * @hidden
 */
const ItemHeights = {
    'comfortable': 40,
    'cosy': 32,
    'compact': 28,
};
/**
 * @hidden
 * The default number of items that should be in the combo's
 * drop-down list if no `[itemsMaxHeight]` is specified
 */
const itemsInContainer = 10;
export var IgxComboState;
(function (IgxComboState) {
    /**
     * Combo with initial state.
     */
    IgxComboState[IgxComboState["INITIAL"] = 0] = "INITIAL";
    /**
     * Combo with valid state.
     */
    IgxComboState[IgxComboState["VALID"] = 1] = "VALID";
    /**
     * Combo with invalid state.
     */
    IgxComboState[IgxComboState["INVALID"] = 2] = "INVALID";
})(IgxComboState || (IgxComboState = {}));
/**
 * When called with sets A & B, returns A - B (as array);
 * @hidden
 */
function diffInSets(set1, set2) {
    const results = [];
    set1.forEach(entry => {
        if (!set2.has(entry)) {
            results.push(entry);
        }
    });
    return results;
}
let NEXT_ID = 0;
const noop = () => { };
const ɵ0 = noop;
export class IgxComboComponent extends DisplayDensityBase {
    constructor(elementRef, cdr, selection, comboAPI, _iconService, _displayDensityOptions, _inputGroupType, _injector) {
        super(_displayDensityOptions);
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
        this.comboAPI = comboAPI;
        this._iconService = _iconService;
        this._displayDensityOptions = _displayDensityOptions;
        this._inputGroupType = _inputGroupType;
        this._injector = _injector;
        /**
         * @hidden @internal
         */
        this.customValueFlag = true;
        /**
         * @hidden @internal
         */
        this.defaultFallbackGroup = 'Other';
        /**
         * @hidden @internal
         */
        this.filteringOptions = {
            caseSensitive: false
        };
        /** @hidden @internal */
        this.filterValue = '';
        this.stringFilters = IgxStringFilteringOperand;
        this.booleanFilters = IgxBooleanFilteringOperand;
        this._groupKey = '';
        this._prevInputValue = '';
        this._dataType = '';
        this._searchValue = '';
        this._type = null;
        this.ngControl = null;
        this.destroy$ = new Subject();
        this._data = [];
        this._filteredData = [];
        this._itemHeight = null;
        this._itemsMaxHeight = null;
        this._remoteSelection = {};
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
        this._value = '';
        this._valid = IgxComboState.INITIAL;
        /**
         * Set custom overlay settings that control how the combo's list of items is displayed.
         * Set:
         * ```html
         * <igx-combo [overlaySettings] = "customOverlaySettings"></igx-combo>
         * ```
         *
         * ```typescript
         *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };
         *  combo.overlaySettings = customSettings;
         * ```
         * Get any custom overlay settings used by the combo:
         * ```typescript
         *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;
         * ```
         */
        this.overlaySettings = null;
        /**
         * @hidden @internal
         */
        this.searchInput = null;
        /**
         * The custom template, if any, that should be used when rendering ITEMS in the combo list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.itemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboItem>
         *          <div class="custom-item" let-item let-key="valueKey">
         *              <div class="custom-item__name">{{ item[key] }}</div>
         *              <div class="custom-item__cost">{{ item.cost }}</div>
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.itemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the HEADER for the combo items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.headerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboHeader>
         *          <div class="combo__header">
         *              This is a custom header
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.headerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the FOOTER for the combo items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.footerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboFooter>
         *          <div class="combo__footer">
         *              This is a custom footer
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.footerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.headerItemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboHeaderItem let-item let-key="groupKey">
         *          <div class="custom-item--group">Group header for {{ item[key] }}</div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.headerItemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.addItemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboAddItem>
         *          <button class="combo__add-button">
         *              Click to add item
         *          </button>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.addItemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.emptyTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboEmpty>
         *          <div class="combo--empty">
         *              There are no items to display
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.emptyTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.toggleIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboToggleIcon let-collapsed>
         *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.toggleIconTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the combo CLEAR button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.clearIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboClearIcon>
         *          <igx-icon>clear</igx-icon>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.clearIconTemplate = null;
        this.dropdownContainer = null;
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>
         * ```
         */
        this.onSelectionChange = new EventEmitter();
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-combo onOpening='handleOpening($event)'></igx-combo>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-combo (onOpened)='handleOpened()'></igx-combo>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>
         * ```
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosed)='handleClosed()'></igx-combo>
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Emitted when an item is being added to the data collection
         *
         * ```html
         * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>
         * ```
         */
        this.onAddition = new EventEmitter();
        /**
         * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
         *
         * ```html
         * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>
         * ```
         */
        this.onSearchInput = new EventEmitter();
        /**
         * Emitted when new chunk of data is loaded from the virtualization
         *
         * ```html
         * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>
         * ```
         */
        this.onDataPreLoad = new EventEmitter();
        /**
         * Gets/gets combo id.
         *
         * ```typescript
         * // get
         * let id = this.combo.id;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [id]='combo1'></igx-combo>
         * ```
         */
        this.id = `igx-combo-${NEXT_ID++}`;
        /**
         * @hidden @internal
         */
        this.cssClass = 'igx-combo'; // Independent of display density, at the time being
        /**
         * @hidden @internal
         */
        this.role = 'combobox';
        /**
         * Controls whether custom values can be added to the collection
         *
         * ```typescript
         * // get
         * let comboAllowsCustomValues = this.combo.allowCustomValues;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [allowCustomValues]='true'></igx-combo>
         * ```
         */
        this.allowCustomValues = false;
        /**
         * @hidden @internal
         */
        this.filteringLogic = FilteringLogic.Or;
        /**
         * Defines the placeholder value for the combo dropdown search field
         *
         * ```typescript
         * // get
         * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
         * ```
         */
        this.searchPlaceholder = 'Enter a Search Term';
        /**
         * Defines whether the caseSensitive icon should be shown in the search input
         *
         * ```typescript
         * // get
         * let myComboShowSearchCaseIcon = this.combo.showSearchCaseIcon;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [showSearchCaseIcon]='true'></igx-combo>
         * ```
         */
        this.showSearchCaseIcon = false;
        /**
         * Combo value data source property.
         *
         * ```typescript
         * // get
         * let myComboValueKey = this.combo.valueKey;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [valueKey]='myKey'></igx-combo>
         * ```
         */
        this.valueKey = null;
        /**
         * An @Input property that enabled/disables filtering in the list. The default is `true`.
         * ```html
         * <igx-combo [filterable]="false">
         * ```
         */
        this.filterable = true;
        /**
         * An @Input property that enabled/disables combo. The default is `false`.
         * ```html
         * <igx-combo [disabled]="'true'">
         * ```
         */
        this.disabled = false;
        /**
         * An @Input property that controls whether the combo's search box
         * should be focused after the `onOpened` event is called
         * When `false`, the combo's list item container will be focused instead
         */
        this.autoFocusSearch = true;
        this.onStatusChanged = () => {
            if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&
                (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {
                if (!this.collapsed || this.inputGroup.isFocused) {
                    this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;
                }
                else {
                    this.valid = this.ngControl.valid ? IgxComboState.INITIAL : IgxComboState.INVALID;
                }
            }
            this.manageRequiredAsterisk();
        };
        this.comboAPI.register(this);
    }
    /**
     * @hidden @internal
     */
    get displaySearchInput() {
        return this.filterable || this.allowCustomValues;
    }
    /**
     * @hidden @internal
     */
    get ariaExpanded() {
        return !this.dropdown.collapsed;
    }
    /**
     * @hidden @internal
     */
    get hasPopUp() {
        return 'listbox';
    }
    /**
     * @hidden @internal
     */
    get ariaOwns() {
        return this.dropdown.id;
    }
    /**
     * Configures the drop down list height
     *
     * ```typescript
     * // get
     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemsMaxHeight]='320'></igx-combo>
     * ```
     */
    get itemsMaxHeight() {
        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {
            return this.itemHeight * itemsInContainer;
        }
        return this._itemsMaxHeight;
    }
    set itemsMaxHeight(val) {
        this._itemsMaxHeight = val;
    }
    /**
     * Configures the drop down list item height
     *
     * ```typescript
     * // get
     * let myComboItemHeight = this.combo.itemHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemHeight]='32'></igx-combo>
     * ```
     */
    get itemHeight() {
        if (this._itemHeight === null || this._itemHeight === undefined) {
            return ItemHeights[this.displayDensity];
        }
        return this._itemHeight;
    }
    set itemHeight(val) {
        this._itemHeight = val;
    }
    /**
     * @hidden @internal
     */
    get inputEmpty() {
        return !this.value && !this.placeholder;
    }
    /**
     * Combo data source.
     *
     * ```html
     * <!--set-->
     * <igx-combo [data]='items'></igx-combo>
     * ```
     */
    get data() {
        return this._data;
    }
    set data(val) {
        this._data = (val) ? val : [];
    }
    set displayKey(val) {
        this._displayKey = val;
    }
    /**
     * Combo text data source property.
     *
     * ```typescript
     * // get
     * let myComboDisplayKey = this.combo.displayKey;
     *
     * // set
     * this.combo.displayKey = 'val';
     *
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>
     * ```
     */
    get displayKey() {
        return this._displayKey ? this._displayKey : this.valueKey;
    }
    /**
     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
     *
     * ```html
     * <!--set-->
     * <igx-combo [groupKey]='newGroupKey'></igx-combo>
     * ```
     */
    set groupKey(val) {
        this._groupKey = val;
    }
    /**
     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
     *
     * ```typescript
     * // get
     * let currentGroupKey = this.combo.groupKey;
     * ```
     */
    get groupKey() {
        return this._groupKey;
    }
    /**
     * An @Input property that sets how the combo will be styled.
     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
     * ```html
     * <igx-combo [type]="'line'">
     * ```
     */
    get type() {
        return this._type || this._inputGroupType || 'box';
    }
    set type(val) {
        this._type = val;
    }
    /**
     * Gets if control is valid, when used in a form
     *
     * ```typescript
     * // get
     * let valid = this.combo.valid;
     * ```
     */
    get valid() {
        return this._valid;
    }
    /**
     * Sets if control is valid, when used in a form
     *
     * ```typescript
     * // set
     * this.combo.valid = IgxComboState.INVALID;
     * ```
     */
    set valid(valid) {
        this._valid = valid;
        this.comboInput.valid = IgxInputState[IgxComboState[valid]];
    }
    /**
     * @hidden @internal
     */
    get searchValue() {
        return this._searchValue;
    }
    set searchValue(val) {
        this.filterValue = val;
        this._searchValue = val;
    }
    /**
     * @hidden @internal
     */
    onArrowDown(event) {
        event.preventDefault();
        event.stopPropagation();
        this.open();
    }
    /**
     * @hidden @internal
     */
    onInputClick(event) {
        event.stopPropagation();
        event.preventDefault();
        if (!this.disabled) {
            this.toggle();
        }
    }
    /**
     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`
     *
     * ```typescript
     * // get
     * let state = this.combo.virtualizationState;
     * ```
     */
    get virtualizationState() {
        return this.virtDir.state;
    }
    /**
     * Sets the current state of the virtualized data.
     *
     * ```typescript
     * // set
     * this.combo.virtualizationState(state);
     * ```
     */
    set virtualizationState(state) {
        this.virtDir.state = state;
    }
    /**
     * Gets total count of the virtual data items, when using remote service.
     *
     * ```typescript
     * // get
     * let count = this.combo.totalItemCount;
     * ```
     */
    get totalItemCount() {
        return this.virtDir.totalItemCount;
    }
    /**
     * Sets total count of the virtual data items, when using remote service.
     *
     * ```typescript
     * // set
     * this.combo.totalItemCount(remoteService.count);
     * ```
     */
    set totalItemCount(count) {
        this.virtDir.totalItemCount = count;
    }
    /**
     * The text displayed in the combo input
     *
     * ```typescript
     * // get
     * let comboValue = this.combo.value;
     * ```
     */
    get value() {
        return this._value;
    }
    /**
     * @hidden @internal
     */
    get filteredData() {
        return this.filterable ? this._filteredData : this.data;
    }
    /**
     * @hidden @internal
     */
    set filteredData(val) {
        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;
        this.checkMatch();
    }
    /**
     * @hidden @internal
     */
    handleKeyUp(event) {
        if (event.key === 'ArrowDown' || event.key === 'Down') {
            this.dropdown.focusedItem = this.dropdown.items[0];
            this.dropdownContainer.nativeElement.focus();
        }
        else if (event.key === 'Escape' || event.key === 'Esc') {
            this.toggle();
        }
    }
    /**
     * @hidden @internal
     */
    handleKeyDown(event) {
        if (event.key === 'ArrowUp' || event.key === 'Up') {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    }
    checkMatch() {
        const displayKey = this.displayKey;
        const matchFn = (e) => {
            const value = displayKey ? e[displayKey] : e;
            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();
        };
        const itemMatch = this.filteredData.some(matchFn);
        this.customValueFlag = this.allowCustomValues && !itemMatch;
    }
    /**
     * @hidden @internal
     */
    handleInputChange(event) {
        if (event !== undefined) {
            const args = {
                searchText: event,
                owner: this,
                cancel: false
            };
            this.onSearchInput.emit(args);
            if (args.cancel) {
                this.filterValue = null;
            }
        }
        this.checkMatch();
    }
    /**
     * @hidden @internal
     */
    get dataType() {
        if (this.displayKey) {
            return DataTypes.COMPLEX;
        }
        return DataTypes.PRIMITIVE;
    }
    /**
     * @hidden @internal
     */
    get isRemote() {
        return this.totalItemCount > 0 &&
            this.valueKey &&
            this.dataType === DataTypes.COMPLEX;
    }
    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */
    registerRemoteEntries(ids, add = true) {
        if (add) {
            const selection = this.getValueDisplayPairs(ids);
            for (const entry of selection) {
                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];
            }
        }
        else {
            for (const entry of ids) {
                delete this._remoteSelection[entry];
            }
        }
    }
    /**
     * For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`
     */
    getValueDisplayPairs(ids) {
        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => {
            return {
                [this.valueKey]: e[this.valueKey],
                [this.displayKey]: e[this.displayKey]
            };
        });
    }
    /**
     * Returns if the specified itemID is selected
     * @hidden
     * @internal
     */
    isItemSelected(item) {
        return this.selection.is_item_selected(this.id, item);
    }
    /**
     * Triggers change detection on the combo view
     */
    triggerCheck() {
        this.cdr.detectChanges();
    }
    /**
     * @hidden @internal
     */
    isAddButtonVisible() {
        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;
        return this.searchValue !== '' && this.customValueFlag;
    }
    /**
     * @hidden @internal
     */
    handleSelectAll(evt) {
        if (evt.checked) {
            this.selectAllItems();
        }
        else {
            this.deselectAllItems();
        }
    }
    /**
     * @hidden @internal
     */
    addItemToCollection() {
        if (!this.searchValue) {
            return;
        }
        const newValue = this.searchValue.trim();
        const addedItem = this.displayKey ? {
            [this.valueKey]: newValue,
            [this.displayKey]: newValue
        } : newValue;
        if (this.groupKey) {
            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });
        }
        const oldCollection = this.data;
        const newCollection = [...this.data];
        newCollection.push(addedItem);
        const args = {
            oldCollection, addedItem, newCollection, owner: this
        };
        this.onAddition.emit(args);
        this.data.push(addedItem);
        // If you mutate the array, no pipe is invoked and the display isn't updated;
        // if you replace the array, the pipe executes and the display is updated.
        this.data = cloneArray(this.data);
        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);
        this.customValueFlag = false;
        this.searchInput.nativeElement.focus();
        this.dropdown.focusedItem = null;
        this.virtDir.scrollTo(0);
    }
    /**
     * @hidden @internal
     */
    focusSearchInput(opening) {
        if (this.displaySearchInput && this.searchInput) {
            this.searchInput.nativeElement.focus();
        }
        else {
            if (opening) {
                this.dropdownContainer.nativeElement.focus();
            }
            else {
                this.comboInput.nativeElement.focus();
                this.toggle();
            }
        }
    }
    manageRequiredAsterisk() {
        if (this.ngControl && this.ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this.ngControl.control.validator({});
            this.inputGroup.isRequired = error && error.required;
        }
    }
    /**
     * @hidden @internal
     */
    onBlur() {
        if (this.collapsed) {
            this._onTouchedCallback();
            if (this.ngControl && !this.ngControl.valid) {
                this.valid = IgxComboState.INVALID;
            }
            else {
                this.valid = IgxComboState.INITIAL;
            }
        }
    }
    /**
     * @hidden @internal
     */
    ngOnInit() {
        this.ngControl = this._injector.get(NgControl, null);
        const targetElement = this.elementRef.nativeElement;
        this._overlaySettings = {
            target: targetElement,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy(),
            modal: false,
            closeOnOutsideClick: true,
            excludeFromOutsideClick: [targetElement]
        };
        this.selection.set(this.id, new Set());
        this._iconService.addSvgIconFromText(caseSensitive.name, caseSensitive.value, 'imx-icons');
    }
    /**
     * @hidden @internal
     */
    ngAfterViewInit() {
        this.filteredData = [...this.data];
        if (this.ngControl) {
            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);
            this.manageRequiredAsterisk();
            this.cdr.detectChanges();
        }
        this.virtDir.onChunkPreload.pipe(takeUntil(this.destroy$)).subscribe((e) => {
            const eventArgs = Object.assign({}, e, { owner: this });
            this.onDataPreLoad.emit(eventArgs);
        });
    }
    /**
     * @hidden @internal
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboAPI.clear();
        this.selection.clear(this.id);
    }
    /**
     * @hidden @internal
     */
    writeValue(value) {
        const selection = Array.isArray(value) ? value : [];
        const oldSelection = this.selectedItems();
        this.selection.select_items(this.id, selection, true);
        this._value = this.createDisplayText(this.selectedItems(), oldSelection);
    }
    /**
     * @hidden @internal
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden @internal
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden @internal
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    getEditElement() {
        return this.comboInput.nativeElement;
    }
    /**
     * @hidden @internal
     */
    get template() {
        this._dataType = this.dataType;
        if (this.itemTemplate) {
            return this.itemTemplate;
        }
        if (this._dataType === DataTypes.COMPLEX) {
            return this.complexTemplate;
        }
        return this.primitiveTemplate;
    }
    /**
     * @hidden @internal
     */
    get context() {
        return {
            $implicit: this
        };
    }
    /**
     * @hidden @internal
     */
    handleClearItems(event) {
        if (this.disabled) {
            return;
        }
        this.deselectAllItems(true, event);
        if (this.collapsed) {
            this.getEditElement().focus();
        }
        else {
            this.focusSearchInput(true);
        }
        event.stopPropagation();
    }
    /**
     * A method that opens/closes the combo.
     *
     * ```html
     * <button (click)="combo.toggle()">Toggle Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     */
    toggle() {
        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);
        this.dropdown.toggle(overlaySettings);
    }
    /**
     * A method that opens the combo.
     *
     * ```html
     * <button (click)="combo.open()">Open Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     */
    open() {
        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);
        this.dropdown.open(overlaySettings);
    }
    /**
     * A method that closes the combo.
     *
     * ```html
     * <button (click)="combo.close()">Close Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     */
    close() {
        this.dropdown.close();
    }
    /**
     * Gets drop down state.
     *
     * ```typescript
     * let state = this.combo.collapsed;
     * ```
     */
    get collapsed() {
        return this.dropdown.collapsed;
    }
    /**
     * Get current selection state
     * @returns Array of selected items
     * ```typescript
     * let selectedItems = this.combo.selectedItems();
     * ```
     */
    selectedItems() {
        const items = Array.from(this.selection.get(this.id));
        return items;
    }
    /**
     * Select defined items
     * @param newItems new items to be selected
     * @param clearCurrentSelection if true clear previous selected items
     * ```typescript
     * this.combo.selectItems(["New York", "New Jersey"]);
     * ```
     */
    selectItems(newItems, clearCurrentSelection, event) {
        if (newItems) {
            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);
            this.setSelection(newSelection, event);
        }
    }
    /**
     * Deselect defined items
     * @param items items to deselected
     * ```typescript
     * this.combo.deselectItems(["New York", "New Jersey"]);
     * ```
     */
    deselectItems(items, event) {
        if (items) {
            const newSelection = this.selection.delete_items(this.id, items);
            this.setSelection(newSelection, event);
        }
    }
    /**
     * Select all (filtered) items
     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * this.combo.selectAllItems();
     * ```
     */
    selectAllItems(ignoreFilter, event) {
        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);
        const newSelection = this.selection.add_items(this.id, allVisible);
        this.setSelection(newSelection, event);
    }
    /**
     * Deselect all (filtered) items
     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * this.combo.deselectAllItems();
     * ```
     */
    deselectAllItems(ignoreFilter, event) {
        let newSelection = this.selection.get_empty();
        if (this.filteredData.length !== this.data.length && !ignoreFilter) {
            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));
        }
        this.setSelection(newSelection, event);
    }
    /**
     * Selects/Deselects a single item
     * @param itemID the itemID of the specific item
     * @param select If the item should be selected (true) or deselected (false)
     *
     * Without specified valueKey;
     * ```typescript
     * this.combo.valueKey = null;
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem(items[0], true);
     * ```
     * With specified valueKey;
     * ```typescript
     * this.combo.valueKey = 'field';
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem('Connecticut', true);
     * ```
     */
    setSelectedItem(itemID, select = true, event) {
        if (itemID === null || itemID === undefined) {
            return;
        }
        if (select) {
            this.selectItems([itemID], false, event);
        }
        else {
            this.deselectItems([itemID], event);
        }
    }
    setSelection(newSelection, event) {
        const removed = diffInSets(this.selection.get(this.id), newSelection);
        const added = diffInSets(newSelection, this.selection.get(this.id));
        const newSelectionAsArray = Array.from(newSelection);
        const oldSelectionAsArray = Array.from(this.selection.get(this.id) || []);
        const displayText = this.createDisplayText(newSelectionAsArray, oldSelectionAsArray);
        const args = {
            newSelection: newSelectionAsArray,
            oldSelection: oldSelectionAsArray,
            added,
            removed,
            event,
            owner: this,
            displayText,
            cancel: false
        };
        this.onSelectionChange.emit(args);
        if (!args.cancel) {
            this.selection.select_items(this.id, args.newSelection, true);
            if (displayText !== args.displayText) {
                this._value = args.displayText;
            }
            else {
                this._value = this.createDisplayText(args.newSelection, args.oldSelection);
            }
            this._onChangeCallback(args.newSelection);
        }
    }
    /** Returns a string that should be populated in the combo's text box */
    concatDisplayText(selection) {
        const value = this.displayKey !== null && this.displayKey !== undefined ?
            this.convertKeysToItems(selection).map(entry => entry[this.displayKey]).join(', ') :
            selection.join(', ');
        return value;
    }
    /**
     * Constructs the combo display value
     * If remote, caches the key displayText
     * If not, just combine the object.displayKeys
     */
    createDisplayText(newSelection, oldSelection) {
        let value = '';
        if (this.isRemote) {
            if (newSelection.length) {
                const removedItems = oldSelection.filter(e => newSelection.indexOf(e) < 0);
                const addedItems = newSelection.filter(e => oldSelection.indexOf(e) < 0);
                this.registerRemoteEntries(addedItems);
                this.registerRemoteEntries(removedItems, false);
                value = Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');
            }
            else {
                // If new selection is empty, clear all items
                this.registerRemoteEntries(oldSelection, false);
            }
        }
        else {
            value = this.concatDisplayText(newSelection);
        }
        return value;
    }
    /** if there is a valueKey - map the keys to data items, else - just return the keys */
    convertKeysToItems(keys) {
        if (this.comboAPI.valueKey === null) {
            return keys;
        }
        // map keys vs. filter data to retain the order of the selected items
        return keys.map(key => this.data.find(entry => entry[this.valueKey] === key)).filter(e => e !== undefined);
    }
    /**
     * Event handlers
     * @hidden
     * @internal
     */
    handleOpening(event) {
        const eventArgs = Object.assign({}, event, { owner: this });
        this.onOpening.emit(eventArgs);
        event.cancel = eventArgs.cancel;
    }
    /**
     * @hidden @internal
     */
    handleOpened() {
        this.triggerCheck();
        // Disabling focus of the search input should happen only when drop down opens.
        // During keyboard navigation input should receive focus, even the autoFocusSearch is disabled.
        // That is why in such cases focusing of the dropdownContainer happens outside focusSearchInput method.
        if (this.autoFocusSearch) {
            this.focusSearchInput(true);
        }
        else {
            this.dropdownContainer.nativeElement.focus();
        }
        this.onOpened.emit();
    }
    /**
     * @hidden @internal
     */
    handleClosing(event) {
        const eventArgs = Object.assign({}, event, { owner: this });
        this.onClosing.emit(eventArgs);
        event.cancel = eventArgs.cancel;
        if (event.cancel) {
            return;
        }
        this.searchValue = '';
        this.comboInput.nativeElement.focus();
    }
    /**
     * @hidden @internal
     */
    handleClosed() {
        this.onClosed.emit();
    }
    /**
     * @hidden @internal
     */
    toggleCaseSensitive() {
        this.filteringOptions = { caseSensitive: !this.filteringOptions.caseSensitive };
    }
}
IgxComboComponent.ɵfac = function IgxComboComponent_Factory(t) { return new (t || IgxComboComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxSelectionAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IgxComboAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.IgxIconService), ɵngcc0.ɵɵdirectiveInject(DisplayDensityToken, 8), ɵngcc0.ɵɵdirectiveInject(IGX_INPUT_GROUP_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector, 8)); };
IgxComboComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxComboComponent, selectors: [["igx-combo"]], contentQueries: function IgxComboComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboItemDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboHeaderDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboFooterDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboHeaderItemDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboAddItemDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboEmptyDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboToggleIconDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxComboClearIconDirective, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerItemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.addItemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggleIconTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.clearIconTemplate = _t.first);
    } }, viewQuery: function IgxComboComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true);
        ɵngcc0.ɵɵstaticViewQuery(IgxForOfDirective, true, IgxForOfDirective);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true, IgxInputGroupComponent);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true, IgxInputDirective);
        ɵngcc0.ɵɵstaticViewQuery(IgxComboDropDownComponent, true, IgxComboDropDownComponent);
        ɵngcc0.ɵɵstaticViewQuery(_c4, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c5, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(IgxForOfDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdownContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtDir = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputGroup = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.comboInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.primitiveTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.complexTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualScrollContainer = _t.first);
    } }, hostVars: 10, hostBindings: function IgxComboComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.ArrowDown", function IgxComboComponent_keydown_ArrowDown_HostBindingHandler($event) { return ctx.onArrowDown($event); })("keydown.Alt.ArrowDown", function IgxComboComponent_keydown_Alt_ArrowDown_HostBindingHandler($event) { return ctx.onArrowDown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id)("role", ctx.role)("aria-expanded", ctx.ariaExpanded)("aria-haspopup", ctx.hasPopUp)("aria-owns", ctx.ariaOwns)("aria-labelledby", ctx.ariaLabelledBy);
        ɵngcc0.ɵɵstyleProp("width", ctx.width);
        ɵngcc0.ɵɵclassProp("igx-combo", ctx.cssClass);
    } }, inputs: { overlaySettings: "overlaySettings", id: "id", allowCustomValues: "allowCustomValues", searchPlaceholder: "searchPlaceholder", showSearchCaseIcon: "showSearchCaseIcon", valueKey: "valueKey", filterable: "filterable", disabled: "disabled", autoFocusSearch: "autoFocusSearch", itemsMaxHeight: "itemsMaxHeight", itemHeight: "itemHeight", data: "data", displayKey: "displayKey", groupKey: "groupKey", type: "type", width: "width", itemsWidth: "itemsWidth", placeholder: "placeholder", ariaLabelledBy: "ariaLabelledBy" }, outputs: { onSelectionChange: "onSelectionChange", onOpening: "onOpening", onOpened: "onOpened", onClosing: "onClosing", onClosed: "onClosed", onAddition: "onAddition", onSearchInput: "onSearchInput", onDataPreLoad: "onDataPreLoad" }, features: [ɵngcc0.ɵɵProvidersFeature([
            IgxComboAPIService,
            { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },
            { provide: NG_VALUE_ACCESSOR, useExisting: IgxComboComponent, multi: true }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c11, decls: 37, vars: 41, consts: [[3, "displayDensity", "type", "click"], ["inputGroup", ""], ["ngProjectAs", "[igxLabel]", 5, ["", "igxLabel", ""]], ["ngProjectAs", "igx-prefix", 5, ["igx-prefix"]], ["ngProjectAs", "igx-hint, [igxHint]", 5, ["igx-hint"]], ["igxInput", "", "name", "comboInput", "type", "text", "readonly", "", 3, "value", "disabled", "blur"], ["comboInput", ""], ["ngProjectAs", "igx-suffix", 5, ["igx-suffix"]], ["aria-label", "Clear Selection", "class", "igx-combo__clear-button", 3, "click", 4, "ngIf"], [1, "igx-combo__toggle-button"], [4, "ngIf"], ["fontSet", "material", 4, "ngIf"], [1, "igx-combo__drop-down", 3, "displayDensity", "width", "onOpening", "onClosing", "onOpened", "onClosed"], ["igxComboDropDown", ""], ["class", "igx-combo__search", 3, "displayDensity", 4, "ngIf"], [4, "ngTemplateOutlet"], ["role", "listbox", 1, "igx-combo__content", 3, "igxDropDownItemNavigation", "tabindex", "focus"], ["dropdownItemContainer", ""], ["role", "option", 3, "itemHeight", "value", "isHeader", "index", 4, "igxFor", "igxForOf", "igxForContainerSize", "igxForScrollOrientation", "igxForItemSize"], ["class", "igx-combo__add", 4, "ngIf"], ["complex", ""], ["primitive", ""], ["empty", ""], ["addItemDefault", ""], ["headerItemBase", ""], ["aria-label", "Clear Selection", 1, "igx-combo__clear-button", 3, "click"], ["fontSet", "material"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "igx-combo__search", 3, "displayDensity"], ["igxInput", "", "name", "searchInput", "autocomplete", "off", "type", "text", "aria-autocomplete", "both", 1, "igx-combo-input", 3, "ngModel", "ngModelChange", "keyup", "keydown", "focus"], ["searchInput", ""], ["fontSet", "imx-icons", "name", "case-sensitive", 3, "isActive", "click"], ["role", "option", 3, "itemHeight", "value", "isHeader", "index"], ["listItem", ""], [1, "igx-combo__add"], ["class", "igx-combo__empty", 4, "ngIf"], ["class", "igx-combo__add-item", "role", "button", "aria-label", "Add Item", 3, "itemHeight", "tabindex", "index", 4, "ngIf"], [1, "igx-combo__empty"], ["role", "button", "aria-label", "Add Item", 1, "igx-combo__add-item", 3, "itemHeight", "tabindex", "index"], ["igxButton", "flat", "igxRipple", ""]], template: function IgxComboComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c9);
        ɵngcc0.ɵɵelementStart(0, "igx-input-group", 0, 1);
        ɵngcc0.ɵɵlistener("click", function IgxComboComponent_Template_igx_input_group_click_0_listener($event) { return ctx.onInputClick($event); });
        ɵngcc0.ɵɵelementContainerStart(2, 2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(4, 3);
        ɵngcc0.ɵɵprojection(5, 1);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(6, 4);
        ɵngcc0.ɵɵprojection(7, 2);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(8, "input", 5, 6);
        ɵngcc0.ɵɵlistener("blur", function IgxComboComponent_Template_input_blur_8_listener() { return ctx.onBlur(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerStart(10, 7);
        ɵngcc0.ɵɵprojection(11, 3);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(12, IgxComboComponent_igx_suffix_12_Template, 3, 2, "igx-suffix", 8);
        ɵngcc0.ɵɵelementStart(13, "igx-suffix", 9);
        ɵngcc0.ɵɵtemplate(14, IgxComboComponent_ng_container_14_Template, 2, 4, "ng-container", 10);
        ɵngcc0.ɵɵtemplate(15, IgxComboComponent_igx_icon_15_Template, 2, 1, "igx-icon", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "igx-combo-drop-down", 12, 13);
        ɵngcc0.ɵɵlistener("onOpening", function IgxComboComponent_Template_igx_combo_drop_down_onOpening_16_listener($event) { return ctx.handleOpening($event); })("onClosing", function IgxComboComponent_Template_igx_combo_drop_down_onClosing_16_listener($event) { return ctx.handleClosing($event); })("onOpened", function IgxComboComponent_Template_igx_combo_drop_down_onOpened_16_listener() { return ctx.handleOpened(); })("onClosed", function IgxComboComponent_Template_igx_combo_drop_down_onClosed_16_listener() { return ctx.handleClosed(); });
        ɵngcc0.ɵɵtemplate(18, IgxComboComponent_igx_input_group_18_Template, 4, 6, "igx-input-group", 14);
        ɵngcc0.ɵɵtemplate(19, IgxComboComponent_ng_container_19_Template, 1, 0, "ng-container", 15);
        ɵngcc0.ɵɵelementStart(20, "div", 16, 17);
        ɵngcc0.ɵɵlistener("focus", function IgxComboComponent_Template_div_focus_20_listener() { return ctx.dropdown.onFocus(); });
        ɵngcc0.ɵɵtemplate(22, IgxComboComponent_igx_combo_item_22_Template, 3, 6, "igx-combo-item", 18);
        ɵngcc0.ɵɵpipe(23, "comboGrouping");
        ɵngcc0.ɵɵpipe(24, "comboFiltering");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(25, IgxComboComponent_div_25_Template, 3, 2, "div", 19);
        ɵngcc0.ɵɵtemplate(26, IgxComboComponent_ng_container_26_Template, 1, 0, "ng-container", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(27, IgxComboComponent_ng_template_27_Template, 1, 1, "ng-template", null, 20, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(29, IgxComboComponent_ng_template_29_Template, 1, 1, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(31, IgxComboComponent_ng_template_31_Template, 2, 0, "ng-template", null, 22, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(33, IgxComboComponent_ng_template_33_Template, 2, 0, "ng-template", null, 23, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(35, IgxComboComponent_ng_template_35_Template, 1, 1, "ng-template", null, 24, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("displayDensity", ctx.displayDensity)("type", ctx.type);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("value", ctx.value)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.value.length);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.toggleIconTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.toggleIconTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayDensity", ctx.displayDensity)("width", ctx.itemsWidth || "100%");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displaySearchInput);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.headerTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("overflow", "hidden")("max-height", ctx.itemsMaxHeight, "px");
        ɵngcc0.ɵɵproperty("igxDropDownItemNavigation", ctx.dropdown)("tabindex", ctx.dropdown.collapsed ? -1 : 0);
        ɵngcc0.ɵɵattribute("id", ctx.dropdown.id);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("igxForOf", ɵngcc0.ɵɵpipeBind3(23, 25, ɵngcc0.ɵɵpipeBindV(24, 29, ɵngcc0.ɵɵpureFunction5(35, _c10, ctx.data, ctx.filterValue, ctx.displayKey, ctx.filterable, ctx.filteringOptions)), ctx.groupKey, ctx.valueKey))("igxForContainerSize", ctx.itemsMaxHeight)("igxForScrollOrientation", "vertical")("igxForItemSize", ctx.itemHeight);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.filteredData.length === 0 || ctx.isAddButtonVisible());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.footerTemplate);
    } }, directives: function () { return [ɵngcc4.IgxInputGroupComponent, ɵngcc5.IgxInputDirective, ɵngcc6.NgIf, ɵngcc7.IgxSuffixDirective, IgxComboDropDownComponent, ɵngcc6.NgTemplateOutlet, ɵngcc8.IgxDropDownItemNavigationDirective, ɵngcc9.IgxForOfDirective, ɵngcc10.IgxIconComponent, ɵngcc11.DefaultValueAccessor, ɵngcc11.NgControlStatus, ɵngcc11.NgModel, IgxComboItemComponent,
        IgxComboAddItemComponent, ɵngcc12.IgxButtonDirective, ɵngcc13.IgxRippleDirective]; }, pipes: function () { return [IgxComboGroupingPipe,
        IgxComboFilteringPipe]; }, encapsulation: 2 });
IgxComboComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: IgxSelectionAPIService },
    { type: IgxComboAPIService },
    { type: IgxIconService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [IGX_INPUT_GROUP_TYPE,] }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
IgxComboComponent.propDecorators = {
    virtDir: [{ type: ViewChild, args: [IgxForOfDirective, { read: IgxForOfDirective, static: true },] }],
    overlaySettings: [{ type: Input }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup', { read: IgxInputGroupComponent, static: true },] }],
    comboInput: [{ type: ViewChild, args: ['comboInput', { read: IgxInputDirective, static: true },] }],
    dropdown: [{ type: ViewChild, args: [IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true },] }],
    searchInput: [{ type: ViewChild, args: ['searchInput',] }],
    itemTemplate: [{ type: ContentChild, args: [IgxComboItemDirective, { read: TemplateRef },] }],
    headerTemplate: [{ type: ContentChild, args: [IgxComboHeaderDirective, { read: TemplateRef },] }],
    footerTemplate: [{ type: ContentChild, args: [IgxComboFooterDirective, { read: TemplateRef },] }],
    headerItemTemplate: [{ type: ContentChild, args: [IgxComboHeaderItemDirective, { read: TemplateRef },] }],
    addItemTemplate: [{ type: ContentChild, args: [IgxComboAddItemDirective, { read: TemplateRef },] }],
    emptyTemplate: [{ type: ContentChild, args: [IgxComboEmptyDirective, { read: TemplateRef },] }],
    toggleIconTemplate: [{ type: ContentChild, args: [IgxComboToggleIconDirective, { read: TemplateRef },] }],
    clearIconTemplate: [{ type: ContentChild, args: [IgxComboClearIconDirective, { read: TemplateRef },] }],
    primitiveTemplate: [{ type: ViewChild, args: ['primitive', { read: TemplateRef, static: true },] }],
    complexTemplate: [{ type: ViewChild, args: ['complex', { read: TemplateRef, static: true },] }],
    virtualScrollContainer: [{ type: ViewChild, args: [IgxForOfDirective, { static: true },] }],
    dropdownContainer: [{ type: ViewChild, args: ['dropdownItemContainer', { static: true },] }],
    onSelectionChange: [{ type: Output }],
    onOpening: [{ type: Output }],
    onOpened: [{ type: Output }],
    onClosing: [{ type: Output }],
    onClosed: [{ type: Output }],
    onAddition: [{ type: Output }],
    onSearchInput: [{ type: Output }],
    onDataPreLoad: [{ type: Output }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    width: [{ type: HostBinding, args: ['style.width',] }, { type: Input }],
    cssClass: [{ type: HostBinding, args: ['class.igx-combo',] }],
    role: [{ type: HostBinding, args: [`attr.role`,] }],
    ariaExpanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
    hasPopUp: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
    ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }],
    allowCustomValues: [{ type: Input }],
    itemsMaxHeight: [{ type: Input }],
    itemsWidth: [{ type: Input }],
    itemHeight: [{ type: Input }],
    placeholder: [{ type: Input }],
    searchPlaceholder: [{ type: Input }],
    showSearchCaseIcon: [{ type: Input }],
    data: [{ type: Input }],
    valueKey: [{ type: Input }],
    displayKey: [{ type: Input }],
    groupKey: [{ type: Input }],
    filterable: [{ type: Input }],
    ariaLabelledBy: [{ type: Input }, { type: HostBinding, args: ['attr.aria-labelledby',] }],
    disabled: [{ type: Input }],
    type: [{ type: Input }],
    autoFocusSearch: [{ type: Input }],
    onArrowDown: [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxComboComponent, [{
        type: Component,
        args: [{
                selector: 'igx-combo',
                template: "<igx-input-group #inputGroup [displayDensity]=\"displayDensity\" [type]=\"type\" (click)=\"onInputClick($event)\">\n    <ng-container ngProjectAs=\"[igxLabel]\">\n        <ng-content select=\"[igxLabel]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-prefix\">\n        <ng-content select=\"igx-prefix\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-hint, [igxHint]\">\n        <ng-content select=\"igx-hint, [igxHint]\"></ng-content>\n    </ng-container>\n    <input igxInput #comboInput name=\"comboInput\" type=\"text\" [value]=\"value\" readonly [attr.placeholder]=\"placeholder\"\n        [disabled]=\"disabled\" (blur)=\"onBlur()\" />\n    <ng-container ngProjectAs=\"igx-suffix\">\n        <ng-content select=\"igx-suffix\"></ng-content>\n    </ng-container>\n    <igx-suffix *ngIf=\"value.length\" aria-label=\"Clear Selection\" class=\"igx-combo__clear-button\"\n        (click)=\"handleClearItems($event)\">\n        <ng-container *ngIf=\"clearIconTemplate\">\n            <ng-container *ngTemplateOutlet=\"clearIconTemplate\"></ng-container>\n        </ng-container>\n        <igx-icon *ngIf=\"!clearIconTemplate\" fontSet=\"material\">\n            clear\n        </igx-icon>\n    </igx-suffix>\n    <igx-suffix class=\"igx-combo__toggle-button\">\n        <ng-container *ngIf=\"toggleIconTemplate\">\n            <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\n        </ng-container>\n        <igx-icon *ngIf=\"!toggleIconTemplate\" fontSet=\"material\">\n            {{ dropdown.collapsed ? 'arrow_drop_down' : 'arrow_drop_up'}}\n        </igx-icon>\n    </igx-suffix>\n</igx-input-group>\n<igx-combo-drop-down #igxComboDropDown class=\"igx-combo__drop-down\" [displayDensity]=\"displayDensity\"\n    [width]=\"itemsWidth || '100%'\" (onOpening)=\"handleOpening($event)\" (onClosing)=\"handleClosing($event)\"\n    (onOpened)=\"handleOpened()\" (onClosed)=\"handleClosed()\">\n    <igx-input-group *ngIf=\"displaySearchInput\" [displayDensity]=\"displayDensity\" class=\"igx-combo__search\">\n        <input class=\"igx-combo-input\" igxInput #searchInput name=\"searchInput\" autocomplete=\"off\" type=\"text\"\n            [(ngModel)]=\"searchValue\" (ngModelChange)=\"handleInputChange($event)\" (keyup)=\"handleKeyUp($event)\"\n            (keydown)=\"handleKeyDown($event)\" (focus)=\"dropdown.onBlur($event)\" [attr.placeholder]=\"searchPlaceholder\"\n            aria-autocomplete=\"both\" [attr.aria-owns]=\"dropdown.id\" [attr.aria-labelledby]=\"ariaLabelledBy\" />\n        <igx-suffix *ngIf=\"showSearchCaseIcon\">\n            <igx-icon fontSet=\"imx-icons\" name=\"case-sensitive\" [isActive]=\"filteringOptions.caseSensitive\"\n                (click)=\"toggleCaseSensitive()\">\n            </igx-icon>\n        </igx-suffix>\n    </igx-input-group>\n    <ng-container *ngTemplateOutlet=\"headerTemplate\">\n    </ng-container>\n    <div #dropdownItemContainer class=\"igx-combo__content\" [style.overflow]=\"'hidden'\"\n        [style.maxHeight.px]=\"itemsMaxHeight\" [igxDropDownItemNavigation]=\"dropdown\" (focus)=\"dropdown.onFocus()\"\n        [tabindex]=\"dropdown.collapsed ? -1 : 0\" role=\"listbox\" [attr.id]=\"dropdown.id\">\n        <igx-combo-item role=\"option\" [itemHeight]='itemHeight' *igxFor=\"let item of data\n            | comboFiltering:filterValue:displayKey:filterable:filteringOptions\n            | comboGrouping:groupKey:valueKey;\n            index as rowIndex; containerSize: itemsMaxHeight; scrollOrientation: 'vertical'; itemSize: itemHeight\"\n            [value]=\"item\" [isHeader]=\"item.isHeader\" [index]=\"rowIndex\">\n            <ng-container *ngIf=\"item.isHeader\">\n                <ng-container\n                    *ngTemplateOutlet=\"headerItemTemplate ? headerItemTemplate : headerItemBase;\n                    context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}\">\n                </ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"!item.isHeader\">\n                <ng-container #listItem\n                    *ngTemplateOutlet=\"template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};\">\n                </ng-container>\n            </ng-container>\n        </igx-combo-item>\n    </div>\n    <div class=\"igx-combo__add\" *ngIf=\"filteredData.length === 0 || isAddButtonVisible()\">\n        <div class=\"igx-combo__empty\" *ngIf=\"filteredData.length === 0\">\n            <ng-container *ngTemplateOutlet=\"emptyTemplate ? emptyTemplate : empty\">\n            </ng-container>\n        </div>\n        <igx-combo-add-item [itemHeight]='itemHeight' *ngIf=\"isAddButtonVisible()\"\n            [tabindex]=\"dropdown.collapsed ? -1 : customValueFlag ? 1 : -1\" class=\"igx-combo__add-item\" role=\"button\"\n            aria-label=\"Add Item\" [index]=\"virtualScrollContainer.igxForOf.length\">\n            <ng-container *ngTemplateOutlet=\"addItemTemplate ? addItemTemplate : addItemDefault\">\n            </ng-container>\n        </igx-combo-add-item>\n    </div>\n    <ng-container *ngTemplateOutlet=\"footerTemplate\">\n    </ng-container>\n</igx-combo-drop-down>\n<ng-template #complex let-display let-data=\"data\" let-key=\"displayKey\">\n    {{display[key]}}\n</ng-template>\n<ng-template #primitive let-display>\n    {{display}}\n</ng-template>\n<ng-template #empty>\n    <span>The list is empty</span>\n</ng-template>\n<ng-template #addItemDefault let-control>\n    <button igxButton=\"flat\" igxRipple>Add item</button>\n</ng-template>\n<ng-template #headerItemBase let-item let-key=\"valueKey\" let-groupKey=\"groupKey\">\n    {{ item[key] }}\n</ng-template>\n",
                providers: [
                    IgxComboAPIService,
                    { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },
                    { provide: NG_VALUE_ACCESSOR, useExisting: IgxComboComponent, multi: true }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.IgxSelectionAPIService }, { type: ɵngcc2.IgxComboAPIService }, { type: ɵngcc3.IgxIconService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DisplayDensityToken]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [IGX_INPUT_GROUP_TYPE]
            }] }, { type: ɵngcc0.Injector, decorators: [{
                type: Optional
            }] }]; }, { overlaySettings: [{
            type: Input
        }], searchInput: [{
            type: ViewChild,
            args: ['searchInput']
        }], itemTemplate: [{
            type: ContentChild,
            args: [IgxComboItemDirective, { read: TemplateRef }]
        }], headerTemplate: [{
            type: ContentChild,
            args: [IgxComboHeaderDirective, { read: TemplateRef }]
        }], footerTemplate: [{
            type: ContentChild,
            args: [IgxComboFooterDirective, { read: TemplateRef }]
        }], headerItemTemplate: [{
            type: ContentChild,
            args: [IgxComboHeaderItemDirective, { read: TemplateRef }]
        }], addItemTemplate: [{
            type: ContentChild,
            args: [IgxComboAddItemDirective, { read: TemplateRef }]
        }], emptyTemplate: [{
            type: ContentChild,
            args: [IgxComboEmptyDirective, { read: TemplateRef }]
        }], toggleIconTemplate: [{
            type: ContentChild,
            args: [IgxComboToggleIconDirective, { read: TemplateRef }]
        }], clearIconTemplate: [{
            type: ContentChild,
            args: [IgxComboClearIconDirective, { read: TemplateRef }]
        }], dropdownContainer: [{
            type: ViewChild,
            args: ['dropdownItemContainer', { static: true }]
        }], onSelectionChange: [{
            type: Output
        }], onOpening: [{
            type: Output
        }], onOpened: [{
            type: Output
        }], onClosing: [{
            type: Output
        }], onClosed: [{
            type: Output
        }], onAddition: [{
            type: Output
        }], onSearchInput: [{
            type: Output
        }], onDataPreLoad: [{
            type: Output
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], cssClass: [{
            type: HostBinding,
            args: ['class.igx-combo']
        }], role: [{
            type: HostBinding,
            args: [`attr.role`]
        }], allowCustomValues: [{
            type: Input
        }], searchPlaceholder: [{
            type: Input
        }], showSearchCaseIcon: [{
            type: Input
        }], valueKey: [{
            type: Input
        }], filterable: [{
            type: Input
        }], disabled: [{
            type: Input
        }], autoFocusSearch: [{
            type: Input
        }], ariaExpanded: [{
            type: HostBinding,
            args: ['attr.aria-expanded']
        }], hasPopUp: [{
            type: HostBinding,
            args: ['attr.aria-haspopup']
        }], ariaOwns: [{
            type: HostBinding,
            args: ['attr.aria-owns']
        }], itemsMaxHeight: [{
            type: Input
        }], itemHeight: [{
            type: Input
        }], data: [{
            type: Input
        }], displayKey: [{
            type: Input
        }], groupKey: [{
            type: Input
        }], type: [{
            type: Input
        }], 
    /**
     * @hidden @internal
     */
    onArrowDown: [{
            type: HostListener,
            args: ['keydown.ArrowDown', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.Alt.ArrowDown', ['$event']]
        }], virtDir: [{
            type: ViewChild,
            args: [IgxForOfDirective, { read: IgxForOfDirective, static: true }]
        }], inputGroup: [{
            type: ViewChild,
            args: ['inputGroup', { read: IgxInputGroupComponent, static: true }]
        }], comboInput: [{
            type: ViewChild,
            args: ['comboInput', { read: IgxInputDirective, static: true }]
        }], dropdown: [{
            type: ViewChild,
            args: [IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true }]
        }], primitiveTemplate: [{
            type: ViewChild,
            args: ['primitive', { read: TemplateRef, static: true }]
        }], complexTemplate: [{
            type: ViewChild,
            args: ['complex', { read: TemplateRef, static: true }]
        }], virtualScrollContainer: [{
            type: ViewChild,
            args: [IgxForOfDirective, { static: true }]
        }], width: [{
            type: HostBinding,
            args: ['style.width']
        }, {
            type: Input
        }], itemsWidth: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], ariaLabelledBy: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['attr.aria-labelledby']
        }] }); })();
/**
 * @hidden
 */
export class IgxComboModule {
}
IgxComboModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxComboModule });
IgxComboModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxComboModule_Factory(t) { return new (t || IgxComboModule)(); }, imports: [[IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
            IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxComboModule, { declarations: function () { return [IgxComboComponent, IgxComboItemComponent, IgxComboGroupingPipe,
        IgxComboFilteringPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,
        IgxComboItemDirective,
        IgxComboEmptyDirective,
        IgxComboHeaderItemDirective,
        IgxComboHeaderDirective,
        IgxComboFooterDirective,
        IgxComboAddItemDirective,
        IgxComboToggleIconDirective,
        IgxComboClearIconDirective]; }, imports: function () { return [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule]; }, exports: function () { return [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,
        IgxComboItemDirective,
        IgxComboEmptyDirective,
        IgxComboHeaderItemDirective,
        IgxComboHeaderDirective,
        IgxComboFooterDirective,
        IgxComboAddItemDirective,
        IgxComboToggleIconDirective,
        IgxComboClearIconDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxComboModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboGroupingPipe,
                    IgxComboFilteringPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,
                    IgxComboItemDirective,
                    IgxComboEmptyDirective,
                    IgxComboHeaderItemDirective,
                    IgxComboHeaderDirective,
                    IgxComboFooterDirective,
                    IgxComboAddItemDirective,
                    IgxComboToggleIconDirective,
                    IgxComboClearIconDirective],
                exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,
                    IgxComboItemDirective,
                    IgxComboEmptyDirective,
                    IgxComboHeaderItemDirective,
                    IgxComboHeaderDirective,
                    IgxComboFooterDirective,
                    IgxComboAddItemDirective,
                    IgxComboToggleIconDirective,
                    IgxComboClearIconDirective],
                imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
                    IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule]
            }]
    }], null, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,