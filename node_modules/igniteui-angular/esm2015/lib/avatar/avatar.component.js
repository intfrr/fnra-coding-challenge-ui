import { CommonModule } from '@angular/common';
import { Component, ElementRef, HostBinding, Input, NgModule, TemplateRef, ViewChild } from '@angular/core';
import { IgxIconModule } from '../icon/public_api';
import { mkenum } from '../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../icon/icon.component';

const _c0 = ["image"];
const _c1 = ["defaultTemplate"];
const _c2 = ["imageTemplate"];
const _c3 = ["initialsTemplate"];
const _c4 = ["iconTemplate"];
function IgxAvatarComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
function IgxAvatarComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 5, 6);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("background-image", ctx_r3.getSrcUrl());
} }
function IgxAvatarComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.initials.substring(0, 2));
} }
function IgxAvatarComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.icon);
} }
function IgxAvatarComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c5 = ["*"];
let NEXT_ID = 0;
export const IgxAvatarSize = mkenum({
    SMALL: 'small',
    MEDIUM: 'medium',
    LARGE: 'large'
});
export const IgxAvatarType = mkenum({
    INITIALS: 'initials',
    IMAGE: 'image',
    ICON: 'icon',
    CUSTOM: 'custom'
});
/**
 * Avatar provides a way to display an image, icon or initials to the user.
 *
 * @igxModule IgxAvatarModule
 *
 * @igxTheme igx-avatar-theme, igx-icon-theme
 *
 * @igxKeywords avatar, profile, picture, initials
 *
 * @igxGroup Layouts
 *
 * @remarks
 *
 * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an
 * image, someone's initials or a material icon from the Google Material icon set.
 *
 * @example
 * ```html
 * <igx-avatar initials="MS" [roundShape]="true" size="large">
 * </igx-avatar>
 * ```
 */
export class IgxAvatarComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Returns the `aria-label` attribute of the avatar.
         *
         * @example
         * ```typescript
         * let ariaLabel = this.avatar.ariaLabel;
         * ```
         *
         */
        this.ariaLabel = 'avatar';
        /**
         * Returns the `role` attribute of the avatar.
         *
         * @example
         * ```typescript
         * let avatarRole = this.avatar.role;
         * ```
         */
        this.role = 'img';
        /**
         * Host `class.igx-avatar` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-avatar';
        /**
         * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `"igx-avatar-0"`.
         *
         * @example
         * ```html
         * <igx-avatar id="my-first-avatar"></igx-avatar>
         * ```
         */
        this.id = `igx-avatar-${NEXT_ID++}`;
        /**
         * Sets a round shape to the avatar, if `[roundShape]` is set to `true`.
         * By default the shape of the avatar is a square.
         *
         * @example
         * ```html
         * <igx-avatar [roundShape]="true" ></igx-avatar>
         * ```
         */
        this.roundShape = false;
        /**
         * @hidden
         * @internal
         */
        this._size = IgxAvatarSize.SMALL;
    }
    /**
     * Returns the size of the avatar.
     *
     * @example
     * ```typescript
     * let avatarSize = this.avatar.size;
     * ```
     */
    get size() {
        return this._size;
    }
    /**
     * Sets the size  of the avatar.
     * By default, the size is `"small"`. It can be set to `"medium"` or `"large"`.
     *
     * @example
     * ```html
     * <igx-avatar size="large"></igx-avatar>
     * ```
     */
    set size(value) {
        switch (value) {
            case 'small':
            case 'medium':
            case 'large':
                this._size = value;
                break;
            default:
                this._size = 'small';
        }
    }
    /** @hidden @internal */
    get _isSmallSize() {
        return this.size === 'small';
    }
    /** @hidden @internal */
    get _isMediumSize() {
        return this.size === 'medium';
    }
    /** @hidden @internal */
    get _isLargeSize() {
        return this.size === 'large';
    }
    /**
     * Returns the type of the avatar.
     *
     * @example
     * ```typescript
     * let avatarType = this.avatar.type;
     * ```
     */
    get type() {
        if (this.src) {
            return IgxAvatarType.IMAGE;
        }
        if (this.icon) {
            return IgxAvatarType.ICON;
        }
        if (this.initials) {
            return IgxAvatarType.INITIALS;
        }
        return IgxAvatarType.CUSTOM;
    }
    /** @hidden @internal */
    get _isImageType() {
        return this.type === IgxAvatarType.IMAGE;
    }
    /** @hidden @internal */
    get _isIconType() {
        return this.type === IgxAvatarType.ICON;
    }
    /** @hidden @internal */
    get _isInitialsType() {
        return this.type === IgxAvatarType.INITIALS;
    }
    /**
     * Returns the template of the avatar.
     *
     * @hidden
     * @internal
     */
    get template() {
        switch (this.type) {
            case IgxAvatarType.IMAGE:
                return this.imageTemplate;
            case IgxAvatarType.INITIALS:
                return this.initialsTemplate;
            case IgxAvatarType.ICON:
                return this.iconTemplate;
            default:
                return this.defaultTemplate;
        }
    }
    /** @hidden @internal */
    ngOnInit() {
        this.roleDescription = this.getRole();
    }
    /** @hidden @internal */
    getRole() {
        switch (this.type) {
            case IgxAvatarType.IMAGE:
                return 'image avatar';
            case IgxAvatarType.ICON:
                return 'icon avatar';
            case IgxAvatarType.INITIALS:
                return 'initials avatar';
            default:
                return 'custom avatar';
        }
    }
    /**
     * Returns the css url of the image.
     *
     * @hidden
     * @internal
     */
    getSrcUrl() {
        return `url(${this.src})`;
    }
}
IgxAvatarComponent.ɵfac = function IgxAvatarComponent_Factory(t) { return new (t || IgxAvatarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxAvatarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxAvatarComponent, selectors: [["igx-avatar"]], viewQuery: function IgxAvatarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c4, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.image = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.imageTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.initialsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconTemplate = _t.first);
    } }, hostVars: 24, hostBindings: function IgxAvatarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel)("role", ctx.role)("id", ctx.id)("aria-roledescription", ctx.roleDescription);
        ɵngcc0.ɵɵstyleProp("color", ctx.color)("background", ctx.bgColor);
        ɵngcc0.ɵɵclassProp("igx-avatar", ctx.cssClass)("igx-avatar--rounded", ctx.roundShape)("igx-avatar--small", ctx._isSmallSize)("igx-avatar--medium", ctx._isMediumSize)("igx-avatar--large", ctx._isLargeSize)("igx-avatar--image", ctx._isImageType)("igx-avatar--icon", ctx._isIconType)("igx-avatar--initials", ctx._isInitialsType);
    } }, inputs: { id: "id", roundShape: "roundShape", size: "size", color: "color", bgColor: "bgColor", initials: "initials", icon: "icon", src: "src" }, ngContentSelectors: _c5, decls: 9, vars: 1, consts: [["defaultTemplate", ""], ["imageTemplate", ""], ["initialsTemplate", ""], ["iconTemplate", ""], [4, "ngTemplateOutlet"], [1, "igx-avatar__image"], ["image", ""]], template: function IgxAvatarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, IgxAvatarComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxAvatarComponent_ng_template_2_Template, 2, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, IgxAvatarComponent_ng_template_4_Template, 2, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, IgxAvatarComponent_ng_template_6_Template, 2, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(8, IgxAvatarComponent_ng_container_8_Template, 1, 0, "ng-container", 4);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template);
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc2.IgxIconComponent], encapsulation: 2 });
IgxAvatarComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxAvatarComponent.propDecorators = {
    image: [{ type: ViewChild, args: ['image',] }],
    defaultTemplate: [{ type: ViewChild, args: ['defaultTemplate', { read: TemplateRef, static: true },] }],
    imageTemplate: [{ type: ViewChild, args: ['imageTemplate', { read: TemplateRef, static: true },] }],
    initialsTemplate: [{ type: ViewChild, args: ['initialsTemplate', { read: TemplateRef, static: true },] }],
    iconTemplate: [{ type: ViewChild, args: ['iconTemplate', { read: TemplateRef, static: true },] }],
    ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    cssClass: [{ type: HostBinding, args: ['class.igx-avatar',] }],
    roleDescription: [{ type: HostBinding, args: ['attr.aria-roledescription',] }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    roundShape: [{ type: HostBinding, args: ['class.igx-avatar--rounded',] }, { type: Input }],
    color: [{ type: HostBinding, args: ['style.color',] }, { type: Input }],
    bgColor: [{ type: HostBinding, args: ['style.background',] }, { type: Input }],
    initials: [{ type: Input }],
    icon: [{ type: Input }],
    src: [{ type: Input }],
    size: [{ type: Input }],
    _isSmallSize: [{ type: HostBinding, args: ['class.igx-avatar--small',] }],
    _isMediumSize: [{ type: HostBinding, args: ['class.igx-avatar--medium',] }],
    _isLargeSize: [{ type: HostBinding, args: ['class.igx-avatar--large',] }],
    _isImageType: [{ type: HostBinding, args: ['class.igx-avatar--image',] }],
    _isIconType: [{ type: HostBinding, args: ['class.igx-avatar--icon',] }],
    _isInitialsType: [{ type: HostBinding, args: ['class.igx-avatar--initials',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxAvatarComponent, [{
        type: Component,
        args: [{
                selector: 'igx-avatar',
                template: "<ng-template #defaultTemplate>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #imageTemplate>\n    <div #image class=\"igx-avatar__image\" [style.backgroundImage]=\"getSrcUrl()\"></div>\n</ng-template>\n\n<ng-template #initialsTemplate>\n    <span>{{initials.substring(0, 2)}}</span>\n</ng-template>\n\n<ng-template #iconTemplate>\n     <igx-icon>{{icon}}</igx-icon>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { ariaLabel: [{
            type: HostBinding,
            args: ['attr.aria-label']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], cssClass: [{
            type: HostBinding,
            args: ['class.igx-avatar']
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], roundShape: [{
            type: HostBinding,
            args: ['class.igx-avatar--rounded']
        }, {
            type: Input
        }], size: [{
            type: Input
        }], _isSmallSize: [{
            type: HostBinding,
            args: ['class.igx-avatar--small']
        }], _isMediumSize: [{
            type: HostBinding,
            args: ['class.igx-avatar--medium']
        }], _isLargeSize: [{
            type: HostBinding,
            args: ['class.igx-avatar--large']
        }], _isImageType: [{
            type: HostBinding,
            args: ['class.igx-avatar--image']
        }], _isIconType: [{
            type: HostBinding,
            args: ['class.igx-avatar--icon']
        }], _isInitialsType: [{
            type: HostBinding,
            args: ['class.igx-avatar--initials']
        }], roleDescription: [{
            type: HostBinding,
            args: ['attr.aria-roledescription']
        }], image: [{
            type: ViewChild,
            args: ['image']
        }], defaultTemplate: [{
            type: ViewChild,
            args: ['defaultTemplate', { read: TemplateRef, static: true }]
        }], imageTemplate: [{
            type: ViewChild,
            args: ['imageTemplate', { read: TemplateRef, static: true }]
        }], initialsTemplate: [{
            type: ViewChild,
            args: ['initialsTemplate', { read: TemplateRef, static: true }]
        }], iconTemplate: [{
            type: ViewChild,
            args: ['iconTemplate', { read: TemplateRef, static: true }]
        }], color: [{
            type: HostBinding,
            args: ['style.color']
        }, {
            type: Input
        }], bgColor: [{
            type: HostBinding,
            args: ['style.background']
        }, {
            type: Input
        }], initials: [{
            type: Input
        }], icon: [{
            type: Input
        }], src: [{
            type: Input
        }] }); })();
/**
 * @hidden
 */
export class IgxAvatarModule {
}
IgxAvatarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxAvatarModule });
IgxAvatarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxAvatarModule_Factory(t) { return new (t || IgxAvatarModule)(); }, imports: [[CommonModule, IgxIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxAvatarModule, { declarations: function () { return [IgxAvatarComponent]; }, imports: function () { return [CommonModule, IgxIconModule]; }, exports: function () { return [IgxAvatarComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxAvatarModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxAvatarComponent],
                exports: [IgxAvatarComponent],
                imports: [CommonModule, IgxIconModule]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,