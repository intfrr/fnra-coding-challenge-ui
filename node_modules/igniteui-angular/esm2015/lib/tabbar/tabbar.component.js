import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Input, NgModule, Output, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { IgxBadgeModule } from '../badge/badge.component';
import { IgxIconModule } from '../icon/public_api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../icon/icon.component';
import * as ɵngcc3 from '../badge/badge.component';

function IgxBottomNavComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵprojection(1, 1);
    ɵngcc0.ɵɵelementEnd();
} }
function IgxBottomNavComponent_ng_container_3_igx_tab_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-tab", 4);
    ɵngcc0.ɵɵtext(1, "> ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const panel_r4 = ctx.$implicit;
    const i_r5 = ctx.index;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("relatedPanel", panel_r4)("autoGenerated", true)("id", ctx_r3.getTabId(i_r5));
    ɵngcc0.ɵɵattribute("aria-controls", ctx_r3.getTabPanelId(i_r5));
} }
function IgxBottomNavComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxBottomNavComponent_ng_container_3_igx_tab_1_Template, 2, 4, "igx-tab", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.panels);
} }
const _c0 = [[["igx-tab"]], "*"];
const _c1 = ["igx-tab", "*"];
const _c2 = ["*"];
const _c3 = ["defaultTabTemplate"];
function IgxTabComponent_ng_template_0_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "igx-icon", 5);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "igx-badge", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const context_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(context_r3.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", context_r3.changesCount)("hidden", context_r3.changesCount === 0);
} }
function IgxTabComponent_ng_template_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const context_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(context_r3.label);
} }
function IgxTabComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTabComponent_ng_template_0_div_0_Template, 4, 3, "div", 2);
    ɵngcc0.ɵɵtemplate(1, IgxTabComponent_ng_template_0_div_1_Template, 2, 1, "div", 3);
} if (rf & 2) {
    const context_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", context_r3.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", context_r3.label);
} }
function IgxTabComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c4 = function (a0) { return { $implicit: a0 }; };
let NEXT_ID = 0;
export class IgxTabTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxTabTemplateDirective.ɵfac = function IgxTabTemplateDirective_Factory(t) { return new (t || IgxTabTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxTabTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxTabTemplateDirective, selectors: [["", "igxTab", ""]] });
IgxTabTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTabTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxTab]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * **Ignite UI for Angular Tab Bar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar)
 *
 * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.
 *
 * Example:
 * ```html
 * <igx-bottom-nav>
 *   <igx-tab-panel label="Tab 1">Tab 1 Content</igx-tab-panel>
 *   <igx-tab-panel label="Tab 2">Tab 2 Content</igx-tab-panel>
 *   <igx-tab-panel label="Tab 3">Tab 3 Content</igx-tab-panel>
 * </igx-bottom-nav>
 * ```
 */
export class IgxBottomNavComponent {
    constructor(_element) {
        this._element = _element;
        this._currentBottomNavId = NEXT_ID++;
        /**
         * Sets/gets the `id` of the tab bar.
         * If not set, the `id` of the first tab bar component will be `"igx-bottom-nav-0"`.
         * ```html
         * <igx-bottom-nav id = "my-first-tab-bar"></igx-bottom-nav>
         * ```
         * ```typescript
         * let tabBarId =  this.tabBar.id;
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.id = `igx-bottom-nav-${this._currentBottomNavId}`;
        /**
         * Emits an event when a new tab is selected.
         * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.
         * ```html
         * <igx-bottom-nav (onTableSelected) = "onTabSelected($event)"><igx-bottom-nav>
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.onTabSelected = new EventEmitter();
        /**
         * Emits an event when a tab is deselected.
         * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.
         * ```html
         * <igx-bottom-nav (onTabDeselected) = "onTabDeselected($event)"><igx-bottom-nav>
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.onTabDeselected = new EventEmitter();
        /**
         * Gets the `index` of selected tab/panel in the respective collection.
         * ```typescript
         * let index =  this.tabBar.selectedIndex;
         * ```
         * @memberof IgxBottomNavComponent
         */
        this.selectedIndex = -1;
        /**
         * @hidden
         */
        this._itemStyle = 'igx-bottom-nav';
    }
    /**
     * Gets the `IgxTabComponent` elements for this bottom navigation component.
     * First try to get them as content children if not available get them as view children.
     * ```typescript
     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;
     * ```
     * @memberof IgxBottomNavComponent
     */
    get tabs() {
        return this.hasContentTabs ? this.contentTabs : this.viewTabs;
    }
    /**
     * Gets the `itemStyle` of the tab bar.
     * ```typescript
     * let itemStyle =  this.tabBar.itemStyle;
     * ```
     * @memberof IgxBottomNavComponent
     */
    get itemStyle() {
        return this._itemStyle;
    }
    /**
     * @hidden
     */
    get hasContentTabs() {
        return (this.contentTabs && this.contentTabs.length > 0);
    }
    /**
     * Gets the selected tab in the tab bar.
     * ```typescript
     * let tab =  this.tabBar.selectedTab;
     * ```
     * @memberof IgxBottomNavComponent
     */
    get selectedTab() {
        if (this.tabs && this.selectedIndex !== undefined) {
            return this.tabs.toArray()[this.selectedIndex];
        }
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        this.setPanelsAttributes();
        this._panelsChanges$ = this.panels.changes.subscribe(() => {
            this.setPanelsAttributes();
        });
        // initial selection
        setTimeout(() => {
            if (this.selectedIndex === -1) {
                const selectablePanels = this.panels.filter((p) => !p.disabled);
                const panel = selectablePanels[0];
                if (panel) {
                    panel.select();
                }
            }
        }, 0);
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this._panelsChanges$) {
            this._panelsChanges$.unsubscribe();
        }
    }
    setPanelsAttributes() {
        const panelsArray = Array.from(this.panels);
        for (let index = 0; index < this.panels.length; index++) {
            const tabPanels = panelsArray[index];
            tabPanels.nativeElement.setAttribute('id', this.getTabPanelId(index));
            tabPanels.nativeElement.setAttribute('aria-labelledby', this.getTabId(index));
        }
    }
    /**
     * @hidden
     */
    _selectedPanelHandler(args) {
        if (this.hasContentTabs) {
            this.selectedIndex = args.tab.index;
            this.contentTabs.forEach((t) => {
                if (t !== args.tab) {
                    this._deselectTab(t);
                }
            });
        }
        else {
            if (args.panel) {
                this.selectedIndex = args.panel.index;
                this.panels.forEach((p) => {
                    if (p.index !== this.selectedIndex) {
                        this._deselectPanel(p);
                    }
                });
            }
        }
    }
    /**
     * @hidden
     */
    _deselectPanel(panel) {
        // Cannot deselect the selected tab - this will mean that there will be not selected tab left
        if (panel.disabled || this.selectedTab.index === panel.index) {
            return;
        }
        panel.isSelected = false;
        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });
    }
    _deselectTab(aTab) {
        aTab.isSelected = false;
        this.onTabDeselected.emit({ tab: aTab, panel: null });
    }
    /**
     * @hidden
     */
    getTabId(index) {
        return `igx-tab-${this._currentBottomNavId}-${index}`;
    }
    /**
     * @hidden
     */
    getTabPanelId(index) {
        return `igx-tab-panel-${this._currentBottomNavId}-${index}`;
    }
}
IgxBottomNavComponent.ɵfac = function IgxBottomNavComponent_Factory(t) { return new (t || IgxBottomNavComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxBottomNavComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxBottomNavComponent, selectors: [["igx-bottom-nav"]], contentQueries: function IgxBottomNavComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxTabComponent, false);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxTabPanelComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTabs = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panels = _t);
    } }, viewQuery: function IgxBottomNavComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxTabComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewTabs = _t);
    } }, hostVars: 1, hostBindings: function IgxBottomNavComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("onTabSelected", function IgxBottomNavComponent_onTabSelected_HostBindingHandler($event) { return ctx._selectedPanelHandler($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
    } }, inputs: { id: "id" }, outputs: { onTabSelected: "onTabSelected", onTabDeselected: "onTabDeselected" }, ngContentSelectors: _c1, decls: 5, vars: 6, consts: [[4, "ngIf"], ["role", "tablist", "aria-orientation", "horizontal"], ["tablist", ""], [3, "relatedPanel", "autoGenerated", "id", 4, "ngFor", "ngForOf"], [3, "relatedPanel", "autoGenerated", "id"]], template: function IgxBottomNavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, IgxBottomNavComponent_div_0_Template, 2, 0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1, 2);
        ɵngcc0.ɵɵtemplate(3, IgxBottomNavComponent_ng_container_3_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasContentTabs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate2("", ctx.itemStyle, "__menu ", ctx.itemStyle, "__menu--bottom");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasContentTabs);
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgForOf, IgxTabComponent]; }, styles: ["[_nghost-%COMP%] {\n            display: block;\n        }"] });
IgxBottomNavComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxBottomNavComponent.propDecorators = {
    viewTabs: [{ type: ViewChildren, args: [forwardRef(() => IgxTabComponent),] }],
    contentTabs: [{ type: ContentChildren, args: [forwardRef(() => IgxTabComponent),] }],
    panels: [{ type: ContentChildren, args: [forwardRef(() => IgxTabPanelComponent),] }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    onTabSelected: [{ type: Output }],
    onTabDeselected: [{ type: Output }],
    _selectedPanelHandler: [{ type: HostListener, args: ['onTabSelected', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxBottomNavComponent, [{
        type: Component,
        args: [{
                selector: 'igx-bottom-nav',
                template: "<div *ngIf=\"!hasContentTabs\">\n    <ng-content></ng-content>\n</div>\n<div #tablist class=\"{{itemStyle}}__menu {{itemStyle}}__menu--bottom\" role=\"tablist\" aria-orientation=\"horizontal\">\n    <ng-container *ngIf=\"!hasContentTabs\">\n        <igx-tab *ngFor=\"let panel of panels; let i = index\"\n            [relatedPanel]=\"panel\"\n            [autoGenerated]=\"true\"\n            [id]=\"getTabId(i)\"\n            [attr.aria-controls]=\"getTabPanelId(i)\">>\n        </igx-tab>\n    </ng-container>\n    <ng-content select=\"igx-tab\"></ng-content>\n</div>\n",
                styles: [`
        :host {
            display: block;
        }
    `]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], onTabSelected: [{
            type: Output
        }], onTabDeselected: [{
            type: Output
        }], 
    /**
     * @hidden
     */
    _selectedPanelHandler: [{
            type: HostListener,
            args: ['onTabSelected', ['$event']]
        }], viewTabs: [{
            type: ViewChildren,
            args: [forwardRef(() => IgxTabComponent)]
        }], contentTabs: [{
            type: ContentChildren,
            args: [forwardRef(() => IgxTabComponent)]
        }], panels: [{
            type: ContentChildren,
            args: [forwardRef(() => IgxTabPanelComponent)]
        }] }); })();
// ================================= IgxTabPanelComponent ======================================
export class IgxTabPanelComponent {
    constructor(_tabBar, _element) {
        this._tabBar = _tabBar;
        this._element = _element;
        /**
         * @hidden
         */
        this._itemStyle = 'igx-tab-panel';
        /**
         * @hidden
         */
        this._isSelected = false;
        /**
         * Gets the role of the tab panel.
         * ```typescript
         * let tabPanelRole = this.tabPanel.role;
         * ```
         * @memberof IgxTabPanelComponent
         */
        this.role = 'tabpanel';
    }
    /**
     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.
     * ```typescript
     * let styleClass = this.tabPanel.styleClass;
     * ```
     * @memberof IgxTabPanelComponent
     */
    get styleClass() {
        return (!this.isSelected);
    }
    /**
     * Sets/gets whether a tab panel is selected.
     * ```typescript
     * this.tabPanel.isSelected = true;
     * ```
     * ```typescript
     * let isSelected =  this.tabPanel.isSelected;
     * ```
     * @memberof IgxTabPanelComponent
     */
    get isSelected() {
        return this._isSelected;
    }
    set isSelected(newValue) {
        if (this._isSelected !== newValue) {
            if (newValue) {
                this.select();
            }
            else {
                this._isSelected = newValue;
            }
        }
    }
    /**
     * Gets the `itemStyle` of the tab panel.
     * ```typescript
     * let itemStyle = this.tabPanel.itemStyle;
     * ```
     * @memberof IgxTabPanelComponent
     */
    get itemStyle() {
        return this._itemStyle;
    }
    /**
     * Returns the native element of the tab-panel component
     * ```typescript
     *  const mytabPanelElement: HTMLElement = tabPanel.nativeElement;
     * ```
     */
    get nativeElement() {
        return this._element.nativeElement;
    }
    /**
     * Gets the tab associated with the panel.
     * ```typescript
     * let tab = this.tabPanel.relatedTab;
     * ```
     * @memberof IgxTabPanelComponent
     */
    get relatedTab() {
        if (this._tabBar.tabs) {
            return this._tabBar.tabs.toArray()[this.index];
        }
    }
    /**
     * Gets the changes and updates accordingly applied to the tab/panel.
     *
     * @memberof IgxTabComponent
     */
    get changesCount() {
        return this.relatedTab ? this.relatedTab.changesCount : 0;
    }
    /**
     * Gets the index of a panel in the panels collection.
     * ```typescript
     * let panelIndex =  this.tabPanel.index
     * ```
     * @memberof IgxTabPanelComponent
     */
    get index() {
        if (this._tabBar.panels) {
            return this._tabBar.panels.toArray().indexOf(this);
        }
    }
    /**
     * Gets the tab template.
     * ```typescript
     * let tabTemplate = this.tabPanel.customTabTemplate
     * ```
     * @memberof IgxTabPanelComponent
     */
    get customTabTemplate() {
        return this._tabTemplate;
    }
    /**
     * Sets the tab template.
     * ```typescript
     * this.tabPanel.customTabTemplate(tabTemplate);
     * ```
     * @memberof IgxTabPanelComponent
     */
    set customTabTemplate(template) {
        this._tabTemplate = template;
    }
    /**
     * @hidden
     */
    ngAfterContentInit() {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    }
    /**
     * Selects the current tab and the tab panel.
     * ```typescript
     * this.tabPanel.select();
     * ```
     * @memberof IgxTabPanelComponent
     */
    select() {
        if (this.disabled || this._tabBar.selectedIndex === this.index) {
            return;
        }
        this._isSelected = true;
        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });
    }
}
IgxTabPanelComponent.ɵfac = function IgxTabPanelComponent_Factory(t) { return new (t || IgxTabPanelComponent)(ɵngcc0.ɵɵdirectiveInject(IgxBottomNavComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxTabPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxTabPanelComponent, selectors: [["igx-tab-panel"]], contentQueries: function IgxTabPanelComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxTabTemplateDirective, true, IgxTabTemplateDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabTemplate = _t.first);
    } }, hostVars: 5, hostBindings: function IgxTabPanelComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵclassProp("igx-bottom-nav__panel", ctx.styleClass)("igx-bottom-nav__panel--selected", ctx.isSelected);
    } }, inputs: { label: "label", icon: "icon", disabled: "disabled" }, ngContentSelectors: _c2, decls: 1, vars: 0, template: function IgxTabPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
IgxTabPanelComponent.ctorParameters = () => [
    { type: IgxBottomNavComponent },
    { type: ElementRef }
];
IgxTabPanelComponent.propDecorators = {
    label: [{ type: Input }],
    icon: [{ type: Input }],
    disabled: [{ type: Input }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    styleClass: [{ type: HostBinding, args: ['class.igx-bottom-nav__panel',] }],
    isSelected: [{ type: HostBinding, args: ['class.igx-bottom-nav__panel--selected',] }],
    tabTemplate: [{ type: ContentChild, args: [IgxTabTemplateDirective, { read: IgxTabTemplateDirective },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTabPanelComponent, [{
        type: Component,
        args: [{
                selector: 'igx-tab-panel',
                template: "<ng-content></ng-content>\n"
            }]
    }], function () { return [{ type: IgxBottomNavComponent }, { type: ɵngcc0.ElementRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], styleClass: [{
            type: HostBinding,
            args: ['class.igx-bottom-nav__panel']
        }], isSelected: [{
            type: HostBinding,
            args: ['class.igx-bottom-nav__panel--selected']
        }], label: [{
            type: Input
        }], icon: [{
            type: Input
        }], disabled: [{
            type: Input
        }], tabTemplate: [{
            type: ContentChild,
            args: [IgxTabTemplateDirective, { read: IgxTabTemplateDirective }]
        }] }); })();
// ======================================= IgxTabComponent ==========================================
export class IgxTabComponent {
    constructor(_tabBar, _element) {
        this._tabBar = _tabBar;
        this._element = _element;
        /**
         * Gets the `role` attribute.
         * ```typescript
         * let tabRole = this.tab.role;
         * ```
         * @memberof IgxTabComponent
         */
        this.role = 'tab';
        /**
         * @hidden @internal
         */
        this.ariaLabel = this.label;
        /**
         * @hidden @internal
         */
        this.ariaDisabled = this.disabled;
        /**
         * @hidden @internal
         */
        this.ariaSelected = this.isSelected;
        /**
         * @hidden
         */
        this._changesCount = 0; // changes and updates accordingly applied to the tab.
        this._disabled = false;
        this._selected = false;
    }
    /**
     * Sets/gets the `label` of the tab panel.
     * ```html
     * <igx-tab [label] = "'Tab label'"><igx-tab>
     * ```
     * ```typescript
     * let tabLabel = this.tab.label;
     * ```
     * @memberof IgxTabComponent
     */
    get label() {
        return this.relatedPanel ? this.relatedPanel.label : this._label;
    }
    set label(newValue) {
        if (this.relatedPanel) {
            this.relatedPanel.label = newValue;
        }
        this._label = newValue;
    }
    /**
     * Sets/gets  the `icon` of the tab panel.
     * ```html
     * <igx-tab [icon] = "tab_icon"><igx-tab>
     * ```
     * ```typescript
     * let tabIcon =  this.tab.icon;
     * ```
     * @memberof IgxTabComponent
     */
    get icon() {
        return this.relatedPanel ? this.relatedPanel.icon : this._icon;
    }
    set icon(newValue) {
        if (this.relatedPanel) {
            this.relatedPanel.icon = newValue;
        }
        this._icon = newValue;
    }
    /**
     * Gets the changes and updates accordingly applied to the tab.
     *
     * @memberof IgxTabComponent
     */
    get changesCount() {
        return this._changesCount;
    }
    /**
     * Gets whether the tab is disabled.
     * ```typescript
     * let isDisabled = this.tab.disabled;
     * ```
     * @memberof IgxTabComponent
     */
    get disabled() {
        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;
    }
    set disabled(newValue) {
        if (this.relatedPanel) {
            this.relatedPanel.disabled = newValue;
        }
        else {
            this._disabled = newValue;
        }
    }
    /**
     * Gets whether the tab is selected.
     * ```typescript
     * let isSelected  = this.tab.isSelected;
     * ```
     * @memberof IgxTabComponent
     */
    set isSelected(newValue) {
        if (this.relatedPanel) {
            this.relatedPanel.isSelected = newValue;
        }
        else if (this._selected !== newValue) {
            this._selected = newValue;
            if (this._selected) {
                this._tabBar.onTabSelected.emit({ tab: this, panel: null });
            }
        }
    }
    get isSelected() {
        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;
    }
    get cssClassSelected() {
        return this.isSelected;
    }
    get cssClassDisabled() {
        return this.disabled;
    }
    get cssClass() {
        return (!this.disabled && !this.isSelected);
    }
    /**
     * Gets the `index` of the tab.
     * ```typescript
     * let tabIndex = this.tab.index;
     * ```
     * @memberof IgxTabComponent
     */
    get index() {
        if (this._tabBar.tabs) {
            return this._tabBar.tabs.toArray().indexOf(this);
        }
    }
    /**
     * Returns the `template` for this IgxTabComponent.
     * ```typescript
     * let tabItemTemplate = this.tabItem.template;
     * ```
     * @memberof IgxTabComponent
     */
    get template() {
        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {
            return this.relatedPanel.customTabTemplate;
        }
        if (this.customTabTemplateDir) {
            return this.customTabTemplateDir.template;
        }
        return this.defaultTabTemplate;
    }
    /**
     * Returns the `context` object for the template of this `IgxTabComponent`.
     * ```typescript
     * let tabItemContext = this.tabItem.context;
     * ```
     */
    get context() {
        return this.relatedPanel ? this.relatedPanel : this;
    }
    /**
     * Selects the current tab and the associated panel.
     * ```typescript
     * this.tab.select();
     * ```
     * @memberof IgxTabComponent
     */
    select() {
        if (this.relatedPanel) {
            this.relatedPanel.select();
        }
        else {
            this._selected = true;
            this._tabBar.onTabSelected.emit({ tab: this, panel: null });
        }
    }
    /**
     * @hidden
     */
    onClick() {
        if (this.autoGenerated) {
            this.select();
        }
    }
    elementRef() {
        return this._element;
    }
}
IgxTabComponent.ɵfac = function IgxTabComponent_Factory(t) { return new (t || IgxTabComponent)(ɵngcc0.ɵɵdirectiveInject(IgxBottomNavComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxTabComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxTabComponent, selectors: [["igx-tab"]], contentQueries: function IgxTabComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxTabTemplateDirective, true, IgxTabTemplateDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTabTemplateDir = _t.first);
    } }, viewQuery: function IgxTabComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c3, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultTabTemplate = _t.first);
    } }, hostVars: 10, hostBindings: function IgxTabComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxTabComponent_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-label", ctx.ariaLabel)("aria-disabled", ctx.ariaDisabled)("aria-selected", ctx.ariaSelected);
        ɵngcc0.ɵɵclassProp("igx-bottom-nav__menu-item--selected", ctx.cssClassSelected)("igx-bottom-nav__menu-item--disabled", ctx.cssClassDisabled)("igx-bottom-nav__menu-item", ctx.cssClass);
    } }, inputs: { label: "label", icon: "icon", disabled: "disabled", isSelected: "isSelected", relatedPanel: "relatedPanel", autoGenerated: "autoGenerated" }, decls: 3, vars: 4, consts: [["defaultTabTemplate", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "tab-icon", 4, "ngIf"], ["ngClass", "tab-label", 4, "ngIf"], [1, "tab-icon"], ["fontSet", "material"], [3, "value", "hidden"], ["ngClass", "tab-label"]], template: function IgxTabComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxTabComponent_ng_template_0_Template, 2, 2, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxTabComponent_ng_container_2_Template, 1, 0, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c4, ctx.context));
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf, ɵngcc2.IgxIconComponent, ɵngcc3.IgxBadgeComponent, ɵngcc1.NgClass], encapsulation: 2 });
IgxTabComponent.ctorParameters = () => [
    { type: IgxBottomNavComponent },
    { type: ElementRef }
];
IgxTabComponent.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }],
    ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
    ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
    ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    relatedPanel: [{ type: Input }],
    label: [{ type: Input }],
    icon: [{ type: Input }],
    disabled: [{ type: Input }],
    isSelected: [{ type: Input }],
    autoGenerated: [{ type: Input }],
    cssClassSelected: [{ type: HostBinding, args: ['class.igx-bottom-nav__menu-item--selected',] }],
    cssClassDisabled: [{ type: HostBinding, args: ['class.igx-bottom-nav__menu-item--disabled',] }],
    cssClass: [{ type: HostBinding, args: ['class.igx-bottom-nav__menu-item',] }],
    defaultTabTemplate: [{ type: ViewChild, args: ['defaultTabTemplate', { read: TemplateRef, static: true },] }],
    customTabTemplateDir: [{ type: ContentChild, args: [IgxTabTemplateDirective, { read: IgxTabTemplateDirective },] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTabComponent, [{
        type: Component,
        args: [{
                selector: 'igx-tab',
                template: "<ng-template #defaultTabTemplate let-context>\n    <div *ngIf=\"context.icon\" class=\"tab-icon\">\n        <igx-icon fontSet=\"material\">{{context.icon}}</igx-icon>\n        <igx-badge [value]=\"context.changesCount\" [hidden]=\"context.changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"context.label\" ngClass=\"tab-label\">{{context.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this.context }\">\n</ng-container>"
            }]
    }], function () { return [{ type: IgxBottomNavComponent }, { type: ɵngcc0.ElementRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], ariaLabel: [{
            type: HostBinding,
            args: ['attr.aria-label']
        }], ariaDisabled: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }], ariaSelected: [{
            type: HostBinding,
            args: ['attr.aria-selected']
        }], label: [{
            type: Input
        }], icon: [{
            type: Input
        }], disabled: [{
            type: Input
        }], isSelected: [{
            type: Input
        }], cssClassSelected: [{
            type: HostBinding,
            args: ['class.igx-bottom-nav__menu-item--selected']
        }], cssClassDisabled: [{
            type: HostBinding,
            args: ['class.igx-bottom-nav__menu-item--disabled']
        }], cssClass: [{
            type: HostBinding,
            args: ['class.igx-bottom-nav__menu-item']
        }], 
    /**
     * @hidden
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }], relatedPanel: [{
            type: Input
        }], autoGenerated: [{
            type: Input
        }], defaultTabTemplate: [{
            type: ViewChild,
            args: ['defaultTabTemplate', { read: TemplateRef, static: true }]
        }], customTabTemplateDir: [{
            type: ContentChild,
            args: [IgxTabTemplateDirective, { read: IgxTabTemplateDirective }]
        }] }); })();
/**
 * @hidden
 */
export class IgxBottomNavModule {
}
IgxBottomNavModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxBottomNavModule });
IgxBottomNavModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxBottomNavModule_Factory(t) { return new (t || IgxBottomNavModule)(); }, imports: [[CommonModule, IgxBadgeModule, IgxIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxBottomNavModule, { declarations: function () { return [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective]; }, imports: function () { return [CommonModule, IgxBadgeModule, IgxIconModule]; }, exports: function () { return [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxBottomNavModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],
                exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],
                imports: [CommonModule, IgxBadgeModule, IgxIconModule]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,