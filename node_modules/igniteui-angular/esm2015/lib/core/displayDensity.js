import { InjectionToken, Input, Output, EventEmitter, Directive, NgModule, Optional, Inject } from '@angular/core';
import { mkenum } from './utils';
/**
 * Defines the possible values of the components' display density.
 */
import * as ɵngcc0 from '@angular/core';
export const DisplayDensity = mkenum({
    comfortable: 'comfortable',
    cosy: 'cosy',
    compact: 'compact'
});
/**
 * Defines the DisplayDensity DI token.
 */
export const DisplayDensityToken = new InjectionToken('DisplayDensity');
/**
 * Base class containing all logic required for implementing DisplayDensity.
 */
// tslint:disable-next-line: directive-class-suffix
export class DisplayDensityBase {
    constructor(displayDensityOptions) {
        this.displayDensityOptions = displayDensityOptions;
        this.onDensityChanged = new EventEmitter();
        this.oldDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };
        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);
    }
    /**
     * Returns the theme of the component.
     * The default theme is `comfortable`.
     * Available options are `comfortable`, `cosy`, `compact`.
     * ```typescript
     * let componentTheme = this.component.displayDensity;
     * ```
     */
    get displayDensity() {
        return this._displayDensity ||
            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);
    }
    /**
     * Sets the theme of the component.
     */
    set displayDensity(val) {
        const currentDisplayDensity = this._displayDensity;
        this._displayDensity = val;
        if (currentDisplayDensity !== this._displayDensity) {
            const densityChangedArgs = {
                oldDensity: currentDisplayDensity,
                newDensity: this._displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
        }
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.initialDensity = this._displayDensity;
    }
    ngDoCheck() {
        if (!this._displayDensity && this.displayDensityOptions &&
            this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {
            const densityChangedArgs = {
                oldDensity: this.oldDisplayDensityOptions.displayDensity,
                newDensity: this.displayDensityOptions.displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);
        }
    }
    /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     */
    getComponentDensityClass(baseStyleClass) {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return `${baseStyleClass}--${DisplayDensity.cosy}`;
            case DisplayDensity.compact:
                return `${baseStyleClass}--${DisplayDensity.compact}`;
            default:
                return baseStyleClass;
        }
    }
}
DisplayDensityBase.ɵfac = function DisplayDensityBase_Factory(t) { return new (t || DisplayDensityBase)(ɵngcc0.ɵɵdirectiveInject(DisplayDensityToken, 8)); };
DisplayDensityBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DisplayDensityBase, selectors: [["", "igxDisplayDensityBase", ""]], inputs: { displayDensity: "displayDensity" }, outputs: { onDensityChanged: "onDensityChanged" } });
DisplayDensityBase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
DisplayDensityBase.propDecorators = {
    displayDensity: [{ type: Input }],
    onDensityChanged: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DisplayDensityBase, [{
        type: Directive,
        args: [{
                selector: '[igxDisplayDensityBase]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DisplayDensityToken]
            }] }]; }, { onDensityChanged: [{
            type: Output
        }], displayDensity: [{
            type: Input
        }] }); })();
export class IgxDisplayDensityModule {
}
IgxDisplayDensityModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxDisplayDensityModule });
IgxDisplayDensityModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxDisplayDensityModule_Factory(t) { return new (t || IgxDisplayDensityModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxDisplayDensityModule, { declarations: [DisplayDensityBase], exports: [DisplayDensityBase] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDisplayDensityModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DisplayDensityBase
                ],
                exports: [
                    DisplayDensityBase
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheURlbnNpdHkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9jb3JlL2Rpc3BsYXlEZW5zaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQW1CLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSSxPQUFPLEVBQWtCLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVqRDtBQUNBO0FBQ0EsR0FBRzs7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3JDLElBQUksV0FBVyxFQUFFLGFBQWE7QUFDOUIsSUFBSSxJQUFJLEVBQUUsTUFBTTtBQUNoQixJQUFJLE9BQU8sRUFBRSxTQUFTO0FBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBZUg7QUFDQTtBQUNBLEdBQUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FBeUIsZ0JBQWdCLENBQUMsQ0FBQztBQUVoRztBQUNBO0FBQ0EsR0FBRztBQUlILG1EQUFtRDtBQUNuRCxNQUFNLE9BQU8sa0JBQWtCO0FBQUcsSUE2QzlCLFlBQStELHFCQUE2QztBQUNoSCxRQURtRSwwQkFBcUIsR0FBckIscUJBQXFCLENBQXdCO0FBQUMsUUFMdEcscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQTRCLENBQUM7QUFDM0UsUUFDYyw2QkFBd0IsR0FBMkIsRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2hILFFBR1EsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztBQUM1RSxJQUFJLENBQUM7QUFDTCxJQXhDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQ1csY0FBYztBQUFLLFFBQzFCLE9BQU8sSUFBSSxDQUFDLGVBQWU7QUFDbkMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdEgsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQUksSUFBVyxjQUFjLENBQUMsR0FBNEI7QUFDMUQsUUFBUSxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDM0QsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQXFCLENBQUM7QUFDckQsUUFDUSxJQUFJLHFCQUFxQixLQUFLLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDNUQsWUFBWSxNQUFNLGtCQUFrQixHQUE2QjtBQUNqRSxnQkFBZ0IsVUFBVSxFQUFFLHFCQUFxQjtBQUNqRCxnQkFBZ0IsVUFBVSxFQUFFLElBQUksQ0FBQyxlQUFlO0FBQ2hELGFBQWEsQ0FBQztBQUNkLFlBQ1ksSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzNELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQVdJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBVyxRQUFRO0FBQUssUUFDaEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ25ELElBQUksQ0FBQztBQUNMLElBQ1csU0FBUztBQUNwQixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxxQkFBcUI7QUFDL0QsWUFBZ0IsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxFQUFFO0FBQzVHLFlBQVksTUFBTSxrQkFBa0IsR0FBNkI7QUFDakUsZ0JBQWdCLFVBQVUsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYztBQUN4RSxnQkFBZ0IsVUFBVSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjO0FBQ3JFLGFBQWEsQ0FBQztBQUNkLFlBQ1ksSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzNELFlBQVksSUFBSSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3JILFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFjLHdCQUF3QixDQUFDLGNBQXNCO0FBQUksUUFDekQsUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ3JDLFlBQVksS0FBSyxjQUFjLENBQUMsSUFBSTtBQUNwQyxnQkFBZ0IsT0FBTyxHQUFHLGNBQWMsS0FBSyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkUsWUFBWSxLQUFLLGNBQWMsQ0FBQyxPQUFPO0FBQ3ZDLGdCQUFnQixPQUFPLEdBQUcsY0FBYyxLQUFLLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN0RSxZQUFZO0FBQ1osZ0JBQWdCLE9BQU8sY0FBYyxDQUFDO0FBQ3RDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDs4Q0F2RkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSx5QkFBeUIsY0FDdEM7a09BQ0k7QUFBQztBQUE0Qyw0Q0E4Q2pDLFFBQVEsWUFBSSxNQUFNLFNBQUMsbUJBQW1CO0FBQVE7QUFBRztBQUFzQyw2QkE3Qm5HLEtBQUs7QUFDUiwrQkFzQkcsTUFBTTtBQUNWOzs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFxREgsTUFBTSxPQUFPLHVCQUF1QjtBQUFHO21EQVJ0QyxRQUFRLFNBQUMsa0JBQ047T0FBWSxFQUFFLHNCQUNWLGtCQUFrQixrQkFDckIsa0JBQ0QsT0FBTyxFQUFFLHNCQUNMLGtCQUFrQixrQkFDckI7R0FDSjs7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIERvQ2hlY2ssIE9uSW5pdCwgRGlyZWN0aXZlLCBOZ01vZHVsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUJhc2VFdmVudEFyZ3MsIG1rZW51bSB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIERlZmluZXMgdGhlIHBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgY29tcG9uZW50cycgZGlzcGxheSBkZW5zaXR5LlxuICovXG5leHBvcnQgY29uc3QgRGlzcGxheURlbnNpdHkgPSBta2VudW0oe1xuICAgIGNvbWZvcnRhYmxlOiAnY29tZm9ydGFibGUnLFxuICAgIGNvc3k6ICdjb3N5JyxcbiAgICBjb21wYWN0OiAnY29tcGFjdCdcbn0pO1xuZXhwb3J0IHR5cGUgRGlzcGxheURlbnNpdHkgPSAodHlwZW9mIERpc3BsYXlEZW5zaXR5KVtrZXlvZiB0eXBlb2YgRGlzcGxheURlbnNpdHldO1xuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgb2JqZWN0IHVzZWQgdG8gY29uZmlndXJlIHRoZSBEaXNwbGF5RGVuc2l0eSBpbiBBbmd1bGFyIERJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEaXNwbGF5RGVuc2l0eU9wdGlvbnMge1xuICAgIGRpc3BsYXlEZW5zaXR5OiBEaXNwbGF5RGVuc2l0eTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGVuc2l0eUNoYW5nZWRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgb2xkRGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG4gICAgbmV3RGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgRGlzcGxheURlbnNpdHkgREkgdG9rZW4uXG4gKi9cbmV4cG9ydCBjb25zdCBEaXNwbGF5RGVuc2l0eVRva2VuID0gbmV3IEluamVjdGlvblRva2VuPElEaXNwbGF5RGVuc2l0eU9wdGlvbnM+KCdEaXNwbGF5RGVuc2l0eScpO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgY29udGFpbmluZyBhbGwgbG9naWMgcmVxdWlyZWQgZm9yIGltcGxlbWVudGluZyBEaXNwbGF5RGVuc2l0eS5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGlzcGxheURlbnNpdHlCYXNlXSdcbn0pXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbmV4cG9ydCBjbGFzcyBEaXNwbGF5RGVuc2l0eUJhc2UgaW1wbGVtZW50cyBEb0NoZWNrLCBPbkluaXQge1xuICAgIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHk6IERpc3BsYXlEZW5zaXR5O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpbml0aWFsRGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0aGVtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIFRoZSBkZWZhdWx0IHRoZW1lIGlzIGBjb21mb3J0YWJsZWAuXG4gICAgICogQXZhaWxhYmxlIG9wdGlvbnMgYXJlIGBjb21mb3J0YWJsZWAsIGBjb3N5YCwgYGNvbXBhY3RgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY29tcG9uZW50VGhlbWUgPSB0aGlzLmNvbXBvbmVudC5kaXNwbGF5RGVuc2l0eTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZGlzcGxheURlbnNpdHkoKTogRGlzcGxheURlbnNpdHkgfCBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlbnNpdHkgfHxcbiAgICAgICAgICAgICgodGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkpIHx8IERpc3BsYXlEZW5zaXR5LmNvbWZvcnRhYmxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aGVtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgZGlzcGxheURlbnNpdHkodmFsOiBEaXNwbGF5RGVuc2l0eSB8IHN0cmluZykge1xuICAgICAgICBjb25zdCBjdXJyZW50RGlzcGxheURlbnNpdHkgPSB0aGlzLl9kaXNwbGF5RGVuc2l0eTtcbiAgICAgICAgdGhpcy5fZGlzcGxheURlbnNpdHkgPSB2YWwgYXMgRGlzcGxheURlbnNpdHk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnREaXNwbGF5RGVuc2l0eSAhPT0gdGhpcy5fZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbnNpdHlDaGFuZ2VkQXJnczogSURlbnNpdHlDaGFuZ2VkRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgIG9sZERlbnNpdHk6IGN1cnJlbnREaXNwbGF5RGVuc2l0eSxcbiAgICAgICAgICAgICAgICBuZXdEZW5zaXR5OiB0aGlzLl9kaXNwbGF5RGVuc2l0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5vbkRlbnNpdHlDaGFuZ2VkLmVtaXQoZGVuc2l0eUNoYW5nZWRBcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkRlbnNpdHlDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxJRGVuc2l0eUNoYW5nZWRFdmVudEFyZ3M+KCk7XG5cbiAgICBwcm90ZWN0ZWQgb2xkRGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zID0geyBkaXNwbGF5RGVuc2l0eTogRGlzcGxheURlbnNpdHkuY29tZm9ydGFibGUgfTtcblxuXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChEaXNwbGF5RGVuc2l0eVRva2VuKSBwcm90ZWN0ZWQgZGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vbGREaXNwbGF5RGVuc2l0eU9wdGlvbnMsIGRpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbml0aWFsRGVuc2l0eSA9IHRoaXMuX2Rpc3BsYXlEZW5zaXR5O1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGlzcGxheURlbnNpdHkgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm9sZERpc3BsYXlEZW5zaXR5T3B0aW9ucy5kaXNwbGF5RGVuc2l0eSAhPT0gdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbnNpdHlDaGFuZ2VkQXJnczogSURlbnNpdHlDaGFuZ2VkRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgIG9sZERlbnNpdHk6IHRoaXMub2xkRGlzcGxheURlbnNpdHlPcHRpb25zLmRpc3BsYXlEZW5zaXR5LFxuICAgICAgICAgICAgICAgIG5ld0RlbnNpdHk6IHRoaXMuZGlzcGxheURlbnNpdHlPcHRpb25zLmRpc3BsYXlEZW5zaXR5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLm9uRGVuc2l0eUNoYW5nZWQuZW1pdChkZW5zaXR5Q2hhbmdlZEFyZ3MpO1xuICAgICAgICAgICAgdGhpcy5vbGREaXNwbGF5RGVuc2l0eU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub2xkRGlzcGxheURlbnNpdHlPcHRpb25zLCB0aGlzLmRpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHN0eWxlIGNsYXNzIG9mIGEgY29tcG9uZW50L2VsZW1lbnQgcmV0dXJucyB0aGUgbW9kaWZpZWQgdmVyc2lvbiBvZiBpdCBiYXNlZFxuICAgICAqIG9uIHRoZSBjdXJyZW50IGRpc3BsYXkgZGVuc2l0eS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0Q29tcG9uZW50RGVuc2l0eUNsYXNzKGJhc2VTdHlsZUNsYXNzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29zeTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZVN0eWxlQ2xhc3N9LS0ke0Rpc3BsYXlEZW5zaXR5LmNvc3l9YDtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29tcGFjdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZVN0eWxlQ2xhc3N9LS0ke0Rpc3BsYXlEZW5zaXR5LmNvbXBhY3R9YDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VTdHlsZUNsYXNzO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBEaXNwbGF5RGVuc2l0eUJhc2VcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgRGlzcGxheURlbnNpdHlCYXNlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hEaXNwbGF5RGVuc2l0eU1vZHVsZSB7fVxuIl19