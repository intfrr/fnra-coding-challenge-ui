import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';
import { GridResourceStringsEN } from './grid-resources';
import { TimePickerResourceStringsEN } from './time-picker-resources';
import { PaginatorResourceStringsEN } from './paginator-resources';
import { cloneValue } from '../utils';
import { CarouselResourceStringsEN } from './carousel-resources';
import { ListResourceStringsEN } from './list-resources';
/**
 * @hidden
 */
export const CurrentResourceStrings = {
    GridResStrings: cloneValue(GridResourceStringsEN),
    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),
    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),
    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),
    CarouselResStrings: cloneValue(CarouselResourceStringsEN),
    ListResStrings: cloneValue(ListResourceStringsEN),
};
function updateResourceStrings(currentStrings, newStrings) {
    for (const key of Object.keys(newStrings)) {
        if (key in currentStrings) {
            currentStrings[key] = newStrings[key];
        }
    }
}
/**
 * Changes the resource strings for all components in the application
 * ```
 * @param resourceStrings to be applied
 */
export function changei18n(resourceStrings) {
    for (const key of Object.keys(CurrentResourceStrings)) {
        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);
    }
}
/**
 * Returns current resource strings for all components
 */
export function getCurrentResourceStrings() {
    return Object.assign(Object.assign({}, CurrentResourceStrings.GridResStrings), CurrentResourceStrings.TimePickerResStrings);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NvcmUvaTE4bi9yZXNvdXJjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDakYsT0FBTyxFQUF3QixxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9FLE9BQU8sRUFBOEIsMkJBQTJCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBNEIseUJBQXlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUl6RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHO0lBQ2xDLGNBQWMsRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUM7SUFDakQsbUJBQW1CLEVBQUUsVUFBVSxDQUFDLDBCQUEwQixDQUFDO0lBQzNELG9CQUFvQixFQUFFLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQztJQUM3RCx5QkFBeUIsRUFBRSxVQUFVLENBQUMsZ0NBQWdDLENBQUM7SUFDdkUsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ3pELGNBQWMsRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUM7Q0FDcEQsQ0FBQztBQUVGLFNBQVMscUJBQXFCLENBQUMsY0FBZ0MsRUFBRSxVQUE0QjtJQUN6RixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDdkMsSUFBSSxHQUFHLElBQUksY0FBYyxFQUFFO1lBQ3ZCLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekM7S0FDSjtBQUNMLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxlQUFpQztJQUN4RCxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRTtRQUNuRCxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztLQUN2RTtBQUNMLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSx5QkFBeUI7SUFDckMsdUNBQ1csc0JBQXNCLENBQUMsY0FBYyxHQUNyQyxzQkFBc0IsQ0FBQyxvQkFBb0IsRUFDcEQ7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL2RhdGUtcmFuZ2UtcGlja2VyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJR3JpZFJlc291cmNlU3RyaW5ncywgR3JpZFJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9ncmlkLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJVGltZVBpY2tlclJlc291cmNlU3RyaW5ncywgVGltZVBpY2tlclJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi90aW1lLXBpY2tlci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL3BhZ2luYXRvci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgY2xvbmVWYWx1ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IElDYXJvdXNlbFJlc291cmNlU3RyaW5ncywgQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vY2Fyb3VzZWwtcmVzb3VyY2VzJztcbmltcG9ydCB7IExpc3RSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vbGlzdC1yZXNvdXJjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZXNvdXJjZVN0cmluZ3MgZXh0ZW5kcyBJR3JpZFJlc291cmNlU3RyaW5ncywgSVRpbWVQaWNrZXJSZXNvdXJjZVN0cmluZ3MsIElDYXJvdXNlbFJlc291cmNlU3RyaW5ncyAge31cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjb25zdCBDdXJyZW50UmVzb3VyY2VTdHJpbmdzID0ge1xuICAgIEdyaWRSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKEdyaWRSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgUGFnaW5hdG9yUmVzU3RyaW5nczogY2xvbmVWYWx1ZShQYWdpbmF0b3JSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgVGltZVBpY2tlclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoVGltZVBpY2tlclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKERhdGVSYW5nZVBpY2tlclJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBDYXJvdXNlbFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgTGlzdFJlc1N0cmluZ3M6IGNsb25lVmFsdWUoTGlzdFJlc291cmNlU3RyaW5nc0VOKSxcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZVJlc291cmNlU3RyaW5ncyhjdXJyZW50U3RyaW5nczogSVJlc291cmNlU3RyaW5ncywgbmV3U3RyaW5nczogSVJlc291cmNlU3RyaW5ncyApIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhuZXdTdHJpbmdzKSkge1xuICAgICAgICBpZiAoa2V5IGluIGN1cnJlbnRTdHJpbmdzKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RyaW5nc1trZXldID0gbmV3U3RyaW5nc1trZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIHJlc291cmNlIHN0cmluZ3MgZm9yIGFsbCBjb21wb25lbnRzIGluIHRoZSBhcHBsaWNhdGlvblxuICogYGBgXG4gKiBAcGFyYW0gcmVzb3VyY2VTdHJpbmdzIHRvIGJlIGFwcGxpZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZWkxOG4ocmVzb3VyY2VTdHJpbmdzOiBJUmVzb3VyY2VTdHJpbmdzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoQ3VycmVudFJlc291cmNlU3RyaW5ncykpIHtcbiAgICAgICAgdXBkYXRlUmVzb3VyY2VTdHJpbmdzKEN1cnJlbnRSZXNvdXJjZVN0cmluZ3Nba2V5XSwgcmVzb3VyY2VTdHJpbmdzKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBjdXJyZW50IHJlc291cmNlIHN0cmluZ3MgZm9yIGFsbCBjb21wb25lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50UmVzb3VyY2VTdHJpbmdzKCk6IElSZXNvdXJjZVN0cmluZ3Mge1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLkdyaWRSZXNTdHJpbmdzLFxuICAgICAgICAgICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5UaW1lUGlja2VyUmVzU3RyaW5nc1xuICAgIH07XG59XG4iXX0=