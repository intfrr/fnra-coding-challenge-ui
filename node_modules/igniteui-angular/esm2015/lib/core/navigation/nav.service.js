import { Injectable } from '@angular/core';
/**
 * Common service to be injected between components where those implementing common
 * ToggleView interface can register and toggle directives can call their methods.
 * TODO: Track currently active? Events?
 */
import * as ɵngcc0 from '@angular/core';
export class IgxNavigationService {
    constructor() {
        this.navs = {};
    }
    add(id, navItem) {
        this.navs[id] = navItem;
    }
    remove(id) {
        delete this.navs[id];
    }
    get(id) {
        if (id) {
            return this.navs[id];
        }
    }
    toggle(id, ...args) {
        if (this.navs[id]) {
            return this.navs[id].toggle(...args);
        }
    }
    open(id, ...args) {
        if (this.navs[id]) {
            return this.navs[id].open(...args);
        }
    }
    close(id, ...args) {
        if (this.navs[id]) {
            return this.navs[id].close(...args);
        }
    }
}
IgxNavigationService.ɵfac = function IgxNavigationService_Factory(t) { return new (t || IgxNavigationService)(); };
IgxNavigationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: IgxNavigationService, factory: IgxNavigationService.ɵfac });
IgxNavigationService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxNavigationService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9jb3JlL25hdmlnYXRpb24vbmF2LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsTUFBTSxPQUFPLG9CQUFvQjtBQUNqQyxJQUVJO0FBQ0osUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUN2QixJQUFJLENBQUM7QUFDTCxJQUNXLEdBQUcsQ0FBQyxFQUFVLEVBQUUsT0FBb0I7QUFDL0MsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUNoQyxJQUFJLENBQUM7QUFDTCxJQUNXLE1BQU0sQ0FBQyxFQUFVO0FBQzVCLFFBQVEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLElBQUksQ0FBQztBQUNMLElBQ1csR0FBRyxDQUFDLEVBQVU7QUFBSSxRQUNyQixJQUFJLEVBQUUsRUFBRTtBQUNoQixZQUFZLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqQyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDVyxNQUFNLENBQUMsRUFBVSxFQUFFLEdBQUcsSUFBSTtBQUNyQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUMzQixZQUFZLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUNqRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFBVyxJQUFJLENBQUMsRUFBVSxFQUFFLEdBQUcsSUFBSTtBQUNuQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUMzQixZQUFZLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFBVyxLQUFLLENBQUMsRUFBVSxFQUFFLEdBQUcsSUFBSTtBQUNwQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUMzQixZQUFZLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUNoRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7Z0RBckNDLFVBQVU7NEhBQ1Q7QUFBQzs7O2dEQUNXO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVG9nZ2xlVmlldyB9IGZyb20gJy4vSVRvZ2dsZVZpZXcnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIENvbW1vbiBzZXJ2aWNlIHRvIGJlIGluamVjdGVkIGJldHdlZW4gY29tcG9uZW50cyB3aGVyZSB0aG9zZSBpbXBsZW1lbnRpbmcgY29tbW9uXG4gKiBUb2dnbGVWaWV3IGludGVyZmFjZSBjYW4gcmVnaXN0ZXIgYW5kIHRvZ2dsZSBkaXJlY3RpdmVzIGNhbiBjYWxsIHRoZWlyIG1ldGhvZHMuXG4gKiBUT0RPOiBUcmFjayBjdXJyZW50bHkgYWN0aXZlPyBFdmVudHM/XG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJZ3hOYXZpZ2F0aW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBuYXZzOiB7IFtpZDogc3RyaW5nXTogSVRvZ2dsZVZpZXc7IH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5uYXZzID0ge307XG4gICAgfVxuXG4gICAgcHVibGljIGFkZChpZDogc3RyaW5nLCBuYXZJdGVtOiBJVG9nZ2xlVmlldykge1xuICAgICAgICB0aGlzLm5hdnNbaWRdID0gbmF2SXRlbTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubmF2c1tpZF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldChpZDogc3RyaW5nKTogSVRvZ2dsZVZpZXcge1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdnNbaWRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHRvZ2dsZShpZDogc3RyaW5nLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLm5hdnNbaWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYXZzW2lkXS50b2dnbGUoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIG9wZW4oaWQ6IHN0cmluZywgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5uYXZzW2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF2c1tpZF0ub3BlbiguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgY2xvc2UoaWQ6IHN0cmluZywgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5uYXZzW2lkXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF2c1tpZF0uY2xvc2UoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=