import { Directive, HostListener, Input, NgModule } from '@angular/core';
import { IgxNavigationService } from './nav.service';
/**
 * Directive that can toggle targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavToggle="ID"> Toggle </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './nav.service';
export class IgxNavigationToggleDirective {
    constructor(nav) {
        this.state = nav;
    }
    toggleNavigationDrawer() {
        this.state.toggle(this.target, true);
    }
}
IgxNavigationToggleDirective.ɵfac = function IgxNavigationToggleDirective_Factory(t) { return new (t || IgxNavigationToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxNavigationService)); };
IgxNavigationToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxNavigationToggleDirective, selectors: [["", "igxNavToggle", ""]], hostBindings: function IgxNavigationToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxNavigationToggleDirective_click_HostBindingHandler() { return ctx.toggleNavigationDrawer(); });
    } }, inputs: { target: ["igxNavToggle", "target"] } });
IgxNavigationToggleDirective.ctorParameters = () => [
    { type: IgxNavigationService }
];
IgxNavigationToggleDirective.propDecorators = {
    target: [{ type: Input, args: ['igxNavToggle',] }],
    toggleNavigationDrawer: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxNavigationToggleDirective, [{
        type: Directive,
        args: [{ selector: '[igxNavToggle]' }]
    }], function () { return [{ type: ɵngcc1.IgxNavigationService }]; }, { toggleNavigationDrawer: [{
            type: HostListener,
            args: ['click']
        }], target: [{
            type: Input,
            args: ['igxNavToggle']
        }] }); })();
/**
 * Directive that can close targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavClose="ID"> Close </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
export class IgxNavigationCloseDirective {
    constructor(nav) {
        this.state = nav;
    }
    closeNavigationDrawer() {
        this.state.close(this.target, true);
    }
}
IgxNavigationCloseDirective.ɵfac = function IgxNavigationCloseDirective_Factory(t) { return new (t || IgxNavigationCloseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxNavigationService)); };
IgxNavigationCloseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxNavigationCloseDirective, selectors: [["", "igxNavClose", ""]], hostBindings: function IgxNavigationCloseDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxNavigationCloseDirective_click_HostBindingHandler() { return ctx.closeNavigationDrawer(); });
    } }, inputs: { target: ["igxNavClose", "target"] } });
IgxNavigationCloseDirective.ctorParameters = () => [
    { type: IgxNavigationService }
];
IgxNavigationCloseDirective.propDecorators = {
    target: [{ type: Input, args: ['igxNavClose',] }],
    closeNavigationDrawer: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxNavigationCloseDirective, [{
        type: Directive,
        args: [{ selector: '[igxNavClose]' }]
    }], function () { return [{ type: ɵngcc1.IgxNavigationService }]; }, { closeNavigationDrawer: [{
            type: HostListener,
            args: ['click']
        }], target: [{
            type: Input,
            args: ['igxNavClose']
        }] }); })();
/**
 * @hidden
 */
export class IgxNavigationModule {
}
IgxNavigationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxNavigationModule });
IgxNavigationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxNavigationModule_Factory(t) { return new (t || IgxNavigationModule)(); }, providers: [IgxNavigationService] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxNavigationModule, { declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective], exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxNavigationModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
                exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
                providers: [IgxNavigationService]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NvcmUvbmF2aWdhdGlvbi9kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFFSCxNQUFNLE9BQU8sNEJBQTRCO0FBQ3pDLElBSUksWUFBWSxHQUF5QjtBQUN6QyxRQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLElBQUksQ0FBQztBQUNMLElBRVcsc0JBQXNCO0FBQ2pDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM3QyxJQUFJLENBQUM7QUFDTDt3REFkQyxTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7OzsyREFDcEM7QUFBQztBQUNVLFlBYlIsb0JBQW9CO0FBQUc7QUFBRztBQUdULHFCQVlwQixLQUFLLFNBQUMsY0FBYztBQUFPLHFDQU0zQixZQUFZLFNBQUMsT0FBTztBQUNyQjs7Ozs7Ozs7OztvQkFBRTtBQUtOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsTUFBTSxPQUFPLDJCQUEyQjtBQUN4QyxJQUlJLFlBQVksR0FBeUI7QUFDekMsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUN6QixJQUFJLENBQUM7QUFDTCxJQUVXLHFCQUFxQjtBQUNoQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUMsSUFBSSxDQUFDO0FBQ0w7dURBZEMsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTs7OzBEQUNuQztBQUFDO0FBQ1UsWUF0Q1Isb0JBQW9CO0FBQUc7QUFBRztBQUdWLHFCQXFDbkIsS0FBSyxTQUFDLGFBQWE7QUFBTyxvQ0FNMUIsWUFBWSxTQUFDLE9BQU87QUFDckI7Ozs7Ozs7Ozs7b0JBQUU7QUFLTjtBQUNBO0FBQ0EsR0FBRztBQU1ILE1BQU0sT0FBTyxtQkFBbUI7QUFBRzsrQ0FMbEMsUUFBUSxTQUFDLGtCQUNOO1dBQVksRUFBRSxDQUFDLDJCQUEyQixFQUFFLDRCQUE0QixDQUFDLGtCQUN6RSxPQUFPLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSw0QkFBNEIsQ0FBQyxrQkFDcEUsU0FBUztDQUFFLENBQUMsb0JBQW9CLENBQUMsY0FDcEM7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0lneE5hdmlnYXRpb25TZXJ2aWNlfSBmcm9tICcuL25hdi5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBjYW4gdG9nZ2xlIHRhcmdldHMgdGhyb3VnaCBwcm92aWRlZCBOYXZpZ2F0aW9uU2VydmljZS5cbiAqXG4gKiBVc2FnZTpcbiAqIGBgYFxuICogPGJ1dHRvbiBpZ3hOYXZUb2dnbGU9XCJJRFwiPiBUb2dnbGUgPC9idXR0b24+XG4gKiBgYGBcbiAqIFdoZXJlIHRoZSBgSURgIG1hdGNoZXMgdGhlIElEIG9mIGNvbXBhdGlibGUgYElUb2dnbGVWaWV3YCBjb21wb25lbnQuXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tpZ3hOYXZUb2dnbGVdJyB9KVxuZXhwb3J0IGNsYXNzIElneE5hdmlnYXRpb25Ub2dnbGVEaXJlY3RpdmUge1xuICAgIHB1YmxpYyBzdGF0ZTogSWd4TmF2aWdhdGlvblNlcnZpY2U7XG5cbiAgICBASW5wdXQoJ2lneE5hdlRvZ2dsZScpIHByaXZhdGUgdGFyZ2V0O1xuXG4gICAgY29uc3RydWN0b3IobmF2OiBJZ3hOYXZpZ2F0aW9uU2VydmljZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gbmF2O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICBwdWJsaWMgdG9nZ2xlTmF2aWdhdGlvbkRyYXdlcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS50b2dnbGUodGhpcy50YXJnZXQsIHRydWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBjYW4gY2xvc2UgdGFyZ2V0cyB0aHJvdWdoIHByb3ZpZGVkIE5hdmlnYXRpb25TZXJ2aWNlLlxuICpcbiAqIFVzYWdlOlxuICogYGBgXG4gKiA8YnV0dG9uIGlneE5hdkNsb3NlPVwiSURcIj4gQ2xvc2UgPC9idXR0b24+XG4gKiBgYGBcbiAqIFdoZXJlIHRoZSBgSURgIG1hdGNoZXMgdGhlIElEIG9mIGNvbXBhdGlibGUgYElUb2dnbGVWaWV3YCBjb21wb25lbnQuXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tpZ3hOYXZDbG9zZV0nIH0pXG5leHBvcnQgY2xhc3MgSWd4TmF2aWdhdGlvbkNsb3NlRGlyZWN0aXZlIHtcbiAgICBwdWJsaWMgc3RhdGU6IElneE5hdmlnYXRpb25TZXJ2aWNlO1xuXG4gICAgQElucHV0KCdpZ3hOYXZDbG9zZScpIHByaXZhdGUgdGFyZ2V0O1xuXG4gICAgY29uc3RydWN0b3IobmF2OiBJZ3hOYXZpZ2F0aW9uU2VydmljZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gbmF2O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICBwdWJsaWMgY2xvc2VOYXZpZ2F0aW9uRHJhd2VyKCkge1xuICAgICAgICB0aGlzLnN0YXRlLmNsb3NlKHRoaXMudGFyZ2V0LCB0cnVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lneE5hdmlnYXRpb25DbG9zZURpcmVjdGl2ZSwgSWd4TmF2aWdhdGlvblRvZ2dsZURpcmVjdGl2ZV0sXG4gICAgZXhwb3J0czogW0lneE5hdmlnYXRpb25DbG9zZURpcmVjdGl2ZSwgSWd4TmF2aWdhdGlvblRvZ2dsZURpcmVjdGl2ZV0sXG4gICAgcHJvdmlkZXJzOiBbSWd4TmF2aWdhdGlvblNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIElneE5hdmlnYXRpb25Nb2R1bGUge31cbiJdfQ==