import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { DeprecateProperty } from '../core/deprecateDecorators';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Inject, Input, NgModule, Optional, Output, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { IgxNavigationService } from '../core/navigation';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxOverlayService, HorizontalAlignment, VerticalAlignment, GlobalPositionStrategy, } from '../services/public_api';
import { mkenum } from '../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../core/navigation';
import * as ɵngcc2 from '../services/public_api';

const _c0 = ["*"];
let NEXT_ID = 0;
/**
 * Enumeration for toast position
 * Can be:
 * Bottom
 * Middle
 * Top
 */
export const IgxToastPosition = mkenum({
    Bottom: 'bottom',
    Middle: 'middle',
    Top: 'top'
});
/**
 * **Ignite UI for Angular Toast** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast)
 *
 * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot
 * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.
 *
 * Example:
 * ```html
 * <button (click)="toast.show()">Show notification</button>
 * <igx-toast #toast
 *           message="Notification displayed"
 *           displayTime="1000">
 * </igx-toast>
 * ```
 */
export class IgxToastComponent extends IgxToggleDirective {
    constructor(_element, cdr, navService, overlayService) {
        super(_element, cdr, overlayService, navService);
        this._element = _element;
        this.d$ = new Subject();
        this._isVisible = false;
        /**
         * @hidden
         */
        this.cssClass = 'igx-toast';
        /**
         * Sets/gets the `id` of the toast.
         * If not set, the `id` will have value `"igx-toast-0"`.
         * ```html
         * <igx-toast id = "my-first-toast"></igx-toast>
         * ```
         * ```typescript
         * let toastId = this.toast.id;
         * ```
         */
        this.id = `igx-toast-${NEXT_ID++}`;
        /**
         * Emits an event prior the toast is shown.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onShowing) = "onShowing($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onShowing = new EventEmitter();
        /**
         * Emits an event when the toast is shown.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onShown)="onShown($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onShown = new EventEmitter();
        /**
         * Emits an event prior the toast is hidden.
         * Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onHiding)="onHiding($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onHiding = new EventEmitter();
        /**
         *  Emits an event when the toast is hidden.
         *  Provides reference to the `IgxToastComponent` as event argument.
         * ```html
         * <igx-toast (onHidden)="onHidden($event)"></igx-toast>
         * ```
         * @memberof IgxToastComponent
         */
        this.onHidden = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         * If not set, `role` will have value `"alert"`.
         * ```html
         * <igx-toast [role] = "'notify'"></igx-toast>
         * ```
         * ```typescript
         * let toastRole = this.toast.role;
         * ```
         * @memberof IgxToastComponent
         */
        this.role = 'alert';
        /**
         * Sets/gets whether the toast will be hidden after the `displayTime` is over.
         * Default value is `true`.
         * ```html
         * <igx-toast [autoHide] = "false"></igx-toast>
         * ```
         * ```typescript
         * let autoHide = this.toast.autoHide;
         * ```
         * @memberof IgxToastComponent
         */
        this.autoHide = true;
        /**
         * Sets/gets the duration of time span(in milliseconds) which the toast will be visible
         * after it is being shown.
         * Default value is `4000`.
         * ```html
         * <igx-toast [displayTime] = "2500"></igx-toast>
         * ```
         * ```typescript
         * let displayTime = this.toast.displayTime;
         * ```
         * @memberof IgxToastComponent
         */
        this.displayTime = 4000;
        /**
         * @hidden
         */
        this.isVisibleChange = new EventEmitter();
        /**
         * Sets/gets the position of the toast.
         * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.
         * ```html
         * <igx-toast [position]="top"></igx-toast>
         * ```
         * ```typescript
         * let toastPosition = this.toast.position;
         * ```
         * @memberof IgxToastComponent
         */
        this.position = 'bottom';
        /**
         * @hidden
         * @internal
         */
        this.toastMessage = '';
    }
    /**
     * Enables/Disables the visibility of the toast.
     * If not set, the `isVisible` attribute will have value `false`.
     * ```html
     * <igx-toast [isVisible]="true"></igx-toast>
     * ```
     * ```typescript
     * let isVisible = this.toast.isVisible;
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-toast [(isVisible)]="model.isVisible"></igx-toast>
     * ```
     * @memberof IgxToastComponent
     */
    get isVisible() {
        return this._isVisible;
    }
    set isVisible(value) {
        this._isVisible = value;
        this.isVisibleChange.emit(this._isVisible);
    }
    /**
     * @deprecated Place your message in the toast content instead.
     * Sets/gets the message that will be shown by the toast.
     * ```html
     * <igx-toast [message] = "Notification"></igx-toast>
     * ```
     * ```typescript
     * let toastMessage = this.toast.message;
     * ```
     * @memberof IgxToastComponent
     */
    set message(value) {
        this.toastMessage = value;
    }
    get message() {
        return this.toastMessage;
    }
    /**
     * Gets the nativeElement of the toast.
     * ```typescript
     * let nativeElement = this.toast.element;
     * ```
     * @memberof IgxToastComponent
     */
    get element() {
        return this._element.nativeElement;
    }
    /**
     * Shows the toast.
     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.
     * ```typescript
     * this.toast.show();
     * ```
     * @memberof IgxToastComponent
     */
    show(message) {
        clearInterval(this.timeoutId);
        const overlaySettings = {
            positionStrategy: new GlobalPositionStrategy({
                horizontalDirection: HorizontalAlignment.Center,
                verticalDirection: this.position === 'bottom'
                    ? VerticalAlignment.Bottom
                    : this.position === 'middle'
                        ? VerticalAlignment.Middle
                        : VerticalAlignment.Top,
            }),
            closeOnEscape: false,
            closeOnOutsideClick: false,
            modal: false,
            outlet: this.outlet,
        };
        if (message !== undefined) {
            this.toastMessage = message;
        }
        this.onShowing.emit(this);
        super.open(overlaySettings);
        if (this.autoHide) {
            this.timeoutId = window.setTimeout(() => {
                this.hide();
            }, this.displayTime);
        }
    }
    /**
     * Hides the toast.
     * ```typescript
     * this.toast.hide();
     * ```
     * @memberof IgxToastComponent
     */
    hide() {
        clearInterval(this.timeoutId);
        this.onHiding.emit(this);
        super.close();
    }
    /**
     * Wraps @show() method due @IToggleView interface implementation.
     * @hidden
     */
    open() {
        this.show();
    }
    /**
     * Wraps @hide() method due @IToggleView interface implementation.
     * @hidden
     */
    close() {
        this.hide();
    }
    /**
     * Toggles the visible state of the toast.
     * ```typescript
     * this.toast.toggle();
     * ```
     * @memberof IgxToastComponent
     */
    toggle() {
        super.toggle();
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.onOpened.pipe(takeUntil(this.d$)).subscribe(() => {
            this.onShown.emit(this);
            this.isVisible = true;
        });
        this.onClosed.pipe(takeUntil(this.d$)).subscribe(() => {
            this.onHidden.emit(this);
            this.isVisible = false;
        });
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.d$.next(true);
        this.d$.complete();
    }
}
IgxToastComponent.ɵfac = function IgxToastComponent_Factory(t) { return new (t || IgxToastComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxNavigationService, 8), ɵngcc0.ɵɵdirectiveInject(IgxOverlayService)); };
IgxToastComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxToastComponent, selectors: [["igx-toast"]], hostVars: 3, hostBindings: function IgxToastComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵclassProp("igx-toast", ctx.cssClass);
    } }, inputs: { id: "id", role: "role", autoHide: "autoHide", displayTime: "displayTime", position: "position", isVisible: "isVisible", message: "message", outlet: "outlet" }, outputs: { onShowing: "onShowing", onShown: "onShown", onHiding: "onHiding", onHidden: "onHidden", isVisibleChange: "isVisibleChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 3, vars: 1, template: function IgxToastComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵelementStart(1, "span");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.toastMessage);
    } }, encapsulation: 2 });
IgxToastComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: IgxNavigationService, decorators: [{ type: Optional }] },
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] }
];
IgxToastComponent.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-toast',] }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    onShowing: [{ type: Output }],
    onShown: [{ type: Output }],
    onHiding: [{ type: Output }],
    onHidden: [{ type: Output }],
    role: [{ type: Input }],
    autoHide: [{ type: Input }],
    displayTime: [{ type: Input }],
    outlet: [{ type: Input }],
    isVisible: [{ type: Input }],
    isVisibleChange: [{ type: Output }],
    message: [{ type: Input }],
    position: [{ type: Input }]
};
__decorate([
    DeprecateProperty(`'message' property is deprecated.
    You can use place the message in the toast content or pass it as parameter to the show method instead.`)
], IgxToastComponent.prototype, "message", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxToastComponent, [{
        type: Component,
        args: [{
                selector: 'igx-toast',
                template: "<ng-content></ng-content>\n<span>{{ toastMessage }}</span>\n\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.IgxNavigationService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.IgxOverlayService, decorators: [{
                type: Inject,
                args: [IgxOverlayService]
            }] }]; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-toast']
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], onShowing: [{
            type: Output
        }], onShown: [{
            type: Output
        }], onHiding: [{
            type: Output
        }], onHidden: [{
            type: Output
        }], role: [{
            type: Input
        }], autoHide: [{
            type: Input
        }], displayTime: [{
            type: Input
        }], isVisibleChange: [{
            type: Output
        }], position: [{
            type: Input
        }], isVisible: [{
            type: Input
        }], message: [{
            type: Input
        }], outlet: [{
            type: Input
        }] }); })();
/**
 * @hidden
 */
export class IgxToastModule {
}
IgxToastModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxToastModule });
IgxToastModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxToastModule_Factory(t) { return new (t || IgxToastModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxToastModule, { declarations: function () { return [IgxToastComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [IgxToastComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxToastModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxToastComponent],
                exports: [IgxToastComponent],
                imports: [CommonModule]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,