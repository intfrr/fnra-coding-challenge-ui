import { Directive, HostBinding, NgModule, Input } from '@angular/core';
import { mkenum } from '../../core/utils';
import * as ɵngcc0 from '@angular/core';
export const IgxDividerType = mkenum({
    SOLID: 'solid',
    DASHED: 'dashed'
});
let NEXT_ID = 0;
export class IgxDividerDirective {
    constructor() {
        /**
         * Sets/gets the `id` of the divider.
         * If not set, `id` will have value `"igx-divider-0"`;
         * ```html
         * <igx-divider id="my-divider"></igx-divider>
         * ```
         * ```typescript
         * let dividerId =  this.divider.id;
         * ```
         */
        this.id = `igx-divider-${NEXT_ID++}`;
        /**
         * An @Input property that sets the value of the `inset` attribute.
         * If not provided it will be set to `'0'`.
         * ```html
         * <igx-divider inset="16px"></igx-divider>
         * ```
         */
        this._inset = '0';
        /**
         * An @Input property that sets the value of `role` attribute.
         * If not the default value of `separator` will be used.
         */
        this.role = 'separator';
        /**
         * Sets the type of the divider. The default value
         * is `default`. The divider can also be `dashed`;
         * ```html
         * <igx-divider type="dashed"></igx-divider>
         * ```
         */
        this.type = IgxDividerType.SOLID;
        /**
         * An @Input that sets the `middle` attribute of the divider.
         * If set to `true` and an `inset` value has been provided,
         * the divider will start shrinking from both ends.
         * ```html
         * <igx-divider [middle]="true"></igx-divider>
         * ```
         */
        this.middle = false;
        /**
         * An @Input that sets the vertical attribute of the divider.
         * ```html
         * <igx-divider [vertical]="true"></igx-divider>
         * ```
         */
        this.vertical = false;
    }
    get isDashed() {
        return this.type === IgxDividerType.DASHED;
    }
    /**
     * A getter that returns `true` if the type of the divider is `default`;
     * ```typescript
     * const isDefault = this.divider.isDefault;
     * ```
     */
    get isSolid() {
        return this.type === IgxDividerType.SOLID;
    }
    /**
     * Sets the inset of the divider from the side(s).
     * If the divider attribute `middle` is set to `true`,
     * it will inset the divider on both sides.
     * ```typescript
     * this.divider.inset = '32px';
     * ```
     */
    set inset(value) {
        this._inset = value;
    }
    /**
     * Gets the current divider inset in terms of
     * margin representation as applied to the divider.
     * ```typescript
     * const inset = this.divider.inset;
     * ```
     */
    get inset() {
        const baseMargin = '0';
        if (this.middle) {
            if (this.vertical) {
                return `${this._inset} ${baseMargin}`;
            }
            return `${baseMargin} ${this._inset}`;
        }
        else {
            if (this.vertical) {
                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;
            }
            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;
        }
    }
}
IgxDividerDirective.ɵfac = function IgxDividerDirective_Factory(t) { return new (t || IgxDividerDirective)(); };
IgxDividerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxDividerDirective, selectors: [["igx-divider"]], hostVars: 12, hostBindings: function IgxDividerDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id)("role", ctx.role);
        ɵngcc0.ɵɵstyleProp("margin", ctx.inset);
        ɵngcc0.ɵɵclassProp("igx-divider", ctx.type)("igx-divider--inset", ctx.middle)("igx-divider--vertical", ctx.vertical)("igx-divider--dashed", ctx.isDashed);
    } }, inputs: { id: "id", _inset: ["inset", "_inset"], role: "role", type: "type", middle: "middle", vertical: "vertical" } });
IgxDividerDirective.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    _inset: [{ type: Input, args: ['inset',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }, { type: Input }],
    type: [{ type: HostBinding, args: ['class.igx-divider',] }, { type: Input }],
    isDashed: [{ type: HostBinding, args: ['class.igx-divider--dashed',] }],
    middle: [{ type: HostBinding, args: ['class.igx-divider--inset',] }, { type: Input }],
    vertical: [{ type: HostBinding, args: ['class.igx-divider--vertical',] }, { type: Input }],
    inset: [{ type: HostBinding, args: ['style.margin',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDividerDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'igx-divider'
            }]
    }], function () { return []; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], _inset: [{
            type: Input,
            args: ['inset']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }, {
            type: Input
        }], type: [{
            type: HostBinding,
            args: ['class.igx-divider']
        }, {
            type: Input
        }], middle: [{
            type: HostBinding,
            args: ['class.igx-divider--inset']
        }, {
            type: Input
        }], vertical: [{
            type: HostBinding,
            args: ['class.igx-divider--vertical']
        }, {
            type: Input
        }], isDashed: [{
            type: HostBinding,
            args: ['class.igx-divider--dashed']
        }], inset: [{
            type: HostBinding,
            args: ['style.margin']
        }] }); })();
export class IgxDividerModule {
}
IgxDividerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxDividerModule });
IgxDividerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxDividerModule_Factory(t) { return new (t || IgxDividerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxDividerModule, { declarations: [IgxDividerDirective], exports: [IgxDividerDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDividerModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxDividerDirective],
                exports: [IgxDividerDirective]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,