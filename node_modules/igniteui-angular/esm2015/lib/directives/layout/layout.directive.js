import { Directive, HostBinding, Input, NgModule } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class IgxLayoutDirective {
    constructor() {
        /**
         * Sets the default flow direction of the container's children.
         *
         * Defaults to `rows`.
         *
         * ```html
         *  <div
         *   igxLayout
         *   igxLayoutDir="row">
         *    <div igxFlex>1</div>
         *    <div igxFlex>2</div>
         *    <div igxFlex>3</div>
         *  </div>
         * ```
         */
        this.dir = 'row';
        /**
         * Defines the direction flex children are placed in the flex container.
         *
         * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutReverse="true">
         *    <div igxFlex>1</div>
         *    <div igxFlex>2</div>
         *    <div igxFlex>3</div>
         * </div>
         * ```
         */
        this.reverse = false;
        /**
         * By default the immediate children will all try to fit onto one line.
         *
         * The default value `nowrap` sets this behavior.
         *
         * Other accepted values are `wrap` and `wrap-reverse`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="row"
         *   igxLayoutWrap="wrap">
         *    <div igxFlex igxFlexGrow="0">1</div>
         *    <div igxFlex igxFlexGrow="0">2</div>
         *    <div igxFlex igxFlexGrow="0">3</div>
         * </div>
         * ```
         */
        this.wrap = 'nowrap';
        /**
         * Defines the alignment along the main axis.
         *
         * Defaults to `flex-start` which packs the children toward the start line.
         *
         * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="column"
         *   igxLayoutJustify="space-between">
         *    <div>1</div>
         *    <div>2</div>
         *    <div>3</div>
         * </div>
         * ```
         */
        this.justify = 'flex-start';
        /**
         * Defines the default behavior for how children are laid out along the corss axis of the current line.
         *
         * Defaults to `flex-start`.
         *
         * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="column"
         *   igxLayoutItemAlign="start">
         *    <div igxFlex igxFlexGrow="0">1</div>
         *    <div igxFlex igxFlexGrow="0">2</div>
         *    <div igxFlex igxFlexGrow="0">3</div>
         * </div>
         * ```
         */
        this.itemAlign = 'stretch';
        /**
         * @hidden
         */
        this.display = 'flex';
    }
    /**
     * @hidden
     */
    get flexwrap() { return this.wrap; }
    /**
     * @hidden
     */
    get justifycontent() { return this.justify; }
    /**
     * @hidden
     */
    get align() { return this.itemAlign; }
    /**
     * @hidden
     */
    get direction() {
        if (this.reverse) {
            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';
        }
        return (this.dir === 'row') ? 'row' : 'column';
    }
}
IgxLayoutDirective.ɵfac = function IgxLayoutDirective_Factory(t) { return new (t || IgxLayoutDirective)(); };
IgxLayoutDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxLayoutDirective, selectors: [["", "igxLayout", ""]], hostVars: 10, hostBindings: function IgxLayoutDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.display)("flex-wrap", ctx.flexwrap)("justify-content", ctx.justifycontent)("align-items", ctx.align)("flex-direction", ctx.direction);
    } }, inputs: { dir: ["igxLayoutDir", "dir"], reverse: ["igxLayoutReverse", "reverse"], wrap: ["igxLayoutWrap", "wrap"], justify: ["igxLayoutJustify", "justify"], itemAlign: ["igxLayoutItemAlign", "itemAlign"] } });
IgxLayoutDirective.propDecorators = {
    dir: [{ type: Input, args: ['igxLayoutDir',] }],
    reverse: [{ type: Input, args: ['igxLayoutReverse',] }],
    wrap: [{ type: Input, args: ['igxLayoutWrap',] }],
    justify: [{ type: Input, args: ['igxLayoutJustify',] }],
    itemAlign: [{ type: Input, args: ['igxLayoutItemAlign',] }],
    display: [{ type: HostBinding, args: ['style.display',] }],
    flexwrap: [{ type: HostBinding, args: ['style.flex-wrap',] }],
    justifycontent: [{ type: HostBinding, args: ['style.justify-content',] }],
    align: [{ type: HostBinding, args: ['style.align-items',] }],
    direction: [{ type: HostBinding, args: ['style.flex-direction',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxLayoutDirective, [{
        type: Directive,
        args: [{
                selector: '[igxLayout]'
            }]
    }], function () { return []; }, { dir: [{
            type: Input,
            args: ['igxLayoutDir']
        }], reverse: [{
            type: Input,
            args: ['igxLayoutReverse']
        }], wrap: [{
            type: Input,
            args: ['igxLayoutWrap']
        }], justify: [{
            type: Input,
            args: ['igxLayoutJustify']
        }], itemAlign: [{
            type: Input,
            args: ['igxLayoutItemAlign']
        }], display: [{
            type: HostBinding,
            args: ['style.display']
        }], flexwrap: [{
            type: HostBinding,
            args: ['style.flex-wrap']
        }], justifycontent: [{
            type: HostBinding,
            args: ['style.justify-content']
        }], align: [{
            type: HostBinding,
            args: ['style.align-items']
        }], direction: [{
            type: HostBinding,
            args: ['style.flex-direction']
        }] }); })();
export class IgxFlexDirective {
    constructor() {
        /**
         * Applies the `grow` attribute to an element that uses the directive.
         *
         * Default value is `1`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexGrow="0">Content1</div>
         *    <div igxFlex igxFlexGrow="1">Content2</div>
         *    <div igxFlex igxFlexGrow="0">Content3</div>
         * </div>
         * ```
         */
        this.grow = 1;
        /**
         * Applies the `shrink` attribute to an element that uses the directive.
         *
         * Default value is `1`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexShrink="1">Content1</div>
         *    <div igxFlex igxFlexShrink="0">Content2</div>
         *    <div igxFlex igxFlexShrink="1">Content3</div>
         * </div>
         * ```
         */
        this.shrink = 1;
        /**
         * Applies the directive to an element.
         *
         * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.
         *
         * ```html
         * <div igxFlex>Content</div>
         * ```
         */
        this.flex = '';
        /**
         * Applies the `order` attribute to an element that uses the directive.
         *
         * Default value is `0`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexOrder="1">Content1</div>
         *    <div igxFlex igxFlexOrder="0">Content2</div>
         *    <div igxFlex igxFlexOrder="2">Content3</div>
         * </div>
         * ```
         */
        this.order = 0;
        /**
         * Applies the `flex-basis` attribute to an element that uses the directive.
         *
         * Default value is `auto`.
         *
         * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.
         *
         * ```html
         * <div igxFlex igxFlexBasis="fit-content">Content</div>
         * ```
         */
        this.basis = 'auto';
    }
    /**
     * @hidden
     */
    get style() {
        if (this.flex) {
            return `${this.flex}`;
        }
        return `${this.grow} ${this.shrink} ${this.basis}`;
    }
    /**
     * @hidden
     */
    get itemorder() {
        return this.order || 0;
    }
}
IgxFlexDirective.ɵfac = function IgxFlexDirective_Factory(t) { return new (t || IgxFlexDirective)(); };
IgxFlexDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxFlexDirective, selectors: [["", "igxFlex", ""]], hostVars: 4, hostBindings: function IgxFlexDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("flex", ctx.style)("order", ctx.itemorder);
    } }, inputs: { grow: ["igxFlexGrow", "grow"], shrink: ["igxFlexShrink", "shrink"], flex: ["igxFlex", "flex"], order: ["igxFlexOrder", "order"], basis: ["igxFlexBasis", "basis"] } });
IgxFlexDirective.propDecorators = {
    grow: [{ type: Input, args: ['igxFlexGrow',] }],
    shrink: [{ type: Input, args: ['igxFlexShrink',] }],
    flex: [{ type: Input, args: ['igxFlex',] }],
    order: [{ type: Input, args: ['igxFlexOrder',] }],
    basis: [{ type: Input, args: ['igxFlexBasis',] }],
    style: [{ type: HostBinding, args: ['style.flex',] }],
    itemorder: [{ type: HostBinding, args: ['style.order',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxFlexDirective, [{
        type: Directive,
        args: [{
                selector: '[igxFlex]'
            }]
    }], function () { return []; }, { grow: [{
            type: Input,
            args: ['igxFlexGrow']
        }], shrink: [{
            type: Input,
            args: ['igxFlexShrink']
        }], flex: [{
            type: Input,
            args: ['igxFlex']
        }], order: [{
            type: Input,
            args: ['igxFlexOrder']
        }], basis: [{
            type: Input,
            args: ['igxFlexBasis']
        }], style: [{
            type: HostBinding,
            args: ['style.flex']
        }], itemorder: [{
            type: HostBinding,
            args: ['style.order']
        }] }); })();
/**
 * @hidden
 */
export class IgxLayoutModule {
}
IgxLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxLayoutModule });
IgxLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxLayoutModule_Factory(t) { return new (t || IgxLayoutModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxLayoutModule, { declarations: [IgxFlexDirective, IgxLayoutDirective], exports: [IgxFlexDirective, IgxLayoutDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxLayoutModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxFlexDirective, IgxLayoutDirective],
                exports: [IgxFlexDirective, IgxLayoutDirective]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,