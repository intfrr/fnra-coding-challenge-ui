import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, NgModule, Optional, Output, Self } from '@angular/core';
import { NgModel, FormControlName } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../services/public_api';
import { IgxDropDownItemNavigationDirective, IgxDropDownModule } from '../../drop-down/public_api';
import { IgxInputGroupComponent } from '../../input-group/public_api';
/**
 * **Ignite UI for Angular Autocomplete** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)
 *
 * The igxAutocomplete directive provides a way to enhance a text input
 * by showing a drop down of suggested options, provided by the developer.
 *
 * Example:
 * ```html
 * <input type="text" [igxAutocomplete]="townsPanel" />
 * <igx-drop-down #townsPanel>
 *     <igx-drop-down-item *ngFor="let town of towns | startsWith:townSelected" [value]="town">
 *         {{town}}
 *     </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../input-group/public_api';
import * as ɵngcc2 from '@angular/forms';
export class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective {
    constructor(ngModel, formControl, group, elementRef, cdr) {
        super(null);
        this.ngModel = ngModel;
        this.formControl = formControl;
        this.group = group;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._shouldBeOpen = false;
        this.destroy$ = new Subject();
        /**
         * Enables/disables autocomplete component
         *
         * ```typescript
         * // get
         * let disabled = this.autocomplete.disabled;
         * ```
         * ```html
         * <!--set-->
         * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteDisabled]="disabled"/>
         * ```
         * ```typescript
         * // set
         * public disabled = true;
         * ```
         */
        this.disabled = false;
        /**
         * Emitted after item from the drop down is selected
         *
         * ```html
         * <input igxInput [igxAutocomplete]="townsPanel" (onItemSelected)='itemSelected($event)' />
         * ```
         */
        this.onItemSelected = new EventEmitter();
        /** @hidden @internal */
        this.autofill = 'off';
        /** @hidden  @internal */
        this.role = 'combobox';
        this.select = (value) => {
            if (!value.newSelection) {
                return;
            }
            value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.
            const newValue = value.newSelection.value;
            const args = { value: newValue, cancel: false };
            this.onItemSelected.emit(args);
            if (args.cancel) {
                return;
            }
            this.close();
            this.nativeElement.focus();
            // Update model after the input is re-focused, in order to have proper valid styling.
            // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.
            this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;
        };
        this.highlightFirstItem = () => {
            if (this.target.focusedItem) {
                this.target.focusedItem.focused = false;
                this.target.focusedItem = null;
            }
            this.target.navigateFirst();
            this.cdr.detectChanges();
        };
    }
    get model() {
        return this.ngModel || this.formControl;
    }
    /** @hidden @internal */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /** @hidden @internal */
    get parentElement() {
        return this.group ? this.group.element.nativeElement : this.nativeElement;
    }
    get settings() {
        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);
        const target = settings.target || settings.positionStrategy.settings.target;
        if (!target) {
            const positionStrategyClone = settings.positionStrategy.clone();
            settings.target = this.parentElement;
            settings.positionStrategy = positionStrategyClone;
        }
        return settings;
    }
    /**
     * Sets the target of the autocomplete directive
     *
     * ```html
     * <!-- Set -->
     * <input [igxAutocomplete]="dropdown" />
     * ...
     * <igx-drop-down #dropdown>
     * ...
     * </igx-drop-down>
     * ```
     */
    get target() {
        return this._target;
    }
    set target(v) {
        this._target = v;
    }
    /** @hidden  @internal */
    get ariaExpanded() {
        return !this.collapsed;
    }
    /** @hidden  @internal */
    get hasPopUp() {
        return 'listbox';
    }
    /** @hidden  @internal */
    get ariaOwns() {
        return this.target.listId;
    }
    /** @hidden  @internal */
    get ariaActiveDescendant() {
        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;
    }
    /** @hidden  @internal */
    get ariaAutocomplete() {
        return 'list';
    }
    /** @hidden  @internal */
    onInput() {
        this.open();
    }
    /** @hidden  @internal */
    onArrowDown(event) {
        event.preventDefault();
        this.open();
    }
    /** @hidden  @internal */
    onTab() {
        this.close();
    }
    /** @hidden  @internal */
    handleKeyDown(event) {
        if (!this.collapsed) {
            switch (event.key.toLowerCase()) {
                case 'space':
                case 'spacebar':
                case ' ':
                case 'home':
                case 'end':
                    return;
                default:
                    super.handleKeyDown(event);
            }
        }
    }
    /** @hidden  @internal */
    onArrowDownKeyDown() {
        super.onArrowDownKeyDown();
    }
    /** @hidden  @internal */
    onArrowUpKeyDown() {
        super.onArrowUpKeyDown();
    }
    /** @hidden  @internal */
    onEndKeyDown() {
        super.onEndKeyDown();
    }
    /** @hidden  @internal */
    onHomeKeyDown() {
        super.onHomeKeyDown();
    }
    /**
     * Closes autocomplete drop down
     */
    close() {
        this._shouldBeOpen = false;
        if (this.collapsed) {
            return;
        }
        this.target.close();
    }
    /**
     * Opens autocomplete drop down
     */
    open() {
        this._shouldBeOpen = true;
        if (this.disabled || !this.collapsed || this.target.children.length === 0) {
            return;
        }
        // if no drop-down width is set, the drop-down will be as wide as the autocomplete input;
        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');
        this.target.open(this.settings);
        this.highlightFirstItem();
    }
    get collapsed() {
        return this.target ? this.target.collapsed : true;
    }
    /** @hidden @internal */
    ngOnInit() {
        const targetElement = this.parentElement;
        this.defaultSettings = {
            target: targetElement,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy(),
            excludeFromOutsideClick: [targetElement]
        };
    }
    /** @hidden */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngAfterViewInit() {
        this.target.children.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.target.children.length) {
                if (!this.collapsed) {
                    this.highlightFirstItem();
                }
                else if (this._shouldBeOpen) {
                    this.open();
                }
            }
            else {
                this.close();
            }
        });
        this.target.onSelection.pipe(takeUntil(this.destroy$)).subscribe(this.select);
    }
}
IgxAutocompleteDirective.ɵfac = function IgxAutocompleteDirective_Factory(t) { return new (t || IgxAutocompleteDirective)(ɵngcc0.ɵɵdirectiveInject(NgModel, 10), ɵngcc0.ɵɵdirectiveInject(FormControlName, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxInputGroupComponent, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxAutocompleteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxAutocompleteDirective, selectors: [["", "igxAutocomplete", ""]], hostVars: 7, hostBindings: function IgxAutocompleteDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function IgxAutocompleteDirective_input_HostBindingHandler() { return ctx.onInput(); })("keydown.ArrowDown", function IgxAutocompleteDirective_keydown_ArrowDown_HostBindingHandler($event) { return ctx.onArrowDown($event); })("keydown.Alt.ArrowDown", function IgxAutocompleteDirective_keydown_Alt_ArrowDown_HostBindingHandler($event) { return ctx.onArrowDown($event); })("keydown.ArrowUp", function IgxAutocompleteDirective_keydown_ArrowUp_HostBindingHandler($event) { return ctx.onArrowDown($event); })("keydown.Alt.ArrowUp", function IgxAutocompleteDirective_keydown_Alt_ArrowUp_HostBindingHandler($event) { return ctx.onArrowDown($event); })("keydown.Tab", function IgxAutocompleteDirective_keydown_Tab_HostBindingHandler() { return ctx.onTab(); })("keydown.Shift.Tab", function IgxAutocompleteDirective_keydown_Shift_Tab_HostBindingHandler() { return ctx.onTab(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("autocomplete", ctx.autofill)("role", ctx.role)("aria-expanded", ctx.ariaExpanded)("aria-haspopup", ctx.hasPopUp)("aria-owns", ctx.ariaOwns)("aria-activedescendant", ctx.ariaActiveDescendant)("aria-autocomplete", ctx.ariaAutocomplete);
    } }, inputs: { disabled: ["igxAutocompleteDisabled", "disabled"], target: ["igxAutocomplete", "target"], autocompleteSettings: ["igxAutocompleteSettings", "autocompleteSettings"] }, outputs: { onItemSelected: "onItemSelected" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IgxAutocompleteDirective.ctorParameters = () => [
    { type: NgModel, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [NgModel,] }] },
    { type: FormControlName, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [FormControlName,] }] },
    { type: IgxInputGroupComponent, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxAutocompleteDirective.propDecorators = {
    target: [{ type: Input, args: ['igxAutocomplete',] }],
    disabled: [{ type: Input, args: ['igxAutocompleteDisabled',] }],
    autocompleteSettings: [{ type: Input, args: ['igxAutocompleteSettings',] }],
    onItemSelected: [{ type: Output }],
    autofill: [{ type: HostBinding, args: ['attr.autocomplete',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    ariaExpanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
    hasPopUp: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
    ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }],
    ariaActiveDescendant: [{ type: HostBinding, args: ['attr.aria-activedescendant',] }],
    ariaAutocomplete: [{ type: HostBinding, args: ['attr.aria-autocomplete',] }],
    onInput: [{ type: HostListener, args: ['input',] }],
    onArrowDown: [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.ArrowUp', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowUp', ['$event'],] }],
    onTab: [{ type: HostListener, args: ['keydown.Tab',] }, { type: HostListener, args: ['keydown.Shift.Tab',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxAutocompleteDirective, [{
        type: Directive,
        args: [{
                selector: '[igxAutocomplete]'
            }]
    }], function () { return [{ type: ɵngcc2.NgModel, decorators: [{
                type: Self
            }, {
                type: Optional
            }, {
                type: Inject,
                args: [NgModel]
            }] }, { type: ɵngcc2.FormControlName, decorators: [{
                type: Self
            }, {
                type: Optional
            }, {
                type: Inject,
                args: [FormControlName]
            }] }, { type: ɵngcc1.IgxInputGroupComponent, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { disabled: [{
            type: Input,
            args: ['igxAutocompleteDisabled']
        }], onItemSelected: [{
            type: Output
        }], autofill: [{
            type: HostBinding,
            args: ['attr.autocomplete']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], target: [{
            type: Input,
            args: ['igxAutocomplete']
        }], ariaExpanded: [{
            type: HostBinding,
            args: ['attr.aria-expanded']
        }], hasPopUp: [{
            type: HostBinding,
            args: ['attr.aria-haspopup']
        }], ariaOwns: [{
            type: HostBinding,
            args: ['attr.aria-owns']
        }], ariaActiveDescendant: [{
            type: HostBinding,
            args: ['attr.aria-activedescendant']
        }], ariaAutocomplete: [{
            type: HostBinding,
            args: ['attr.aria-autocomplete']
        }], 
    /** @hidden  @internal */
    onInput: [{
            type: HostListener,
            args: ['input']
        }], 
    /** @hidden  @internal */
    onArrowDown: [{
            type: HostListener,
            args: ['keydown.ArrowDown', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.Alt.ArrowDown', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.ArrowUp', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.Alt.ArrowUp', ['$event']]
        }], 
    /** @hidden  @internal */
    onTab: [{
            type: HostListener,
            args: ['keydown.Tab']
        }, {
            type: HostListener,
            args: ['keydown.Shift.Tab']
        }], autocompleteSettings: [{
            type: Input,
            args: ['igxAutocompleteSettings']
        }] }); })();
/** @hidden */
export class IgxAutocompleteModule {
}
IgxAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxAutocompleteModule });
IgxAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxAutocompleteModule_Factory(t) { return new (t || IgxAutocompleteModule)(); }, imports: [[IgxDropDownModule, CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxAutocompleteModule, { declarations: function () { return [IgxAutocompleteDirective]; }, imports: function () { return [IgxDropDownModule, CommonModule]; }, exports: function () { return [IgxAutocompleteDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxAutocompleteModule, [{
        type: NgModule,
        args: [{
                imports: [IgxDropDownModule, CommonModule],
                declarations: [IgxAutocompleteDirective],
                exports: [IgxAutocompleteDirective]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,