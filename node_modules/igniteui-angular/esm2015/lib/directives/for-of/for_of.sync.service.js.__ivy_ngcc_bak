import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class IgxForOfSyncService {
    constructor() {
        this._master = new Map();
    }
    /**
     * @hidden
     */
    isMaster(directive) {
        return this._master.get(directive.igxForScrollOrientation) === directive;
    }
    /**
     * @hidden
     */
    setMaster(directive, forced = false) {
        const orientation = directive.igxForScrollOrientation;
        if (orientation && (forced || !this._master.has(orientation))) {
            this._master.set(orientation, directive);
        }
    }
    /**
     * @hidden
     */
    resetMaster() {
        this._master.clear();
    }
    /**
     * @hidden
     */
    sizesCache(dir) {
        return this._master.get(dir).sizesCache;
    }
    /**
     * @hidden
     */
    chunkSize(dir) {
        return this._master.get(dir).state.chunkSize;
    }
}
IgxForOfSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxForOfSyncService_Factory() { return new IgxForOfSyncService(); }, token: IgxForOfSyncService, providedIn: "root" });
IgxForOfSyncService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
export class IgxForOfScrollSyncService {
    constructor() {
        this._masterScroll = new Map();
    }
    setScrollMaster(dir, scroll) {
        this._masterScroll.set(dir, scroll);
    }
    getScrollMaster(dir) {
        return this._masterScroll.get(dir);
    }
}
IgxForOfScrollSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxForOfScrollSyncService_Factory() { return new IgxForOfScrollSyncService(); }, token: IgxForOfScrollSyncService, providedIn: "root" });
IgxForOfScrollSyncService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yX29mLnN5bmMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL2Zvci1vZi9mb3Jfb2Yuc3luYy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7O0FBT3RELE1BQU0sT0FBTyxtQkFBbUI7SUFIaEM7UUFLWSxZQUFPLEdBQTRDLElBQUksR0FBRyxFQUFzQyxDQUFDO0tBdUM1RztJQXJDRzs7T0FFRztJQUNJLFFBQVEsQ0FBQyxTQUFxQztRQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxTQUFTLENBQUMsU0FBcUMsRUFBRSxNQUFNLEdBQUcsS0FBSztRQUNsRSxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsdUJBQXVCLENBQUM7UUFDdEQsSUFBSSxXQUFXLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFO1lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVc7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVUsQ0FBQyxHQUFXO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQzVDLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNqRCxDQUFDOzs7O1lBM0NKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7QUErQ0QsTUFBTSxPQUFPLHlCQUF5QjtJQUh0QztRQUlZLGtCQUFhLEdBQTRDLElBQUksR0FBRyxFQUFlLENBQUM7S0FRM0Y7SUFQVSxlQUFlLENBQUMsR0FBVyxFQUFFLE1BQWtDO1FBQ2xFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sZUFBZSxDQUFDLEdBQVc7UUFDOUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7O1lBWEosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hHcmlkRm9yT2ZEaXJlY3RpdmUgfSBmcm9tICcuL2Zvcl9vZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmlydHVhbEhlbHBlckJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UuaGVscGVyLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIElneEZvck9mU3luY1NlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBfbWFzdGVyOiBNYXA8c3RyaW5nLCBJZ3hHcmlkRm9yT2ZEaXJlY3RpdmU8YW55Pj4gPSBuZXcgTWFwPHN0cmluZywgSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT4+KCk7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGlzTWFzdGVyKGRpcmVjdGl2ZTogSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3Rlci5nZXQoZGlyZWN0aXZlLmlneEZvclNjcm9sbE9yaWVudGF0aW9uKSA9PT0gZGlyZWN0aXZlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TWFzdGVyKGRpcmVjdGl2ZTogSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT4sIGZvcmNlZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gZGlyZWN0aXZlLmlneEZvclNjcm9sbE9yaWVudGF0aW9uO1xuICAgICAgICBpZiAob3JpZW50YXRpb24gJiYgKGZvcmNlZCB8fCAhdGhpcy5fbWFzdGVyLmhhcyhvcmllbnRhdGlvbikpKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXN0ZXIuc2V0KG9yaWVudGF0aW9uLCBkaXJlY3RpdmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyByZXNldE1hc3RlcigpIHtcbiAgICAgICAgdGhpcy5fbWFzdGVyLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBzaXplc0NhY2hlKGRpcjogc3RyaW5nKTogbnVtYmVyW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzdGVyLmdldChkaXIpLnNpemVzQ2FjaGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjaHVua1NpemUoZGlyOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzdGVyLmdldChkaXIpLnN0YXRlLmNodW5rU2l6ZTtcbiAgICB9XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIElneEZvck9mU2Nyb2xsU3luY1NlcnZpY2Uge1xuICAgIHByaXZhdGUgX21hc3RlclNjcm9sbDogTWFwPHN0cmluZywgVmlydHVhbEhlbHBlckJhc2VEaXJlY3RpdmU+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbiAgICBwdWJsaWMgc2V0U2Nyb2xsTWFzdGVyKGRpcjogc3RyaW5nLCBzY3JvbGw6IFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlKSB7XG4gICAgICAgIHRoaXMuX21hc3RlclNjcm9sbC5zZXQoZGlyLCBzY3JvbGwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTY3JvbGxNYXN0ZXIoZGlyOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3RlclNjcm9sbC5nZXQoZGlyKTtcbiAgICB9XG59XG4iXX0=