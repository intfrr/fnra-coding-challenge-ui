import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class IgxForOfSyncService {
    constructor() {
        this._master = new Map();
    }
    /**
     * @hidden
     */
    isMaster(directive) {
        return this._master.get(directive.igxForScrollOrientation) === directive;
    }
    /**
     * @hidden
     */
    setMaster(directive, forced = false) {
        const orientation = directive.igxForScrollOrientation;
        if (orientation && (forced || !this._master.has(orientation))) {
            this._master.set(orientation, directive);
        }
    }
    /**
     * @hidden
     */
    resetMaster() {
        this._master.clear();
    }
    /**
     * @hidden
     */
    sizesCache(dir) {
        return this._master.get(dir).sizesCache;
    }
    /**
     * @hidden
     */
    chunkSize(dir) {
        return this._master.get(dir).state.chunkSize;
    }
}
IgxForOfSyncService.ɵfac = function IgxForOfSyncService_Factory(t) { return new (t || IgxForOfSyncService)(); };
IgxForOfSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxForOfSyncService_Factory() { return new IgxForOfSyncService(); }, token: IgxForOfSyncService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxForOfSyncService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
export class IgxForOfScrollSyncService {
    constructor() {
        this._masterScroll = new Map();
    }
    setScrollMaster(dir, scroll) {
        this._masterScroll.set(dir, scroll);
    }
    getScrollMaster(dir) {
        return this._masterScroll.get(dir);
    }
}
IgxForOfScrollSyncService.ɵfac = function IgxForOfScrollSyncService_Factory(t) { return new (t || IgxForOfScrollSyncService)(); };
IgxForOfScrollSyncService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxForOfScrollSyncService_Factory() { return new IgxForOfScrollSyncService(); }, token: IgxForOfScrollSyncService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxForOfScrollSyncService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yX29mLnN5bmMuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvZm9yLW9mL2Zvcl9vZi5zeW5jLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RDs7QUFNQSxNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLElBSkE7QUFDRSxRQUlVLFlBQU8sR0FBNEMsSUFBSSxHQUFHLEVBQXNDLENBQUM7QUFDN0csS0FzQ0M7QUFDRCxJQXRDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsUUFBUSxDQUFDLFNBQXFDO0FBQUksUUFDckQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDakYsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsU0FBUyxDQUFDLFNBQXFDLEVBQUUsTUFBTSxHQUFHLEtBQUs7QUFDMUUsUUFBUSxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsdUJBQXVCLENBQUM7QUFDOUQsUUFBUSxJQUFJLFdBQVcsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUU7QUFDdkUsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDckQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBLE9BQU87QUFDUCxJQUFXLFdBQVc7QUFDdEIsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzdCLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBLE9BQU87QUFDUCxJQUFXLFVBQVUsQ0FBQyxHQUFXO0FBQUksUUFDN0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDaEQsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsU0FBUyxDQUFDLEdBQVc7QUFBSSxRQUM1QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDckQsSUFBSSxDQUFDO0FBQ0w7Z0hBQUM7QUFDRDsrQ0E3Q0MsVUFBVSxTQUFDO01BQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztnREFDSTtBQThDTCxNQUFNLE9BQU8seUJBQXlCO0FBQ3RDLElBSkE7QUFDRSxRQUdVLGtCQUFhLEdBQTRDLElBQUksR0FBRyxFQUFlLENBQUM7QUFDNUYsS0FPQztBQUNELElBUlcsZUFBZSxDQUFDLEdBQVcsRUFBRSxNQUFrQztBQUMxRSxRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM1QyxJQUFJLENBQUM7QUFDTCxJQUNXLGVBQWUsQ0FBQyxHQUFXO0FBQ3RDLFFBQVEsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQyxJQUFJLENBQUM7QUFDTDtrSUFBQztBQUNEO3FEQWJDLFVBQVUsU0FBQztNQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Z0RBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4R3JpZEZvck9mRGlyZWN0aXZlIH0gZnJvbSAnLi9mb3Jfb2YuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmhlbHBlci5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb3JPZlN5bmNTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX21hc3RlcjogTWFwPHN0cmluZywgSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT4+ID0gbmV3IE1hcDxzdHJpbmcsIElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+PigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpc01hc3RlcihkaXJlY3RpdmU6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXN0ZXIuZ2V0KGRpcmVjdGl2ZS5pZ3hGb3JTY3JvbGxPcmllbnRhdGlvbikgPT09IGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHNldE1hc3RlcihkaXJlY3RpdmU6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+LCBmb3JjZWQgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IGRpcmVjdGl2ZS5pZ3hGb3JTY3JvbGxPcmllbnRhdGlvbjtcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uICYmIChmb3JjZWQgfHwgIXRoaXMuX21hc3Rlci5oYXMob3JpZW50YXRpb24pKSkge1xuICAgICAgICAgICAgdGhpcy5fbWFzdGVyLnNldChvcmllbnRhdGlvbiwgZGlyZWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRNYXN0ZXIoKSB7XG4gICAgICAgIHRoaXMuX21hc3Rlci5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2l6ZXNDYWNoZShkaXI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3Rlci5nZXQoZGlyKS5zaXplc0NhY2hlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2h1bmtTaXplKGRpcjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3Rlci5nZXQoZGlyKS5zdGF0ZS5jaHVua1NpemU7XG4gICAgfVxufVxuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb3JPZlNjcm9sbFN5bmNTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9tYXN0ZXJTY3JvbGw6IE1hcDxzdHJpbmcsIFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlPiA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG4gICAgcHVibGljIHNldFNjcm9sbE1hc3RlcihkaXI6IHN0cmluZywgc2Nyb2xsOiBWaXJ0dWFsSGVscGVyQmFzZURpcmVjdGl2ZSkge1xuICAgICAgICB0aGlzLl9tYXN0ZXJTY3JvbGwuc2V0KGRpciwgc2Nyb2xsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2Nyb2xsTWFzdGVyKGRpcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXN0ZXJTY3JvbGwuZ2V0KGRpcik7XG4gICAgfVxufVxuIl19