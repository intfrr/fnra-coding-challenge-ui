import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var IgxHintPosition;
(function (IgxHintPosition) {
    IgxHintPosition[IgxHintPosition["START"] = 0] = "START";
    IgxHintPosition[IgxHintPosition["END"] = 1] = "END";
})(IgxHintPosition || (IgxHintPosition = {}));
export class IgxHintDirective {
    constructor(_element) {
        this._element = _element;
        this._position = IgxHintPosition.START;
        /**
         * Sets/gets whether the hint position is at the start.
         * Default value is `false`.
         * ```typescript
         * @ViewChild('hint', {read: IgxHintDirective})
         * public igxHint: IgxHintDirective;
         * this.igxHint.isPositionStart = true;
         * ```
         * ```typescript
         * let isHintPositionStart = this.igxHint.isPositionStart;
         * ```
         * @memberof IgxHintDirective
         */
        this.isPositionStart = false;
        /**
         * Sets/gets whether the hint position is at the end.
         * Default value is `false`.
         * ```typescript
         * @ViewChild('hint', {read: IgxHintDirective})
         * public igxHint: IgxHintDirective;
         * this.igxHint.isPositionEnd = true;
         * ```
         * ```typescript
         * let isHintPositionEnd = this.igxHint.isPositionEnd;
         * ```
         * @memberof IgxHintDirective
         */
        this.isPositionEnd = false;
    }
    /**
     * Sets the position of the hint.
     * ```html
     * <igx-input-group>
     *  <input igxInput type="text"/>
     *  <igx-hint #hint [position]="'start'">IgxHint displayed at the start</igx-hint>
     * </igx-input-group>
     * ```
     * @memberof IgxHintDirective
     */
    set position(value) {
        const position = IgxHintPosition[value.toUpperCase()];
        if (position !== undefined) {
            this._position = position;
            this._applyPosition(this._position);
        }
    }
    /**
     * Gets the position of the hint.
     * ```typescript
     * @ViewChild('hint', {read: IgxHintDirective})
     * public igxHint: IgxHintDirective;
     * let hintPosition =  this.igxHint.position;
     * ```
     * @memberof IgxHintDirective
     */
    get position() {
        return this._position.toString();
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this._applyPosition(this._position);
    }
    _applyPosition(position) {
        this.isPositionStart = this.isPositionEnd = false;
        switch (position) {
            case IgxHintPosition.START:
                this.isPositionStart = true;
                break;
            case IgxHintPosition.END:
                this.isPositionEnd = true;
                break;
            default: break;
        }
    }
}
IgxHintDirective.ɵfac = function IgxHintDirective_Factory(t) { return new (t || IgxHintDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxHintDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxHintDirective, selectors: [["igx-hint"], ["", "igxHint", ""]], hostVars: 4, hostBindings: function IgxHintDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-input-group__hint-item--start", ctx.isPositionStart)("igx-input-group__hint-item--end", ctx.isPositionEnd);
    } }, inputs: { position: "position" } });
IgxHintDirective.ctorParameters = () => [
    { type: ElementRef }
];
IgxHintDirective.propDecorators = {
    isPositionStart: [{ type: HostBinding, args: ['class.igx-input-group__hint-item--start',] }],
    isPositionEnd: [{ type: HostBinding, args: ['class.igx-input-group__hint-item--end',] }],
    position: [{ type: Input, args: ['position',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxHintDirective, [{
        type: Directive,
        args: [{
                selector: 'igx-hint,[igxHint]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isPositionStart: [{
            type: HostBinding,
            args: ['class.igx-input-group__hint-item--start']
        }], isPositionEnd: [{
            type: HostBinding,
            args: ['class.igx-input-group__hint-item--end']
        }], position: [{
            type: Input,
            args: ['position']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL2hpbnQvaGludC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQzs7QUFFbEYsSUFBSyxlQUdKO0FBSEQsV0FBSyxlQUFlO0FBQ25CLElBQUcsdURBQUssQ0FBQTtBQUFDLElBQ04sbURBQUcsQ0FBQTtBQUNQLENBQUMsRUFISSxlQUFlLEtBQWYsZUFBZSxRQUduQjtBQUtELE1BQU0sT0FBTyxnQkFBZ0I7QUFBRyxJQWlDNUIsWUFBb0IsUUFBb0I7QUFDNUMsUUFEd0IsYUFBUSxHQUFSLFFBQVEsQ0FBWTtBQUFDLFFBaENqQyxjQUFTLEdBQW9CLGVBQWUsQ0FBQyxLQUFLLENBQUM7QUFDL0QsUUFBSTtBQUNKO0FBQ0k7QUFDSTtBQUNJO0FBQ0k7QUFDSTtBQUVQO0FBQ047QUFBeUI7QUFFUDtBQUNuQjtBQUM4QixXQUQ3QjtBQUNQLFFBQ1csb0JBQWUsR0FBRyxLQUFLLENBQUM7QUFDbkMsUUFBSTtBQUNKO0FBQ0k7QUFDSTtBQUNJO0FBQ0k7QUFDSTtBQUVQO0FBQ047QUFBeUI7QUFFUDtBQUNuQjtBQUM4QixXQUQ3QjtBQUNQLFFBQ1csa0JBQWEsR0FBRyxLQUFLLENBQUM7QUFDakMsSUFFSSxDQUFDO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUNJLFFBQVEsQ0FBQyxLQUFhO0FBQzlCLFFBQVEsTUFBTSxRQUFRLEdBQXFCLGVBQXVCLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDeEYsUUFBUSxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7QUFDcEMsWUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUN0QyxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2hELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFJLFFBQVE7QUFDaEIsUUFBUSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDekMsSUFBSSxDQUFDO0FBQ0wsSUFBSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQUksUUFBUTtBQUNaLFFBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUMsSUFBSSxDQUFDO0FBQ0wsSUFDWSxjQUFjLENBQUMsUUFBeUI7QUFDcEQsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQzFELFFBQVEsUUFBUSxRQUFRLEVBQUU7QUFDMUIsWUFBWSxLQUFLLGVBQWUsQ0FBQyxLQUFLO0FBQ3RDLGdCQUFnQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztBQUM1QyxnQkFBZ0IsTUFBTTtBQUN0QixZQUFZLEtBQUssZUFBZSxDQUFDLEdBQUc7QUFDcEMsZ0JBQWdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzFDLGdCQUFnQixNQUFNO0FBQ3RCLFlBQVksT0FBTyxDQUFDLENBQUMsTUFBTTtBQUMzQixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7NENBdkZDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsb0JBQW9CLGNBQ2pDOzs7NkNBQ0k7QUFBQztBQUEwQyxZQVY1QixVQUFVO0FBQUc7QUFBRztBQUFvQyw4QkF5Qm5FLFdBQVcsU0FBQyx5Q0FBeUM7QUFDckQsNEJBY0EsV0FBVyxTQUFDLHVDQUF1QztBQUNuRCx1QkFjQSxLQUFLLFNBQUMsVUFBVTtBQUNqQjs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmVudW0gSWd4SGludFBvc2l0aW9uIHtcbiAgICBTVEFSVCxcbiAgICBFTkRcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtaGludCxbaWd4SGludF0nXG59KVxuZXhwb3J0IGNsYXNzIElneEhpbnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgX3Bvc2l0aW9uOiBJZ3hIaW50UG9zaXRpb24gPSBJZ3hIaW50UG9zaXRpb24uU1RBUlQ7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHdoZXRoZXIgdGhlIGhpbnQgcG9zaXRpb24gaXMgYXQgdGhlIHN0YXJ0LlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnaGludCcsIHtyZWFkOiBJZ3hIaW50RGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4SGludDogSWd4SGludERpcmVjdGl2ZTtcbiAgICAgKiB0aGlzLmlneEhpbnQuaXNQb3NpdGlvblN0YXJ0ID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlzSGludFBvc2l0aW9uU3RhcnQgPSB0aGlzLmlneEhpbnQuaXNQb3NpdGlvblN0YXJ0O1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hIaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtaW5wdXQtZ3JvdXBfX2hpbnQtaXRlbS0tc3RhcnQnKVxuICAgIHB1YmxpYyBpc1Bvc2l0aW9uU3RhcnQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgd2hldGhlciB0aGUgaGludCBwb3NpdGlvbiBpcyBhdCB0aGUgZW5kLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnaGludCcsIHtyZWFkOiBJZ3hIaW50RGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4SGludDogSWd4SGludERpcmVjdGl2ZTtcbiAgICAgKiB0aGlzLmlneEhpbnQuaXNQb3NpdGlvbkVuZCA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpc0hpbnRQb3NpdGlvbkVuZCA9IHRoaXMuaWd4SGludC5pc1Bvc2l0aW9uRW5kO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hIaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtaW5wdXQtZ3JvdXBfX2hpbnQtaXRlbS0tZW5kJylcbiAgICBwdWJsaWMgaXNQb3NpdGlvbkVuZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZikge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgaGludC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1pbnB1dC1ncm91cD5cbiAgICAgKiAgPGlucHV0IGlneElucHV0IHR5cGU9XCJ0ZXh0XCIvPlxuICAgICAqICA8aWd4LWhpbnQgI2hpbnQgW3Bvc2l0aW9uXT1cIidzdGFydCdcIj5JZ3hIaW50IGRpc3BsYXllZCBhdCB0aGUgc3RhcnQ8L2lneC1oaW50PlxuICAgICAqIDwvaWd4LWlucHV0LWdyb3VwPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hIaW50RGlyZWN0aXZlXG4gICAgICovXG4gICAgQElucHV0KCdwb3NpdGlvbicpXG4gICAgc2V0IHBvc2l0aW9uKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb246IElneEhpbnRQb3NpdGlvbiA9IChJZ3hIaW50UG9zaXRpb24gYXMgYW55KVt2YWx1ZS50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9hcHBseVBvc2l0aW9uKHRoaXMuX3Bvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgaGludC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnaGludCcsIHtyZWFkOiBJZ3hIaW50RGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4SGludDogSWd4SGludERpcmVjdGl2ZTtcbiAgICAgKiBsZXQgaGludFBvc2l0aW9uID0gIHRoaXMuaWd4SGludC5wb3NpdGlvbjtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4SGludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIGdldCBwb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5fYXBwbHlQb3NpdGlvbih0aGlzLl9wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYXBwbHlQb3NpdGlvbihwb3NpdGlvbjogSWd4SGludFBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuaXNQb3NpdGlvblN0YXJ0ID0gdGhpcy5pc1Bvc2l0aW9uRW5kID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgSWd4SGludFBvc2l0aW9uLlNUQVJUOlxuICAgICAgICAgICAgICAgIHRoaXMuaXNQb3NpdGlvblN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSWd4SGludFBvc2l0aW9uLkVORDpcbiAgICAgICAgICAgICAgICB0aGlzLmlzUG9zaXRpb25FbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=