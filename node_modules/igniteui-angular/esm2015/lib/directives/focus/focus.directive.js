import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export class IgxFocusDirective {
    constructor(element, comp) {
        this.element = element;
        this.comp = comp;
        this.focusState = true;
    }
    /**
     * Returns the state of the igxFocus.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * let isFocusOn = this.igxFocus.focused;
     * ```
     * @memberof IgxFocusDirective
     */
    get focused() {
        return this.focusState;
    }
    /**
     * Sets the state of the igxFocus.
     * ```html
     * <igx-input-group >
     *  <input #focusContainer igxInput [igxFocus]="true"/>
     * </igx-input-group>
     * ```
     * @memberof IgxFocusDirective
     */
    set focused(val) {
        this.focusState = val;
        this.trigger();
    }
    /**
     * Gets the native element of the igxFocus.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * let igxFocusNativeElement = this.igxFocus.nativeElement;
     * ```
     * @memberof IgxFocusDirective
     */
    get nativeElement() {
        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {
            return this.comp[0].getEditElement();
        }
        return this.element.nativeElement;
    }
    /**
     * Triggers the igxFocus state.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * this.igxFocus.trigger();
     * ```
     * @memberof IgxFocusDirective
     */
    trigger() {
        if (this.focusState) {
            requestAnimationFrame(() => this.nativeElement.focus({ preventScroll: true }));
        }
    }
}
IgxFocusDirective.ɵfac = function IgxFocusDirective_Factory(t) { return new (t || IgxFocusDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10)); };
IgxFocusDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxFocusDirective, selectors: [["", "igxFocus", ""]], inputs: { focused: ["igxFocus", "focused"] }, exportAs: ["igxFocus"] });
IgxFocusDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Array, decorators: [{ type: Inject, args: [NG_VALUE_ACCESSOR,] }, { type: Self }, { type: Optional }] }
];
IgxFocusDirective.propDecorators = {
    focused: [{ type: Input, args: ['igxFocus',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxFocusDirective, [{
        type: Directive,
        args: [{
                exportAs: 'igxFocus',
                selector: '[igxFocus]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Array, decorators: [{
                type: Inject,
                args: [NG_VALUE_ACCESSOR]
            }, {
                type: Self
            }, {
                type: Optional
            }] }]; }, { focused: [{
            type: Input,
            args: ['igxFocus']
        }] }); })();
/**
 * @hidden
 */
export class IgxFocusModule {
}
IgxFocusModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxFocusModule });
IgxFocusModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxFocusModule_Factory(t) { return new (t || IgxFocusModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxFocusModule, { declarations: [IgxFocusDirective], exports: [IgxFocusDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxFocusModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxFocusDirective],
                exports: [IgxFocusDirective]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9mb2N1cy9mb2N1cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFPbkQsTUFBTSxPQUFPLGlCQUFpQjtBQUM5QixJQTRDSSxZQUFvQixPQUFtQixFQUF5RCxJQUFZO0FBQUksUUFBNUYsWUFBTyxHQUFQLE9BQU8sQ0FBWTtBQUFDLFFBQXdELFNBQUksR0FBSixJQUFJLENBQVE7QUFBQyxRQTNDckcsZUFBVSxHQUFHLElBQUksQ0FBQztBQUM5QixJQTBDb0gsQ0FBQztBQUNySCxJQTNDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksSUFDSSxPQUFPO0FBQUssUUFDWixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksSUFBSSxPQUFPLENBQUMsR0FBWTtBQUM1QixRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBQzlCLFFBQVEsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3ZCLElBQUksQ0FBQztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQUksYUFBYTtBQUNyQixRQUFRLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFO0FBQ3RFLFlBQVksT0FBUSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBb0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNyRSxTQUFTO0FBQ1QsUUFBUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQzFDLElBQUksQ0FBQztBQUNMLElBRUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLE9BQU87QUFDWCxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUM3QixZQUFZLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztBQUMxRixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7NkNBaEVDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsVUFBVSxrQkFDcEIsUUFBUSxFQUFFLFlBQVksY0FDekI7d0xBQ0k7QUFBQztBQUVTLFlBVkssVUFBVTtBQUFJLHdDQXFEWSxNQUFNLFNBQUMsaUJBQWlCLGNBQUcsSUFBSSxZQUFJLFFBQVE7QUFBTTtBQUFHO0FBRXpGLHNCQW5DSixLQUFLLFNBQUMsVUFBVTtBQUNqQjs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFpRE47QUFDQTtBQUNBLEdBQUc7QUFLSCxNQUFNLE9BQU8sY0FBYztBQUFHOzBDQUo3QixRQUFRLFNBQUM7SUFDTixZQUFZLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFDakMsT0FBTyxFQUFFLENBQUMsaUJBQWlCLENBQUMsY0FDL0I7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBOZ01vZHVsZSwgT3B0aW9uYWwsIEluamVjdCwgU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFZGl0b3JQcm92aWRlciB9IGZyb20gJy4uLy4uL2NvcmUvZWRpdC1wcm92aWRlcic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIGV4cG9ydEFzOiAnaWd4Rm9jdXMnLFxuICAgIHNlbGVjdG9yOiAnW2lneEZvY3VzXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Rm9jdXNEaXJlY3RpdmUge1xuXG4gICAgcHJpdmF0ZSBmb2N1c1N0YXRlID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBvZiB0aGUgaWd4Rm9jdXMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoJ2ZvY3VzQ29udGFpbmVyJywge3JlYWQ6IElneEZvY3VzRGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4Rm9jdXM6IElneEZvY3VzRGlyZWN0aXZlO1xuICAgICAqIGxldCBpc0ZvY3VzT24gPSB0aGlzLmlneEZvY3VzLmZvY3VzZWQ7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEZvY3VzRGlyZWN0aXZlXG4gICAgICovXG4gICAgQElucHV0KCdpZ3hGb2N1cycpXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvY3VzU3RhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBpZ3hGb2N1cy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1pbnB1dC1ncm91cCA+XG4gICAgICogIDxpbnB1dCAjZm9jdXNDb250YWluZXIgaWd4SW5wdXQgW2lneEZvY3VzXT1cInRydWVcIi8+XG4gICAgICogPC9pZ3gtaW5wdXQtZ3JvdXA+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEZvY3VzRGlyZWN0aXZlXG4gICAgICovXG4gICAgc2V0IGZvY3VzZWQodmFsOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZm9jdXNTdGF0ZSA9IHZhbDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBlbGVtZW50IG9mIHRoZSBpZ3hGb2N1cy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnZm9jdXNDb250YWluZXInLCB7cmVhZDogSWd4Rm9jdXNEaXJlY3RpdmV9KVxuICAgICAqIHB1YmxpYyBpZ3hGb2N1czogSWd4Rm9jdXNEaXJlY3RpdmU7XG4gICAgICogbGV0IGlneEZvY3VzTmF0aXZlRWxlbWVudCA9IHRoaXMuaWd4Rm9jdXMubmF0aXZlRWxlbWVudDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Rm9jdXNEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcCAmJiB0aGlzLmNvbXBbMF0gJiYgdGhpcy5jb21wWzBdLmdldEVkaXRFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuY29tcFswXSBhcyBFZGl0b3JQcm92aWRlcikuZ2V0RWRpdEVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KE5HX1ZBTFVFX0FDQ0VTU09SKSBAU2VsZigpIEBPcHRpb25hbCgpIHByaXZhdGUgY29tcD86IGFueVtdKSB7IH1cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VycyB0aGUgaWd4Rm9jdXMgc3RhdGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoJ2ZvY3VzQ29udGFpbmVyJywge3JlYWQ6IElneEZvY3VzRGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4Rm9jdXM6IElneEZvY3VzRGlyZWN0aXZlO1xuICAgICAqIHRoaXMuaWd4Rm9jdXMudHJpZ2dlcigpO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hGb2N1c0RpcmVjdGl2ZVxuICAgICAqL1xuICAgIHRyaWdnZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzU3RhdGUpIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLm5hdGl2ZUVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hGb2N1c0RpcmVjdGl2ZV0sXG4gICAgZXhwb3J0czogW0lneEZvY3VzRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb2N1c01vZHVsZSB7IH1cbiJdfQ==