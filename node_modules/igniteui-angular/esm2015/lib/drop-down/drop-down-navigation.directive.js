import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';
import { IGX_DROPDOWN_BASE } from './drop-down.common';
import { IgxDropDownBaseDirective } from './drop-down.base';
import { DropDownActionKey } from './drop-down.common';
/**
 * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBaseDirective component
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './drop-down.base';
export class IgxDropDownItemNavigationDirective {
    constructor(dropdown) {
        this.dropdown = dropdown;
        this._target = null;
    }
    /**
     * Gets the target of the navigation directive;
     *
     * ```typescript
     * // Get
     * export class MyComponent {
     *  ...
     *  @ContentChild(IgxDropDownNavigationDirective)
     *  navDirective: IgxDropDownNavigationDirective = null
     *  ...
     *  const navTarget: IgxDropDownBaseDirective = navDirective.navTarget
     * }
     * ```
     */
    get target() {
        return this._target;
    }
    /**
     * Sets the target of the navigation directive;
     * If no valid target is passed, it falls back to the drop down context
     *
     * ```html
     * <!-- Set -->
     * <input [igxDropDownItemNavigation]="dropdown" />
     * ...
     * <igx-drop-down #dropdown>
     * ...
     * </igx-drop-down>
     * ```
     */
    set target(target) {
        this._target = target ? target : this.dropdown;
    }
    /**
     * Captures keydown events and calls the appropriate handlers on the target component
     */
    handleKeyDown(event) {
        if (event) {
            const key = event.key.toLowerCase();
            if (!this.target.collapsed) { // If dropdown is opened
                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',
                    'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];
                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
            }
            else { // If dropdown is closed, do nothing
                return;
            }
            switch (key) {
                case 'esc':
                case 'escape':
                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);
                    break;
                case 'enter':
                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);
                    break;
                case 'space':
                case 'spacebar':
                case ' ':
                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);
                    break;
                case 'arrowup':
                case 'up':
                    this.onArrowUpKeyDown();
                    break;
                case 'arrowdown':
                case 'down':
                    this.onArrowDownKeyDown();
                    break;
                case 'home':
                    this.onHomeKeyDown();
                    break;
                case 'end':
                    this.onEndKeyDown();
                    break;
                default:
                    return;
            }
        }
    }
    /**
     * Navigates to previous item
     */
    onArrowDownKeyDown() {
        this.target.navigateNext();
    }
    /**
     * Navigates to previous item
     */
    onArrowUpKeyDown() {
        this.target.navigatePrev();
    }
    /**
     * Navigates to target's last item
     */
    onEndKeyDown() {
        this.target.navigateLast();
    }
    /**
     * Navigates to target's first item
     */
    onHomeKeyDown() {
        this.target.navigateFirst();
    }
}
IgxDropDownItemNavigationDirective.ɵfac = function IgxDropDownItemNavigationDirective_Factory(t) { return new (t || IgxDropDownItemNavigationDirective)(ɵngcc0.ɵɵdirectiveInject(IGX_DROPDOWN_BASE, 10)); };
IgxDropDownItemNavigationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxDropDownItemNavigationDirective, selectors: [["", "igxDropDownItemNavigation", ""]], hostBindings: function IgxDropDownItemNavigationDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function IgxDropDownItemNavigationDirective_keydown_HostBindingHandler($event) { return ctx.handleKeyDown($event); });
    } }, inputs: { target: ["igxDropDownItemNavigation", "target"] } });
IgxDropDownItemNavigationDirective.ctorParameters = () => [
    { type: IgxDropDownBaseDirective, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [IGX_DROPDOWN_BASE,] }] }
];
IgxDropDownItemNavigationDirective.propDecorators = {
    target: [{ type: Input, args: ['igxDropDownItemNavigation',] }],
    handleKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDropDownItemNavigationDirective, [{
        type: Directive,
        args: [{
                selector: '[igxDropDownItemNavigation]'
            }]
    }], function () { return [{ type: ɵngcc1.IgxDropDownBaseDirective, decorators: [{
                type: Self
            }, {
                type: Optional
            }, {
                type: Inject,
                args: [IGX_DROPDOWN_BASE]
            }] }]; }, { target: [{
            type: Input,
            args: ['igxDropDownItemNavigation']
        }], 
    /**
     * Captures keydown events and calls the appropriate handlers on the target component
     */
    handleKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,