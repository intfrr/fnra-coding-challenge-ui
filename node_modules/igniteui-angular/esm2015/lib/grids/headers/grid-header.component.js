import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, NgZone } from '@angular/core';
import { DataType } from '../../data-operations/data-util';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { GridBaseAPIService } from '../api.service';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { Subject } from 'rxjs';
import { GridSelectionMode } from '../common/enums';
import { IgxGridExcelStyleFilteringComponent } from '../filtering/excel-style/grid.excel-style-filtering.component';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../api.service';
import * as ɵngcc2 from '../resizing/resizing.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../../icon/icon.component';
import * as ɵngcc5 from './sorting-index.pipe';

function IgxGridHeaderComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ctx_r1.columnTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.column.header || ctx_r1.column.field);
} }
function IgxGridHeaderComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridHeaderComponent_div_4_igx_icon_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 8);
    ɵngcc0.ɵɵlistener("click", function IgxGridHeaderComponent_div_4_igx_icon_1_Template_igx_icon_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onSortingIconClick($event); });
    ɵngcc0.ɵɵpipe(1, "sortingIndex");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("draggable", false)("data-sortIndex", ɵngcc0.ɵɵpipeBind2(1, 3, ctx_r4.column.field, ctx_r4.grid.sortingExpressions));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.sortingIcon, " ");
} }
function IgxGridHeaderComponent_div_4_igx_icon_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 9);
    ɵngcc0.ɵɵlistener("click", function IgxGridHeaderComponent_div_4_igx_icon_2_Template_igx_icon_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.onFilteringIconClick($event); });
    ɵngcc0.ɵɵtext(1, " more_vert ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r5.filterIconClassName);
    ɵngcc0.ɵɵattribute("draggable", false);
} }
function IgxGridHeaderComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵtemplate(1, IgxGridHeaderComponent_div_4_igx_icon_1_Template, 3, 6, "igx-icon", 6);
    ɵngcc0.ɵɵtemplate(2, IgxGridHeaderComponent_div_4_igx_icon_2_Template, 2, 2, "igx-icon", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.column.sortable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.grid.allowFiltering == true && ctx_r3.column.filterable && ctx_r3.grid.filterMode == "excelStyleFilter");
} }
const _c0 = function (a0, a1) { return { $implicit: a0, column: a1 }; };
export class IgxGridHeaderComponent {
    constructor(gridAPI, colResizingService, cdr, elementRef, zone) {
        this.gridAPI = gridAPI;
        this.colResizingService = colResizingService;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.zone = zone;
        this._destroy$ = new Subject();
        this.hostRole = 'columnheader';
        this.sortDirection = SortingDirection.None;
    }
    /**
     * Returns the `aria-selected` of the header.
     */
    get ariaSelected() {
        return this.column.selected;
    }
    get styleClasses() {
        const defaultClasses = [
            'igx-grid__th--fw',
            this.column.headerClasses
        ];
        const classList = {
            'igx-grid__th': !this.column.columnGroup,
            'asc': this.ascending,
            'desc': this.descending,
            'igx-grid__th--number': this.column.dataType === DataType.Number,
            'igx-grid__th--sortable': this.column.sortable,
            'igx-grid__th--selectable': this.selectable,
            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,
            'igx-grid__th--sorted': this.sorted,
            'igx-grid__th--selected': this.selected
        };
        for (const klass of Object.keys(classList)) {
            if (classList[klass]) {
                defaultClasses.push(klass);
            }
        }
        return defaultClasses.join(' ');
    }
    get height() {
        if (this.grid.hasColumnGroups) {
            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;
        }
        return null;
    }
    get ascending() {
        return this.sortDirection === SortingDirection.Asc;
    }
    get descending() {
        return this.sortDirection === SortingDirection.Desc;
    }
    get sortingIcon() {
        if (this.sortDirection !== SortingDirection.None) {
            // arrow_downward and arrow_upward
            // are material icons ligature strings
            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';
        }
        return 'arrow_upward';
    }
    get sorted() {
        return this.sortDirection !== SortingDirection.None;
    }
    get filterIconClassName() {
        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';
    }
    get selectable() {
        return this.grid.columnSelection !== GridSelectionMode.none &&
            this.column.applySelectableClass &&
            !this.column.selected &&
            !this.grid.filteringService.isFilterRowVisible;
    }
    get selected() {
        return this.column.selected
            && (!this.grid.filteringService.isFilterRowVisible || this.grid.filteringService.filteredColumn !== this.column);
    }
    get columnTitle() {
        return this.column.title || this.column.header || this.column.field;
    }
    get headerID() {
        return `${this.gridID}_${this.column.field}`;
    }
    ngDoCheck() {
        this.getSortDirection();
        this.cdr.markForCheck();
    }
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
        this.grid.filteringService.hideExcelFiltering();
    }
    onClick(event) {
        if (!this.colResizingService.isColumnResizing) {
            if (this.grid.filteringService.isFilterRowVisible) {
                if (this.column.filterCellTemplate) {
                    this.grid.filteringRow.close();
                    return;
                }
                if (this.column.filterable && !this.column.columnGroup &&
                    !this.grid.filteringService.isFilterComplex(this.column.field)) {
                    this.grid.filteringService.filteredColumn = this.column;
                }
            }
            else if (this.grid.columnSelection !== GridSelectionMode.none && this.column.selectable) {
                const clearSelection = this.grid.columnSelection === GridSelectionMode.single || !event.ctrlKey;
                const rangeSelection = this.grid.columnSelection === GridSelectionMode.multiple && event.shiftKey;
                if (!this.column.selected || (this.grid.selectionService.getSelectedColumns().length > 1 && clearSelection)) {
                    this.grid.selectionService.selectColumn(this.column.field, clearSelection, rangeSelection, event);
                }
                else {
                    this.grid.selectionService.deselectColumn(this.column.field, event);
                }
            }
        }
        this.grid.theadRow.nativeElement.focus();
    }
    onFilteringIconClick(event) {
        event.stopPropagation();
        this.grid.filteringService.toggleFilterDropdown(this.elementRef.nativeElement, this.column, IgxGridExcelStyleFilteringComponent);
    }
    get grid() {
        return this.gridAPI.grid;
    }
    getSortDirection() {
        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);
        this.sortDirection = expr ? expr.dir : SortingDirection.None;
    }
    onSortingIconClick(event) {
        event.stopPropagation();
        this.triggerSort();
    }
    triggerSort() {
        const groupingExpr = this.grid.groupingExpressions ?
            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;
        const sortDir = groupingExpr ?
            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc
            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;
        this.sortDirection = sortDir;
        this.grid.sort({
            fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,
            strategy: this.column.sortStrategy
        });
    }
    /**
     * @hidden
     */
    onPinterEnter() {
        this.column.applySelectableClass = true;
    }
    /**
     * @hidden
     */
    onPointerLeave() {
        this.column.applySelectableClass = false;
    }
}
IgxGridHeaderComponent.ɵfac = function IgxGridHeaderComponent_Factory(t) { return new (t || IgxGridHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IgxColumnResizingService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
IgxGridHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxGridHeaderComponent, selectors: [["igx-grid-header"]], hostVars: 7, hostBindings: function IgxGridHeaderComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxGridHeaderComponent_click_HostBindingHandler($event) { return ctx.onClick($event); })("pointerenter", function IgxGridHeaderComponent_pointerenter_HostBindingHandler() { return ctx.onPinterEnter(); })("pointerleave", function IgxGridHeaderComponent_pointerleave_HostBindingHandler() { return ctx.onPointerLeave(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.hostRole)("aria-selected", ctx.ariaSelected)("id", ctx.headerID);
        ɵngcc0.ɵɵclassMap(ctx.styleClasses);
        ɵngcc0.ɵɵstyleProp("height", ctx.height, "rem");
    } }, inputs: { column: "column", gridID: "gridID" }, decls: 5, vars: 6, consts: [["defaultColumn", ""], [1, "igx-grid__th-title"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "igx-grid__th-icons", 4, "ngIf"], [3, "title"], [1, "igx-grid__th-icons"], ["class", "sort-icon", 3, "click", 4, "ngIf"], [3, "ngClass", "click", 4, "ngIf"], [1, "sort-icon", 3, "click"], [3, "ngClass", "click"]], template: function IgxGridHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxGridHeaderComponent_ng_template_0_Template, 2, 2, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "span", 1);
        ɵngcc0.ɵɵtemplate(3, IgxGridHeaderComponent_ng_container_3_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, IgxGridHeaderComponent_div_4_Template, 3, 2, "div", 3);
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.column.headerTemplate ? ctx.column.headerTemplate : _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx.column, ctx.column));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.column.columnGroup);
    } }, directives: [ɵngcc3.NgTemplateOutlet, ɵngcc3.NgIf, ɵngcc4.IgxIconComponent, ɵngcc3.NgClass], pipes: [ɵngcc5.SortingIndexPipe], encapsulation: 2, changeDetection: 0 });
IgxGridHeaderComponent.ctorParameters = () => [
    { type: GridBaseAPIService },
    { type: IgxColumnResizingService },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
IgxGridHeaderComponent.propDecorators = {
    column: [{ type: Input }],
    gridID: [{ type: Input }],
    ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    styleClasses: [{ type: HostBinding, args: ['class',] }],
    height: [{ type: HostBinding, args: ['style.height.rem',] }],
    hostRole: [{ type: HostBinding, args: ['attr.role',] }],
    headerID: [{ type: HostBinding, args: ['attr.id',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onPinterEnter: [{ type: HostListener, args: ['pointerenter',] }],
    onPointerLeave: [{ type: HostListener, args: ['pointerleave',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridHeaderComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-header',
                template: "<ng-template #defaultColumn>\n    <span [title]=\"columnTitle\">{{ column.header || column.field }}</span>\n</ng-template>\n\n<span class=\"igx-grid__th-title\">\n    <ng-container *ngTemplateOutlet=\"column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column, column: column}\">\n    </ng-container>\n</span>\n<div class=\"igx-grid__th-icons\" *ngIf=\"!column.columnGroup\">\n    <igx-icon\n        [attr.draggable]=\"false\"\n        [attr.data-sortIndex]=\"column.field | sortingIndex:grid.sortingExpressions\"\n        class=\"sort-icon\"\n        *ngIf=\"column.sortable\"\n        (click)=\"onSortingIconClick($event)\">\n        {{sortingIcon}}\n    </igx-icon>\n\n    <igx-icon [ngClass]=\"filterIconClassName\" [attr.draggable]=\"false\" (click)=\"onFilteringIconClick($event)\"\n        *ngIf=\"grid.allowFiltering == true && column.filterable && grid.filterMode == 'excelStyleFilter'\">\n        more_vert\n    </igx-icon>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }, { type: ɵngcc2.IgxColumnResizingService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { hostRole: [{
            type: HostBinding,
            args: ['attr.role']
        }], ariaSelected: [{
            type: HostBinding,
            args: ['attr.aria-selected']
        }], styleClasses: [{
            type: HostBinding,
            args: ['class']
        }], height: [{
            type: HostBinding,
            args: ['style.height.rem']
        }], headerID: [{
            type: HostBinding,
            args: ['attr.id']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], 
    /**
     * @hidden
     */
    onPinterEnter: [{
            type: HostListener,
            args: ['pointerenter']
        }], 
    /**
     * @hidden
     */
    onPointerLeave: [{
            type: HostListener,
            args: ['pointerleave']
        }], column: [{
            type: Input
        }], gridID: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,