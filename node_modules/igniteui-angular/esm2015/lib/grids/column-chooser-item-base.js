import { EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export class ItemPropertyValueChangedDirective {
    constructor(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    get object() {
        return this._object;
    }
    set object(value) {
        if (value) {
            this._object = value;
        }
    }
    get value() {
        return (this.object) ? this.object[this._propName] : null;
    }
    set value(value) {
        this.onValueChanged(value);
    }
    onValueChanged(value) {
        const currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    }
}
ItemPropertyValueChangedDirective.ɵfac = function ItemPropertyValueChangedDirective_Factory(t) { return new (t || ItemPropertyValueChangedDirective)(ɵngcc0.ɵɵdirectiveInject(String)); };
ItemPropertyValueChangedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ItemPropertyValueChangedDirective, inputs: { value: "value" }, outputs: { valueChanged: "valueChanged" } });
ItemPropertyValueChangedDirective.ctorParameters = () => [
    { type: String }
];
ItemPropertyValueChangedDirective.propDecorators = {
    value: [{ type: Input }],
    valueChanged: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ItemPropertyValueChangedDirective, [{
        type: Directive
    }], function () { return [{ type: String }]; }, { valueChanged: [{
            type: Output
        }], value: [{
            type: Input
        }] }); })();
/** @hidden */
export class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {
    constructor(prop) {
        super(prop);
        this.prop = prop;
        this.indentation = 30;
    }
    get column() {
        return this.object;
    }
    set column(value) {
        if (value) {
            this.object = value;
        }
    }
    get name() {
        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
    }
    get level() {
        return this.column.level;
    }
    get calcIndent() {
        return this.indentation * this.level;
    }
}
ColumnChooserItemBaseDirective.ɵfac = function ColumnChooserItemBaseDirective_Factory(t) { return new (t || ColumnChooserItemBaseDirective)(ɵngcc0.ɵɵdirectiveInject(String)); };
ColumnChooserItemBaseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ColumnChooserItemBaseDirective, inputs: { indentation: "indentation", column: "column", container: "container" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
ColumnChooserItemBaseDirective.ctorParameters = () => [
    { type: String }
];
ColumnChooserItemBaseDirective.propDecorators = {
    column: [{ type: Input }],
    indentation: [{ type: Input }],
    container: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColumnChooserItemBaseDirective, [{
        type: Directive
    }], function () { return [{ type: String }]; }, { indentation: [{
            type: Input
        }], column: [{
            type: Input
        }], container: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29sdW1uLWNob29zZXItaXRlbS1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRdkU7QUFDQTtBQUNBLEdBQUc7O0FBRUgsTUFBTSxPQUFnQixpQ0FBaUM7QUFDdkQsSUF5QkksWUFBWSxRQUFnQjtBQUNoQyxRQUhXLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7QUFDckUsUUFFUSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUNsQyxJQUFJLENBQUM7QUFDTCxJQXpCSSxJQUFJLE1BQU07QUFDZCxRQUFRLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM1QixJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksTUFBTSxDQUFDLEtBQUs7QUFDcEIsUUFBUSxJQUFJLEtBQUssRUFBRTtBQUNuQixZQUFZLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQ0ksS0FBSztBQUNiLFFBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNsRSxJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksS0FBSyxDQUFDLEtBQUs7QUFDbkIsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLElBQUksQ0FBQztBQUNMLElBUWMsY0FBYyxDQUFDLEtBQUs7QUFDbEMsUUFBUSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3hDLFFBQVEsSUFBSSxLQUFLLEtBQUssWUFBWSxFQUFFO0FBQ3BDLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ2hELFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2hGLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDs2REF0Q0MsU0FBUztzTEFDUjtBQUFDO0FBQ0M7QUFBcUI7QUFDdkI7QUFHRSxvQkFTQyxLQUFLO0FBQ1IsMkJBUUcsTUFBTTtBQUNWOzs7Ozs7O29CQUFFO0FBZUgsY0FBYztBQUVkLE1BQU0sT0FBTyw4QkFBK0IsU0FBUSxpQ0FBaUM7QUFDckYsSUFpQkksWUFBbUIsSUFBWTtBQUNuQyxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQixRQUZ1QixTQUFJLEdBQUosSUFBSSxDQUFRO0FBQUMsUUFMekIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7QUFDNUIsSUFNSSxDQUFDO0FBQ0wsSUFwQkksSUFDSSxNQUFNO0FBQ2QsUUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDM0IsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFJLE1BQU0sQ0FBQyxLQUFLO0FBQ3BCLFFBQVEsSUFBSSxLQUFLLEVBQUU7QUFDbkIsWUFBWSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNoQyxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFXSSxJQUFJLElBQUk7QUFDWixRQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BHLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxLQUFLO0FBQ2IsUUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2pDLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxVQUFVO0FBQ2xCLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDN0MsSUFBSSxDQUFDO0FBQ0w7MERBbENDLFNBQVM7ME9BQ1I7QUFBQztBQUF3RDtBQUFxQjtBQUFHO0FBR3RFLHFCQUZSLEtBQUs7QUFDUiwwQkFVRyxLQUFLO0FBQ1Isd0JBRUcsS0FBSztBQUNUOzs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElWYWx1ZUNoYW5nZWRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgb2xkVmFsdWU6IGFueTtcbiAgICBuZXdWYWx1ZTogYW55O1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSXRlbVByb3BlcnR5VmFsdWVDaGFuZ2VkRGlyZWN0aXZlIHtcbiAgICBwcml2YXRlIF9vYmplY3Q6IGFueTtcbiAgICBwcml2YXRlIF9wcm9wTmFtZTogc3RyaW5nO1xuXG4gICAgZ2V0IG9iamVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdDtcbiAgICB9XG5cbiAgICBzZXQgb2JqZWN0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fb2JqZWN0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9iamVjdCkgPyB0aGlzLm9iamVjdFt0aGlzLl9wcm9wTmFtZV0gOiBudWxsO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLm9uVmFsdWVDaGFuZ2VkKHZhbHVlKTtcbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgdmFsdWVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxJVmFsdWVDaGFuZ2VkRXZlbnRBcmdzPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJvcE5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9wcm9wTmFtZSA9IHByb3BOYW1lO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvblZhbHVlQ2hhbmdlZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vYmplY3RbdGhpcy5fcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHsgb2xkVmFsdWU6IGN1cnJlbnRWYWx1ZSwgbmV3VmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgQ29sdW1uQ2hvb3Nlckl0ZW1CYXNlRGlyZWN0aXZlIGV4dGVuZHMgSXRlbVByb3BlcnR5VmFsdWVDaGFuZ2VkRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIGdldCBjb2x1bW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdDtcbiAgICB9XG5cbiAgICBzZXQgY29sdW1uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGluZGVudGF0aW9uID0gMzA7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb250YWluZXI6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwcm9wOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIocHJvcCk7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5jb2x1bW4pID8gKCh0aGlzLmNvbHVtbi5oZWFkZXIpID8gdGhpcy5jb2x1bW4uaGVhZGVyIDogdGhpcy5jb2x1bW4uZmllbGQpIDogJyc7XG4gICAgfVxuXG4gICAgZ2V0IGxldmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4ubGV2ZWw7XG4gICAgfVxuXG4gICAgZ2V0IGNhbGNJbmRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGVudGF0aW9uICogdGhpcy5sZXZlbDtcbiAgICB9XG59XG4iXX0=