import { Directive, Inject } from '@angular/core';
import { IgxColumnActionsBaseDirective } from './column-actions-base.directive';
import { IgxColumnActionsComponent } from './column-actions.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './column-actions.component';
export class IgxColumnHidingDirective extends IgxColumnActionsBaseDirective {
    constructor(columnActions) {
        super();
        this.columnActions = columnActions;
        /**
         * @hidden @internal
         */
        this.actionEnabledColumnsFilter = c => !c.disableHiding;
        columnActions.actionsDirective = this;
    }
    /**
     * @hidden @internal
     */
    get checkAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_hiding_check_all_label) !== null && _b !== void 0 ? _b : 'Hide All';
    }
    /**
     * @hidden @internal
     */
    get uncheckAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_hiding_uncheck_all_label) !== null && _b !== void 0 ? _b : 'Show All';
    }
    /**
     * @hidden @internal
     */
    checkAll() {
        this.columnActions.filteredColumns.forEach(c => c.hidden = true);
    }
    /**
     * @hidden @internal
     */
    uncheckAll() {
        this.columnActions.filteredColumns.forEach(c => c.hidden = false);
    }
    /**
     * @hidden @internal
     */
    columnChecked(column) {
        return column.hidden;
    }
    /**
     * @hidden @internal
     */
    toggleColumn(column) {
        column.hidden = !column.hidden;
    }
}
IgxColumnHidingDirective.ɵfac = function IgxColumnHidingDirective_Factory(t) { return new (t || IgxColumnHidingDirective)(ɵngcc0.ɵɵdirectiveInject(IgxColumnActionsComponent)); };
IgxColumnHidingDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxColumnHidingDirective, selectors: [["", "igxColumnHiding", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IgxColumnHidingDirective.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnHidingDirective, [{
        type: Directive,
        args: [{
                selector: '[igxColumnHiding]'
            }]
    }], function () { return [{ type: ɵngcc1.IgxColumnActionsComponent, decorators: [{
                type: Inject,
                args: [IgxColumnActionsComponent]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWhpZGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9jb2x1bW4tYWN0aW9ucy9jb2x1bW4taGlkaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVoRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBS3ZFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSw2QkFBNkI7QUFDM0UsSUFDSSxZQUNpRCxhQUF3QztBQUMxRixRQUNLLEtBQUssRUFBRSxDQUFDO0FBQ2hCLFFBSHFELGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtBQUM3RixRQWdDSTtBQUNKO0FBQ0ksV0FBRztBQUNQLFFBQVcsK0JBQTBCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7QUFDOUQsUUFsQ1EsYUFBYSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUM5QyxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFXLGFBQWE7QUFBSztBQUNyQixRQUFKLG1CQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSwwQ0FBRSxlQUFlLENBQUMsK0JBQStCLG1DQUFJLFVBQVUsQ0FBQztBQUN0RyxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFXLGVBQWU7QUFBSztBQUN2QixRQUFKLG1CQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSwwQ0FBRSxlQUFlLENBQUMsaUNBQWlDLG1DQUFJLFVBQVUsQ0FBQztBQUN4RyxJQUFJLENBQUM7QUFDTCxJQUFJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBVyxRQUFRO0FBQ25CLFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN6RSxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBVyxVQUFVO0FBQ3JCLFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztBQUMxRSxJQUFJLENBQUM7QUFDTCxJQU1JO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBVyxhQUFhLENBQUMsTUFBMEI7QUFBSSxRQUMvQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDN0IsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsWUFBWSxDQUFDLE1BQTBCO0FBQ2xELFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBQ0w7b0RBekRDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsbUJBQW1CLGNBQ2hDO3NMQUNJO0FBQUM7QUFBa0QsWUFML0MseUJBQXlCLHVCQVF6QixNQUFNLFNBQUMseUJBQXlCO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkFjdGlvbnNCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tYWN0aW9ucy1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vY29sdW1uLWFjdGlvbnMuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q29sdW1uSGlkaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q29sdW1uSGlkaW5nRGlyZWN0aXZlIGV4dGVuZHMgSWd4Q29sdW1uQWN0aW9uc0Jhc2VEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCkgcHJvdGVjdGVkIGNvbHVtbkFjdGlvbnM6IElneENvbHVtbkFjdGlvbnNDb21wb25lbnRcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29sdW1uQWN0aW9ucy5hY3Rpb25zRGlyZWN0aXZlID0gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY2hlY2tBbGxMYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5BY3Rpb25zLmdyaWQ/LnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9oaWRpbmdfY2hlY2tfYWxsX2xhYmVsID8/ICdIaWRlIEFsbCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHVuY2hlY2tBbGxMYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5BY3Rpb25zLmdyaWQ/LnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9oaWRpbmdfdW5jaGVja19hbGxfbGFiZWwgPz8gJ1Nob3cgQWxsJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgY2hlY2tBbGwoKSB7XG4gICAgICAgIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJlZENvbHVtbnMuZm9yRWFjaChjID0+IGMuaGlkZGVuID0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdW5jaGVja0FsbCgpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5BY3Rpb25zLmZpbHRlcmVkQ29sdW1ucy5mb3JFYWNoKGMgPT4gYy5oaWRkZW4gPSBmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aW9uRW5hYmxlZENvbHVtbnNGaWx0ZXIgPSBjID0+ICFjLmRpc2FibGVIaWRpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBjb2x1bW5DaGVja2VkKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBjb2x1bW4uaGlkZGVuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIHRvZ2dsZUNvbHVtbihjb2x1bW46IElneENvbHVtbkNvbXBvbmVudCkge1xuICAgICAgICBjb2x1bW4uaGlkZGVuID0gIWNvbHVtbi5oaWRkZW47XG4gICAgfVxufVxuIl19