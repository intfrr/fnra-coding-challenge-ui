import { __decorate } from "tslib";
import { Component, HostBinding, Input, ViewChildren, EventEmitter, Output, IterableDiffers } from '@angular/core';
import { ColumnDisplayOrder } from '../common/enums';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { DeprecateProperty } from '../../core/deprecateDecorators';
import * as ɵngcc0 from '@angular/core';

function IgxColumnActionsComponent_h4_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("id", ctx_r0.titleID);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
} }
function IgxColumnActionsComponent_igx_input_group_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 8);
    ɵngcc0.ɵɵelementStart(1, "input", 9);
    ɵngcc0.ɵɵlistener("ngModelChange", function IgxColumnActionsComponent_igx_input_group_2_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.filterCriteria = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filterCriteria)("placeholder", ctx_r1.filterColumnsPrompt);
    ɵngcc0.ɵɵattribute("aria-describedby", ctx_r1.titleID);
} }
function IgxColumnActionsComponent_igx_checkbox_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-checkbox", 10);
    ɵngcc0.ɵɵlistener("change", function IgxColumnActionsComponent_igx_checkbox_4_Template_igx_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const column_r5 = ctx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.toggleColumn($event, column_r5); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r5 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("margin-left", column_r5.level * ctx_r2.indentation, "px");
    ɵngcc0.ɵɵproperty("checked", ctx_r2.actionsDirective.columnChecked(column_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", column_r5.header || column_r5.field, " ");
} }
let NEXT_ID = 0;
/**
 * Providing reference to `IgxColumnActionsComponent`:
 * ```typescript
 *  @ViewChild('columnActions', { read: IgxColumnActionsComponent })
 *  public columnActions: IgxColumnActionsComponent;
 */
export class IgxColumnActionsComponent {
    constructor(differs) {
        this.differs = differs;
        this._differ = null;
        /**
         * @hidden @internal
         */
        this.actionableColumns = [];
        /**
         * @hidden @internal
         */
        this.filteredColumns = [];
        /**
         * Gets/sets the title of the column actions component.
         * @example
         * ```html
         * <igx-column-actions [title]="'Pin Columns'"></igx-column-actions>
         * ```
         */
        this.title = '';
        /**
         * @hidden @internal
         */
        this._filterColumnsPrompt = '';
        /**
         * Shows/hides the columns filtering input from the UI.
         * @example
         * ```html
         *  <igx-column-actions [hideFilter]="true"></igx-column-actions>
         * ```
         */
        this.hideFilter = false;
        /**
         * @hidden @internal
         */
        this._filterCriteria = '';
        /**
         * @hidden @internal
         */
        this._columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;
        /**
         * Gets/sets the max height of the columns area.
         * @remarks
         * The default max height is 100%.
         * @example
         * ```html
         * <igx-column-actions [columnsAreaMaxHeight]="200px"></igx-column-actions>
         * ```
         */
        this.columnsAreaMaxHeight = '100%';
        /**
         * Gets/sets the indentation of columns in the column list based on their hierarchy level.
         * @example
         * ```
         * <igx-column-actions [indentation]="15"></igx-column-actions>
         * ```
         */
        this.indentation = 30;
        /**
         * An event that is emitted after a column's checked state is changed.
         * Provides references to the `column` and the `checked` properties as event arguments.
         * ```html
         *  <igx-column-actions (onColumnToggled)="onColumnToggled($event)"></igx-column-actions>
         * ```
         */
        this.onColumnToggled = new EventEmitter();
        /**
         * @hidden @internal
         */
        this._pipeTrigger = 0;
        /**
         * Sets/Gets the css class selector.
         * By default the value of the `class` attribute is `"igx-column-hiding"`.
         * ```typescript
         * let cssCLass =  this.columnHidingUI.cssClass;
         * ```
         * ```typescript
         * this.columnHidingUI.cssClass = 'column-chooser';
         * ```
         */
        this.cssClass = 'igx-column-actions';
        /**
         * @hidden @internal
         */
        this._id = `igx-column-actions-${NEXT_ID++}`;
        /**
         * @hidden @internal
         */
        this.trackChanges = (index, col) => {
            return col.field + '_' + this.actionsDirective.actionEnabledColumnsFilter(col, index, []);
        };
        this._differ = this.differs.find([]).create(this.trackChanges);
    }
    /**
     * Gets the grid columns to provide an action for.
     * @deprecated
     * @example
     * ```typescript
     * let gridColumns = this.columnActions.columns;
     * ```
     */
    get columns() {
        var _a;
        return (_a = this.grid) === null || _a === void 0 ? void 0 : _a.columns;
    }
    set columns(value) {
        if (value && value.length > 0) {
            this.grid = value[0].grid;
        }
    }
    /**
     * Gets the prompt that is displayed in the filter input.
     * @example
     * ```typescript
     * let filterColumnsPrompt = this.columnActions.filterColumnsPrompt;
     * ```
     */
    get filterColumnsPrompt() {
        return this._filterColumnsPrompt;
    }
    /**
     * Sets the prompt that is displayed in the filter input.
     * @example
     * ```html
     * <igx-column-actions [filterColumnsPrompt]="'Type here to search'"></igx-column-actions>
     * ```
     */
    set filterColumnsPrompt(value) {
        this._filterColumnsPrompt = value || '';
    }
    /**
     * Gets the value which filters the columns list.
     * @example
     * ```typescript
     * let filterCriteria =  this.columnActions.filterCriteria;
     * ```
     */
    get filterCriteria() {
        return this._filterCriteria;
    }
    /**
     * Sets the value which filters the columns list.
     * @example
     * ```html
     *  <igx-column-actions [filterCriteria]="'ID'"></igx-column-actions>
     * ```
     */
    set filterCriteria(value) {
        value = value || '';
        if (value !== this._filterCriteria) {
            this._filterCriteria = value;
            this._pipeTrigger++;
        }
    }
    /**
     * Gets the display order of the columns.
     * @example
     * ```typescript
     * let columnDisplayOrder = this.columnActions.columnDisplayOrder;
     * ```
     */
    get columnDisplayOrder() {
        return this._columnDisplayOrder;
    }
    /**
     * Sets the display order of the columns.
     * @example
     * ```typescript
     * this.columnActions.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;
     * ```
     */
    set columnDisplayOrder(value) {
        if (value && value !== this._columnDisplayOrder) {
            this._columnDisplayOrder = value;
            this._pipeTrigger++;
        }
    }
    /**
     * Gets the text of the button that unchecks all columns.
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```typescript
     * let uncheckAllText = this.columnActions.uncheckAllText;
     * ```
     */
    get uncheckAllText() {
        return this._uncheckAllText || this.actionsDirective.uncheckAllLabel;
    }
    /**
     * Sets the text of the button that unchecks all columns.
     * @example
     * ```html
     * <igx-column-actions [uncheckAllText]="'Show All'"></igx-column-actions>
     * ```
     */
    set uncheckAllText(value) {
        this._uncheckAllText = value;
    }
    /**
     * Gets the text of the button that checks all columns.
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```typescript
     * let uncheckAllText = this.columnActions.uncheckAllText;
     * ```
     */
    get checkAllText() {
        return this._checkAllText || this.actionsDirective.checkAllLabel;
    }
    /**
     * Sets the text of the button that checks all columns.
     * @remarks
     * If unset it is obtained from the IgxColumnActionsBased derived directive applied.
     * @example
     * ```html
     * <igx-column-actions [checkAllText]="'Hide All'"></igx-column-actions>
     * ```
     */
    set checkAllText(value) {
        this._checkAllText = value;
    }
    /**
     * @hidden @internal
     */
    get pipeTrigger() {
        return this._pipeTrigger;
    }
    /**
     * @hidden @internal
     */
    get checkAllDisabled() {
        return !this.filteredColumns.some(col => !this.actionsDirective.columnChecked(col));
    }
    /**
     * @hidden @internal
     */
    get uncheckAllDisabled() {
        return !this.filteredColumns.some(col => this.actionsDirective.columnChecked(col));
    }
    /**
     * Gets/Sets the value of the `id` attribute.
     * @remarks
     * If not provided it will be automatically generated.
     * @example
     * ```html
     * <igx-column-actions [id]="'igx-actions-1'"></igx-column-actions>
     * ```
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * @hidden @internal
     */
    get titleID() {
        return this.id + '_title';
    }
    /**
     * @hidden @internal
     */
    ngDoCheck() {
        if (this._differ) {
            const changes = this._differ.diff(this.columns);
            if (changes) {
                this._pipeTrigger++;
            }
        }
    }
    /**
     * Unchecks all columns and performs the appropriate action.
     * @example
     * ```typescript
     * this.columnActions.uncheckAllColumns();
     * ```
     */
    uncheckAllColumns() {
        this.actionsDirective.uncheckAll();
    }
    /**
     * Checks all columns and performs the appropriate action.
     * @example
     * ```typescript
     * this.columnActions.checkAllColumns();
     * ```
     */
    checkAllColumns() {
        this.actionsDirective.checkAll();
    }
    /**
     * @hidden @internal
     */
    toggleColumn(event, column) {
        this.onColumnToggled.emit({
            column: column,
            checked: event.checked
        });
        this.actionsDirective.toggleColumn(column);
    }
}
IgxColumnActionsComponent.ɵfac = function IgxColumnActionsComponent_Factory(t) { return new (t || IgxColumnActionsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };
IgxColumnActionsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxColumnActionsComponent, selectors: [["igx-column-actions"]], viewQuery: function IgxColumnActionsComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxCheckboxComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnItems = _t);
    } }, hostVars: 2, hostBindings: function IgxColumnActionsComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("class", ctx.cssClass)("id", ctx.id);
    } }, inputs: { title: "title", hideFilter: "hideFilter", columnsAreaMaxHeight: "columnsAreaMaxHeight", indentation: "indentation", columns: "columns", grid: "grid", filterColumnsPrompt: "filterColumnsPrompt", filterCriteria: "filterCriteria", columnDisplayOrder: "columnDisplayOrder", uncheckAllText: "uncheckAllText", checkAllText: "checkAllText", id: "id" }, outputs: { onColumnToggled: "onColumnToggled" }, decls: 13, vars: 21, consts: [[1, "igx-column-actions__header"], ["class", "igx-column-actions__header-title", 4, "ngIf"], ["class", "igx-column-actions__header-input", 4, "ngIf"], ["tabindex", "0", 1, "igx-column-actions__columns"], ["class", "igx-column-actions__columns-item", 3, "checked", "margin-left", "change", 4, "ngFor", "ngForOf"], [1, "igx-column-actions__buttons"], ["igxButton", "", "igxRipple", "", 3, "disabled", "click"], [1, "igx-column-actions__header-title"], [1, "igx-column-actions__header-input"], ["igxInput", "", "type", "text", "autocomplete", "off", 3, "ngModel", "placeholder", "ngModelChange"], [1, "igx-column-actions__columns-item", 3, "checked", "change"]], template: function IgxColumnActionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, IgxColumnActionsComponent_h4_1_Template, 2, 2, "h4", 1);
        ɵngcc0.ɵɵtemplate(2, IgxColumnActionsComponent_igx_input_group_2_Template, 2, 3, "igx-input-group", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, IgxColumnActionsComponent_igx_checkbox_4_Template, 2, 4, "igx-checkbox", 4);
        ɵngcc0.ɵɵpipe(5, "sortActionColumns");
        ɵngcc0.ɵɵpipe(6, "filterActionColumns");
        ɵngcc0.ɵɵpipe(7, "columnActionEnabled");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵelementStart(9, "button", 6);
        ɵngcc0.ɵɵlistener("click", function IgxColumnActionsComponent_Template_button_click_9_listener() { return ctx.uncheckAllColumns(); });
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "button", 6);
        ɵngcc0.ɵɵlistener("click", function IgxColumnActionsComponent_Template_button_click_11_listener() { return ctx.checkAllColumns(); });
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hideFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("max-height", ctx.columnsAreaMaxHeight);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind3(5, 9, ɵngcc0.ɵɵpipeBind3(6, 13, ɵngcc0.ɵɵpipeBind3(7, 17, ctx.columns, ctx.actionsDirective.actionEnabledColumnsFilter, ctx.pipeTrigger), ctx.filterCriteria, ctx.pipeTrigger), ctx.columnDisplayOrder, ctx.pipeTrigger));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("disabled", ctx.uncheckAllDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.uncheckAllText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.checkAllDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.checkAllText);
    } }, encapsulation: 2 });
IgxColumnActionsComponent.ctorParameters = () => [
    { type: IterableDiffers }
];
IgxColumnActionsComponent.propDecorators = {
    columns: [{ type: Input }],
    title: [{ type: Input }],
    filterColumnsPrompt: [{ type: Input }],
    hideFilter: [{ type: Input }],
    columnItems: [{ type: ViewChildren, args: [IgxCheckboxComponent,] }],
    filterCriteria: [{ type: Input }],
    columnDisplayOrder: [{ type: Input }],
    columnsAreaMaxHeight: [{ type: Input }],
    uncheckAllText: [{ type: Input }],
    checkAllText: [{ type: Input }],
    indentation: [{ type: Input }],
    onColumnToggled: [{ type: Output }],
    cssClass: [{ type: HostBinding, args: ['attr.class',] }],
    grid: [{ type: Input }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }]
};
__decorate([
    DeprecateProperty(`Deprecated. Use 'grid' input instead.`)
], IgxColumnActionsComponent.prototype, "columns", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnActionsComponent, [{
        type: Component,
        args: [{
                selector: 'igx-column-actions',
                template: "<div class=\"igx-column-actions__header\">\n    <h4 [attr.id]='titleID' class=\"igx-column-actions__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-actions__header-input\" *ngIf=\"!hideFilter\">\n        <input igxInput\n            type=\"text\"\n            [attr.aria-describedby]='titleID'\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-actions__columns\" tabindex=\"0\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox\n        *ngFor=\"let column of columns\n            | columnActionEnabled:actionsDirective.actionEnabledColumnsFilter:pipeTrigger\n            | filterActionColumns:filterCriteria:pipeTrigger\n            | sortActionColumns:columnDisplayOrder:pipeTrigger;\"\n        class=\"igx-column-actions__columns-item\"\n\n        (change)=\"toggleColumn($event, column)\"\n        [checked]=\"actionsDirective.columnChecked(column)\"\n        [style.margin-left.px]=\"column.level * indentation\">\n        {{ column.header || column.field }}\n    </igx-checkbox>\n</div>\n\n<div class=\"igx-column-actions__buttons\">\n    <button igxButton igxRipple (click)=\"uncheckAllColumns()\" [disabled]=\"uncheckAllDisabled\">{{ uncheckAllText }}</button>\n    <button igxButton igxRipple (click)=\"checkAllColumns()\" [disabled]=\"checkAllDisabled\">{{ checkAllText }}</button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.IterableDiffers }]; }, { title: [{
            type: Input
        }], hideFilter: [{
            type: Input
        }], columnsAreaMaxHeight: [{
            type: Input
        }], indentation: [{
            type: Input
        }], onColumnToggled: [{
            type: Output
        }], cssClass: [{
            type: HostBinding,
            args: ['attr.class']
        }], columns: [{
            type: Input
        }], grid: [{
            type: Input
        }], filterColumnsPrompt: [{
            type: Input
        }], filterCriteria: [{
            type: Input
        }], columnDisplayOrder: [{
            type: Input
        }], uncheckAllText: [{
            type: Input
        }], checkAllText: [{
            type: Input
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], columnItems: [{
            type: ViewChildren,
            args: [IgxCheckboxComponent]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29sdW1uLWFjdGlvbnMvY29sdW1uLWFjdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsWUFBWSxFQUVaLFlBQVksRUFDWixNQUFNLEVBQ04sZUFBZSxFQUdsQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQTRCLE1BQU0sbUNBQW1DLENBQUM7QUFHbkcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFbkUsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBS0gsTUFBTSxPQUFPLHlCQUF5QjtBQUFHLElBR3JDLFlBQXFCLE9BQXdCO0FBQ2pELFFBRHlCLFlBQU8sR0FBUCxPQUFPLENBQWlCO0FBQUMsUUFGcEMsWUFBTyxHQUErQixJQUFJLENBQUM7QUFDekQsUUFLSTtBQUNKO0FBQ0ksV0FBRztBQUNQLFFBQVcsc0JBQWlCLEdBQXlCLEVBQUUsQ0FBQztBQUN4RCxRQUNJO0FBQ0o7QUFDSSxXQUFHO0FBQ1AsUUFBVyxvQkFBZSxHQUF5QixFQUFFLENBQUM7QUFDdEQsUUFxQkk7QUFDSjtBQUNJO0FBQ0k7QUFDSTtBQUVQO0FBQ08sV0FETDtBQUNQLFFBQ1csVUFBSyxHQUFHLEVBQUUsQ0FBQztBQUN0QixRQUNJO0FBQ0o7QUFDSSxXQUFHO0FBQ1AsUUFBWSx5QkFBb0IsR0FBRyxFQUFFLENBQUM7QUFDdEMs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LENBQUM7QUFDTDtxREE3WEMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxvQkFBb0Isa0JBQzlCOzs7Ozs7OztxNUJBQThDLGNBQ2pEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFDSTtBQUFDO0FBQW1ELFlBdkJyRCxlQUFlO0FBQ2xCO0FBQUc7QUFFYSxzQkE4Q1osS0FBSztBQUNSLG9CQWlCRyxLQUFLO0FBQ1Isa0NBYUcsS0FBSztBQUNSLHlCQXFCRyxLQUFLO0FBQ1IsMEJBU0csWUFBWSxTQUFDLG9CQUFvQjtBQUNqQyw2QkFhQSxLQUFLO0FBQ1IsaUNBNkJHLEtBQUs7QUFDUixtQ0EwQkcsS0FBSztBQUNSLDZCQWVHLEtBQUs7QUFDUiwyQkEyQkcsS0FBSztBQUNSLDBCQXVCRyxLQUFLO0FBQ1IsOEJBU0csTUFBTTtBQUNULHVCQTRCRyxXQUFXLFNBQUMsWUFBWTtBQUN4QixtQkF3QkEsS0FBSztBQUNSLGlCQWdCRyxXQUFXLFNBQUMsU0FBUyxjQUNyQixLQUFLO0FBQ1Q7QUE3Ukc7QUFBYSxJQUZaLGlCQUFpQixDQUFDLHVDQUF1QyxDQUFDO0FBQy9ELHdEQUdLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0w7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIElucHV0LFxuICAgIFZpZXdDaGlsZHJlbixcbiAgICBRdWVyeUxpc3QsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIE91dHB1dCxcbiAgICBJdGVyYWJsZURpZmZlcnMsXG4gICAgSXRlcmFibGVEaWZmZXIsXG4gICAgRG9DaGVja1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2x1bW5EaXNwbGF5T3JkZXIgfSBmcm9tICcuLi9jb21tb24vZW51bXMnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0Jhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneENoZWNrYm94Q29tcG9uZW50LCBJQ2hhbmdlQ2hlY2tib3hFdmVudEFyZ3MgfSBmcm9tICcuLi8uLi9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSUNvbHVtblRvZ2dsZWRFdmVudEFyZ3MgfSBmcm9tICcuLi9jb21tb24vZXZlbnRzJztcbmltcG9ydCB7IElneEdyaWRCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZ3JpZC1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEZXByZWNhdGVQcm9wZXJ0eSB9IGZyb20gJy4uLy4uL2NvcmUvZGVwcmVjYXRlRGVjb3JhdG9ycyc7XG5cbmxldCBORVhUX0lEID0gMDtcbi8qKlxuICogUHJvdmlkaW5nIHJlZmVyZW5jZSB0byBgSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudGA6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgQFZpZXdDaGlsZCgnY29sdW1uQWN0aW9ucycsIHsgcmVhZDogSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCB9KVxuICogIHB1YmxpYyBjb2x1bW5BY3Rpb25zOiBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50O1xuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1jb2x1bW4tYWN0aW9ucycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NvbHVtbi1hY3Rpb25zLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjayB7XG4gICAgcHJvdGVjdGVkIF9kaWZmZXI6IEl0ZXJhYmxlRGlmZmVyPGFueT4gfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yIChwcml2YXRlIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycykge1xuICAgICAgICB0aGlzLl9kaWZmZXIgPSB0aGlzLmRpZmZlcnMuZmluZChbXSkuY3JlYXRlKHRoaXMudHJhY2tDaGFuZ2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBhY3Rpb25hYmxlQ29sdW1uczogSWd4Q29sdW1uQ29tcG9uZW50W10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGZpbHRlcmVkQ29sdW1uczogSWd4Q29sdW1uQ29tcG9uZW50W10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGdyaWQgY29sdW1ucyB0byBwcm92aWRlIGFuIGFjdGlvbiBmb3IuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZ3JpZENvbHVtbnMgPSB0aGlzLmNvbHVtbkFjdGlvbnMuY29sdW1ucztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBARGVwcmVjYXRlUHJvcGVydHkoYERlcHJlY2F0ZWQuIFVzZSAnZ3JpZCcgaW5wdXQgaW5zdGVhZC5gKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBjb2x1bW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkPy5jb2x1bW5zO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgY29sdW1ucyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5ncmlkID0gdmFsdWVbMF0uZ3JpZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgdGl0bGUgb2YgdGhlIGNvbHVtbiBhY3Rpb25zIGNvbXBvbmVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNvbHVtbi1hY3Rpb25zIFt0aXRsZV09XCInUGluIENvbHVtbnMnXCI+PC9pZ3gtY29sdW1uLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdGl0bGUgPSAnJztcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZmlsdGVyQ29sdW1uc1Byb21wdCA9ICcnO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb21wdCB0aGF0IGlzIGRpc3BsYXllZCBpbiB0aGUgZmlsdGVyIGlucHV0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBmaWx0ZXJDb2x1bW5zUHJvbXB0ID0gdGhpcy5jb2x1bW5BY3Rpb25zLmZpbHRlckNvbHVtbnNQcm9tcHQ7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGZpbHRlckNvbHVtbnNQcm9tcHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlckNvbHVtbnNQcm9tcHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHByb21wdCB0aGF0IGlzIGRpc3BsYXllZCBpbiB0aGUgZmlsdGVyIGlucHV0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW2ZpbHRlckNvbHVtbnNQcm9tcHRdPVwiJ1R5cGUgaGVyZSB0byBzZWFyY2gnXCI+PC9pZ3gtY29sdW1uLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldCBmaWx0ZXJDb2x1bW5zUHJvbXB0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fZmlsdGVyQ29sdW1uc1Byb21wdCA9IHZhbHVlIHx8ICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzL2hpZGVzIHRoZSBjb2x1bW5zIGZpbHRlcmluZyBpbnB1dCBmcm9tIHRoZSBVSS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1jb2x1bW4tYWN0aW9ucyBbaGlkZUZpbHRlcl09XCJ0cnVlXCI+PC9pZ3gtY29sdW1uLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaGlkZUZpbHRlciA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY2hlY2tib3ggY29tcG9uZW50cyByZXByZXNlbnRpbmcgY29sdW1uIGl0ZW1zIGN1cnJlbnRseSBwcmVzZW50IGluIHRoZSBkcm9wZG93blxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjb2x1bW5JdGVtcyA9ICB0aGlzLmNvbHVtbkFjdGlvbnMuY29sdW1uSXRlbXM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQFZpZXdDaGlsZHJlbihJZ3hDaGVja2JveENvbXBvbmVudClcbiAgICBwdWJsaWMgY29sdW1uSXRlbXM6IFF1ZXJ5TGlzdDxJZ3hDaGVja2JveENvbXBvbmVudD47XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByaXZhdGUgX2ZpbHRlckNyaXRlcmlhID0gJyc7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgd2hpY2ggZmlsdGVycyB0aGUgY29sdW1ucyBsaXN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBmaWx0ZXJDcml0ZXJpYSA9ICB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyQ3JpdGVyaWE7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGZpbHRlckNyaXRlcmlhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyQ3JpdGVyaWE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIHdoaWNoIGZpbHRlcnMgdGhlIGNvbHVtbnMgbGlzdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1jb2x1bW4tYWN0aW9ucyBbZmlsdGVyQ3JpdGVyaWFdPVwiJ0lEJ1wiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgZmlsdGVyQ3JpdGVyaWEodmFsdWU6IHN0cmluZykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuX2ZpbHRlckNyaXRlcmlhKSB7XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJDcml0ZXJpYSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcGlwZVRyaWdnZXIrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY29sdW1uRGlzcGxheU9yZGVyOiBDb2x1bW5EaXNwbGF5T3JkZXIgPSBDb2x1bW5EaXNwbGF5T3JkZXIuRGlzcGxheU9yZGVyO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRpc3BsYXkgb3JkZXIgb2YgdGhlIGNvbHVtbnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNvbHVtbkRpc3BsYXlPcmRlciA9IHRoaXMuY29sdW1uQWN0aW9ucy5jb2x1bW5EaXNwbGF5T3JkZXI7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGNvbHVtbkRpc3BsYXlPcmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbkRpc3BsYXlPcmRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGlzcGxheSBvcmRlciBvZiB0aGUgY29sdW1ucy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmNvbHVtbkFjdGlvbnMuY29sdW1uRGlzcGxheU9yZGVyID0gQ29sdW1uRGlzcGxheU9yZGVyLkFscGhhYmV0aWNhbDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGNvbHVtbkRpc3BsYXlPcmRlcih2YWx1ZTogQ29sdW1uRGlzcGxheU9yZGVyKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSAhPT0gdGhpcy5fY29sdW1uRGlzcGxheU9yZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9jb2x1bW5EaXNwbGF5T3JkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3BpcGVUcmlnZ2VyKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL3NldHMgdGhlIG1heCBoZWlnaHQgb2YgdGhlIGNvbHVtbnMgYXJlYS5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSBkZWZhdWx0IG1heCBoZWlnaHQgaXMgMTAwJS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNvbHVtbi1hY3Rpb25zIFtjb2x1bW5zQXJlYU1heEhlaWdodF09XCIyMDBweFwiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbHVtbnNBcmVhTWF4SGVpZ2h0ID0gJzEwMCUnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcml2YXRlIF91bmNoZWNrQWxsVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRleHQgb2YgdGhlIGJ1dHRvbiB0aGF0IHVuY2hlY2tzIGFsbCBjb2x1bW5zLlxuICAgICAqIEByZW1hcmtzXG4gICAgICogSWYgdW5zZXQgaXQgaXMgb2J0YWluZWQgZnJvbSB0aGUgSWd4Q29sdW1uQWN0aW9uc0Jhc2VkIGRlcml2ZWQgZGlyZWN0aXZlIGFwcGxpZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHVuY2hlY2tBbGxUZXh0ID0gdGhpcy5jb2x1bW5BY3Rpb25zLnVuY2hlY2tBbGxUZXh0O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCB1bmNoZWNrQWxsVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VuY2hlY2tBbGxUZXh0IHx8IHRoaXMuYWN0aW9uc0RpcmVjdGl2ZS51bmNoZWNrQWxsTGFiZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgb2YgdGhlIGJ1dHRvbiB0aGF0IHVuY2hlY2tzIGFsbCBjb2x1bW5zLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW3VuY2hlY2tBbGxUZXh0XT1cIidTaG93IEFsbCdcIj48L2lneC1jb2x1bW4tYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHVuY2hlY2tBbGxUZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fdW5jaGVja0FsbFRleHQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByaXZhdGUgX2NoZWNrQWxsVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRleHQgb2YgdGhlIGJ1dHRvbiB0aGF0IGNoZWNrcyBhbGwgY29sdW1ucy5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIElmIHVuc2V0IGl0IGlzIG9idGFpbmVkIGZyb20gdGhlIElneENvbHVtbkFjdGlvbnNCYXNlZCBkZXJpdmVkIGRpcmVjdGl2ZSBhcHBsaWVkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCB1bmNoZWNrQWxsVGV4dCA9IHRoaXMuY29sdW1uQWN0aW9ucy51bmNoZWNrQWxsVGV4dDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgY2hlY2tBbGxUZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tBbGxUZXh0IHx8IHRoaXMuYWN0aW9uc0RpcmVjdGl2ZS5jaGVja0FsbExhYmVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IG9mIHRoZSBidXR0b24gdGhhdCBjaGVja3MgYWxsIGNvbHVtbnMuXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBJZiB1bnNldCBpdCBpcyBvYnRhaW5lZCBmcm9tIHRoZSBJZ3hDb2x1bW5BY3Rpb25zQmFzZWQgZGVyaXZlZCBkaXJlY3RpdmUgYXBwbGllZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNvbHVtbi1hY3Rpb25zIFtjaGVja0FsbFRleHRdPVwiJ0hpZGUgQWxsJ1wiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgY2hlY2tBbGxUZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tBbGxUZXh0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cy9zZXRzIHRoZSBpbmRlbnRhdGlvbiBvZiBjb2x1bW5zIGluIHRoZSBjb2x1bW4gbGlzdCBiYXNlZCBvbiB0aGVpciBoaWVyYXJjaHkgbGV2ZWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiA8aWd4LWNvbHVtbi1hY3Rpb25zIFtpbmRlbnRhdGlvbl09XCIxNVwiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGluZGVudGF0aW9uID0gMzA7XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgYWZ0ZXIgYSBjb2x1bW4ncyBjaGVja2VkIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAgICogUHJvdmlkZXMgcmVmZXJlbmNlcyB0byB0aGUgYGNvbHVtbmAgYW5kIHRoZSBgY2hlY2tlZGAgcHJvcGVydGllcyBhcyBldmVudCBhcmd1bWVudHMuXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWNvbHVtbi1hY3Rpb25zIChvbkNvbHVtblRvZ2dsZWQpPVwib25Db2x1bW5Ub2dnbGVkKCRldmVudClcIj48L2lneC1jb2x1bW4tYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25Db2x1bW5Ub2dnbGVkID0gbmV3IEV2ZW50RW1pdHRlcjxJQ29sdW1uVG9nZ2xlZEV2ZW50QXJncz4oKTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfcGlwZVRyaWdnZXIgPSAwO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBwaXBlVHJpZ2dlcigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGlwZVRyaWdnZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aW9uc0RpcmVjdGl2ZTogSWd4Q29sdW1uQWN0aW9uc0Jhc2VEaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL0dldHMgdGhlIGNzcyBjbGFzcyBzZWxlY3Rvci5cbiAgICAgKiBCeSBkZWZhdWx0IHRoZSB2YWx1ZSBvZiB0aGUgYGNsYXNzYCBhdHRyaWJ1dGUgaXMgYFwiaWd4LWNvbHVtbi1oaWRpbmdcImAuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjc3NDTGFzcyA9ICB0aGlzLmNvbHVtbkhpZGluZ1VJLmNzc0NsYXNzO1xuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmNvbHVtbkhpZGluZ1VJLmNzc0NsYXNzID0gJ2NvbHVtbi1jaG9vc2VyJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuY2xhc3MnKVxuICAgIHB1YmxpYyBjc3NDbGFzcyA9ICdpZ3gtY29sdW1uLWFjdGlvbnMnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGNoZWNrQWxsRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5maWx0ZXJlZENvbHVtbnMuc29tZShjb2wgPT4gIXRoaXMuYWN0aW9uc0RpcmVjdGl2ZS5jb2x1bW5DaGVja2VkKGNvbCkpO1xuXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCB1bmNoZWNrQWxsRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5maWx0ZXJlZENvbHVtbnMuc29tZShjb2wgPT4gdGhpcy5hY3Rpb25zRGlyZWN0aXZlLmNvbHVtbkNoZWNrZWQoY29sKSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGdyaWQgdG8gcHJvdmlkZSBjb2x1bW4gYWN0aW9ucyBmb3IuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGdyaWQgPSB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBncmlkOiBJZ3hHcmlkQmFzZURpcmVjdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHJpdmF0ZSBfaWQgPSBgaWd4LWNvbHVtbi1hY3Rpb25zLSR7TkVYVF9JRCsrfWA7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIHZhbHVlIG9mIHRoZSBgaWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWFjdGlvbnMgW2lkXT1cIidpZ3gtYWN0aW9ucy0xJ1wiPjwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgcHVibGljIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgdGl0bGVJRCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQgKyAnX3RpdGxlJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFja0NoYW5nZXMgPSAoaW5kZXgsIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gY29sLmZpZWxkICsgJ18nICsgdGhpcy5hY3Rpb25zRGlyZWN0aXZlLmFjdGlvbkVuYWJsZWRDb2x1bW5zRmlsdGVyKGNvbCwgaW5kZXgsIFtdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaWZmZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLl9kaWZmZXIuZGlmZih0aGlzLmNvbHVtbnMpO1xuICAgICAgICAgICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9waXBlVHJpZ2dlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5jaGVja3MgYWxsIGNvbHVtbnMgYW5kIHBlcmZvcm1zIHRoZSBhcHByb3ByaWF0ZSBhY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5jb2x1bW5BY3Rpb25zLnVuY2hlY2tBbGxDb2x1bW5zKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHVuY2hlY2tBbGxDb2x1bW5zKCkge1xuICAgICAgICB0aGlzLmFjdGlvbnNEaXJlY3RpdmUudW5jaGVja0FsbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBhbGwgY29sdW1ucyBhbmQgcGVyZm9ybXMgdGhlIGFwcHJvcHJpYXRlIGFjdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmNvbHVtbkFjdGlvbnMuY2hlY2tBbGxDb2x1bW5zKCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrQWxsQ29sdW1ucygpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25zRGlyZWN0aXZlLmNoZWNrQWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlQ29sdW1uKGV2ZW50OiBJQ2hhbmdlQ2hlY2tib3hFdmVudEFyZ3MsIGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMub25Db2x1bW5Ub2dnbGVkLmVtaXQoe1xuICAgICAgICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICAgICAgICBjaGVja2VkOiBldmVudC5jaGVja2VkXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFjdGlvbnNEaXJlY3RpdmUudG9nZ2xlQ29sdW1uKGNvbHVtbik7XG4gICAgfVxufVxuIl19