import { Directive, Inject } from '@angular/core';
import { IgxColumnActionsBaseDirective } from './column-actions-base.directive';
import { IgxColumnActionsComponent } from './column-actions.component';
export class IgxColumnHidingDirective extends IgxColumnActionsBaseDirective {
    constructor(columnActions) {
        super();
        this.columnActions = columnActions;
        /**
         * @hidden @internal
         */
        this.actionEnabledColumnsFilter = c => !c.disableHiding;
        columnActions.actionsDirective = this;
    }
    /**
     * @hidden @internal
     */
    get checkAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_hiding_check_all_label) !== null && _b !== void 0 ? _b : 'Hide All';
    }
    /**
     * @hidden @internal
     */
    get uncheckAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_hiding_uncheck_all_label) !== null && _b !== void 0 ? _b : 'Show All';
    }
    /**
     * @hidden @internal
     */
    checkAll() {
        this.columnActions.filteredColumns.forEach(c => c.hidden = true);
    }
    /**
     * @hidden @internal
     */
    uncheckAll() {
        this.columnActions.filteredColumns.forEach(c => c.hidden = false);
    }
    /**
     * @hidden @internal
     */
    columnChecked(column) {
        return column.hidden;
    }
    /**
     * @hidden @internal
     */
    toggleColumn(column) {
        column.hidden = !column.hidden;
    }
}
IgxColumnHidingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxColumnHiding]'
            },] }
];
IgxColumnHidingDirective.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWhpZGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29sdW1uLWFjdGlvbnMvY29sdW1uLWhpZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFaEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFLdkUsTUFBTSxPQUFPLHdCQUF5QixTQUFRLDZCQUE2QjtJQUV2RSxZQUNpRCxhQUF3QztRQUVyRixLQUFLLEVBQUUsQ0FBQztRQUZxQyxrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7UUFpQ3pGOztXQUVHO1FBQ0ksK0JBQTBCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFqQ3RELGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxhQUFhOztRQUNwQixtQkFBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksMENBQUUsZUFBZSxDQUFDLCtCQUErQixtQ0FBSSxVQUFVLENBQUM7SUFDbEcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxlQUFlOztRQUN0QixtQkFBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksMENBQUUsZUFBZSxDQUFDLGlDQUFpQyxtQ0FBSSxVQUFVLENBQUM7SUFDcEcsQ0FBQztJQUNEOztPQUVHO0lBQ0ksUUFBUTtRQUNYLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVTtRQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQU9EOztPQUVHO0lBQ0ksYUFBYSxDQUFDLE1BQTBCO1FBQzNDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxZQUFZLENBQUMsTUFBMEI7UUFDMUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbkMsQ0FBQzs7O1lBeERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2FBQ2hDOzs7WUFKUSx5QkFBeUIsdUJBUXpCLE1BQU0sU0FBQyx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0Jhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW4tYWN0aW9ucy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDb2x1bW5IaWRpbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5IaWRpbmdEaXJlY3RpdmUgZXh0ZW5kcyBJZ3hDb2x1bW5BY3Rpb25zQmFzZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50KSBwcm90ZWN0ZWQgY29sdW1uQWN0aW9uczogSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb2x1bW5BY3Rpb25zLmFjdGlvbnNEaXJlY3RpdmUgPSB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBjaGVja0FsbExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX2hpZGluZ19jaGVja19hbGxfbGFiZWwgPz8gJ0hpZGUgQWxsJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdW5jaGVja0FsbExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX2hpZGluZ191bmNoZWNrX2FsbF9sYWJlbCA/PyAnU2hvdyBBbGwnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja0FsbCgpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5BY3Rpb25zLmZpbHRlcmVkQ29sdW1ucy5mb3JFYWNoKGMgPT4gYy5oaWRkZW4gPSB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyB1bmNoZWNrQWxsKCkge1xuICAgICAgICB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyZWRDb2x1bW5zLmZvckVhY2goYyA9PiBjLmhpZGRlbiA9IGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBhY3Rpb25FbmFibGVkQ29sdW1uc0ZpbHRlciA9IGMgPT4gIWMuZGlzYWJsZUhpZGluZztcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGNvbHVtbkNoZWNrZWQoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGNvbHVtbi5oaWRkZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlQ29sdW1uKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgIGNvbHVtbi5oaWRkZW4gPSAhY29sdW1uLmhpZGRlbjtcbiAgICB9XG59XG4iXX0=