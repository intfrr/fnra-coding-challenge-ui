import { Directive, Inject } from '@angular/core';
import { IgxColumnActionsBaseDirective } from './column-actions-base.directive';
import { IgxColumnActionsComponent } from './column-actions.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './column-actions.component';
export class IgxColumnPinningDirective extends IgxColumnActionsBaseDirective {
    constructor(columnActions) {
        super();
        this.columnActions = columnActions;
        /**
         * @hidden @internal
         */
        this.actionEnabledColumnsFilter = c => !c.disablePinning && !c.level;
        columnActions.actionsDirective = this;
    }
    /**
     * @hidden @internal
     */
    get checkAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_pinning_check_all_label) !== null && _b !== void 0 ? _b : 'Pin All';
    }
    /**
     * @hidden @internal
     */
    get uncheckAllLabel() {
        var _a, _b;
        return (_b = (_a = this.columnActions.grid) === null || _a === void 0 ? void 0 : _a.resourceStrings.igx_grid_pinning_uncheck_all_label) !== null && _b !== void 0 ? _b : 'Unpin All';
    }
    /**
     * @hidden @internal
     */
    checkAll() {
        this.columnActions.filteredColumns.forEach(c => c.pinned = true);
    }
    /**
     * @hidden @internal
     */
    uncheckAll() {
        this.columnActions.filteredColumns.forEach(c => c.pinned = false);
    }
    /**
     * @hidden @internal
     */
    columnChecked(column) {
        return column.pinned;
    }
    /**
     * @hidden @internal
     */
    toggleColumn(column) {
        column.pinned = !column.pinned;
    }
}
IgxColumnPinningDirective.ɵfac = function IgxColumnPinningDirective_Factory(t) { return new (t || IgxColumnPinningDirective)(ɵngcc0.ɵɵdirectiveInject(IgxColumnActionsComponent)); };
IgxColumnPinningDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxColumnPinningDirective, selectors: [["", "igxColumnPinning", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IgxColumnPinningDirective.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnPinningDirective, [{
        type: Directive,
        args: [{
                selector: '[igxColumnPinning]'
            }]
    }], function () { return [{ type: ɵngcc1.IgxColumnActionsComponent, decorators: [{
                type: Inject,
                args: [IgxColumnActionsComponent]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXBpbm5pbmcuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29sdW1uLWFjdGlvbnMvY29sdW1uLXBpbm5pbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRWhGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFLdkUsTUFBTSxPQUFPLHlCQUEwQixTQUFRLDZCQUE2QjtBQUM1RSxJQUNJLFlBQ2lELGFBQXdDO0FBQzFGLFFBQ0ssS0FBSyxFQUFFLENBQUM7QUFDaEIsUUFIcUQsa0JBQWEsR0FBYixhQUFhLENBQTJCO0FBQzdGLFFBZ0NJO0FBQ0o7QUFDSSxXQUFHO0FBQ1AsUUFBVywrQkFBMEIsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDM0UsUUFsQ1EsYUFBYSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUM5QyxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFXLGFBQWE7QUFBSztBQUNyQixRQUFKLG1CQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSwwQ0FBRSxlQUFlLENBQUMsZ0NBQWdDLG1DQUFJLFNBQVMsQ0FBQztBQUN0RyxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFXLGVBQWU7QUFBSztBQUN2QixRQUFKLG1CQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSwwQ0FBRSxlQUFlLENBQUMsa0NBQWtDLG1DQUFJLFdBQVcsQ0FBQztBQUMxRyxJQUFJLENBQUM7QUFDTCxJQUFJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBVyxRQUFRO0FBQ25CLFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN6RSxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBVyxVQUFVO0FBQ3JCLFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztBQUMxRSxJQUFJLENBQUM7QUFDTCxJQU1JO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBVyxhQUFhLENBQUMsTUFBMEI7QUFBSSxRQUMvQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDN0IsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsWUFBWSxDQUFDLE1BQTBCO0FBQ2xELFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBQ0w7cURBekRDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsb0JBQW9CLGNBQ2pDO3lMQUNJO0FBQUM7QUFBbUQsWUFMaEQseUJBQXlCLHVCQVF6QixNQUFNLFNBQUMseUJBQXlCO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkFjdGlvbnNCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tYWN0aW9ucy1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vY29sdW1uLWFjdGlvbnMuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q29sdW1uUGlubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtblBpbm5pbmdEaXJlY3RpdmUgZXh0ZW5kcyBJZ3hDb2x1bW5BY3Rpb25zQmFzZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50KSBwcm90ZWN0ZWQgY29sdW1uQWN0aW9uczogSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb2x1bW5BY3Rpb25zLmFjdGlvbnNEaXJlY3RpdmUgPSB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBjaGVja0FsbExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX3Bpbm5pbmdfY2hlY2tfYWxsX2xhYmVsID8/ICdQaW4gQWxsJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdW5jaGVja0FsbExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX3Bpbm5pbmdfdW5jaGVja19hbGxfbGFiZWwgPz8gJ1VucGluIEFsbCc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrQWxsKCkge1xuICAgICAgICB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyZWRDb2x1bW5zLmZvckVhY2goYyA9PiBjLnBpbm5lZCA9IHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIHVuY2hlY2tBbGwoKSB7XG4gICAgICAgIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJlZENvbHVtbnMuZm9yRWFjaChjID0+IGMucGlubmVkID0gZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGFjdGlvbkVuYWJsZWRDb2x1bW5zRmlsdGVyID0gYyA9PiAhYy5kaXNhYmxlUGlubmluZyAmJiAhYy5sZXZlbDtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGNvbHVtbkNoZWNrZWQoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGNvbHVtbi5waW5uZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlQ29sdW1uKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgIGNvbHVtbi5waW5uZWQgPSAhY29sdW1uLnBpbm5lZDtcbiAgICB9XG59XG4iXX0=