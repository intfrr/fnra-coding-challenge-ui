import { EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 * @hidden
 */
export class ItemPropertyValueChangedDirective {
    constructor(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    get object() {
        return this._object;
    }
    set object(value) {
        if (value) {
            this._object = value;
        }
    }
    get value() {
        return (this.object) ? this.object[this._propName] : null;
    }
    set value(value) {
        this.onValueChanged(value);
    }
    onValueChanged(value) {
        const currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    }
}
ItemPropertyValueChangedDirective.decorators = [
    { type: Directive }
];
ItemPropertyValueChangedDirective.ctorParameters = () => [
    { type: String }
];
ItemPropertyValueChangedDirective.propDecorators = {
    value: [{ type: Input }],
    valueChanged: [{ type: Output }]
};
/** @hidden */
export class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {
    constructor(prop) {
        super(prop);
        this.prop = prop;
        this.indentation = 30;
    }
    get column() {
        return this.object;
    }
    set column(value) {
        if (value) {
            this.object = value;
        }
    }
    get name() {
        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
    }
    get level() {
        return this.column.level;
    }
    get calcIndent() {
        return this.indentation * this.level;
    }
}
ColumnChooserItemBaseDirective.decorators = [
    { type: Directive }
];
ColumnChooserItemBaseDirective.ctorParameters = () => [
    { type: String }
];
ColumnChooserItemBaseDirective.propDecorators = {
    column: [{ type: Input }],
    indentation: [{ type: Input }],
    container: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL2NvbHVtbi1jaG9vc2VyLWl0ZW0tYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUXZFOztHQUVHO0FBRUgsTUFBTSxPQUFnQixpQ0FBaUM7SUEwQm5ELFlBQVksUUFBZ0I7UUFGckIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBMEIsQ0FBQztRQUc3RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBeEJELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBSztRQUNaLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQsSUFDSSxLQUFLO1FBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM5RCxDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsS0FBSztRQUNYLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQVNTLGNBQWMsQ0FBQyxLQUFLO1FBQzFCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDaEMsSUFBSSxLQUFLLEtBQUssWUFBWSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDdkU7SUFDTCxDQUFDOzs7WUFyQ0osU0FBUzs7Ozs7O29CQWVMLEtBQUs7MkJBU0wsTUFBTTs7QUFnQlgsY0FBYztBQUVkLE1BQU0sT0FBTyw4QkFBK0IsU0FBUSxpQ0FBaUM7SUFrQmpGLFlBQW1CLElBQVk7UUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBREcsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUx4QixnQkFBVyxHQUFHLEVBQUUsQ0FBQztJQU94QixDQUFDO0lBbkJELElBQ0ksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBSztRQUNaLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBWUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDaEcsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pDLENBQUM7OztZQWpDSixTQUFTOzs7Ozs7cUJBRUwsS0FBSzswQkFXTCxLQUFLO3dCQUdMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUJhc2VFdmVudEFyZ3MgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBJVmFsdWVDaGFuZ2VkRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIG9sZFZhbHVlOiBhbnk7XG4gICAgbmV3VmFsdWU6IGFueTtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEl0ZW1Qcm9wZXJ0eVZhbHVlQ2hhbmdlZERpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSBfb2JqZWN0OiBhbnk7XG4gICAgcHJpdmF0ZSBfcHJvcE5hbWU6IHN0cmluZztcblxuICAgIGdldCBvYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmplY3Q7XG4gICAgfVxuXG4gICAgc2V0IG9iamVjdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29iamVjdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5vYmplY3QpID8gdGhpcy5vYmplY3RbdGhpcy5fcHJvcE5hbWVdIDogbnVsbDtcbiAgICB9XG5cbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHZhbHVlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8SVZhbHVlQ2hhbmdlZEV2ZW50QXJncz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fcHJvcE5hbWUgPSBwcm9wTmFtZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25WYWx1ZUNoYW5nZWQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0W3RoaXMuX3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZWQuZW1pdCh7IG9sZFZhbHVlOiBjdXJyZW50VmFsdWUsIG5ld1ZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIENvbHVtbkNob29zZXJJdGVtQmFzZURpcmVjdGl2ZSBleHRlbmRzIEl0ZW1Qcm9wZXJ0eVZhbHVlQ2hhbmdlZERpcmVjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBnZXQgY29sdW1uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vYmplY3Q7XG4gICAgfVxuXG4gICAgc2V0IGNvbHVtbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpbmRlbnRhdGlvbiA9IDMwO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29udGFpbmVyOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcHJvcDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHByb3ApO1xuICAgIH1cblxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29sdW1uKSA/ICgodGhpcy5jb2x1bW4uaGVhZGVyKSA/IHRoaXMuY29sdW1uLmhlYWRlciA6IHRoaXMuY29sdW1uLmZpZWxkKSA6ICcnO1xuICAgIH1cblxuICAgIGdldCBsZXZlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLmxldmVsO1xuICAgIH1cblxuICAgIGdldCBjYWxjSW5kZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGlvbiAqIHRoaXMubGV2ZWw7XG4gICAgfVxufVxuIl19