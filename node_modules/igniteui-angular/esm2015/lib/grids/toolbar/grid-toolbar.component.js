import { ChangeDetectorRef, Component, HostBinding, Input, Optional, ViewChild, Inject } from '@angular/core';
import { DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';
import { CsvFileTypes, IgxCsvExporterOptions, IgxCsvExporterService, IgxExcelExporterOptions, IgxExcelExporterService, AbsoluteScrollStrategy } from '../../services/public_api';
import { GridBaseAPIService } from '../api.service';
import { IgxButtonDirective } from '../../directives/button/button.directive';
import { IgxDropDownComponent } from '../../drop-down/drop-down.component';
import { HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../../services/overlay/position';
import { IgxColumnActionsComponent } from '../column-actions/column-actions.component';
import { IgxColumnHidingDirective } from '../column-actions/column-hiding.directive';
import { IgxColumnPinningDirective } from '../column-actions/column-pinning.directive';
import { IgxIconService } from '../../icon/public_api';
import { pinLeft, unpinLeft } from '@igniteui/material-icons-extended';
import { first } from 'rxjs/operators';
/**
 * This class encapsulates the Toolbar's logic and is internally used by
 * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../api.service';
import * as ɵngcc2 from '../../services/public_api';
import * as ɵngcc3 from '../../icon/public_api';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '../../directives/button/button.directive';
import * as ɵngcc6 from '../../directives/ripple/ripple.directive';
import * as ɵngcc7 from '../../icon/icon.component';
import * as ɵngcc8 from '../../drop-down/drop-down.component';
import * as ɵngcc9 from '../column-actions/column-actions.component';
import * as ɵngcc10 from '../column-actions/column-hiding.directive';
import * as ɵngcc11 from '../column-actions/column-pinning.directive';
import * as ɵngcc12 from '../../progressbar/progressbar.component';

const _c0 = ["columnHidingDropdown"];
const _c1 = ["columnHidingButton"];
const _c2 = ["exportDropdown"];
const _c3 = ["btnExport"];
const _c4 = ["columnPinningDropdown"];
const _c5 = ["columnPinningButton"];
function IgxGridToolbarComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.getTitle(), "\n");
} }
function IgxGridToolbarComponent_div_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridToolbarComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, IgxGridToolbarComponent_div_1_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.customContentTemplate)("ngTemplateOutletContext", ctx_r1.context);
} }
function IgxGridToolbarComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 9, 10);
    ɵngcc0.ɵɵlistener("click", function IgxGridToolbarComponent_div_3_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.showAdvancedFilteringUI(); });
    ɵngcc0.ɵɵelementStart(3, "div", 11);
    ɵngcc0.ɵɵelementStart(4, "igx-icon");
    ɵngcc0.ɵɵtext(5, " filter_list ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r2.grid.displayDensity)("ngClass", ctx_r2.grid.advancedFilteringExpressionsTree ? "igx-grid-toolbar__adv-filter--filtered" : "igx-grid-toolbar__adv-filter");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.grid.resourceStrings.igx_grid_advanced_filter_title);
} }
function IgxGridToolbarComponent_div_4_igx_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon");
    ɵngcc0.ɵɵtext(1, "visibility_off");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridToolbarComponent_div_4_igx_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon");
    ɵngcc0.ɵɵtext(1, "visibility");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridToolbarComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 12, 13);
    ɵngcc0.ɵɵlistener("click", function IgxGridToolbarComponent_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.toggleColumnHidingUI(); });
    ɵngcc0.ɵɵelementStart(3, "div", 11);
    ɵngcc0.ɵɵtemplate(4, IgxGridToolbarComponent_div_4_igx_icon_4_Template, 2, 0, "igx-icon", 3);
    ɵngcc0.ɵɵtemplate(5, IgxGridToolbarComponent_div_4_igx_icon_5_Template, 2, 0, "igx-icon", 3);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "span");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "igx-drop-down", 14, 15);
    ɵngcc0.ɵɵlistener("onClosing", function IgxGridToolbarComponent_div_4_Template_igx_drop_down_onClosing_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.onClosingColumnHiding($event); });
    ɵngcc0.ɵɵelement(12, "igx-column-actions", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r3.grid.displayDensity);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.grid.hiddenColumnsCount > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.grid.hiddenColumnsCount === 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.grid.hiddenColumnsCount);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.grid.hiddenColumnsText);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("grid", ctx_r3.grid)("title", ctx_r3.grid.columnHidingTitle)("filterColumnsPrompt", ctx_r3.filterColumnsPrompt)("columnsAreaMaxHeight", ctx_r3.defaultDropDownsMaxHeight);
} }
function IgxGridToolbarComponent_div_5_igx_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-icon", 23);
} }
function IgxGridToolbarComponent_div_5_igx_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-icon", 24);
} }
function IgxGridToolbarComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 17, 18);
    ɵngcc0.ɵɵlistener("click", function IgxGridToolbarComponent_div_5_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.toggleColumnPinningUI(); });
    ɵngcc0.ɵɵelementStart(3, "div", 11);
    ɵngcc0.ɵɵtemplate(4, IgxGridToolbarComponent_div_5_igx_icon_4_Template, 1, 0, "igx-icon", 19);
    ɵngcc0.ɵɵtemplate(5, IgxGridToolbarComponent_div_5_igx_icon_5_Template, 1, 0, "igx-icon", 20);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "span");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "igx-drop-down", 14, 21);
    ɵngcc0.ɵɵlistener("onClosing", function IgxGridToolbarComponent_div_5_Template_igx_drop_down_onClosing_11_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onClosingColumnPinning($event); });
    ɵngcc0.ɵɵelement(13, "igx-column-actions", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r4.grid.displayDensity);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.pinnedColumnsCount > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.pinnedColumnsCount === 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.pinnedColumnsCount);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.grid.pinnedColumnsText);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("grid", ctx_r4.grid)("title", ctx_r4.grid.columnPinningTitle)("filterColumnsPrompt", ctx_r4.filterColumnsPrompt)("columnsAreaMaxHeight", ctx_r4.defaultDropDownsMaxHeight);
} }
function IgxGridToolbarComponent_div_6_li_13_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 33);
    ɵngcc0.ɵɵlistener("click", function IgxGridToolbarComponent_div_6_li_13_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.exportToExcelClicked(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r27.getExportExcelText());
} }
function IgxGridToolbarComponent_div_6_li_14_Template(rf, ctx) { if (rf & 1) {
    const _r32 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 34);
    ɵngcc0.ɵɵlistener("click", function IgxGridToolbarComponent_div_6_li_14_Template_li_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r32); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.exportToCsvClicked(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r28 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r28.getExportCsvText());
} }
function IgxGridToolbarComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelementStart(1, "button", 26, 27);
    ɵngcc0.ɵɵlistener("click", function IgxGridToolbarComponent_div_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.exportClicked(); });
    ɵngcc0.ɵɵelementStart(3, "span", 11);
    ɵngcc0.ɵɵelementStart(4, "igx-icon", 28);
    ɵngcc0.ɵɵtext(5, "import_export");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "igx-icon", 28);
    ɵngcc0.ɵɵtext(9, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "igx-drop-down", null, 29);
    ɵngcc0.ɵɵelementStart(12, "ul", 30);
    ɵngcc0.ɵɵtemplate(13, IgxGridToolbarComponent_div_6_li_13_Template, 2, 1, "li", 31);
    ɵngcc0.ɵɵtemplate(14, IgxGridToolbarComponent_div_6_li_14_Template, 2, 1, "li", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r5.grid.displayDensity)("disabled", ctx_r5.isExporting);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.getExportText());
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.shouldShowExportExcelButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.shouldShowExportCsvButton);
} }
function IgxGridToolbarComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 35);
    ɵngcc0.ɵɵelement(1, "igx-linear-bar", 36);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("indeterminate", true);
} }
export class IgxGridToolbarComponent extends DisplayDensityBase {
    constructor(gridAPI, cdr, excelExporter, csvExporter, _displayDensityOptions, iconService) {
        super(_displayDensityOptions);
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.excelExporter = excelExporter;
        this.csvExporter = csvExporter;
        this._displayDensityOptions = _displayDensityOptions;
        this.iconService = iconService;
        this._filterColumnsPrompt = this.grid.resourceStrings.igx_grid_toolbar_actions_filter_prompt;
        this._isExporting = false;
        /**
         * @hidden
         * @internal
         */
        this.class = '';
        this._positionSettings = {
            horizontalDirection: HorizontalAlignment.Left,
            horizontalStartPoint: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            verticalStartPoint: VerticalAlignment.Bottom
        };
        this._overlaySettings = {
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: true
        };
    }
    /**
     * Gets the default text shown in the filtering box.
     * ```typescript
     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;
     * ```
     */
    get filterColumnsPrompt() {
        return this._filterColumnsPrompt;
    }
    /**
     * Sets the default text shown in the filtering box.
     * ```typescript
     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');
     * ```
     */
    set filterColumnsPrompt(value) {
        this._filterColumnsPrompt = value;
    }
    /**
     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.
     * ```typescript
     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;
     * ```
     */
    get defaultDropDownsMaxHeight() {
        const gridHeight = this.grid.totalHeight;
        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';
    }
    /**
     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.
     * ```typescript
     * const grid = this.igxGrid1.toolbar.grid;
     * ```
     */
    get grid() {
        return this.gridAPI.grid;
    }
    /**
     * Returns whether the `IgxGridComponent` renders an export button.
     * ```typescript
     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;
     * ```
     */
    get shouldShowExportButton() {
        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));
    }
    /**
     * @hidden @internal
     */
    get isExporting() {
        return this._isExporting;
    }
    /**
     * Returns whether the `IgxGridComponent` renders an Excel export button.
     * ```typescript
     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;
     * ```
     */
    get shouldShowExportExcelButton() {
        return (this.grid != null && this.grid.exportExcel);
    }
    /**
     * Returns whether the `IgxGridComponent` renders an CSV export button.
     * ```typescript
     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;
     * ```
     */
    get shouldShowExportCsvButton() {
        return (this.grid != null && this.grid.exportCsv);
    }
    /**
     * Returns how many columns are pinned.
     * ```typescript
     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;
     * ```
     */
    get pinnedColumnsCount() {
        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;
    }
    /**
     * Returns the theme of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarTheme = this.grid.toolbar.hostClass;
     * ```
     */
    get hostClass() {
        const classes = [this.getComponentDensityClass('igx-grid-toolbar')];
        // The custom classes should be at the end.
        classes.push(this.class);
        return classes.join(' ');
        return this.getComponentDensityClass('igx-grid-toolbar');
    }
    /**
     * Returns the title of `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();
     * ```
     */
    getTitle() {
        return this.grid != null ? this.grid.toolbarTitle : '';
    }
    /**
     * Returns the text of the export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();
     * ```
     */
    getExportText() {
        return this.grid != null ? this.grid.exportText : '';
    }
    /**
     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();
     * ```
     */
    getExportExcelText() {
        return this.grid != null ? this.grid.exportExcelText : '';
    }
    /**
     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();
     * ```
     */
    getExportCsvText() {
        return this.grid != null ? this.grid.exportCsvText : '';
    }
    /**
     * Toggles the export button's dropdown menu.
     * ```typescript
     * this.igxGrid1.toolbar.exportClicked();
     * ```
     */
    exportClicked() {
        this._overlaySettings.target = this.exportButton.nativeElement;
        this._overlaySettings.excludeFromOutsideClick = [this.exportButton.nativeElement];
        this._overlaySettings.outlet = this.grid.outlet;
        this.exportDropdown.toggle(this._overlaySettings);
    }
    /**
     * Exports the grid to excel.
     * ```typescript
     * this.igxGrid1.toolbar.exportToExcelClicked();
     * ```
     */
    exportToExcelClicked() {
        this.performExport(this.excelExporter, 'excel');
    }
    /**
     * Exports the grid to CSV.
     * ```typescript
     * this.igxGrid1.toolbar.exportToCsvClicked();
     * ```
     */
    exportToCsvClicked() {
        this.performExport(this.csvExporter, 'csv');
    }
    setIsExporting(isExporting) {
        this._isExporting = isExporting;
        this.cdr.detectChanges();
    }
    performExport(exp, exportType) {
        this.exportClicked();
        const fileName = 'ExportedData';
        const options = exportType === 'excel' ?
            new IgxExcelExporterOptions(fileName) :
            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);
        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };
        this.grid.onToolbarExporting.emit(args);
        if (args.cancel) {
            return;
        }
        let exportEnded = false;
        setTimeout(() => {
            if (!exportEnded) {
                this.setIsExporting(true);
            }
        }, 500);
        exp.onExportEnded.pipe(first()).subscribe(() => {
            exportEnded = true;
            this.setIsExporting(false);
        });
        exp.export(this.grid, options);
    }
    /**
     * Toggles the Column Hiding UI.
     * ```typescript
     * this.grid1.toolbar.toggleColumnHidingUI();
     * ```
     */
    toggleColumnHidingUI() {
        this._overlaySettings.target = this.columnHidingButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outlet;
        this.columnHidingDropdown.toggle(this._overlaySettings);
    }
    /**
     * Toggles the Column Pinning UI.
     * ```typescript
     * this.grid1.toolbar.toggleColumnPinningUI();
     * ```
     */
    toggleColumnPinningUI() {
        this._overlaySettings.target = this.columnPinningButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outlet;
        this.columnPinningDropdown.toggle(this._overlaySettings);
    }
    /**
     * @hidden @internal
     */
    showAdvancedFilteringUI() {
        this.grid.openAdvancedFilteringDialog();
    }
    /**
     * Returns the `context` object which represents the `template context` binding into the
     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.
     * ```typescript
     * const context =  this.igxGrid.toolbar.context;
     * ```
     */
    get context() {
        return {
            // $implicit: this
            grid: this.grid,
            toolbar: this
        };
    }
    /** @hidden */
    get customContentTemplate() {
        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {
            return this.grid.toolbarCustomContentTemplate.template;
        }
        else {
            return null;
        }
    }
    /**
     * @hidden
     * @internal
     */
    ngAfterViewInit() {
        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');
        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');
    }
    /**
     * @hidden @internal
     */
    onClosingColumnHiding(args) {
        const activeElem = document.activeElement;
        if (!args.event && activeElem !== this.grid.nativeElement &&
            !this.columnHidingButton.nativeElement.contains(activeElem)) {
            args.cancel = true;
        }
    }
    /**
     * @hidden @internal
     */
    onClosingColumnPinning(args) {
        const activeElem = document.activeElement;
        if (!args.event && activeElem !== this.grid.nativeElement &&
            !this.columnPinningButton.nativeElement.contains(activeElem)) {
            args.cancel = true;
        }
    }
}
IgxGridToolbarComponent.ɵfac = function IgxGridToolbarComponent_Factory(t) { return new (t || IgxGridToolbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IgxExcelExporterService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IgxCsvExporterService, 8), ɵngcc0.ɵɵdirectiveInject(DisplayDensityToken, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.IgxIconService)); };
IgxGridToolbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxGridToolbarComponent, selectors: [["igx-grid-toolbar"]], viewQuery: function IgxGridToolbarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, IgxDropDownComponent);
        ɵngcc0.ɵɵviewQuery(IgxColumnHidingDirective, true, IgxColumnActionsComponent);
        ɵngcc0.ɵɵviewQuery(_c1, true, IgxButtonDirective);
        ɵngcc0.ɵɵviewQuery(_c2, true, IgxDropDownComponent);
        ɵngcc0.ɵɵviewQuery(_c3, true, IgxButtonDirective);
        ɵngcc0.ɵɵviewQuery(_c4, true, IgxDropDownComponent);
        ɵngcc0.ɵɵviewQuery(IgxColumnPinningDirective, true, IgxColumnActionsComponent);
        ɵngcc0.ɵɵviewQuery(_c5, true, IgxButtonDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnHidingDropdown = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnHidingUI = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnHidingButton = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.exportDropdown = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.exportButton = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnPinningDropdown = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnPinningUI = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnPinningButton = _t.first);
    } }, hostVars: 3, hostBindings: function IgxGridToolbarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("class", ctx.hostClass);
        ɵngcc0.ɵɵclassProp("igx-grid-toolbar", ctx.gridID);
    } }, inputs: { class: "class", filterColumnsPrompt: "filterColumnsPrompt", defaultDropDownsMaxHeight: "defaultDropDownsMaxHeight", gridID: "gridID" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 7, consts: [["class", "igx-grid-toolbar__title", 4, "ngIf"], ["class", "igx-grid-toolbar__custom-content", 4, "ngIf"], [1, "igx-grid-toolbar__actions"], [4, "ngIf"], ["class", "igx-grid-toolbar__dropdown", "id", "btnExport", 4, "ngIf"], ["class", "igx-grid-toolbar__progress-bar", 4, "ngIf"], [1, "igx-grid-toolbar__title"], [1, "igx-grid-toolbar__custom-content"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["igxButton", "outlined", "name", "btnAdvancedFiltering", "igxRipple", "", 3, "displayDensity", "ngClass", "click"], ["advancedFilteringButton", ""], [1, "igx-grid-toolbar__button-space"], ["igxButton", "outlined", "name", "btnColumnHiding", "igxRipple", "", 3, "displayDensity", "click"], ["columnHidingButton", ""], [3, "onClosing"], ["columnHidingDropdown", ""], ["igxColumnHiding", "", 3, "grid", "title", "filterColumnsPrompt", "columnsAreaMaxHeight"], ["igxButton", "outlined", "name", "btnColumnPinning", "igxRipple", "", 3, "displayDensity", "click"], ["columnPinningButton", ""], ["fontSet", "imx-icons", "name", "pin-left", 4, "ngIf"], ["fontSet", "imx-icons", "name", "unpin-left", 4, "ngIf"], ["columnPinningDropdown", ""], ["igxColumnPinning", "", 3, "grid", "title", "filterColumnsPrompt", "columnsAreaMaxHeight"], ["fontSet", "imx-icons", "name", "pin-left"], ["fontSet", "imx-icons", "name", "unpin-left"], ["id", "btnExport", 1, "igx-grid-toolbar__dropdown"], ["igxButton", "outlined", "igxRipple", "", 3, "displayDensity", "disabled", "click"], ["btnExport", ""], ["fontSet", "material"], ["exportDropdown", ""], [1, "igx-grid-toolbar__dd-list"], ["class", "igx-grid-toolbar__dd-list-items", "igxRipple", "", "id", "btnExportExcel", 3, "click", 4, "ngIf"], ["class", "igx-grid-toolbar__dd-list-items", "igxRipple", "", "id", "btnExportCsv", 3, "click", 4, "ngIf"], ["igxRipple", "", "id", "btnExportExcel", 1, "igx-grid-toolbar__dd-list-items", 3, "click"], ["igxRipple", "", "id", "btnExportCsv", 1, "igx-grid-toolbar__dd-list-items", 3, "click"], [1, "igx-grid-toolbar__progress-bar"], [3, "indeterminate"]], template: function IgxGridToolbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxGridToolbarComponent_span_0_Template, 2, 1, "span", 0);
        ɵngcc0.ɵɵtemplate(1, IgxGridToolbarComponent_div_1_Template, 2, 2, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, IgxGridToolbarComponent_div_3_Template, 8, 3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, IgxGridToolbarComponent_div_4_Template, 13, 9, "div", 3);
        ɵngcc0.ɵɵtemplate(5, IgxGridToolbarComponent_div_5_Template, 14, 9, "div", 3);
        ɵngcc0.ɵɵtemplate(6, IgxGridToolbarComponent_div_6_Template, 15, 5, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, IgxGridToolbarComponent_div_7_Template, 2, 1, "div", 5);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.getTitle());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customContentTemplate != null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.grid.allowAdvancedFiltering);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.grid.columnHiding);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.grid.columnPinning);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.shouldShowExportButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isExporting);
    } }, directives: [ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet, ɵngcc5.IgxButtonDirective, ɵngcc6.IgxRippleDirective, ɵngcc4.NgClass, ɵngcc7.IgxIconComponent, ɵngcc8.IgxDropDownComponent, ɵngcc9.IgxColumnActionsComponent, ɵngcc10.IgxColumnHidingDirective, ɵngcc11.IgxColumnPinningDirective, ɵngcc12.IgxLinearProgressBarComponent], encapsulation: 2 });
IgxGridToolbarComponent.ctorParameters = () => [
    { type: GridBaseAPIService },
    { type: ChangeDetectorRef },
    { type: IgxExcelExporterService, decorators: [{ type: Optional }] },
    { type: IgxCsvExporterService, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: IgxIconService }
];
IgxGridToolbarComponent.propDecorators = {
    gridID: [{ type: HostBinding, args: ['class.igx-grid-toolbar',] }, { type: Input }],
    filterColumnsPrompt: [{ type: Input }],
    class: [{ type: Input }],
    defaultDropDownsMaxHeight: [{ type: Input }],
    columnHidingDropdown: [{ type: ViewChild, args: ['columnHidingDropdown', { read: IgxDropDownComponent },] }],
    columnHidingUI: [{ type: ViewChild, args: [IgxColumnHidingDirective, { read: IgxColumnActionsComponent },] }],
    columnHidingButton: [{ type: ViewChild, args: ['columnHidingButton', { read: IgxButtonDirective },] }],
    exportDropdown: [{ type: ViewChild, args: ['exportDropdown', { read: IgxDropDownComponent },] }],
    exportButton: [{ type: ViewChild, args: ['btnExport', { read: IgxButtonDirective },] }],
    columnPinningDropdown: [{ type: ViewChild, args: ['columnPinningDropdown', { read: IgxDropDownComponent },] }],
    columnPinningUI: [{ type: ViewChild, args: [IgxColumnPinningDirective, { read: IgxColumnActionsComponent },] }],
    columnPinningButton: [{ type: ViewChild, args: ['columnPinningButton', { read: IgxButtonDirective },] }],
    hostClass: [{ type: HostBinding, args: ['attr.class',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridToolbarComponent, [{
        type: Component,
        args: [{
                selector: 'igx-grid-toolbar',
                template: "<span class=\"igx-grid-toolbar__title\" *ngIf=\"getTitle()\">\n    {{ getTitle() }}\n</span>\n\n<div class=\"igx-grid-toolbar__custom-content\" *ngIf=\"customContentTemplate != null\">\n    <ng-container *ngTemplateOutlet=\"customContentTemplate; context: context\">\n    </ng-container>\n</div>\n\n<div class=\"igx-grid-toolbar__actions\">\n    <div *ngIf=\"grid.allowAdvancedFiltering\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" #advancedFilteringButton name=\"btnAdvancedFiltering\" igxRipple\n            (click)=\"showAdvancedFilteringUI()\"\n                [ngClass]=\"grid.advancedFilteringExpressionsTree ? 'igx-grid-toolbar__adv-filter--filtered' : 'igx-grid-toolbar__adv-filter'\">\n            <div class=\"igx-grid-toolbar__button-space\">\n                <igx-icon>\n                    filter_list\n                </igx-icon>\n                <span>{{grid.resourceStrings.igx_grid_advanced_filter_title}}</span>\n            </div>\n        </button>\n    </div>\n\n    <div *ngIf=\"grid.columnHiding\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" #columnHidingButton name=\"btnColumnHiding\" igxRipple\n            (click)=\"toggleColumnHidingUI()\">\n            <div class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount > 0\">visibility_off</igx-icon>\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount === 0\">visibility</igx-icon>\n                <span>{{ grid.hiddenColumnsCount }}</span>\n                <span>{{ grid.hiddenColumnsText }}</span>\n            </div>\n        </button>\n        <igx-drop-down #columnHidingDropdown (onClosing)=\"onClosingColumnHiding($event)\">\n            <igx-column-actions\n                igxColumnHiding\n                [grid]=\"grid\"\n                [title]=\"grid.columnHidingTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\">\n            </igx-column-actions>\n        </igx-drop-down>\n    </div>\n\n    <div *ngIf=\"grid.columnPinning\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" #columnPinningButton name=\"btnColumnPinning\" igxRipple\n            (click)=\"toggleColumnPinningUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"pinnedColumnsCount > 0\" fontSet=\"imx-icons\" name=\"pin-left\"></igx-icon>\n                <igx-icon *ngIf=\"pinnedColumnsCount === 0\" fontSet=\"imx-icons\" name=\"unpin-left\"></igx-icon>\n                <span>{{ pinnedColumnsCount }}</span>\n                <span>{{ grid.pinnedColumnsText }}</span>\n                <span></span>\n            </div>\n        </button>\n        <igx-drop-down #columnPinningDropdown (onClosing)=\"onClosingColumnPinning($event)\">\n            <igx-column-actions\n                igxColumnPinning\n                [grid]=\"grid\"\n                [title]=\"grid.columnPinningTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\">\n            </igx-column-actions>\n        </igx-drop-down>\n    </div>\n\n    <div class=\"igx-grid-toolbar__dropdown\" *ngIf=\"shouldShowExportButton\" id=\"btnExport\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" igxRipple #btnExport\n                (click)=\"exportClicked()\" [disabled]=\"isExporting\">\n            <span class=\"igx-grid-toolbar__button-space\">\n                <igx-icon fontSet=\"material\">import_export</igx-icon>\n                <span>{{ getExportText() }}</span>\n                <igx-icon fontSet=\"material\">arrow_drop_down</igx-icon>\n            </span>\n        </button>\n\n        <igx-drop-down #exportDropdown>\n            <ul class=\"igx-grid-toolbar__dd-list\">\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportExcelButton\" id=\"btnExportExcel\"\n                (click)=\"exportToExcelClicked()\">{{ getExportExcelText() }}</li>\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportCsvButton\" id=\"btnExportCsv\"\n                (click)=\"exportToCsvClicked()\">{{ getExportCsvText() }}</li>\n            </ul>\n        </igx-drop-down>\n    </div>\n</div>\n\n<div class=\"igx-grid-toolbar__progress-bar\" *ngIf=\"isExporting\">\n    <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.IgxExcelExporterService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.IgxCsvExporterService, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DisplayDensityToken]
            }] }, { type: ɵngcc3.IgxIconService }]; }, { class: [{
            type: Input
        }], filterColumnsPrompt: [{
            type: Input
        }], defaultDropDownsMaxHeight: [{
            type: Input
        }], hostClass: [{
            type: HostBinding,
            args: ['attr.class']
        }], gridID: [{
            type: HostBinding,
            args: ['class.igx-grid-toolbar']
        }, {
            type: Input
        }], columnHidingDropdown: [{
            type: ViewChild,
            args: ['columnHidingDropdown', { read: IgxDropDownComponent }]
        }], columnHidingUI: [{
            type: ViewChild,
            args: [IgxColumnHidingDirective, { read: IgxColumnActionsComponent }]
        }], columnHidingButton: [{
            type: ViewChild,
            args: ['columnHidingButton', { read: IgxButtonDirective }]
        }], exportDropdown: [{
            type: ViewChild,
            args: ['exportDropdown', { read: IgxDropDownComponent }]
        }], exportButton: [{
            type: ViewChild,
            args: ['btnExport', { read: IgxButtonDirective }]
        }], columnPinningDropdown: [{
            type: ViewChild,
            args: ['columnPinningDropdown', { read: IgxDropDownComponent }]
        }], columnPinningUI: [{
            type: ViewChild,
            args: [IgxColumnPinningDirective, { read: IgxColumnActionsComponent }]
        }], columnPinningButton: [{
            type: ViewChild,
            args: ['columnPinningButton', { read: IgxButtonDirective }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,