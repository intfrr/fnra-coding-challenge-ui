import { Component, ViewChild, HostBinding, ChangeDetectorRef } from '@angular/core';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';
/**
 * A component used for presenting Excel style column sorting UI.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './grid.excel-style-filtering.component';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../../../buttonGroup/buttonGroup.component';
import * as ɵngcc4 from '../../../directives/button/button.directive';
import * as ɵngcc5 from '../../../icon/icon.component';

const _c0 = ["sortButtonGroup"];
function IgxExcelStyleSortingComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "header");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "igx-buttongroup", 1, 2);
    ɵngcc0.ɵɵelementStart(5, "button", 3);
    ɵngcc0.ɵɵlistener("click", function IgxExcelStyleSortingComponent_ng_container_0_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onSortButtonClicked(1); });
    ɵngcc0.ɵɵelementStart(6, "igx-icon");
    ɵngcc0.ɵɵtext(7, "arrow_upwards");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "span");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "button", 3);
    ɵngcc0.ɵɵlistener("click", function IgxExcelStyleSortingComponent_ng_container_0_Template_button_click_10_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onSortButtonClicked(2); });
    ɵngcc0.ɵɵelementStart(11, "igx-icon");
    ɵngcc0.ɵɵtext(12, "arrow_downwards");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "span");
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.esf.grid.resourceStrings.igx_grid_excel_filter_sorting_header, "\n");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("multiSelection", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r0.esf.grid.displayDensity);
    ɵngcc0.ɵɵattribute("data-togglable", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.esf.grid.displayDensity === "compact" ? ctx_r0.esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc_short : ctx_r0.esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r0.esf.grid.displayDensity);
    ɵngcc0.ɵɵattribute("data-togglable", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.esf.grid.displayDensity === "compact" ? ctx_r0.esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc_short : ctx_r0.esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc, " ");
} }
export class IgxExcelStyleSortingComponent {
    constructor(esf, cdr) {
        this.esf = esf;
        this.cdr = cdr;
        this.destroy$ = new Subject();
        /**
         * @hidden @internal
         */
        this.class = 'igx-excel-filter__sort';
        this.esf.sortingChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.updateSelectedButtons(this.esf.column.field);
        });
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    updateSelectedButtons(fieldName) {
        const sortIndex = this.esf.grid.sortingExpressions.findIndex(s => s.fieldName === fieldName);
        this.cdr.detectChanges();
        this.sortButtonGroup.buttons.forEach((b, i) => {
            this.sortButtonGroup.deselectButton(i);
        });
        if (sortIndex !== -1) {
            const sortDirection = this.esf.grid.sortingExpressions[sortIndex].dir;
            this.sortButtonGroup.selectButton(sortDirection - 1);
        }
    }
    /**
     * @hidden @internal
     */
    onSortButtonClicked(sortDirection) {
        if (this.sortButtonGroup.selectedIndexes.length === 0) {
            if (this.esf.grid.isColumnGrouped(this.esf.column.field)) {
                this.sortButtonGroup.selectButton(sortDirection - 1);
            }
            else {
                this.esf.grid.clearSort(this.esf.column.field);
            }
        }
        else {
            this.esf.grid.sort({ fieldName: this.esf.column.field, dir: sortDirection, ignoreCase: true });
        }
    }
}
IgxExcelStyleSortingComponent.ɵfac = function IgxExcelStyleSortingComponent_Factory(t) { return new (t || IgxExcelStyleSortingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxGridExcelStyleFilteringComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxExcelStyleSortingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxExcelStyleSortingComponent, selectors: [["igx-excel-style-sorting"]], viewQuery: function IgxExcelStyleSortingComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, IgxButtonGroupComponent);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sortButtonGroup = _t.first);
    } }, hostVars: 2, hostBindings: function IgxExcelStyleSortingComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.class);
    } }, decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "multiSelection"], ["sortButtonGroup", ""], ["igxButton", "", 3, "displayDensity", "click"]], template: function IgxExcelStyleSortingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxExcelStyleSortingComponent_ng_container_0_Template, 15, 8, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.esf.column);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.IgxButtonGroupComponent, ɵngcc4.IgxButtonDirective, ɵngcc5.IgxIconComponent], encapsulation: 2 });
IgxExcelStyleSortingComponent.ctorParameters = () => [
    { type: IgxGridExcelStyleFilteringComponent },
    { type: ChangeDetectorRef }
];
IgxExcelStyleSortingComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    sortButtonGroup: [{ type: ViewChild, args: ['sortButtonGroup', { read: IgxButtonGroupComponent },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxExcelStyleSortingComponent, [{
        type: Component,
        args: [{
                preserveWhitespaces: false,
                selector: 'igx-excel-style-sorting',
                template: "<ng-container *ngIf=\"esf.column\">\n<header>\n    {{ esf.grid.resourceStrings.igx_grid_excel_filter_sorting_header }}\n</header>\n<igx-buttongroup #sortButtonGroup [multiSelection]=\"false\">\n    <button igxButton\n        [displayDensity]=\"esf.grid.displayDensity\"\n        [attr.data-togglable]=\"true\"\n        (click)=\"onSortButtonClicked(1)\"\n        >\n        <igx-icon>arrow_upwards</igx-icon>\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc  }}\n        </span>\n    </button>\n\n    <button igxButton\n        [displayDensity]=\"esf.grid.displayDensity\"\n        [attr.data-togglable]=\"true\"\n        (click)=\"onSortButtonClicked(2)\"\n        >\n        <igx-icon>arrow_downwards</igx-icon>\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc\n        }}\n        </span>\n    </button>\n</igx-buttongroup>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc1.IgxGridExcelStyleFilteringComponent }, { type: ɵngcc0.ChangeDetectorRef }]; }, { class: [{
            type: HostBinding,
            args: ['class']
        }], sortButtonGroup: [{
            type: ViewChild,
            args: ['sortButtonGroup', { read: IgxButtonGroupComponent }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtc29ydGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9maWx0ZXJpbmcvZXhjZWwtc3R5bGUvZXhjZWwtc3R5bGUtc29ydGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxTQUFTLEVBRVQsV0FBVyxFQUNYLGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUU3RjtBQUNBO0FBQ0EsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNSCxNQUFNLE9BQU8sNkJBQTZCO0FBQUcsSUFjekMsWUFBbUIsR0FBd0MsRUFBVSxHQUFzQjtBQUMvRixRQUR1QixRQUFHLEdBQUgsR0FBRyxDQUFxQztBQUFDLFFBQVMsUUFBRyxHQUFILEdBQUcsQ0FBbUI7QUFBQyxRQWJwRixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztBQUM5QyxRQUNJO0FBQ0o7QUFDSSxXQUFHO0FBQ1AsUUFBMEIsVUFBSyxHQUFHLHdCQUF3QixDQUFDO0FBQzNELFFBUVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQzlFLFlBQVksSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlELFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFLLENBQUM7QUFDTixJQUNJLFdBQVc7QUFBSyxRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNqQyxJQUFJLENBQUM7QUFDTCxJQUNZLHFCQUFxQixDQUFDLFNBQWlCO0FBQ25ELFFBQVEsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQztBQUNyRyxRQUNRLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDakMsUUFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEQsWUFBWSxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRCxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsUUFDUSxJQUFJLFNBQVMsS0FBSyxDQUFDLENBQUMsRUFBRztBQUMvQixZQUFZLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNsRixZQUFZLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNqRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsbUJBQW1CLENBQUMsYUFBYTtBQUM1QyxRQUFRLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvRCxZQUFZLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3RFLGdCQUFnQixJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDckUsYUFBYTtBQUFDLGlCQUFLO0FBQ25CLGdCQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0QsYUFBYTtBQUNiLFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDM0csU0FBUztBQUNULElBQUksQ0FBQztBQUNMO3lEQTFEQyxTQUFTLFNBQUMsa0JBQ1AsbUJBQW1CLEVBQUUsS0FBSyxrQkFDMUIsUUFBUSxFQUFFLHlCQUF5QixrQkFDbkM7Ozs7Ozs7Ozs7Ozs0SUFFQztLQUZrRCxjQUN0RCxuQkFDSztBQUF1RCxZQVZwRCxtQ0FBbUM7QUFBSSxZQUw1QyxpQkFBaUI7QUFDbkI7QUFBRztBQUN5QixvQkFtQnpCLFdBQVcsU0FBQyxPQUFPO0FBQU8sOEJBSzFCLFNBQVMsU0FBQyxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSx1QkFBdUIsRUFBRTtBQUMvRDs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIFZpZXdDaGlsZCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hCdXR0b25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2J1dHRvbkdyb3VwL2J1dHRvbkdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJZ3hHcmlkRXhjZWxTdHlsZUZpbHRlcmluZ0NvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC5leGNlbC1zdHlsZS1maWx0ZXJpbmcuY29tcG9uZW50JztcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB1c2VkIGZvciBwcmVzZW50aW5nIEV4Y2VsIHN0eWxlIGNvbHVtbiBzb3J0aW5nIFVJLlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogJ2lneC1leGNlbC1zdHlsZS1zb3J0aW5nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXhjZWwtc3R5bGUtc29ydGluZy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhjZWxTdHlsZVNvcnRpbmdDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xhc3MgPSAnaWd4LWV4Y2VsLWZpbHRlcl9fc29ydCc7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGQoJ3NvcnRCdXR0b25Hcm91cCcsIHsgcmVhZDogSWd4QnV0dG9uR3JvdXBDb21wb25lbnQgfSlcbiAgICBwdWJsaWMgc29ydEJ1dHRvbkdyb3VwOiBJZ3hCdXR0b25Hcm91cENvbXBvbmVudDtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlc2Y6IElneEdyaWRFeGNlbFN0eWxlRmlsdGVyaW5nQ29tcG9uZW50LCBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICAgICAgdGhpcy5lc2Yuc29ydGluZ0NoYW5nZWQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkQnV0dG9ucyh0aGlzLmVzZi5jb2x1bW4uZmllbGQpO1xuICAgICAgICB9KTtcbiAgICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU2VsZWN0ZWRCdXR0b25zKGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHNvcnRJbmRleCA9IHRoaXMuZXNmLmdyaWQuc29ydGluZ0V4cHJlc3Npb25zLmZpbmRJbmRleChzID0+IHMuZmllbGROYW1lID09PSBmaWVsZE5hbWUpO1xuXG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgdGhpcy5zb3J0QnV0dG9uR3JvdXAuYnV0dG9ucy5mb3JFYWNoKChiLCBpKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvcnRCdXR0b25Hcm91cC5kZXNlbGVjdEJ1dHRvbihpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNvcnRJbmRleCAhPT0gLTEgKSB7XG4gICAgICAgICAgICBjb25zdCBzb3J0RGlyZWN0aW9uID0gdGhpcy5lc2YuZ3JpZC5zb3J0aW5nRXhwcmVzc2lvbnNbc29ydEluZGV4XS5kaXI7XG4gICAgICAgICAgICB0aGlzLnNvcnRCdXR0b25Hcm91cC5zZWxlY3RCdXR0b24oc29ydERpcmVjdGlvbiAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgb25Tb3J0QnV0dG9uQ2xpY2tlZChzb3J0RGlyZWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLnNvcnRCdXR0b25Hcm91cC5zZWxlY3RlZEluZGV4ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lc2YuZ3JpZC5pc0NvbHVtbkdyb3VwZWQodGhpcy5lc2YuY29sdW1uLmZpZWxkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ydEJ1dHRvbkdyb3VwLnNlbGVjdEJ1dHRvbihzb3J0RGlyZWN0aW9uIC0gMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZXNmLmdyaWQuY2xlYXJTb3J0KHRoaXMuZXNmLmNvbHVtbi5maWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVzZi5ncmlkLnNvcnQoeyBmaWVsZE5hbWU6IHRoaXMuZXNmLmNvbHVtbi5maWVsZCwgZGlyOiBzb3J0RGlyZWN0aW9uLCBpZ25vcmVDYXNlOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19