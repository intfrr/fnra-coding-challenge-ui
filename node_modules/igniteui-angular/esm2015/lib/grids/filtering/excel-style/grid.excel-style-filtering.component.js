import { ChangeDetectorRef, Component, ViewChild, HostBinding, ChangeDetectionStrategy, TemplateRef, Directive, ElementRef, Input, ContentChild, Output, EventEmitter, Optional, Host, } from '@angular/core';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { cloneArray, resolveNestedPath, parseDate, uniqueDates } from '../../../core/utils';
import { DataType, DataUtil } from '../../../data-operations/data-util';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensity } from '../../../core/density';
import { GridSelectionMode } from '../../common/enums';
import { GridBaseAPIService } from '../../api.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../api.service';

const _c0 = ["defaultExcelColumnOperations"];
const _c1 = ["defaultExcelFilterOperations"];
const _c2 = ["mainDropdown"];
function IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_sorting_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-excel-style-sorting");
} }
function IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_moving_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-excel-style-moving");
} }
function IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_pinning_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-excel-style-pinning");
} }
function IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_hiding_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-excel-style-hiding");
} }
function IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_selecting_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-excel-style-selecting");
} }
function IgxGridExcelStyleFilteringComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-excel-style-header", 5);
    ɵngcc0.ɵɵtemplate(1, IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_sorting_1_Template, 1, 0, "igx-excel-style-sorting", 6);
    ɵngcc0.ɵɵtemplate(2, IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_moving_2_Template, 1, 0, "igx-excel-style-moving", 6);
    ɵngcc0.ɵɵtemplate(3, IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_pinning_3_Template, 1, 0, "igx-excel-style-pinning", 6);
    ɵngcc0.ɵɵtemplate(4, IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_hiding_4_Template, 1, 0, "igx-excel-style-hiding", 6);
    ɵngcc0.ɵɵtemplate(5, IgxGridExcelStyleFilteringComponent_ng_template_0_igx_excel_style_selecting_5_Template, 1, 0, "igx-excel-style-selecting", 6);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("showHiding", ctx_r1.displayDensity !== "comfortable" && !(ctx_r1.column == null ? null : ctx_r1.column.disableHiding))("showPinning", ctx_r1.displayDensity !== "comfortable" && !(ctx_r1.column == null ? null : ctx_r1.column.disablePinning))("showSelecting", ctx_r1.displayDensity !== "comfortable" && ctx_r1.columnSelectable());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.column == null ? null : ctx_r1.column.sortable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.column == null ? null : ctx_r1.column.movable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r1.column == null ? null : ctx_r1.column.disablePinning) && ctx_r1.displayDensity === "comfortable");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r1.column == null ? null : ctx_r1.column.disableHiding) && ctx_r1.displayDensity === "comfortable");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.columnSelectable() && ctx_r1.displayDensity === "comfortable");
} }
function IgxGridExcelStyleFilteringComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-excel-style-clear-filters");
    ɵngcc0.ɵɵelement(1, "igx-excel-style-conditional-filter");
    ɵngcc0.ɵɵelement(2, "igx-excel-style-search");
} }
function IgxGridExcelStyleFilteringComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function IgxGridExcelStyleFilteringComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵprojection(1, 1);
    ɵngcc0.ɵɵelementContainerEnd();
} }
const _c3 = [[["igx-excel-style-column-operations"], ["", "igxExcelStyleColumnOperations", ""]], [["igx-excel-style-filter-operations"], ["", "igxExcelStyleFilterOperations", ""]]];
const _c4 = function (a0, a1) { return { "igx-excel-filter__menu--cosy": a0, "igx-excel-filter__menu--compact": a1 }; };
const _c5 = ["igx-excel-style-column-operations,[igxExcelStyleColumnOperations]", "igx-excel-style-filter-operations,[igxExcelStyleFilterOperations]"];
export class FilterListItem {
    constructor() {
        this.isSpecial = false;
        this.isBlanks = false;
    }
}
export class IgxExcelStyleColumnOperationsTemplateDirective {
    constructor() { }
}
IgxExcelStyleColumnOperationsTemplateDirective.ɵfac = function IgxExcelStyleColumnOperationsTemplateDirective_Factory(t) { return new (t || IgxExcelStyleColumnOperationsTemplateDirective)(); };
IgxExcelStyleColumnOperationsTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxExcelStyleColumnOperationsTemplateDirective, selectors: [["igx-excel-style-column-operations"], ["", "igxExcelStyleColumnOperations", ""]] });
IgxExcelStyleColumnOperationsTemplateDirective.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxExcelStyleColumnOperationsTemplateDirective, [{
        type: Directive,
        args: [{
                selector: 'igx-excel-style-column-operations,[igxExcelStyleColumnOperations]'
            }]
    }], function () { return []; }, null); })();
export class IgxExcelStyleFilterOperationsTemplateDirective {
    constructor() { }
}
IgxExcelStyleFilterOperationsTemplateDirective.ɵfac = function IgxExcelStyleFilterOperationsTemplateDirective_Factory(t) { return new (t || IgxExcelStyleFilterOperationsTemplateDirective)(); };
IgxExcelStyleFilterOperationsTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxExcelStyleFilterOperationsTemplateDirective, selectors: [["igx-excel-style-filter-operations"], ["", "igxExcelStyleFilterOperations", ""]] });
IgxExcelStyleFilterOperationsTemplateDirective.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxExcelStyleFilterOperationsTemplateDirective, [{
        type: Directive,
        args: [{
                selector: 'igx-excel-style-filter-operations,[igxExcelStyleFilterOperations]'
            }]
    }], function () { return []; }, null); })();
/**
 * A component used for presenting Excel style filtering UI for a specific column.
 * It is used internally in the Grid, but could also be hosted in a container outside of it.
 *
 * Example:
 * ```html
 * <igx-grid-excel-style-filtering
 *     [column]="grid1.columns[0]">
 * </igx-grid-excel-style-filtering>
 * ```
 */
export class IgxGridExcelStyleFilteringComponent {
    constructor(cdr, element, gridAPI) {
        this.cdr = cdr;
        this.element = element;
        this.gridAPI = gridAPI;
        this.destroy$ = new Subject();
        this.containsNullOrEmpty = false;
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.filterValues = new Set();
        /**
         * @hidden @internal
         */
        this.expressionsList = new Array();
        /**
         * @hidden @internal
         */
        this.listData = new Array();
        /**
         * @hidden @internal
         */
        this.uniqueValues = [];
        /**
         * @hidden @internal
         */
        this.className = 'igx-excel-filter';
        /**
         * @hidden @internal
         */
        this.inline = true;
        /**
         * @hidden @internal
         */
        this.loadingStart = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.loadingEnd = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.initialized = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.sortingChanged = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.columnChange = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.listDataLoaded = new EventEmitter();
    }
    /**
     * An @Input property that sets the column.
     */
    set column(value) {
        this._column = value;
        this.listData = new Array();
        this.columnChange.emit(this._column);
        if (this._columnPinning) {
            this._columnPinning.unsubscribe();
        }
        if (this._columnVisibilityChanged) {
            this._columnVisibilityChanged.unsubscribe();
        }
        if (this._sortingChanged) {
            this._sortingChanged.unsubscribe();
        }
        if (this._filteringChanged) {
            this._filteringChanged.unsubscribe();
        }
        if (this._densityChanged) {
            this._densityChanged.unsubscribe();
        }
        if (this._columnMoved) {
            this._columnMoved.unsubscribe();
        }
        if (this._column) {
            this._column.grid.filteringService.registerSVGIcons();
            this.init();
            this.sortingChanged.emit();
            this._columnPinning = this.grid.onColumnPinning.pipe(takeUntil(this.destroy$)).subscribe(() => {
                requestAnimationFrame(() => {
                    if (!this.cdr.destroyed) {
                        this.cdr.detectChanges();
                    }
                });
            });
            this._columnVisibilityChanged = this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.cdr.detectChanges();
            });
            this._sortingChanged = this.grid.sortingExpressionsChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.sortingChanged.emit();
            });
            this._filteringChanged = this.grid.filteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.init();
            });
            this._densityChanged = this.grid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.cdr.detectChanges();
            });
            this._columnMoved = this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.cdr.detectChanges();
            });
        }
    }
    /**
     * Returns the current column.
     */
    get column() {
        return this._column;
    }
    /**
     * @hidden @internal
     */
    get filteringService() {
        return this.grid.filteringService;
    }
    /**
     * Gets the minimum height.
     */
    get minHeight() {
        if (this._minHeight || this._minHeight === 0) {
            return this._minHeight;
        }
        if (!this.inline) {
            let minHeight = 645;
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    minHeight = 465;
                    break;
                case DisplayDensity.compact:
                    minHeight = 330;
                    break;
                default: break;
            }
            return `${minHeight}px`;
        }
    }
    /**
     * Sets the minimum height.
     */
    set minHeight(value) {
        this._minHeight = value;
    }
    /**
     * Gets the maximum height.
     */
    get maxHeight() {
        if (this._maxHeight) {
            return this._maxHeight;
        }
        if (!this.inline) {
            let maxHeight = 775;
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    maxHeight = 565;
                    break;
                case DisplayDensity.compact:
                    maxHeight = 405;
                    break;
                default: break;
            }
            return `${maxHeight}px`;
        }
    }
    /**
     * Sets the maximum height.
     */
    set maxHeight(value) {
        this._maxHeight = value;
    }
    /**
     * @hidden @internal
     */
    get grid() {
        var _a, _b, _c;
        return (_b = (_a = this.gridAPI) === null || _a === void 0 ? void 0 : _a.grid) !== null && _b !== void 0 ? _b : (_c = this.column) === null || _c === void 0 ? void 0 : _c.grid;
    }
    /**
     * @hidden @internal
     */
    get displayDensity() {
        var _a;
        return (_a = this.grid) === null || _a === void 0 ? void 0 : _a.displayDensity;
    }
    /**
     * @hidden @internal
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    init() {
        this.expressionsList = new Array();
        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);
        this.populateColumnData();
    }
    /**
     * @hidden @internal
     */
    selectedClass() {
        return this.column.selected ? 'igx-excel-filter__actions-selected' : 'igx-excel-filter__actions-select';
    }
    /**
     * @hidden @internal
     */
    initialize(column, overlayService, overlayComponentId) {
        this.inline = false;
        this.column = column;
        this.overlayService = overlayService;
        this.overlayComponentId = overlayComponentId;
        if (this._originalDisplay) {
            this.element.nativeElement.style.display = this._originalDisplay;
        }
        this.initialized.emit();
        this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.closeDropdown();
        });
    }
    /**
     * @hidden @internal
     */
    onPin() {
        this.column.pinned = !this.column.pinned;
        this.closeDropdown();
    }
    /**
     * @hidden @internal
     */
    onSelect() {
        if (!this.column.selected) {
            this.grid.selectionService.selectColumn(this.column.field, this.grid.columnSelection === GridSelectionMode.single);
        }
        else {
            this.grid.selectionService.deselectColumn(this.column.field);
        }
        this.grid.notifyChanges();
    }
    /**
     * @hidden @internal
     */
    columnSelectable() {
        var _a, _b;
        return ((_a = this.grid) === null || _a === void 0 ? void 0 : _a.columnSelection) !== GridSelectionMode.none && ((_b = this.column) === null || _b === void 0 ? void 0 : _b.selectable);
    }
    /**
     * @hidden @internal
     */
    onHideToggle() {
        this.column.hidden = !this.column.hidden;
        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: this.column.hidden });
        this.closeDropdown();
    }
    areExpressionsSelectable() {
        if (this.expressionsList.length === 1 &&
            (this.expressionsList[0].expression.condition.name === 'equals' ||
                this.expressionsList[0].expression.condition.name === 'true' ||
                this.expressionsList[0].expression.condition.name === 'false' ||
                this.expressionsList[0].expression.condition.name === 'empty' ||
                this.expressionsList[0].expression.condition.name === 'in')) {
            return true;
        }
        const selectableExpressionsCount = this.expressionsList.filter(exp => (exp.beforeOperator === 1 || exp.afterOperator === 1) &&
            (exp.expression.condition.name === 'equals' ||
                exp.expression.condition.name === 'true' ||
                exp.expression.condition.name === 'false' ||
                exp.expression.condition.name === 'empty' ||
                exp.expression.condition.name === 'in')).length;
        return selectableExpressionsCount === this.expressionsList.length;
    }
    areExpressionsValuesInTheList() {
        if (this.column.dataType === DataType.Boolean) {
            return true;
        }
        if (this.filterValues.size === 1) {
            const firstValue = this.filterValues.values().next().value;
            if (!firstValue && firstValue !== 0) {
                return true;
            }
        }
        for (let index = 0; index < this.uniqueValues.length; index++) {
            const value = this.column.dataType === DataType.Date ? this.uniqueValues[index].label : this.uniqueValues[index];
            if (this.filterValues.has(value)) {
                return true;
            }
        }
        return false;
    }
    populateColumnData() {
        if (this.grid.uniqueColumnValuesStrategy) {
            this.cdr.detectChanges();
            this.renderColumnValuesRemotely();
        }
        else {
            this.renderColumnValuesFromData();
        }
    }
    renderColumnValuesRemotely() {
        this.loadingStart.emit();
        const expressionsTree = this.getColumnFilterExpressionsTree();
        const prevColumn = this.column;
        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals) => {
            if (!this.column || this.column !== prevColumn) {
                return;
            }
            const columnValues = (this.column.dataType === DataType.Date) ?
                colVals.map(value => {
                    const label = this.getFilterItemLabel(value);
                    return { label, value };
                }) : colVals;
            this.renderValues(columnValues);
            this.loadingEnd.emit();
        });
    }
    renderColumnValuesFromData() {
        let data = this.column.gridAPI.get_all_data(this.grid.id);
        const expressionsTree = this.getColumnFilterExpressionsTree();
        if (expressionsTree.filteringOperands.length) {
            const state = { expressionsTree: expressionsTree };
            data = DataUtil.filter(cloneArray(data), state, this.grid);
        }
        const columnField = this.column.field;
        const columnValues = (this.column.dataType === DataType.Date) ?
            data.map(record => {
                const value = (resolveNestedPath(record, columnField));
                const label = this.getFilterItemLabel(value);
                return { label, value };
            }) : data.map(record => resolveNestedPath(record, columnField));
        this.renderValues(columnValues);
    }
    renderValues(columnValues) {
        this.generateUniqueValues(columnValues);
        this.generateFilterValues(this.column.dataType === DataType.Date);
        this.generateListData();
    }
    generateUniqueValues(columnValues) {
        if (this.column.dataType === DataType.String && this.column.filteringIgnoreCase) {
            const filteredUniqueValues = columnValues.map(s => s === null || s === void 0 ? void 0 : s.toString().toLowerCase())
                .reduce((map, val, i) => map.get(val) ? map : map.set(val, columnValues[i]), new Map);
            this.uniqueValues = Array.from(filteredUniqueValues.values());
        }
        else {
            this.uniqueValues = this.column.dataType === DataType.Date ? uniqueDates(columnValues) : Array.from(new Set(columnValues));
        }
    }
    generateFilterValues(isDateColumn = false) {
        if (isDateColumn) {
            this.filterValues = new Set(this.expressionsList.reduce((arr, e) => {
                if (e.expression.condition.name === 'in') {
                    return [...arr, ...Array.from(e.expression.searchVal.values()).map(v => this.getFilterItemLabel(v))];
                }
                return [...arr, ...[e.expression.searchVal ? this.getFilterItemLabel(e.expression.searchVal) : e.expression.searchVal]];
            }, []));
        }
        else {
            this.filterValues = new Set(this.expressionsList.reduce((arr, e) => {
                if (e.expression.condition.name === 'in') {
                    return [...arr, ...Array.from(e.expression.searchVal.values())];
                }
                return [...arr, ...[e.expression.searchVal]];
            }, []));
        }
    }
    generateListData() {
        this.listData = new Array();
        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();
        if (this.column.dataType === DataType.Boolean) {
            this.addBooleanItems();
        }
        else {
            this.addItems(shouldUpdateSelection);
        }
        this.listData.sort((a, b) => this.sortData(a, b));
        if (this.containsNullOrEmpty) {
            this.addBlanksItem(shouldUpdateSelection);
        }
        if (this.listData.length > 0) {
            this.addSelectAllItem();
        }
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
        this.listDataLoaded.emit();
    }
    getColumnFilterExpressionsTree() {
        const gridExpressionsTree = this.grid.filteringExpressionsTree;
        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);
        for (const operand of gridExpressionsTree.filteringOperands) {
            if (operand instanceof FilteringExpressionsTree) {
                const columnExprTree = operand;
                if (columnExprTree.fieldName === this.column.field) {
                    break;
                }
            }
            expressionsTree.filteringOperands.push(operand);
        }
        return expressionsTree;
    }
    addBooleanItems() {
        this.selectAllSelected = true;
        this.selectAllIndeterminate = false;
        this.uniqueValues.forEach(element => {
            const filterListItem = new FilterListItem();
            if (element !== undefined && element !== null && element !== '') {
                if (this.column.filteringExpressionsTree) {
                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true')) {
                        filterListItem.isSelected = true;
                        filterListItem.isFiltered = true;
                        this.selectAllIndeterminate = true;
                    }
                    else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false')) {
                        filterListItem.isSelected = true;
                        filterListItem.isFiltered = true;
                        this.selectAllIndeterminate = true;
                    }
                    else {
                        filterListItem.isSelected = false;
                        filterListItem.isFiltered = false;
                    }
                }
                else {
                    filterListItem.isSelected = true;
                    filterListItem.isFiltered = true;
                }
                filterListItem.value = element;
                filterListItem.label = element;
                filterListItem.indeterminate = false;
                this.listData.push(filterListItem);
            }
            else {
                this.containsNullOrEmpty = true;
            }
        });
    }
    addItems(shouldUpdateSelection) {
        this.selectAllSelected = true;
        this.containsNullOrEmpty = false;
        this.selectAllIndeterminate = false;
        this.uniqueValues.forEach(element => {
            const hasValue = (element !== undefined && element !== null && element !== '' && this.column.dataType !== DataType.Date)
                || !!(element && element.label);
            if (hasValue) {
                const filterListItem = new FilterListItem();
                filterListItem.isSelected = true;
                filterListItem.isFiltered = true;
                if (this.column.filteringExpressionsTree) {
                    filterListItem.isSelected = false;
                    filterListItem.isFiltered = false;
                    if (shouldUpdateSelection) {
                        if (this.filterValues.has(element.label || element)) {
                            filterListItem.isSelected = true;
                            filterListItem.isFiltered = true;
                        }
                        this.selectAllIndeterminate = true;
                    }
                    else {
                        this.selectAllSelected = false;
                    }
                }
                filterListItem.value = this.getFilterItemValue(element);
                filterListItem.label = this.getFilterItemLabel(element);
                filterListItem.indeterminate = false;
                this.listData.push(filterListItem);
            }
        });
        this.containsNullOrEmpty = this.uniqueValues.length > this.listData.length;
    }
    addSelectAllItem() {
        const selectAll = new FilterListItem();
        selectAll.isSelected = this.selectAllSelected;
        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;
        selectAll.indeterminate = this.selectAllIndeterminate;
        selectAll.isSpecial = true;
        selectAll.isFiltered = this.selectAllSelected;
        this.listData.unshift(selectAll);
    }
    addBlanksItem(shouldUpdateSelection) {
        const blanks = new FilterListItem();
        if (this.column.filteringExpressionsTree) {
            if (shouldUpdateSelection) {
                if (this.filterValues.has(null)) {
                    blanks.isSelected = true;
                    blanks.isFiltered = true;
                }
                else {
                    blanks.isSelected = false;
                    blanks.isFiltered = false;
                }
            }
        }
        else {
            blanks.isSelected = true;
            blanks.isFiltered = true;
        }
        blanks.value = null;
        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;
        blanks.indeterminate = false;
        blanks.isSpecial = true;
        blanks.isBlanks = true;
        this.listData.unshift(blanks);
    }
    sortData(a, b) {
        let valueA = a.value;
        let valueB = b.value;
        if (typeof (a) === DataType.String) {
            valueA = a.value.toUpperCase();
            valueB = b.value.toUpperCase();
        }
        if (valueA < valueB) {
            return -1;
        }
        else if (valueA > valueB) {
            return 1;
        }
        else {
            return 0;
        }
    }
    getFilterItemLabel(element) {
        if (this.column.dataType === DataType.Date) {
            return element && element.label ? element.label : this.column.formatter ?
                this.column.formatter(element) :
                this.grid.datePipe.transform(element, this.column.pipeArgs.format, this.column.pipeArgs.timezone, this.grid.locale);
        }
        if (this.column.dataType === DataType.Number) {
            return this.column.formatter ?
                this.column.formatter(element) :
                this.grid.decimalPipe.transform(element, this.column.pipeArgs.digitsInfo, this.grid.locale);
        }
        return this.column.formatter ?
            this.column.formatter(element) :
            element;
    }
    getFilterItemValue(element) {
        if (this.column.dataType === DataType.Date) {
            element = parseDate(element.value);
        }
        return element;
    }
    // TODO: sort members by access modifier
    /**
     * @hidden @internal
     */
    cancel() {
        if (!this.overlayComponentId) {
            this.init();
        }
        this.closeDropdown();
    }
    /**
     * @hidden @internal
     */
    closeDropdown() {
        if (this.overlayComponentId) {
            this.overlayService.hide(this.overlayComponentId);
            this.overlayComponentId = null;
        }
    }
    /**
     * @hidden @internal
     */
    onKeyDown(eventArgs) {
        if (eventArgs.key === "Escape" /* ESCAPE */ || eventArgs.key === "Esc" /* ESCAPE_IE */ ||
            eventArgs.ctrlKey && eventArgs.shiftKey && eventArgs.key.toLowerCase() === 'l') {
            this.closeDropdown();
        }
        eventArgs.stopPropagation();
    }
    /**
     * @hidden @internal
     */
    hide() {
        this._originalDisplay = document.defaultView.getComputedStyle(this.element.nativeElement).display;
        this.element.nativeElement.style.display = 'none';
    }
    /**
     * @hidden @internal
     */
    detectChanges() {
        this.cdr.detectChanges();
    }
}
IgxGridExcelStyleFilteringComponent.ɵfac = function IgxGridExcelStyleFilteringComponent_Factory(t) { return new (t || IgxGridExcelStyleFilteringComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService, 9)); };
IgxGridExcelStyleFilteringComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxGridExcelStyleFilteringComponent, selectors: [["igx-grid-excel-style-filtering"]], contentQueries: function IgxGridExcelStyleFilteringComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxExcelStyleColumnOperationsTemplateDirective, true, IgxExcelStyleColumnOperationsTemplateDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxExcelStyleFilterOperationsTemplateDirective, true, IgxExcelStyleFilterOperationsTemplateDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.excelColumnOperationsDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.excelFilterOperationsDirective = _t.first);
    } }, viewQuery: function IgxGridExcelStyleFilteringComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵviewQuery(_c2, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultExcelColumnOperations = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultExcelFilterOperations = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mainDropdown = _t.first);
    } }, hostVars: 6, hostBindings: function IgxGridExcelStyleFilteringComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("max-height", ctx.maxHeight);
        ɵngcc0.ɵɵclassProp("igx-excel-filter", ctx.className)("igx-excel-filter--inline", ctx.inline);
    } }, inputs: { column: "column", minHeight: "minHeight", maxHeight: "maxHeight" }, outputs: { loadingStart: "loadingStart", loadingEnd: "loadingEnd", initialized: "initialized", sortingChanged: "sortingChanged", columnChange: "columnChange", listDataLoaded: "listDataLoaded" }, ngContentSelectors: _c5, decls: 8, vars: 13, consts: [["defaultExcelColumnOperations", ""], ["defaultExcelFilterOperations", ""], [1, "igx-excel-filter__menu", 3, "ngClass", "id", "keydown"], ["mainDropdown", ""], [4, "ngIf", "ngIfElse"], [3, "showHiding", "showPinning", "showSelecting"], [4, "ngIf"]], template: function IgxGridExcelStyleFilteringComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c3);
        ɵngcc0.ɵɵtemplate(0, IgxGridExcelStyleFilteringComponent_ng_template_0_Template, 6, 8, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxGridExcelStyleFilteringComponent_ng_template_2_Template, 3, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(4, "article", 2, 3);
        ɵngcc0.ɵɵlistener("keydown", function IgxGridExcelStyleFilteringComponent_Template_article_keydown_4_listener($event) { return ctx.onKeyDown($event); });
        ɵngcc0.ɵɵtemplate(6, IgxGridExcelStyleFilteringComponent_ng_container_6_Template, 2, 0, "ng-container", 4);
        ɵngcc0.ɵɵtemplate(7, IgxGridExcelStyleFilteringComponent_ng_container_7_Template, 2, 0, "ng-container", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        const _r2 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵstyleProp("min-height", ctx.minHeight)("max-height", ctx.maxHeight);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(10, _c4, ctx.displayDensity === "cosy", ctx.displayDensity === "compact"))("id", ctx.overlayComponentId);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.excelColumnOperationsDirective)("ngIfElse", _r0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.excelFilterOperationsDirective)("ngIfElse", _r2);
    } }, encapsulation: 2, changeDetection: 0 });
IgxGridExcelStyleFilteringComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: GridBaseAPIService, decorators: [{ type: Host }, { type: Optional }] }
];
IgxGridExcelStyleFilteringComponent.propDecorators = {
    column: [{ type: Input }],
    minHeight: [{ type: Input }],
    maxHeight: [{ type: Input }, { type: HostBinding, args: ['style.max-height',] }],
    className: [{ type: HostBinding, args: ['class.igx-excel-filter',] }],
    inline: [{ type: HostBinding, args: ['class.igx-excel-filter--inline',] }],
    loadingStart: [{ type: Output }],
    loadingEnd: [{ type: Output }],
    initialized: [{ type: Output }],
    sortingChanged: [{ type: Output }],
    columnChange: [{ type: Output }],
    listDataLoaded: [{ type: Output }],
    defaultExcelColumnOperations: [{ type: ViewChild, args: ['defaultExcelColumnOperations', { read: TemplateRef, static: true },] }],
    defaultExcelFilterOperations: [{ type: ViewChild, args: ['defaultExcelFilterOperations', { read: TemplateRef, static: true },] }],
    mainDropdown: [{ type: ViewChild, args: ['mainDropdown', { read: ElementRef },] }],
    excelColumnOperationsDirective: [{ type: ContentChild, args: [IgxExcelStyleColumnOperationsTemplateDirective, { read: IgxExcelStyleColumnOperationsTemplateDirective },] }],
    excelFilterOperationsDirective: [{ type: ContentChild, args: [IgxExcelStyleFilterOperationsTemplateDirective, { read: IgxExcelStyleFilterOperationsTemplateDirective },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridExcelStyleFilteringComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-excel-style-filtering',
                template: "<ng-template #defaultExcelColumnOperations>\n    <igx-excel-style-header\n        [showHiding]=\"displayDensity !== 'comfortable' && !column?.disableHiding\"\n        [showPinning]=\"displayDensity !== 'comfortable' && !column?.disablePinning\"\n        [showSelecting]=\"displayDensity !== 'comfortable' && columnSelectable()\"\n    >\n    </igx-excel-style-header>\n\n    <igx-excel-style-sorting *ngIf=\"column?.sortable\">\n    </igx-excel-style-sorting>\n\n    <igx-excel-style-moving *ngIf=\"column?.movable\">\n    </igx-excel-style-moving>\n\n    <igx-excel-style-pinning *ngIf=\"!column?.disablePinning && displayDensity==='comfortable'\">\n    </igx-excel-style-pinning>\n\n    <igx-excel-style-hiding *ngIf=\"!column?.disableHiding && displayDensity==='comfortable'\">\n    </igx-excel-style-hiding>\n\n    <igx-excel-style-selecting *ngIf=\"columnSelectable() && displayDensity==='comfortable'\">\n    </igx-excel-style-selecting>\n</ng-template>\n\n<ng-template #defaultExcelFilterOperations>\n    <igx-excel-style-clear-filters>\n    </igx-excel-style-clear-filters>\n\n    <igx-excel-style-conditional-filter>\n    </igx-excel-style-conditional-filter>\n\n    <igx-excel-style-search>\n    </igx-excel-style-search>\n</ng-template>\n\n<article #mainDropdown\n    class=\"igx-excel-filter__menu\"\n    [ngClass]=\"{\n        'igx-excel-filter__menu--cosy': displayDensity === 'cosy',\n        'igx-excel-filter__menu--compact': displayDensity === 'compact'\n    }\"\n    [id]=\"overlayComponentId\"\n    (keydown)=\"onKeyDown($event)\"\n    [style.min-height]=\"minHeight\"\n    [style.max-height]=\"maxHeight\">\n\n    <ng-container *ngIf=\"this.excelColumnOperationsDirective; else defaultExcelColumnOperations\">\n        <ng-content select=\"igx-excel-style-column-operations,[igxExcelStyleColumnOperations]\">\n        </ng-content>\n    </ng-container>\n\n    <ng-container *ngIf=\"this.excelFilterOperationsDirective; else defaultExcelFilterOperations\">\n        <ng-content select=\"igx-excel-style-filter-operations,[igxExcelStyleFilterOperations]\">\n        </ng-content>\n    </ng-container>\n</article>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.GridBaseAPIService, decorators: [{
                type: Host
            }, {
                type: Optional
            }] }]; }, { className: [{
            type: HostBinding,
            args: ['class.igx-excel-filter']
        }], inline: [{
            type: HostBinding,
            args: ['class.igx-excel-filter--inline']
        }], loadingStart: [{
            type: Output
        }], loadingEnd: [{
            type: Output
        }], initialized: [{
            type: Output
        }], sortingChanged: [{
            type: Output
        }], columnChange: [{
            type: Output
        }], listDataLoaded: [{
            type: Output
        }], column: [{
            type: Input
        }], minHeight: [{
            type: Input
        }], maxHeight: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['style.max-height']
        }], defaultExcelColumnOperations: [{
            type: ViewChild,
            args: ['defaultExcelColumnOperations', { read: TemplateRef, static: true }]
        }], defaultExcelFilterOperations: [{
            type: ViewChild,
            args: ['defaultExcelFilterOperations', { read: TemplateRef, static: true }]
        }], mainDropdown: [{
            type: ViewChild,
            args: ['mainDropdown', { read: ElementRef }]
        }], excelColumnOperationsDirective: [{
            type: ContentChild,
            args: [IgxExcelStyleColumnOperationsTemplateDirective, { read: IgxExcelStyleColumnOperationsTemplateDirective }]
        }], excelFilterOperationsDirective: [{
            type: ContentChild,
            args: [IgxExcelStyleFilterOperationsTemplateDirective, { read: IgxExcelStyleFilterOperationsTemplateDirective }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,