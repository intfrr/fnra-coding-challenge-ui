import { Pipe } from '@angular/core';
import { cloneArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { GridBaseAPIService } from '../api.service';
import { GridPagingMode } from '../common/enums';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../api.service';
export class IgxGridSortingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, expressions, sorting, id, pipeTrigger, pinned) {
        const grid = this.gridAPI.grid;
        let result;
        if (!expressions.length) {
            result = collection;
        }
        else {
            result = DataUtil.sort(cloneArray(collection), expressions, sorting, grid);
        }
        grid.setFilteredSortedData(result, pinned);
        return result;
    }
}
IgxGridSortingPipe.ɵfac = function IgxGridSortingPipe_Factory(t) { return new (t || IgxGridSortingPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridSortingPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridSort", type: IgxGridSortingPipe, pure: true });
IgxGridSortingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridSortingPipe, [{
        type: Pipe,
        args: [{
                name: 'gridSort',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();
/**
 * @hidden
 */
export class IgxGridGroupingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, expression, expansion, defaultExpanded, id, groupsRecords, pipeTrigger) {
        const state = { expressions: [], expansion: [], defaultExpanded };
        const grid = this.gridAPI.grid;
        state.expressions = grid.groupingExpressions;
        let result;
        const fullResult = { data: [], metadata: [] };
        if (!state.expressions.length) {
            // empty the array without changing reference
            groupsRecords.splice(0, groupsRecords.length);
            result = {
                data: collection,
                metadata: collection
            };
        }
        else {
            state.expansion = grid.groupingExpansionState;
            state.defaultExpanded = grid.groupsExpanded;
            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);
        }
        grid.groupingFlatResult = result.data;
        grid.groupingResult = fullResult.data;
        grid.groupingMetadata = fullResult.metadata;
        return result;
    }
}
IgxGridGroupingPipe.ɵfac = function IgxGridGroupingPipe_Factory(t) { return new (t || IgxGridGroupingPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridGroupingPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridGroupBy", type: IgxGridGroupingPipe, pure: true });
IgxGridGroupingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridGroupingPipe, [{
        type: Pipe,
        args: [{
                name: 'gridGroupBy',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();
/**
 * @hidden
 */
export class IgxGridPagingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, page = 0, perPage = 15, id, pipeTrigger) {
        if (!this.gridAPI.grid.paging || this.gridAPI.grid.pagingMode !== GridPagingMode.local) {
            return collection;
        }
        const state = {
            index: page,
            recordsPerPage: perPage
        };
        const total = this.gridAPI.grid._totalRecords >= 0 ? this.gridAPI.grid._totalRecords : collection.data.length;
        DataUtil.correctPagingState(state, total);
        const result = {
            data: DataUtil.page(cloneArray(collection.data), state, total),
            metadata: DataUtil.page(cloneArray(collection.metadata), state, total)
        };
        if (this.gridAPI.grid.page !== state.index) {
            this.gridAPI.grid.page = state.index;
        }
        this.gridAPI.grid.pagingState = state;
        return result;
    }
}
IgxGridPagingPipe.ɵfac = function IgxGridPagingPipe_Factory(t) { return new (t || IgxGridPagingPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridPagingPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridPaging", type: IgxGridPagingPipe, pure: true });
IgxGridPagingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridPagingPipe, [{
        type: Pipe,
        args: [{
                name: 'gridPaging',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();
/**
 * @hidden
 */
export class IgxGridFilteringPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, expressionsTree, filterStrategy, advancedExpressionsTree, id, pipeTrigger, filteringPipeTrigger, pinned) {
        const grid = this.gridAPI.grid;
        const state = {
            expressionsTree: expressionsTree,
            strategy: filterStrategy,
            advancedExpressionsTree: advancedExpressionsTree
        };
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            return collection;
        }
        const result = DataUtil.filter(cloneArray(collection), state, grid);
        grid.setFilteredData(result, pinned);
        return result;
    }
}
IgxGridFilteringPipe.ɵfac = function IgxGridFilteringPipe_Factory(t) { return new (t || IgxGridFilteringPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridFilteringPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridFiltering", type: IgxGridFilteringPipe, pure: true });
IgxGridFilteringPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridFilteringPipe, [{
        type: Pipe,
        args: [{
                name: 'gridFiltering',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,