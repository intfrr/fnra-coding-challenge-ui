import { Pipe } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../api.service';
export class IgxGridDetailsPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, hasDetails, expansionStates, pipeTrigger) {
        if (!hasDetails) {
            return collection;
        }
        const res = this.addDetailRows(collection, expansionStates);
        return res;
    }
    addDetailRows(collection, expansionStates) {
        const result = [];
        collection.forEach((v) => {
            result.push(v);
            if (!this.gridAPI.grid.isGroupByRecord(v) && !this.gridAPI.grid.isSummaryRow(v) &&
                this.gridAPI.get_row_expansion_state(v)) {
                const detailsObj = { detailsData: v };
                result.push(detailsObj);
            }
        });
        return result;
    }
}
IgxGridDetailsPipe.ɵfac = function IgxGridDetailsPipe_Factory(t) { return new (t || IgxGridDetailsPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridDetailsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridDetails", type: IgxGridDetailsPipe, pure: true });
IgxGridDetailsPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridDetailsPipe, [{
        type: Pipe,
        args: [{
                name: 'gridDetails',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5kZXRhaWxzLnBpcGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9ncmlkL2dyaWQuZGV0YWlscy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3BELGNBQWM7OztBQUtkLE1BQU0sT0FBTyxrQkFBa0I7QUFBRyxJQUU5QixZQUFZLE9BQTREO0FBQzVFLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBc0IsT0FBTyxDQUFDO0FBQ2xELElBQUksQ0FBQztBQUNMLElBQVcsU0FBUyxDQUFDLFVBQWlCLEVBQUUsVUFBbUIsRUFBRSxlQUFtQyxFQUFFLFdBQW1CO0FBQ3JILFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUN6QixZQUFZLE9BQU8sVUFBVSxDQUFDO0FBQzlCLFNBQVM7QUFDVCxRQUFRLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3BFLFFBQVEsT0FBTyxHQUFHLENBQUM7QUFDbkIsSUFBSSxDQUFDO0FBQ0wsSUFDYyxhQUFhLENBQUMsVUFBaUIsRUFBRSxlQUFrQztBQUNqRixRQUFRLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUMxQixRQUFRLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNqQyxZQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUMzRixnQkFBZ0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN6RCxnQkFBZ0IsTUFBTSxVQUFVLEdBQUcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDdEQsZ0JBQWdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDeEMsYUFBYTtBQUNiLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxRQUFRLE9BQU8sTUFBTSxDQUFDO0FBQ3RCLElBQUksQ0FBQztBQUNMOzhDQTdCQyxJQUFJLFNBQUMsa0JBQ0YsSUFBSSxFQUFFLGFBQWEsa0JBQ25CLElBQUksRUFBRSxJQUFJLGNBQ2I7OEdBQ0k7QUFBQztBQUE0QyxZQVJ6QyxrQkFBa0I7QUFBRzs7Ozs7OzttRkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IElneEdyaWRBUElTZXJ2aWNlIH0gZnJvbSAnLi9ncmlkLWFwaS5zZXJ2aWNlJztcblxuLyoqIEBoaWRkZW4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAnZ3JpZERldGFpbHMnLFxuICAgIHB1cmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZERldGFpbHNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJOiBJZ3hHcmlkQVBJU2VydmljZTtcbiAgICBjb25zdHJ1Y3RvcihncmlkQVBJOiBHcmlkQmFzZUFQSVNlcnZpY2U8SWd4R3JpZEJhc2VEaXJlY3RpdmUgJiBHcmlkVHlwZT4pIHtcbiAgICAgICAgdGhpcy5ncmlkQVBJID0gPElneEdyaWRBUElTZXJ2aWNlPmdyaWRBUEk7XG4gICAgfVxuICAgIHB1YmxpYyB0cmFuc2Zvcm0oY29sbGVjdGlvbjogYW55W10sIGhhc0RldGFpbHM6IGJvb2xlYW4sIGV4cGFuc2lvblN0YXRlczogIE1hcDxhbnksIGJvb2xlYW4+LCBwaXBlVHJpZ2dlcjogbnVtYmVyKSB7XG4gICAgICAgIGlmICghaGFzRGV0YWlscykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5hZGREZXRhaWxSb3dzKGNvbGxlY3Rpb24sIGV4cGFuc2lvblN0YXRlcyk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFkZERldGFpbFJvd3MoY29sbGVjdGlvbjogYW55W10sIGV4cGFuc2lvblN0YXRlczogTWFwPGFueSwgYm9vbGVhbj4pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaCgodikgPT4ge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godik7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZ3JpZEFQSS5ncmlkLmlzR3JvdXBCeVJlY29yZCh2KSAmJiAhdGhpcy5ncmlkQVBJLmdyaWQuaXNTdW1tYXJ5Um93KHYpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkQVBJLmdldF9yb3dfZXhwYW5zaW9uX3N0YXRlKHYpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGV0YWlsc09iaiA9IHsgZGV0YWlsc0RhdGE6IHYgfTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChkZXRhaWxzT2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIl19