import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, ViewChild, TemplateRef, } from '@angular/core';
import { DataType } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
import { IgxGridSelectionService } from '../selection/selection.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../api.service';
import * as ɵngcc2 from '../selection/selection.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../../icon/icon.component';
import * as ɵngcc5 from '../../badge/badge.component';

const _c0 = ["defaultGroupByExpandedTemplate"];
const _c1 = ["defaultGroupByCollapsedTemplate"];
const _c2 = ["groupContent"];
function IgxGridGroupByRowComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridGroupByRowComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridGroupByRowComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 8);
    ɵngcc0.ɵɵtext(1, "expand_more");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridGroupByRowComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 8);
    ɵngcc0.ɵɵtext(1, "chevron_right");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridGroupByRowComponent_ng_template_11_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 15);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.groupRow.value);
} }
function IgxGridGroupByRowComponent_ng_template_11_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 15);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "number");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r13.groupRow.value));
} }
function IgxGridGroupByRowComponent_ng_template_11_ng_template_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 15);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "date");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, ctx_r14.groupRow.value));
} }
function IgxGridGroupByRowComponent_ng_template_11_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxGridGroupByRowComponent_ng_template_11_ng_template_6_ng_container_0_Template, 4, 3, "ng-container", 16);
    ɵngcc0.ɵɵtemplate(1, IgxGridGroupByRowComponent_ng_template_11_ng_template_6_ng_container_1_Template, 4, 3, "ng-container", 16);
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.dataType === "number");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.dataType === "date");
} }
function IgxGridGroupByRowComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "igx-icon", 10);
    ɵngcc0.ɵɵtext(2, "group_work");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 11);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, IgxGridGroupByRowComponent_ng_template_11_ng_container_5_Template, 3, 1, "ng-container", 12);
    ɵngcc0.ɵɵtemplate(6, IgxGridGroupByRowComponent_ng_template_11_ng_template_6_Template, 2, 2, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelement(8, "igx-badge", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r11 = ɵngcc0.ɵɵreference(7);
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r9.groupRow.column && ctx_r9.groupRow.column.header ? ctx_r9.groupRow.column.header : ctx_r9.groupRow.expression ? ctx_r9.groupRow.expression.fieldName : "", ": ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.dataType === "boolean" || ctx_r9.dataType === "string")("ngIfElse", _r11);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("value", ctx_r9.groupRow.records ? ctx_r9.groupRow.records.length : 0);
} }
const _c3 = function (a0) { return { $implicit: a0 }; };
export class IgxGridGroupByRowComponent {
    constructor(gridAPI, gridSelection, element, cdr) {
        this.gridAPI = gridAPI;
        this.gridSelection = gridSelection;
        this.element = element;
        this.cdr = cdr;
        /**
         * @hidden
         */
        this.defaultCssClass = 'igx-grid__group-row';
        /**
         * @hidden
         */
        this.paddingIndentationCssClass = 'igx-grid__group-row--padding-level';
        /**
         * @hidden
         */
        this.isFocused = false;
    }
    /**
     * Returns whether the row is focused.
     * ```
     * let gridRowFocused = this.grid1.rowList.first.focused;
     * ```
     */
    get focused() {
        return this.isActive();
    }
    /**
     * Returns whether the group row is expanded.
     * ```typescript
     * const groupRowExpanded = this.grid1.rowList.first.expanded;
     * ```
     */
    get expanded() {
        return this.grid.isExpandedGroup(this.groupRow);
    }
    /**
     * @hidden
     */
    get describedBy() {
        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';
        return this.gridID + '_' + grRowExpr;
    }
    get dataRowIndex() {
        return this.index;
    }
    /**
     * Returns a reference to the underlying HTML element.
     * ```typescript
     * const groupRowElement = this.nativeElement;
     * ```
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    get attrCellID() {
        return `${this.gridID}_${this.index}`;
    }
    /**
     * Returns the style classes applied to the group rows.
     * ```typescript
     * const groupCssStyles = this.grid1.rowList.first.styleClasses;
     * ```
     */
    get styleClasses() {
        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +
            (this.isActive() ? ` ${this.defaultCssClass}--active` : '');
    }
    isActive() {
        return this.grid.navigation.activeNode ? this.grid.navigation.activeNode.row === this.index : false;
    }
    activate() {
        this.grid.navigation.setActiveNode({ row: this.index }, 'groupRow');
    }
    /**
     * Toggles the group row.
     * ```typescript
     * this.grid1.rowList.first.toggle()
     * ```
     */
    toggle() {
        this.grid.toggleGroup(this.groupRow);
    }
    get iconTemplate() {
        if (this.expanded) {
            return this.grid.rowExpandedIndicatorTemplate || this.defaultGroupByExpandedTemplate;
        }
        else {
            return this.grid.rowCollapsedIndicatorTemplate || this.defaultGroupByCollapsedTemplate;
        }
    }
    get selectionNode() {
        return {
            row: this.index,
            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0
        };
    }
    /**
     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.
     * ```typescript
     * this.grid1.rowList.first.grid;
     * ```
     */
    get grid() {
        return this.gridAPI.grid;
    }
    /**
     * @hidden
     */
    get dataType() {
        const column = this.groupRow.column;
        return (column && column.dataType) || DataType.String;
    }
}
IgxGridGroupByRowComponent.ɵfac = function IgxGridGroupByRowComponent_Factory(t) { return new (t || IgxGridGroupByRowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IgxGridSelectionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxGridGroupByRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxGridGroupByRowComponent, selectors: [["igx-grid-groupby-row"]], viewQuery: function IgxGridGroupByRowComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultGroupByExpandedTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultGroupByCollapsedTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupContent = _t.first);
    } }, hostVars: 6, hostBindings: function IgxGridGroupByRowComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("pointerdown", function IgxGridGroupByRowComponent_pointerdown_HostBindingHandler() { return ctx.activate(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.expanded)("aria-describedby", ctx.describedBy)("data-rowIndex", ctx.dataRowIndex)("id", ctx.attrCellID);
        ɵngcc0.ɵɵclassMap(ctx.styleClasses);
    } }, inputs: { isFocused: "isFocused", index: "index", gridID: "gridID", groupRow: "groupRow" }, decls: 13, vars: 8, consts: [["defaultGroupRow", ""], [1, "igx-grid__grouping-indicator", 3, "click"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "igx-grid__group-content"], ["groupContent", ""], ["defaultGroupByExpandedTemplate", ""], ["defaultGroupByCollapsedTemplate", ""], ["defaultGroupByTemplate", ""], ["fontSet", "material"], [1, "igx-group-label"], ["fontSet", "material", 1, "igx-group-label__icon"], [1, "igx-group-label__column-name"], [4, "ngIf", "ngIfElse"], ["default", ""], [1, "igx-group-label__count-badge", 3, "value"], [1, "igx-group-label__text"], [4, "ngIf"]], template: function IgxGridGroupByRowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, null, 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵlistener("click", function IgxGridGroupByRowComponent_Template_div_click_2_listener() { return ctx.toggle(); });
        ɵngcc0.ɵɵtemplate(3, IgxGridGroupByRowComponent_ng_container_3_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 3, 4);
        ɵngcc0.ɵɵtemplate(6, IgxGridGroupByRowComponent_ng_container_6_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, IgxGridGroupByRowComponent_ng_template_7_Template, 2, 0, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, IgxGridGroupByRowComponent_ng_template_9_Template, 2, 0, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(11, IgxGridGroupByRowComponent_ng_template_11_Template, 9, 4, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        const _r8 = ɵngcc0.ɵɵreference(12);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.iconTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.grid.groupRowTemplate ? ctx.grid.groupRowTemplate : _r8)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(6, _c3, ctx.groupRow));
    } }, directives: [ɵngcc3.NgTemplateOutlet, ɵngcc4.IgxIconComponent, ɵngcc3.NgIf, ɵngcc5.IgxBadgeComponent], pipes: [ɵngcc3.DecimalPipe, ɵngcc3.DatePipe], encapsulation: 2, changeDetection: 0 });
IgxGridGroupByRowComponent.ctorParameters = () => [
    { type: GridBaseAPIService },
    { type: IgxGridSelectionService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxGridGroupByRowComponent.propDecorators = {
    defaultGroupByExpandedTemplate: [{ type: ViewChild, args: ['defaultGroupByExpandedTemplate', { read: TemplateRef, static: true },] }],
    defaultGroupByCollapsedTemplate: [{ type: ViewChild, args: ['defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true },] }],
    isFocused: [{ type: Input }],
    index: [{ type: Input }],
    gridID: [{ type: Input }],
    groupRow: [{ type: Input }],
    groupContent: [{ type: ViewChild, args: ['groupContent', { static: true },] }],
    expanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
    describedBy: [{ type: HostBinding, args: ['attr.aria-describedby',] }],
    dataRowIndex: [{ type: HostBinding, args: ['attr.data-rowIndex',] }],
    attrCellID: [{ type: HostBinding, args: ['attr.id',] }],
    styleClasses: [{ type: HostBinding, args: ['class',] }],
    activate: [{ type: HostListener, args: ['pointerdown',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridGroupByRowComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-groupby-row',
                template: "<ng-container #defaultGroupRow>\n    <div (click)=\"toggle()\" class=\"igx-grid__grouping-indicator\">\n            <ng-container *ngTemplateOutlet=\"iconTemplate; context: { $implicit: this }\">\n            </ng-container>\n    </div>\n\n    <div class=\"igx-grid__group-content\" #groupContent>\n        <ng-container *ngTemplateOutlet=\"grid.groupRowTemplate ? grid.groupRowTemplate : defaultGroupByTemplate; context: { $implicit: groupRow }\">\n        </ng-container>\n    </div>\n\n    <ng-template #defaultGroupByExpandedTemplate>\n        <igx-icon fontSet=\"material\">expand_more</igx-icon>\n    </ng-template>\n\n    <ng-template #defaultGroupByCollapsedTemplate>\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n    </ng-template>\n\n\n    <ng-template #defaultGroupByTemplate>\n        <div class=\"igx-group-label\">\n            <igx-icon fontSet=\"material\" class=\"igx-group-label__icon\">group_work</igx-icon>\n            <span class=\"igx-group-label__column-name\">\n            {{ groupRow.column && groupRow.column.header ?\n                groupRow.column.header :\n                (groupRow.expression ? groupRow.expression.fieldName : '') }}:\n            </span>\n\n            <ng-container *ngIf=\"dataType === 'boolean' || dataType === 'string'; else default\" >\n                <span class=\"igx-group-label__text\">{{ groupRow.value }}</span>\n            </ng-container>\n            <ng-template #default>\n                <ng-container *ngIf=\"dataType === 'number'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | number }}</span>\n                </ng-container>\n                <ng-container *ngIf=\"dataType === 'date'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | date }}</span>\n                </ng-container>\n            </ng-template>\n\n            <igx-badge [value]=\"groupRow.records ? groupRow.records.length : 0\" class='igx-group-label__count-badge'></igx-badge>\n        </div>\n    </ng-template>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }, { type: ɵngcc2.IgxGridSelectionService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { isFocused: [{
            type: Input
        }], expanded: [{
            type: HostBinding,
            args: ['attr.aria-expanded']
        }], describedBy: [{
            type: HostBinding,
            args: ['attr.aria-describedby']
        }], dataRowIndex: [{
            type: HostBinding,
            args: ['attr.data-rowIndex']
        }], attrCellID: [{
            type: HostBinding,
            args: ['attr.id']
        }], styleClasses: [{
            type: HostBinding,
            args: ['class']
        }], activate: [{
            type: HostListener,
            args: ['pointerdown']
        }], defaultGroupByExpandedTemplate: [{
            type: ViewChild,
            args: ['defaultGroupByExpandedTemplate', { read: TemplateRef, static: true }]
        }], defaultGroupByCollapsedTemplate: [{
            type: ViewChild,
            args: ['defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true }]
        }], index: [{
            type: Input
        }], gridID: [{
            type: Input
        }], groupRow: [{
            type: Input
        }], groupContent: [{
            type: ViewChild,
            args: ['groupContent', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,