import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';
import { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export class IgxGroupByRowTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxGroupByRowTemplateDirective.ɵfac = function IgxGroupByRowTemplateDirective_Factory(t) { return new (t || IgxGroupByRowTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxGroupByRowTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxGroupByRowTemplateDirective, selectors: [["", "igxGroupByRow", ""]] });
IgxGroupByRowTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGroupByRowTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxGroupByRow]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * @hidden
 */
export class IgxGridDetailTemplateDirective {
}
IgxGridDetailTemplateDirective.ɵfac = function IgxGridDetailTemplateDirective_Factory(t) { return new (t || IgxGridDetailTemplateDirective)(); };
IgxGridDetailTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxGridDetailTemplateDirective, selectors: [["", "igxGridDetail", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridDetailTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxGridDetail]'
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class IgxRowExpandedIndicatorDirective {
}
IgxRowExpandedIndicatorDirective.ɵfac = function IgxRowExpandedIndicatorDirective_Factory(t) { return new (t || IgxRowExpandedIndicatorDirective)(); };
IgxRowExpandedIndicatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxRowExpandedIndicatorDirective, selectors: [["", "igxRowExpandedIndicator", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxRowExpandedIndicatorDirective, [{
        type: Directive,
        args: [{
                selector: '[igxRowExpandedIndicator]'
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class IgxRowCollapsedIndicatorDirective {
}
IgxRowCollapsedIndicatorDirective.ɵfac = function IgxRowCollapsedIndicatorDirective_Factory(t) { return new (t || IgxRowCollapsedIndicatorDirective)(); };
IgxRowCollapsedIndicatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxRowCollapsedIndicatorDirective, selectors: [["", "igxRowCollapsedIndicator", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxRowCollapsedIndicatorDirective, [{
        type: Directive,
        args: [{
                selector: '[igxRowCollapsedIndicator]'
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class IgxHeaderExpandIndicatorDirective {
}
IgxHeaderExpandIndicatorDirective.ɵfac = function IgxHeaderExpandIndicatorDirective_Factory(t) { return new (t || IgxHeaderExpandIndicatorDirective)(); };
IgxHeaderExpandIndicatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxHeaderExpandIndicatorDirective, selectors: [["", "igxHeaderExpandedIndicator", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxHeaderExpandIndicatorDirective, [{
        type: Directive,
        args: [{
                selector: '[igxHeaderExpandedIndicator]'
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class IgxHeaderCollapseIndicatorDirective {
}
IgxHeaderCollapseIndicatorDirective.ɵfac = function IgxHeaderCollapseIndicatorDirective_Factory(t) { return new (t || IgxHeaderCollapseIndicatorDirective)(); };
IgxHeaderCollapseIndicatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxHeaderCollapseIndicatorDirective, selectors: [["", "igxHeaderCollapsedIndicator", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxHeaderCollapseIndicatorDirective, [{
        type: Directive,
        args: [{
                selector: '[igxHeaderCollapsedIndicator]'
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class IgxGroupAreaDropDirective extends IgxDropDirective {
    constructor(elementRef, renderer, zone) {
        super(elementRef, renderer, zone);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.hovered = false;
    }
    onDragEnter(event) {
        const drag = event.detail.owner;
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        const grid = column.grid;
        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
            drag.icon.innerText = 'group_work';
            this.hovered = true;
        }
        else {
            drag.icon.innerText = 'block';
            this.hovered = false;
        }
    }
    onDragLeave(event) {
        const drag = event.detail.owner;
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        event.detail.owner.icon.innerText = 'block';
        this.hovered = false;
    }
    onDragDrop(event) {
        const drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            const column = drag.column;
            if (!this.columnBelongsToGrid(column)) {
                return;
            }
            const grid = column.grid;
            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,
                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });
            }
        }
    }
    closestParentByAttr(elem, attr) {
        return elem.hasAttribute(attr) ?
            elem :
            this.closestParentByAttr(elem.parentElement, attr);
    }
    columnBelongsToGrid(column) {
        const elem = this.elementRef.nativeElement;
        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');
        if (!column) {
            return false;
        }
        else {
            const grid = column.grid;
            if (!grid || grid.id !== closestGridID) {
                return false;
            }
            return true;
        }
    }
}
IgxGroupAreaDropDirective.ɵfac = function IgxGroupAreaDropDirective_Factory(t) { return new (t || IgxGroupAreaDropDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
IgxGroupAreaDropDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxGroupAreaDropDirective, selectors: [["", "igxGroupAreaDrop", ""]], hostVars: 2, hostBindings: function IgxGroupAreaDropDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-drop-area--hover", ctx.hovered);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IgxGroupAreaDropDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
IgxGroupAreaDropDirective.propDecorators = {
    hovered: [{ type: HostBinding, args: ['class.igx-drop-area--hover',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGroupAreaDropDirective, [{
        type: Directive,
        args: [{
                selector: '[igxGroupAreaDrop]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { hovered: [{
            type: HostBinding,
            args: ['class.igx-drop-area--hover']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,