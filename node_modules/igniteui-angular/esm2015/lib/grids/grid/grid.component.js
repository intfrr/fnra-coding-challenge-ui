import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren, QueryList, ViewChild, TemplateRef, HostBinding, forwardRef } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { IgxGridNavigationService } from '../grid-navigation.service';
import { IgxGridAPIService } from './grid-api.service';
import { cloneArray } from '../../core/utils';
import { IgxGroupByRowTemplateDirective, IgxGridDetailTemplateDirective } from './grid.directives';
import { IgxGridGroupByRowComponent } from './groupby-row.component';
import { takeUntil } from 'rxjs/operators';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';
import { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';
import { FilterMode } from '../common/enums';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../directives/for-of/for_of.directive';
import * as ɵngcc3 from '../grid.common';
import * as ɵngcc4 from '../selection/drag-select.directive';
import * as ɵngcc5 from '../../directives/toggle/toggle.directive';
import * as ɵngcc6 from '../../snackbar/snackbar.component';
import * as ɵngcc7 from '../selection/row-selectors';
import * as ɵngcc8 from '../toolbar/grid-toolbar.component';
import * as ɵngcc9 from '../../chips/chips-area.component';
import * as ɵngcc10 from './grid.directives';
import * as ɵngcc11 from '../../chips/chip.component';
import * as ɵngcc12 from '../../icon/icon.component';
import * as ɵngcc13 from '../../directives/suffix/suffix.directive';
import * as ɵngcc14 from '../moving/moving.drop.directive';
import * as ɵngcc15 from '../headers/grid-header-group.component';
import * as ɵngcc16 from '../filtering/base/grid-filtering-row.component';
import * as ɵngcc17 from '../../directives/template-outlet/template_outlet.directive';
import * as ɵngcc18 from './grid-row.component';
import * as ɵngcc19 from './groupby-row.component';
import * as ɵngcc20 from '../summaries/summary-row.component';
import * as ɵngcc21 from '../../progressbar/progressbar.component';
import * as ɵngcc22 from '../../paginator/paginator.component';
import * as ɵngcc23 from '../../directives/button/button.directive';
import * as ɵngcc24 from '../../directives/ripple/ripple.directive';
import * as ɵngcc25 from '../grid.rowEdit.directive';
import * as ɵngcc26 from '../../checkbox/checkbox.component';
import * as ɵngcc27 from '../resizing/resizer.component';
import * as ɵngcc28 from '../common/pipes';
import * as ɵngcc29 from './grid.details.pipe';
import * as ɵngcc30 from './grid.summary.pipe';
import * as ɵngcc31 from './grid.pipes';
import * as ɵngcc32 from '../summaries/grid-root-summary.pipe';

const _c0 = ["defaultDropArea"];
const _c1 = ["groupArea"];
const _c2 = ["record_template"];
const _c3 = ["detail_template_container"];
const _c4 = ["group_template"];
const _c5 = ["summary_template"];
function IgxGridComponent_igx_grid_toolbar_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-toolbar", 71, 72);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("max-width", ctx_r0.outerWidth, "px")("flex-basis", ctx_r0.outerWidth, "px");
    ɵngcc0.ɵɵproperty("gridID", ctx_r0.id)("displayDensity", ctx_r0.displayDensity);
} }
function IgxGridComponent_div_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r85 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-chip", 78);
    ɵngcc0.ɵɵlistener("onKeyDown", function IgxGridComponent_div_1_ng_container_3_Template_igx_chip_onKeyDown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r85); const ctx_r84 = ɵngcc0.ɵɵnextContext(2); return ctx_r84.onChipKeyDown($event); })("onRemove", function IgxGridComponent_div_1_ng_container_3_Template_igx_chip_onRemove_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r85); const ctx_r86 = ɵngcc0.ɵɵnextContext(2); return ctx_r86.onChipRemoved($event); })("onClick", function IgxGridComponent_div_1_ng_container_3_Template_igx_chip_onClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r85); const expr_r82 = ctx.$implicit; const ctx_r87 = ɵngcc0.ɵɵnextContext(2); return ctx_r87.getColumnGroupable(expr_r82.fieldName) ? ctx_r87.onChipClicked($event) : null; });
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "igx-icon", 79);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "span", 80);
    ɵngcc0.ɵɵelementStart(7, "igx-icon");
    ɵngcc0.ɵɵtext(8, "arrow_forward ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const expr_r82 = ctx.$implicit;
    const last_r83 = ctx.last;
    const ctx_r80 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", expr_r82.fieldName)("title", ctx_r80.getGroupByChipTitle(expr_r82))("removable", ctx_r80.getColumnGroupable(expr_r82.fieldName))("draggable", ctx_r80.getColumnGroupable(expr_r82.fieldName))("displayDensity", ctx_r80.displayDensity)("disabled", !ctx_r80.getColumnGroupable(expr_r82.fieldName));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r80.getGroupByChipTitle(expr_r82));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(expr_r82.dir == 1 ? "arrow_upward" : "arrow_downward");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵstyleProp("visibility", !last_r83 || ctx_r80.dropAreaVisible ? "visible" : "hidden");
} }
function IgxGridComponent_div_1_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r89 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 73, 74);
    ɵngcc0.ɵɵelementStart(2, "igx-chips-area", 75);
    ɵngcc0.ɵɵlistener("onReorder", function IgxGridComponent_div_1_Template_igx_chips_area_onReorder_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r89); const ctx_r88 = ɵngcc0.ɵɵnextContext(); return ctx_r88.chipsOrderChanged($event); })("onMoveEnd", function IgxGridComponent_div_1_Template_igx_chips_area_onMoveEnd_2_listener() { ɵngcc0.ɵɵrestoreView(_r89); const ctx_r90 = ɵngcc0.ɵɵnextContext(); return ctx_r90.chipsMovingEnded(); });
    ɵngcc0.ɵɵtemplate(3, IgxGridComponent_div_1_ng_container_3_Template, 9, 10, "ng-container", 76);
    ɵngcc0.ɵɵelementStart(4, "div", 77);
    ɵngcc0.ɵɵtemplate(5, IgxGridComponent_div_1_ng_container_5_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("flex-basis", ctx_r1.outerWidth, "px");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.chipsGoupingExpressions);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r1.groupAreaHostClass);
    ɵngcc0.ɵɵstyleProp("visibility", ctx_r1.dropAreaVisible ? "visible" : "hidden");
    ɵngcc0.ɵɵattribute("gridId", ctx_r1.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.dropAreaTemplateResolved);
} }
function IgxGridComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 81);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("left", ctx_r3.pinnedWidth, "px");
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r3.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxGridComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 82);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("left", ctx_r4.pinnedWidth, "px");
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r4.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxGridComponent_ng_container_8_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c6 = function (a0) { return { "igx-grid__header-indentation--no-border": a0 }; };
const _c7 = function (a0) { return { $implicit: a0 }; };
function IgxGridComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r94 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 83, 84);
    ɵngcc0.ɵɵlistener("click", function IgxGridComponent_ng_container_8_Template_div_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r94); const ctx_r93 = ɵngcc0.ɵɵnextContext(); return ctx_r93.toggleAllGroupRows(); })("pointerdown", function IgxGridComponent_ng_container_8_Template_div_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r94); return $event.preventDefault(); });
    ɵngcc0.ɵɵtemplate(3, IgxGridComponent_ng_container_8_ng_container_3_Template, 1, 0, "ng-container", 85);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("igx-grid__header-indentation igx-grid__row-indentation--level-", ctx_r5.groupingExpressions.length, "");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c6, ctx_r5.isRowSelectable || ctx_r5.rowDraggable));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.iconTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(8, _c7, ctx_r5));
} }
function IgxGridComponent_ng_container_9_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c8 = function (a0) { return { "igx-grid__drag-indicator--header": a0 }; };
function IgxGridComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r99 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 86, 87);
    ɵngcc0.ɵɵlistener("pointerdown", function IgxGridComponent_ng_container_9_Template_div_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r99); return $event.preventDefault(); });
    ɵngcc0.ɵɵelementStart(3, "div", 88);
    ɵngcc0.ɵɵtemplate(4, IgxGridComponent_ng_container_9_ng_container_4_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    const _r71 = ɵngcc0.ɵɵreference(107);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c8, !ctx_r6.isRowSelectable));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r6.dragIndicatorIconTemplate ? ctx_r6.dragIndicatorIconTemplate : _r71);
} }
function IgxGridComponent_ng_container_10_3_ng_template_0_Template(rf, ctx) { }
function IgxGridComponent_ng_container_10_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxGridComponent_ng_container_10_3_ng_template_0_Template, 0, 0, "ng-template", null, 91, ɵngcc0.ɵɵtemplateRefExtractor);
} }
const _c9 = function (a0) { return { "igx-grid__cbx-selection--push": a0 }; };
const _c10 = function (a0, a1) { return { selectedCount: a0, totalCount: a1 }; };
function IgxGridComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    const _r105 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 89, 90);
    ɵngcc0.ɵɵlistener("click", function IgxGridComponent_ng_container_10_Template_div_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r105); const ctx_r104 = ɵngcc0.ɵɵnextContext(); return ctx_r104.onHeaderSelectorClick($event); })("pointerdown", function IgxGridComponent_ng_container_10_Template_div_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r105); return $event.preventDefault(); });
    ɵngcc0.ɵɵtemplate(3, IgxGridComponent_ng_container_10_3_Template, 2, 0, undefined, 85);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    const _r73 = ɵngcc0.ɵɵreference(109);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c9, ctx_r7.filteringService.isFilterRowVisible));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.headSelectorTemplate ? ctx_r7.headSelectorTemplate : _r73)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(8, _c7, ɵngcc0.ɵɵpureFunction2(5, _c10, ctx_r7.selectionService.filteredSelectedRowIds.length, ctx_r7.totalRowsCountAfterFilter)));
} }
function IgxGridComponent_ng_container_11_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-header-group", 93);
} if (rf & 2) {
    const col_r108 = ctx.$implicit;
    const ctx_r107 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("min-width", ctx_r107.getHeaderGroupWidth(col_r108))("flex-basis", ctx_r107.getHeaderGroupWidth(col_r108));
    ɵngcc0.ɵɵproperty("column", col_r108)("gridID", ctx_r107.id);
} }
function IgxGridComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxGridComponent_ng_container_11_ng_template_1_Template, 1, 6, "ng-template", 92);
    ɵngcc0.ɵɵpipe(2, "igxTopLevel");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r8.pinnedColumns));
} }
function IgxGridComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-header-group", 93);
} if (rf & 2) {
    const col_r109 = ctx.$implicit;
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("min-width", ctx_r10.getHeaderGroupWidth(col_r109))("flex-basis", ctx_r10.getHeaderGroupWidth(col_r109));
    ɵngcc0.ɵɵproperty("column", col_r109)("gridID", ctx_r10.id);
} }
function IgxGridComponent_ng_container_15_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-header-group", 93);
} if (rf & 2) {
    const col_r111 = ctx.$implicit;
    const ctx_r110 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("min-width", ctx_r110.getHeaderGroupWidth(col_r111))("flex-basis", ctx_r110.getHeaderGroupWidth(col_r111))("left", col_r111.rightPinnedOffset);
    ɵngcc0.ɵɵproperty("column", col_r111)("gridID", ctx_r110.id);
} }
function IgxGridComponent_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxGridComponent_ng_container_15_ng_template_1_Template, 1, 8, "ng-template", 92);
    ɵngcc0.ɵɵpipe(2, "igxTopLevel");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r11.pinnedColumns));
} }
function IgxGridComponent_igx_grid_filtering_row_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-filtering-row", 94, 95);
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("width", ctx_r12.calcWidth, "px");
    ɵngcc0.ɵɵproperty("column", ctx_r12.filteringService.filteredColumn);
} }
function IgxGridComponent_span_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 96);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r13.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxGridComponent_span_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 81);
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r15.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxGridComponent_span_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 82);
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("left", ctx_r16.pinnedWidth, "px");
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r16.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxGridComponent_ng_container_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 85);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const rowData_r118 = ctx.$implicit;
    const rowIndex_r119 = ctx.index;
    const ctx_r117 = ɵngcc0.ɵɵnextContext(4);
    const _r25 = ɵngcc0.ɵɵreference(43);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", ctx_r117.getContext(rowData_r118, rowIndex_r119, true));
} }
const _c11 = function (a0, a1) { return { "igx-grid__tr--pinned-bottom": a0, "igx-grid__tr--pinned-top": a1 }; };
function IgxGridComponent_ng_template_25_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 98, 99);
    ɵngcc0.ɵɵtemplate(2, IgxGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_Template, 2, 2, "ng-container", 76);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const pinnedData_r114 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r115 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("width", ctx_r115.calcWidth, "px");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c11, !ctx_r115.isRowPinningToTop, ctx_r115.isRowPinningToTop));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", pinnedData_r114);
} }
function IgxGridComponent_ng_template_25_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxGridComponent_ng_template_25_ng_container_0_div_1_Template, 3, 7, "div", 97);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const pinnedData_r114 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", pinnedData_r114.length > 0);
} }
const _c12 = function (a0, a1, a2, a3, a4, a5, a6) { return [a0, a1, a2, a3, a4, a5, a6, true]; };
const _c13 = function (a0, a1, a2, a3, a4) { return [a0, a1, a2, a3, a4, true]; };
function IgxGridComponent_ng_template_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxGridComponent_ng_template_25_ng_container_0_Template, 2, 1, "ng-container", 8);
    ɵngcc0.ɵɵpipe(1, "gridAddRow");
    ɵngcc0.ɵɵpipe(2, "gridSort");
    ɵngcc0.ɵɵpipe(3, "gridFiltering");
    ɵngcc0.ɵɵpipe(4, "gridRowPinning");
    ɵngcc0.ɵɵpipe(5, "visibleColumns");
    ɵngcc0.ɵɵpipe(6, "gridTransaction");
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind3(1, 1, ɵngcc0.ɵɵpipeBindV(2, 5, ɵngcc0.ɵɵpureFunction5(41, _c13, ɵngcc0.ɵɵpipeBindV(3, 12, ɵngcc0.ɵɵpureFunction7(33, _c12, ɵngcc0.ɵɵpipeBind4(4, 21, ɵngcc0.ɵɵpipeBind2(5, 26, ɵngcc0.ɵɵpipeBind3(6, 29, ctx_r19.data, ctx_r19.id, ctx_r19.pipeTrigger), ctx_r19.hasVisibleColumns), ctx_r19.id, true, ctx_r19.pipeTrigger), ctx_r19.filteringExpressionsTree, ctx_r19.filterStrategy, ctx_r19.advancedFilteringExpressionsTree, ctx_r19.id, ctx_r19.pipeTrigger, ctx_r19.filteringPipeTrigger)), ctx_r19.sortingExpressions, ctx_r19.sortStrategy, ctx_r19.id, ctx_r19.pipeTrigger)), true, ctx_r19.pipeTrigger));
} }
function IgxGridComponent_ng_template_27_ng_template_0_Template(rf, ctx) { }
function IgxGridComponent_ng_template_27_Template(rf, ctx) { if (rf & 1) {
    const _r126 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵtemplate(0, IgxGridComponent_ng_template_27_ng_template_0_Template, 0, 0, "ng-template", 100);
    ɵngcc0.ɵɵlistener("onCachedViewLoaded", function IgxGridComponent_ng_template_27_Template_ng_template_onCachedViewLoaded_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r126); const ctx_r125 = ɵngcc0.ɵɵnextContext(); return ctx_r125.cachedViewLoaded($event); })("onViewCreated", function IgxGridComponent_ng_template_27_Template_ng_template_onViewCreated_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r126); const ctx_r127 = ɵngcc0.ɵɵnextContext(); return ctx_r127.viewCreatedHandler($event); })("onViewMoved", function IgxGridComponent_ng_template_27_Template_ng_template_onViewMoved_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r126); const ctx_r128 = ɵngcc0.ɵɵnextContext(); return ctx_r128.viewMovedHandler($event); });
} if (rf & 2) {
    const rowData_r122 = ctx.$implicit;
    const rowIndex_r123 = ctx.index;
    const ctx_r21 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxTemplateOutlet", ctx_r21.getRowTemplate(rowData_r122))("igxTemplateOutletContext", ctx_r21.getContext(rowData_r122, rowIndex_r123));
} }
function IgxGridComponent_ng_container_39_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_template_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-row", 101, 102);
} if (rf & 2) {
    const rowIndex_r129 = ctx.index;
    const rowData_r130 = ctx.$implicit;
    const disabledRow_r131 = ctx.disabled;
    const isAddRow_r132 = ctx.addRow;
    const ctx_r24 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("gridID", ctx_r24.id)("index", rowIndex_r129)("rowData", rowData_r130)("disabled", disabledRow_r131)("addRow", isAddRow_r132);
} }
function IgxGridComponent_ng_template_42_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-row", 103, 104);
} if (rf & 2) {
    const rowIndex_r134 = ctx.index;
    const rowData_r135 = ctx.$implicit;
    const isAddRow_r136 = ctx.addRow;
    const ctx_r26 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("gridID", ctx_r26.id)("index", rowIndex_r134)("rowData", rowData_r135)("addRow", isAddRow_r136);
} }
function IgxGridComponent_ng_template_44_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-groupby-row", 105, 102);
} if (rf & 2) {
    const rowIndex_r139 = ctx.index;
    const rowData_r140 = ctx.$implicit;
    const ctx_r28 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("gridID", ctx_r28.id)("index", rowIndex_r139)("groupRow", rowData_r140);
} }
function IgxGridComponent_ng_template_46_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-summary-row", 106, 107);
} if (rf & 2) {
    const rowIndex_r142 = ctx.index;
    const rowData_r143 = ctx.$implicit;
    const ctx_r30 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("gridID", ctx_r30.id)("summaries", rowData_r143.summaries)("index", rowIndex_r142);
} }
function IgxGridComponent_ng_template_48_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "div");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r148 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("igx-grid__row-indentation igx-grid__row-indentation--level-", ctx_r148.groupingExpressions.length, "");
} }
function IgxGridComponent_ng_template_48_ng_template_4_Template(rf, ctx) { }
const _c14 = function (a1) { return { "igx-grid__tr-container": true, "igx-grid__tr-container--active": a1 }; };
function IgxGridComponent_ng_template_48_Template(rf, ctx) { if (rf & 1) {
    const _r151 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 108, 109);
    ɵngcc0.ɵɵlistener("pointerdown", function IgxGridComponent_ng_template_48_Template_div_pointerdown_0_listener() { ɵngcc0.ɵɵrestoreView(_r151); const rowIndex_r145 = ctx.index; const _r147 = ɵngcc0.ɵɵreference(1); const ctx_r150 = ɵngcc0.ɵɵnextContext(); return ctx_r150.detailsViewFocused(_r147, rowIndex_r145); });
    ɵngcc0.ɵɵelementStart(2, "div", 110);
    ɵngcc0.ɵɵtemplate(3, IgxGridComponent_ng_template_48_ng_container_3_Template, 2, 3, "ng-container", 8);
    ɵngcc0.ɵɵtemplate(4, IgxGridComponent_ng_template_48_ng_template_4_Template, 0, 0, "ng-template", 111);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const rowIndex_r145 = ctx.index;
    const rowData_r146 = ctx.$implicit;
    const ctx_r32 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate2("id", "", ctx_r32.id, "_", rowIndex_r145, "");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c14, ctx_r32.isDetailActive(rowIndex_r145)));
    ɵngcc0.ɵɵattribute("data-rowindex", rowIndex_r145);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r32.groupingExpressions.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r32.detailTemplate)("ngTemplateOutletContext", ctx_r32.getDetailsContext(rowData_r146, rowIndex_r145));
} }
function IgxGridComponent_ng_container_50_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_igx_circular_bar_56_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-circular-bar", 112);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("indeterminate", true);
} }
function IgxGridComponent_span_57_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 96);
} if (rf & 2) {
    const ctx_r37 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r37.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxGridComponent_ng_template_61_Template(rf, ctx) { }
function IgxGridComponent_igx_grid_summary_row_70_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-summary-row", 113, 107);
    ɵngcc0.ɵɵpipe(2, "igxGridSummaryDataPipe");
} if (rf & 2) {
    const ctx_r42 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("width", ctx_r42.calcWidth, "px")("height", ctx_r42.summariesHeight, "px");
    ɵngcc0.ɵɵproperty("gridID", ctx_r42.id)("summaries", ɵngcc0.ɵɵpipeBind2(2, 7, ctx_r42.id, ctx_r42.summaryService.retriggerRootPipe))("index", ctx_r42.dataView.length);
} }
function IgxGridComponent_ng_template_76_Template(rf, ctx) { }
function IgxGridComponent_ng_container_82_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_container_82_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxGridComponent_ng_container_82_ng_container_1_Template, 1, 0, "ng-container", 85);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r47 = ɵngcc0.ɵɵnextContext();
    const _r48 = ɵngcc0.ɵɵreference(84);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r47.paginationTemplate ? ctx_r47.paginationTemplate : _r48)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c7, ctx_r47));
} }
function IgxGridComponent_ng_template_83_Template(rf, ctx) { if (rf & 1) {
    const _r155 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-paginator", 114);
    ɵngcc0.ɵɵlistener("pageChange", function IgxGridComponent_ng_template_83_Template_igx_paginator_pageChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r155); const ctx_r154 = ɵngcc0.ɵɵnextContext(); return ctx_r154.page = $event; })("perPageChange", function IgxGridComponent_ng_template_83_Template_igx_paginator_perPageChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r155); const ctx_r156 = ɵngcc0.ɵɵnextContext(); return ctx_r156.perPage = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r49 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("overlaySettings", ctx_r49.paginatorSettings)("displayDensity", ctx_r49.displayDensity)("page", ctx_r49.page)("totalRecords", ctx_r49.totalRecords)("perPage", ctx_r49.perPage);
} }
function IgxGridComponent_ng_template_85_span_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_template_85_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, IgxGridComponent_ng_template_85_span_3_ng_container_1_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r157 = ɵngcc0.ɵɵnextContext(2);
    const _r54 = ɵngcc0.ɵɵreference(90);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r157.addRowEmptyTemplate || _r54);
} }
function IgxGridComponent_ng_template_85_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 115);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, IgxGridComponent_ng_template_85_span_3_Template, 2, 1, "span", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r51 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r51.emptyFilteredGridMessage);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r51.showAddButton);
} }
function IgxGridComponent_ng_template_87_span_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_template_87_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, IgxGridComponent_ng_template_87_span_3_ng_container_1_Template, 1, 0, "ng-container", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r159 = ɵngcc0.ɵɵnextContext(2);
    const _r54 = ɵngcc0.ɵɵreference(90);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r159.addRowEmptyTemplate || _r54);
} }
function IgxGridComponent_ng_template_87_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 115);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, IgxGridComponent_ng_template_87_span_3_Template, 2, 1, "span", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r53 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r53.emptyGridMessage);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r53.showAddButton);
} }
function IgxGridComponent_ng_template_89_Template(rf, ctx) { if (rf & 1) {
    const _r162 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 116);
    ɵngcc0.ɵɵlistener("click", function IgxGridComponent_ng_template_89_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r162); const ctx_r161 = ɵngcc0.ɵɵnextContext(); return ctx_r161.beginAddRowByIndex(null, -1); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r55 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r55.resourceStrings.igx_grid_add_row_label, " ");
} }
function IgxGridComponent_ng_template_91_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 117);
    ɵngcc0.ɵɵelement(1, "igx-circular-bar", 112);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("indeterminate", true);
} }
function IgxGridComponent_ng_template_93_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 118);
    ɵngcc0.ɵɵtext(1, "group_work");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 119);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r59 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r59.dropAreaMessage);
} }
const _c15 = function (a0) { return { "igx-grid__group-expand-btn--push": a0 }; };
function IgxGridComponent_ng_template_95_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 120);
    ɵngcc0.ɵɵtext(1, "unfold_less");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r61 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c15, ctx_r61.filteringService.isFilterRowVisible));
} }
function IgxGridComponent_ng_template_97_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 120);
    ɵngcc0.ɵɵtext(1, "unfold_more");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r63 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c15, ctx_r63.filteringService.isFilterRowVisible));
} }
function IgxGridComponent_div_99_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c16 = function (a0, a1) { return { rowChangesCount: a0, endEdit: a1 }; };
function IgxGridComponent_div_99_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 121);
    ɵngcc0.ɵɵelementStart(1, "div", 122);
    ɵngcc0.ɵɵtemplate(2, IgxGridComponent_div_99_ng_container_2_Template, 1, 0, "ng-container", 85);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r64 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("className", ctx_r64.bannerClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r64.rowEditContainer)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(3, _c16, ctx_r64.rowChangesCount, ctx_r64.endEdit.bind(ctx_r64)));
} }
function IgxGridComponent_ng_template_100_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r66 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" You have ", ctx_r66.rowChangesCount, " changes in this row\n");
} }
function IgxGridComponent_ng_template_102_Template(rf, ctx) { if (rf & 1) {
    const _r165 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 123);
    ɵngcc0.ɵɵlistener("click", function IgxGridComponent_ng_template_102_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r165); const ctx_r164 = ɵngcc0.ɵɵnextContext(); return ctx_r164.endRowEdit(false, $event); });
    ɵngcc0.ɵɵtext(1, "Cancel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "button", 123);
    ɵngcc0.ɵɵlistener("click", function IgxGridComponent_ng_template_102_Template_button_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r165); const ctx_r166 = ɵngcc0.ɵɵnextContext(); return ctx_r166.endRowEdit(true, $event); });
    ɵngcc0.ɵɵtext(3, "Done");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridComponent_ng_template_104_div_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_template_104_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 127);
    ɵngcc0.ɵɵelementStart(1, "span", 128);
    ɵngcc0.ɵɵtemplate(2, IgxGridComponent_ng_template_104_div_0_ng_container_2_Template, 1, 0, "ng-container", 85);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r167 = ɵngcc0.ɵɵnextContext(2);
    const _r65 = ɵngcc0.ɵɵreference(101);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r167.rowEditText ? ctx_r167.rowEditText : _r65)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c7, ctx_r167.rowChangesCount));
} }
function IgxGridComponent_ng_template_104_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridComponent_ng_template_104_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxGridComponent_ng_template_104_div_0_Template, 3, 4, "div", 124);
    ɵngcc0.ɵɵelementStart(1, "div", 125);
    ɵngcc0.ɵɵelementStart(2, "div", 126);
    ɵngcc0.ɵɵtemplate(3, IgxGridComponent_ng_template_104_ng_container_3_Template, 1, 0, "ng-container", 85);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r70 = ɵngcc0.ɵɵnextContext();
    const _r67 = ɵngcc0.ɵɵreference(103);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r70.crudService.row == null ? null : ctx_r70.crudService.row.isAddRow));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r70.rowEditActions ? ctx_r70.rowEditActions : _r67)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(3, _c7, ctx_r70.endEdit.bind(ctx_r70)));
} }
function IgxGridComponent_ng_template_106_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 129);
    ɵngcc0.ɵɵtext(1, "drag_indicator");
    ɵngcc0.ɵɵelementEnd();
} }
const _c17 = function (a0) { return { "visibility": a0 }; };
function IgxGridComponent_ng_template_108_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 130);
    ɵngcc0.ɵɵelement(1, "igx-checkbox", 131, 132);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const context_r170 = ctx.$implicit;
    const ctx_r74 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("tabindex", -1)("readonly", true)("checked", context_r170.selectedCount > 0 && context_r170.totalCount === context_r170.selectedCount)("ngStyle", ɵngcc0.ɵɵpureFunction1(6, _c17, ctx_r74.isMultiRowSelectionEnabled ? "visible" : "hidden"))("indeterminate", context_r170.selectedCount > 0 && context_r170.selectedCount !== context_r170.totalCount)("aria-label", ctx_r74.headSelectorBaseAriaLabel);
} }
function IgxGridComponent_igx_grid_column_resizer_110_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-column-resizer");
} }
const _c18 = [[["igx-grid-footer"]]];
const _c19 = function (a0, a1, a2, a3, a4, a5, a6) { return [a0, a1, a2, a3, a4, a5, a6]; };
const _c20 = function (a0, a1, a2, a3, a4) { return [a0, a1, a2, a3, a4]; };
const _c21 = function (a0, a1, a2, a3, a4, a5, a6, a7) { return [a0, a1, a2, a3, a4, a5, a6, a7]; };
const _c22 = function () { return []; };
const _c23 = ["igx-grid-footer"];
let NEXT_ID = 0;
/**
 * Grid provides a way to present and manipulate tabular data.
 * @igxModule IgxGridModule
 * @igxGroup Grids & Lists
 * @igxKeywords grid, table
 * @igxTheme igx-grid-theme
 * @remarks
 * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data
 * has been bound, it can be manipulated through filtering, sorting & editing operations.
 * @example
 * ```html
 * <igx-grid [data]="employeeData" autoGenerate="false">
 *   <igx-column field="first" header="First Name"></igx-column>
 *   <igx-column field="last" header="Last Name"></igx-column>
 *   <igx-column field="role" header="Role"></igx-column>
 * </igx-grid>
 * ```
 */
export class IgxGridComponent extends IgxGridBaseDirective {
    constructor() {
        super(...arguments);
        this._id = `igx-grid-${NEXT_ID++}`;
        /**
         * @hidden
         */
        this._groupingExpressions = [];
        /**
         * @hidden
         */
        this._groupingExpandState = [];
        this._hideGroupedColumns = false;
        this._dropAreaMessage = null;
        this._showGroupArea = true;
        /**
         * Emitted when a new chunk of data is loaded from virtualization.
         * @example
         * ```typescript
         *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
         * ```
         */
        this.onDataPreLoad = new EventEmitter();
        this._filteredData = null;
        this.childDetailTemplates = new Map();
        /**
         * @hidden
         */
        this.groupingExpressionsChange = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.groupingExpansionStateChange = new EventEmitter();
        /**
         * Gets/Sets whether created groups are rendered expanded or collapsed.
         * @remarks
         * The default rendered state is expanded.
         * @example
         * ```html
         * <igx-grid #grid [data]="Data" [groupsExpanded]="false" [autoGenerate]="true"></igx-grid>
         * ```
         */
        this.groupsExpanded = true;
        /**
         * Gets the hierarchical representation of the group by records.
         * @example
         * ```typescript
         * let groupRecords = this.grid.groupsRecords;
         * ```
         */
        this.groupsRecords = [];
        /**
         * Emitted when columns are grouped/ungrouped.
         * @remarks
         * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling
         * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.
         * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain
         * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.
         * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**
         * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.
         * columns.
         * @example
         * ```html
         * <igx-grid #grid [data]="localData" (onGroupingDone)="groupingDone($event)" [autoGenerate]="true"></igx-grid>
         * ```
         */
        this.onGroupingDone = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.detailTemplate = null;
    }
    /**
     * Gets/Sets the value of the `id` attribute.
     * @remarks
     * If not provided it will be automatically generated.
     * @example
     * ```html
     * <igx-grid [id]="'igx-grid-1'" [data]="Data" [autoGenerate]="true"></igx-grid>
     * ```
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Gets/Sets the array of data that populates the `IgxGridComponent`.
     * @example
     * ```html
     * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
     * ```
     */
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value || [];
        this.summaryService.clearSummaryCache();
        if (this.shouldGenerate) {
            this.setupColumns();
        }
        this.cdr.markForCheck();
    }
    /**
     * Gets/Sets an array of objects containing the filtered data.
     * @example
     * ```typescript
     * let filteredData = this.grid.filteredData;
     * this.grid.filteredData = [...];
     * ```
     */
    get filteredData() {
        return this._filteredData;
    }
    set filteredData(value) {
        this._filteredData = value;
    }
    /**
     * Gets/Sets the total number of records in the data source.
     * @remarks
     * This property is required for remote grid virtualization to function when it is bound to remote data.
     * @example
     * ```typescript
     * const itemCount = this.grid1.totalItemCount;
     * this.grid1.totalItemCount = 55;
     * ```
     */
    set totalItemCount(count) {
        this.verticalScrollContainer.totalItemCount = count;
        this.cdr.detectChanges();
    }
    get totalItemCount() {
        return this.verticalScrollContainer.totalItemCount;
    }
    get _gridAPI() {
        return this.gridAPI;
    }
    /**
     * Gets/Sets the group by state.
     * @example
     * ```typescript
     * let groupByState = this.grid.groupingExpressions;
     * this.grid.groupingExpressions = [...];
     * ```
     * @remarks
     * Supports two-way data binding.
     * @example
     * ```html
     * <igx-grid #grid [data]="Data" [autoGenerate]="true" [(groupingExpressions)]="model.groupingExpressions"></igx-grid>
     * ```
     */
    get groupingExpressions() {
        return this._groupingExpressions;
    }
    set groupingExpressions(value) {
        if (value && value.length > 10) {
            throw Error('Maximum amount of grouped columns is 10.');
        }
        const oldExpressions = this.groupingExpressions;
        const newExpressions = value;
        this._groupingExpressions = cloneArray(value);
        this.groupingExpressionsChange.emit(this._groupingExpressions);
        this.chipsGoupingExpressions = cloneArray(value);
        if (this._gridAPI.grid) {
            /* grouping should work in conjunction with sorting
            and without overriding separate sorting expressions */
            this._applyGrouping();
            this._gridAPI.arrange_sorting_expressions();
            this.notifyChanges();
        }
        else {
            // setter called before grid is registered in grid API service
            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);
        }
        if (!this._init && JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {
            const groupedCols = [];
            const ungroupedCols = [];
            const groupedColsArr = newExpressions.filter((obj) => {
                return !oldExpressions.some((obj2) => {
                    return obj.fieldName === obj2.fieldName;
                });
            });
            groupedColsArr.forEach((elem) => {
                groupedCols.push(this.getColumnByName(elem.fieldName));
            }, this);
            const ungroupedColsArr = oldExpressions.filter((obj) => {
                return !newExpressions.some((obj2) => {
                    return obj.fieldName === obj2.fieldName;
                });
            });
            ungroupedColsArr.forEach((elem) => {
                ungroupedCols.push(this.getColumnByName(elem.fieldName));
            }, this);
            this.notifyChanges();
            const groupingDoneArgs = {
                expressions: newExpressions,
                groupedColumns: groupedCols,
                ungroupedColumns: ungroupedCols
            };
            this.onGroupingDone.emit(groupingDoneArgs);
        }
    }
    /**
     * Gets/Sets a list of expansion states for group rows.
     * @remarks
     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.
     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).
     * Supports two-way data binding.
     * @example
     * ```html
     * <igx-grid #grid [data]="Data" [autoGenerate]="true" [(groupingExpansionState)]="model.groupingExpansionState"></igx-grid>
     * ```
     */
    get groupingExpansionState() {
        return this._groupingExpandState;
    }
    set groupingExpansionState(value) {
        if (value !== this._groupingExpandState) {
            this.groupingExpansionStateChange.emit(value);
        }
        this._groupingExpandState = value;
        if (this.gridAPI.grid) {
            this.cdr.detectChanges();
        }
    }
    /**
     * Gets/Sets whether the grouped columns should be hidden.
     * @remarks
     * The default value is "false"
     * @example
     * ```html
     * <igx-grid #grid [data]="localData" [hideGroupedColumns]="true" [autoGenerate]="true"></igx-grid>
     * ```
     */
    get hideGroupedColumns() {
        return this._hideGroupedColumns;
    }
    set hideGroupedColumns(value) {
        if (value) {
            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();
        }
        else {
            this.groupingDiffer = null;
        }
        if (this.columnList && this.groupingExpressions) {
            this._setGroupColsVisibility(value);
        }
        this._hideGroupedColumns = value;
    }
    /**
     * Gets/Sets the message displayed inside the GroupBy drop area where columns can be dragged on.
     * @remarks
     * The grid needs to have at least one groupable column in order the GroupBy area to be displayed.
     * @example
     * ```html
     * <igx-grid dropAreaMessage="Drop here to group!">
     *      <igx-column [groupable]="true" field="ID"></igx-column>
     * </igx-grid>
     * ```
     */
    set dropAreaMessage(value) {
        this._dropAreaMessage = value;
        this.notifyChanges();
    }
    get dropAreaMessage() {
        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;
    }
    /**
     * Gets the list of group rows.
     * @example
     * ```typescript
     * const groupList = this.grid.groupsRowList;
     * ```
     */
    get groupsRowList() {
        const res = new QueryList();
        if (!this._groupsRowList) {
            return res;
        }
        const rList = this._groupsRowList.filter((item) => {
            return item.element.nativeElement.parentElement !== null;
        }).sort((item1, item2) => item1.index - item2.index);
        res.reset(rList);
        return res;
    }
    /**
     * @hidden @internal
     */
    getDetailsContext(rowData, index) {
        return {
            $implicit: rowData,
            index: index
        };
    }
    /**
     * @hidden @internal
     */
    trackChanges(index, rec) {
        if (rec.detailsData !== undefined) {
            return rec.detailsData;
        }
        return rec;
    }
    /**
     * @hidden @internal
     */
    detailsViewFocused(container, rowIndex) {
        this.navigation.setActiveNode({ row: rowIndex });
    }
    /**
     * @hidden @internal
     */
    get hasDetails() {
        return !!this.gridDetailsTemplate;
    }
    /**
     * @hidden @internal
     */
    getRowTemplate(rowData) {
        if (this.isGroupByRecord(rowData)) {
            return this.defaultGroupTemplate;
        }
        else if (this.isSummaryRow(rowData)) {
            return this.summaryTemplate;
        }
        else if (this.hasDetails && this.isDetailRecord(rowData)) {
            return this.detailTemplateContainer;
        }
        else {
            return this.recordTemplate;
        }
    }
    /**
     * @hidden @internal
     */
    isDetailRecord(record) {
        return record.detailsData !== undefined;
    }
    /**
     * @hidden @internal
     */
    isDetailActive(rowIndex) {
        return this.navigation.activeNode ? this.navigation.activeNode.row === rowIndex : false;
    }
    /**
     * @hidden @internal
     */
    get groupAreaHostClass() {
        return this.getComponentDensityClass('igx-drop-area');
    }
    /**
     * Gets/Sets the template reference for the group row.
     * @example
     * ```
     * const groupRowTemplate = this.grid.groupRowTemplate;
     * this.grid.groupRowTemplate = myRowTemplate;
     * ```
     */
    get groupRowTemplate() {
        return this._groupRowTemplate;
    }
    set groupRowTemplate(template) {
        this._groupRowTemplate = template;
        this.notifyChanges();
    }
    /**
     * Gets/Sets the template reference of the `IgxGridComponent`'s group area.
     * @example
     * ```typescript
     * const groupAreaTemplate = this.grid.groupAreaTemplate;
     * this.grid.groupAreaTemplate = myAreaTemplate.
     * ```
     */
    get groupAreaTemplate() {
        return this._groupAreaTemplate;
    }
    set groupAreaTemplate(template) {
        this._groupAreaTemplate = template;
        this.notifyChanges();
    }
    /**
     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.
     * @remarks
     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.
     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.
     * @example
     * ```typescript
     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * this.grid.groupBy([
     *     { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },
     *     { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },
     *     { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }
     * ]);
     * ```
     */
    groupBy(expression) {
        if (this.checkIfNoColumnField(expression)) {
            return;
        }
        this.endEdit(true);
        if (expression instanceof Array) {
            this._gridAPI.groupBy_multiple(expression);
        }
        else {
            this._gridAPI.groupBy(expression);
        }
        this.notifyChanges(true);
    }
    /**
     * Clears grouping for particular column, array of columns or all columns.
     * @remarks
     * Clears all grouping in the grid, if no parameter is passed.
     * If a parameter is provided, clears grouping for a particular column or an array of columns.
     * @example
     * ```typescript
     * this.grid.clearGrouping(); //clears all grouping
     * this.grid.clearGrouping("ID"); //ungroups a single column
     * this.grid.clearGrouping(["ID", "Column1", "Column2"]); //ungroups multiple columns
     * ```
     * @param name Name of column or array of column names to be ungrouped.
     */
    clearGrouping(name) {
        this._gridAPI.clear_groupby(name);
        this.notifyChanges(true);
    }
    preventHeaderScroll(args) {
        if (args.target.scrollLeft !== 0) {
            this.navigation.forOfDir().getScroll().scrollLeft = args.target.scrollLeft;
            args.target.scrollLeft = 0;
        }
    }
    /**
     * Returns if a group is expanded or not.
     * @param group The group record.
     * @example
     * ```typescript
     * public groupRow: IGroupByRecord;
     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);
     * ```
     */
    isExpandedGroup(group) {
        const state = this._getStateForGroupRow(group);
        return state ? state.expanded : this.groupsExpanded;
    }
    /**
     * Toggles the expansion state of a group.
     * @param groupRow The group record to toggle.
     * @example
     * ```typescript
     * public groupRow: IGroupByRecord;
     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);
     * ```
     */
    toggleGroup(groupRow) {
        this._toggleGroup(groupRow);
        this.notifyChanges();
    }
    /**
     * Expands the specified group and all of its parent groups.
     * @param groupRow The group record to fully expand.
     * @example
     * ```typescript
     * public groupRow: IGroupByRecord;
     * this.grid.fullyExpandGroup(this.groupRow);
     * ```
     */
    fullyExpandGroup(groupRow) {
        this._fullyExpandGroup(groupRow);
        this.notifyChanges();
    }
    /**
     * @hidden @internal
     */
    isGroupByRecord(record) {
        // return record.records instance of GroupedRecords fails under Webpack
        return record.records && record.records.length;
    }
    /**
     * Toggles the expansion state of all group rows recursively.
     * @example
     * ```typescript
     * this.grid.toggleAllGroupRows;
     * ```
     */
    toggleAllGroupRows() {
        this.groupingExpansionState = [];
        this.groupsExpanded = !this.groupsExpanded;
        this.notifyChanges();
    }
    /**
     * Returns if the `IgxGridComponent` has groupable columns.
     * @example
     * ```typescript
     * const groupableGrid = this.grid.hasGroupableColumns;
     * ```
     */
    get hasGroupableColumns() {
        return this.columnList.some((col) => col.groupable && !col.columnGroup);
    }
    get showGroupArea() {
        return this._showGroupArea;
    }
    set showGroupArea(value) {
        this._showGroupArea = value;
    }
    _setGroupColsVisibility(value) {
        if (this.columnList.length > 0 && !this.hasColumnLayouts) {
            this.groupingExpressions.forEach((expr) => {
                const col = this.getColumnByName(expr.fieldName);
                col.hidden = value;
            });
        }
    }
    /**
     * Gets if the grid's group by drop area is visible.
     * @example
     * ```typescript
     * const dropVisible = this.grid.dropAreaVisible;
     * ```
     */
    get dropAreaVisible() {
        return (this.draggedColumn && this.draggedColumn.groupable) ||
            !this.chipsGoupingExpressions.length;
    }
    /**
     * @hidden @internal
     */
    _getStateForGroupRow(groupRow) {
        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);
    }
    /**
     * @hidden
     */
    _toggleGroup(groupRow) {
        this._gridAPI.groupBy_toggle_group(groupRow);
    }
    /**
     * @hidden @internal
     */
    _fullyExpandGroup(groupRow) {
        this._gridAPI.groupBy_fully_expand_group(groupRow);
    }
    /**
     * @hidden @internal
     */
    _applyGrouping() {
        this._gridAPI.sort_multiple(this._groupingExpressions);
    }
    /**
     * @hidden @internal
     */
    isColumnGrouped(fieldName) {
        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;
    }
    /**
     * @hidden @internal
     */
    getContext(rowData, rowIndex, pinned) {
        if (this.isDetailRecord(rowData)) {
            const cachedData = this.childDetailTemplates.get(rowData.detailsData);
            const rowID = this.primaryKey ? rowData.detailsData[this.primaryKey] : this.data.indexOf(rowData.detailsData);
            if (cachedData) {
                const view = cachedData.view;
                const tmlpOutlet = cachedData.owner;
                return {
                    $implicit: rowData.detailsData,
                    moveView: view,
                    owner: tmlpOutlet,
                    index: this.dataView.indexOf(rowData),
                    templateID: 'detailRow-' + rowID
                };
            }
            else {
                // child rows contain unique grids, hence should have unique templates
                return {
                    $implicit: rowData.detailsData,
                    templateID: 'detailRow-' + rowID,
                    index: this.dataView.indexOf(rowData)
                };
            }
        }
        return {
            $implicit: this.isGhostRecord(rowData) || this.isAddRowRecord(rowData) ? rowData.recordRef : rowData,
            index: this.getDataViewIndex(rowIndex, pinned),
            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow',
            disabled: this.isGhostRecord(rowData),
            addRow: this.isAddRowRecord(rowData) ? rowData.addRow : false
        };
    }
    /**
     * @hidden @internal
     */
    viewCreatedHandler(args) {
        if (args.context.templateID.indexOf('detailRow') !== -1) {
            this.childDetailTemplates.set(args.context.$implicit, args);
        }
    }
    /**
     * @hidden @internal
     */
    viewMovedHandler(args) {
        if (args.context.templateID.indexOf('detailRow') !== -1) {
            // view was moved, update owner in cache
            const key = args.context.$implicit;
            const cachedData = this.childDetailTemplates.get(key);
            cachedData.owner = args.owner;
        }
    }
    /**
     * @hidden @internal
     */
    onChipRemoved(event) {
        this.clearGrouping(event.owner.id);
    }
    /**
     * @hidden @internal
     */
    chipsOrderChanged(event) {
        const newGrouping = [];
        for (let i = 0; i < event.chipsArray.length; i++) {
            const expr = this.groupingExpressions.filter((item) => {
                return item.fieldName === event.chipsArray[i].id;
            })[0];
            if (!this.getColumnByName(expr.fieldName).groupable) {
                // disallow changing order if there are columns with groupable: false
                return;
            }
            newGrouping.push(expr);
        }
        this.groupingExpansionState = [];
        this.chipsGoupingExpressions = newGrouping;
        if (event.originalEvent instanceof KeyboardEvent) {
            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.
            this.groupingExpressions = this.chipsGoupingExpressions;
        }
        this.notifyChanges();
    }
    /**
     * @hidden @internal
     */
    chipsMovingEnded() {
        this.groupingExpressions = this.chipsGoupingExpressions;
        this.notifyChanges();
    }
    /**
     * @hidden @internal
     */
    onChipClicked(event) {
        const sortingExpr = this.sortingExpressions;
        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);
        columnExpr.dir = 3 - columnExpr.dir;
        this.sort(columnExpr);
        this.notifyChanges();
    }
    /**
     * @hidden @internal
     */
    onChipKeyDown(event) {
        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {
            const sortingExpr = this.sortingExpressions;
            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);
            columnExpr.dir = 3 - columnExpr.dir;
            this.sort(columnExpr);
            this.notifyChanges();
        }
    }
    /**
     * @hidden @internal
     */
    get defaultTargetBodyHeight() {
        const allItems = this.totalItemCount || this.dataLength;
        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber, this.paging ? Math.min(allItems, this.perPage) : allItems);
    }
    /**
     * @hidden @internal
     */
    getGroupAreaHeight() {
        return this.groupArea ? this.getComputedHeight(this.groupArea.nativeElement) : 0;
    }
    /**
     * @hidden @internal
     */
    scrollTo(row, column) {
        if (this.groupingExpressions && this.groupingExpressions.length
            && typeof (row) !== 'number') {
            const rowIndex = this.groupingResult.indexOf(row);
            const groupByRecord = this.groupingMetadata[rowIndex];
            if (groupByRecord) {
                this._fullyExpandGroup(groupByRecord);
            }
        }
        super.scrollTo(row, column, this.groupingFlatResult);
    }
    /**
     * @hidden @internal
     */
    get dropAreaTemplateResolved() {
        if (this.dropAreaTemplate) {
            return this.dropAreaTemplate;
        }
        else {
            return this.defaultDropAreaTemplate;
        }
    }
    /**
     * @hidden @internal
     */
    getGroupByChipTitle(expression) {
        const column = this.getColumnByName(expression.fieldName);
        return (column && column.header) || expression.fieldName;
    }
    /**
     * @hidden @internal
     */
    get iconTemplate() {
        if (this.groupsExpanded) {
            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;
        }
        else {
            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;
        }
    }
    /**
     * @hidden @internal
     */
    getColumnGroupable(fieldName) {
        const column = this.getColumnByName(fieldName);
        return column && column.groupable;
    }
    /**
     * @hidden @internal
     */
    ngAfterContentInit() {
        super.ngAfterContentInit();
        if (this.allowFiltering && this.hasColumnLayouts) {
            this.filterMode = FilterMode.excelStyleFilter;
        }
        if (this.groupTemplate) {
            this._groupRowTemplate = this.groupTemplate.template;
        }
        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {
            this._setGroupColsVisibility(this.hideGroupedColumns);
        }
        this._setupNavigationService();
    }
    /**
     * @hidden @internal
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {
            const rowData = view.context.$implicit;
            if (this.isDetailRecord(rowData)) {
                const cachedData = this.childDetailTemplates.get(rowData.detailsData);
                if (cachedData) {
                    const tmlpOutlet = cachedData.owner;
                    tmlpOutlet._viewContainerRef.detach(0);
                }
            }
        });
    }
    /**
     * @hidden @internal
     */
    ngOnInit() {
        super.ngOnInit();
        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {
            this.endEdit(true);
            this.summaryService.updateSummaryCache(args);
            this._headerFeaturesWidth = NaN;
        });
    }
    /**
     * @hidden @internal
     */
    ngDoCheck() {
        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {
            const changes = this.groupingDiffer.diff(this.groupingExpressions);
            if (changes && this.columnList.length > 0) {
                changes.forEachAddedItem((rec) => {
                    const col = this.getColumnByName(rec.item.fieldName);
                    col.hidden = true;
                });
                changes.forEachRemovedItem((rec) => {
                    const col = this.getColumnByName(rec.item.fieldName);
                    col.hidden = false;
                });
            }
        }
        super.ngDoCheck();
    }
    /**
     * @hidden @internal
     */
    dataLoading(event) {
        this.onDataPreLoad.emit(event);
    }
    /**
     * @inheritdoc
     */
    getSelectedData(formatters = false, headers = false) {
        if (this.groupingExpressions.length || this.hasDetails) {
            const source = [];
            const process = (record) => {
                if (record.expression || record.summaries || this.isDetailRecord(record)) {
                    source.push(null);
                    return;
                }
                source.push(record);
            };
            this.dataView.forEach(process);
            return this.extractDataFromSelection(source, formatters, headers);
        }
        else {
            return super.getSelectedData(formatters, headers);
        }
    }
    _setupNavigationService() {
        if (this.hasColumnLayouts) {
            this.navigation = new IgxGridMRLNavigationService();
            this.navigation.grid = this;
        }
    }
    checkIfNoColumnField(expression) {
        if (expression instanceof Array) {
            for (const singleExpression of expression) {
                if (!singleExpression.fieldName) {
                    return true;
                }
            }
            return false;
        }
        return !expression.fieldName;
    }
}
IgxGridComponent.ɵfac = function IgxGridComponent_Factory(t) { return ɵIgxGridComponent_BaseFactory(t || IgxGridComponent); };
IgxGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxGridComponent, selectors: [["igx-grid"]], contentQueries: function IgxGridComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxGridDetailTemplateDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxGroupByRowTemplateDirective, true, IgxGroupByRowTemplateDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxGridDetailTemplateDirective, true, IgxGridDetailTemplateDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.detailTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.gridDetailsTemplate = _t.first);
    } }, viewQuery: function IgxGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c4, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c5, true, TemplateRef);
        ɵngcc0.ɵɵviewQuery(IgxGridGroupByRowComponent, true, IgxGridGroupByRowComponent);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultDropAreaTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupArea = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.recordTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.detailTemplateContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultGroupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.summaryTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._groupsRowList = _t);
    } }, hostVars: 1, hostBindings: function IgxGridComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
    } }, inputs: { groupsExpanded: "groupsExpanded", id: "id", data: "data", groupingExpressions: "groupingExpressions", groupingExpansionState: "groupingExpansionState", hideGroupedColumns: "hideGroupedColumns", dropAreaMessage: "dropAreaMessage", showGroupArea: "showGroupArea", dropAreaTemplate: "dropAreaTemplate" }, outputs: { onDataPreLoad: "onDataPreLoad", groupingExpressionsChange: "groupingExpressionsChange", groupingExpansionStateChange: "groupingExpansionStateChange", onGroupingDone: "onGroupingDone" }, features: [ɵngcc0.ɵɵProvidersFeature([
            IgxGridNavigationService,
            IgxGridSummaryService,
            IgxGridSelectionService,
            IgxGridCRUDService,
            { provide: GridBaseAPIService, useClass: IgxGridAPIService },
            { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxGridComponent) },
            IgxFilteringService,
            IgxColumnResizingService,
            IgxForOfSyncService,
            IgxForOfScrollSyncService
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c23, decls: 115, vars: 187, consts: [["role", "toolbar", 3, "max-width", "flex-basis", "gridID", "displayDensity", 4, "ngIf"], ["class", "igx-grid__grouparea", 3, "flex-basis", 4, "ngIf"], [1, "igx-grid__thead"], ["role", "rowgroup", "tabindex", "0", 1, "igx-grid__thead-wrapper", 3, "focus", "keydown", "scroll"], ["theadRow", ""], ["role", "row", 1, "igx-grid__tr"], ["id", "left", "class", "igx-grid__scroll-on-drag-left", 3, "igxColumnMovingDrop", "left", 4, "ngIf"], ["id", "left", "class", "igx-grid__scroll-on-drag-pinned", 3, "igxColumnMovingDrop", "left", 4, "ngIf"], [4, "ngIf"], ["igxGridFor", "", 3, "igxGridForOf", "igxForScrollOrientation", "igxForScrollContainer", "igxForContainerSize", "igxForTrackBy", "igxForSizePropName"], ["hContainer", ""], [3, "width", "column", 4, "ngIf"], ["id", "right", "class", "igx-grid__scroll-on-drag-right", 3, "igxColumnMovingDrop", 4, "ngIf"], [1, "igx-grid__thead-thumb", 3, "hidden"], ["igxGridBody", "", 1, "igx-grid__tbody", 3, "keydown.control.c", "copy"], ["tabindex", "0", "role", "rowgroup", 1, "igx-grid__tbody-content", 3, "igxGridDragSelect", "keydown", "focus", "onDragStop", "scroll", "onDragScroll"], ["tbody", ""], ["id", "left", "class", "igx-grid__scroll-on-drag-left", 3, "igxColumnMovingDrop", 4, "ngIf"], [4, "ngTemplateOutlet"], ["pinnedRecordsTemplate", ""], ["igxGridFor", "", 3, "igxGridForOf", "igxForScrollOrientation", "igxForScrollContainer", "igxForContainerSize", "igxForItemSize", "igxForTrackBy", "onChunkPreload"], ["verticalScrollContainer", ""], ["record_template", ""], ["pinned_record_template", ""], ["group_template", ""], ["summary_template", ""], ["detail_template_container", ""], ["igxOverlayOutlet", "", 1, "igx-grid__row-editing-outlet"], ["igxRowEditingOverlayOutlet", ""], ["loadingOverlay", ""], [3, "indeterminate", 4, "ngIf"], [1, "igx-grid__tbody-scrollbar", 3, "hidden", "pointerdown"], [1, "igx-grid__tbody-scrollbar-start"], [1, "igx-grid__tbody-scrollbar-main"], ["igxGridFor", "", 3, "igxGridForOf"], ["verticalScrollHolder", ""], [1, "igx-grid__tbody-scrollbar-end"], [1, "igx-grid__addrow-snackbar"], [3, "actionText", "displayTime"], ["addRowSnackbar", ""], ["role", "rowgroup", "tabindex", "0", 1, "igx-grid__tfoot", 3, "focus", "keydown"], ["tfoot", ""], ["role", "row", "class", "igx-grid__summaries", 3, "width", "height", "gridID", "summaries", "index", 4, "ngIf"], [1, "igx-grid__tfoot-thumb", 3, "hidden"], [1, "igx-grid__scroll", 3, "hidden", "pointerdown"], ["scr", ""], [1, "igx-grid__scroll-start"], [1, "igx-grid__scroll-main"], ["scrollContainer", ""], [1, "igx-grid__scroll-end", 3, "hidden"], [1, "igx-grid__footer"], ["footer", ""], ["defaultPaginator", ""], ["emptyFilteredGrid", ""], ["defaultEmptyGrid", ""], ["defaultAddRowEmptyTemplate", ""], ["defaultLoadingGrid", ""], ["defaultDropArea", ""], ["defaultExpandedTemplate", ""], ["defaultCollapsedTemplate", ""], ["igxToggle", "", 4, "ngIf"], ["defaultRowEditText", ""], ["defaultRowEditActions", ""], ["defaultRowEditTemplate", ""], ["dragIndicatorIconBase", ""], ["igxHeadSelector", ""], ["headSelectorBaseTemplate", ""], ["igxOverlayOutlet", "", 1, "igx-grid__loading-outlet"], ["igxLoadingOverlayOutlet", ""], ["igxOverlayOutlet", "", 1, "igx-grid__outlet", 3, "keydown"], ["igxFilteringOverlayOutlet", ""], ["role", "toolbar", 3, "gridID", "displayDensity"], ["toolbar", ""], [1, "igx-grid__grouparea"], ["groupArea", ""], [3, "onReorder", "onMoveEnd"], [4, "ngFor", "ngForOf"], ["igxGroupAreaDrop", ""], [3, "id", "title", "removable", "draggable", "displayDensity", "disabled", "onKeyDown", "onRemove", "onClick"], ["igxSuffix", ""], [1, "igx-grid__grouparea-connector"], ["id", "left", 1, "igx-grid__scroll-on-drag-left", 3, "igxColumnMovingDrop"], ["id", "left", 1, "igx-grid__scroll-on-drag-pinned", 3, "igxColumnMovingDrop"], [3, "ngClass", "click", "pointerdown"], ["headerGroupContainer", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "igx-grid__drag-indicator", 3, "ngClass", "pointerdown"], ["headerDragContainer", ""], [2, "visibility", "hidden"], [1, "igx-grid__cbx-selection", 3, "ngClass", "click", "pointerdown"], ["headerSelectorContainer", ""], ["headSelector", ""], ["ngFor", "", 3, "ngForOf"], [3, "column", "gridID"], [3, "column"], ["filteringRow", ""], ["id", "right", 1, "igx-grid__scroll-on-drag-right", 3, "igxColumnMovingDrop"], ["class", "igx-grid__tr--pinned", 3, "ngClass", "width", 4, "ngIf"], [1, "igx-grid__tr--pinned", 3, "ngClass"], ["pinContainer", ""], [3, "igxTemplateOutlet", "igxTemplateOutletContext", "onCachedViewLoaded", "onViewCreated", "onViewMoved"], [3, "gridID", "index", "rowData", "disabled", "addRow"], ["row", ""], [3, "gridID", "index", "rowData", "addRow"], ["row", "", "pinnedRow", ""], [3, "gridID", "index", "groupRow"], [1, "igx-grid__summaries--body", 3, "gridID", "summaries", "index"], ["summaryRow", ""], ["detail", "true", 2, "overflow", "auto", "width", "100%", 3, "id", "ngClass", "pointerdown"], ["detailsContainer", ""], [1, "igx-grid__hierarchical-indent", 2, "display", "flex"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "indeterminate"], ["role", "row", 1, "igx-grid__summaries", 3, "gridID", "summaries", "index"], [3, "overlaySettings", "displayDensity", "page", "totalRecords", "perPage", "pageChange", "perPageChange"], [1, "igx-grid__tbody-message"], ["igxButton", "raised", "igxRipple", "", 3, "click"], [1, "igx-grid__loading"], ["fontSet", "material", 1, "igx-drop-area__icon"], [1, "igx-drop-area__text"], ["role", "button", 1, "igx-grid__group-expand-btn", 3, "ngClass"], ["igxToggle", ""], [3, "className"], ["igxButton", "", "igxRowEditTabStop", "", 3, "click"], ["class", "igx-banner__message", 4, "ngIf"], [1, "igx-banner__actions"], [1, "igx-banner__row"], [1, "igx-banner__message"], [1, "igx-banner__text"], ["fontSet", "material"], [1, "igx-grid__cbx-padding"], ["disableRipple", "true", 3, "tabindex", "readonly", "checked", "ngStyle", "indeterminate", "aria-label"], ["headerCheckbox", ""]], template: function IgxGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c18);
        ɵngcc0.ɵɵtemplate(0, IgxGridComponent_igx_grid_toolbar_0_Template, 2, 6, "igx-grid-toolbar", 0);
        ɵngcc0.ɵɵtemplate(1, IgxGridComponent_div_1_Template, 6, 9, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3, 4);
        ɵngcc0.ɵɵlistener("focus", function IgxGridComponent_Template_div_focus_3_listener() { return ctx.navigation.focusFirstCell(); })("keydown", function IgxGridComponent_Template_div_keydown_3_listener($event) { return ctx.navigation.headerNavigation($event); })("scroll", function IgxGridComponent_Template_div_scroll_3_listener($event) { return ctx.preventHeaderScroll($event); });
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵtemplate(6, IgxGridComponent_span_6_Template, 1, 4, "span", 6);
        ɵngcc0.ɵɵtemplate(7, IgxGridComponent_span_7_Template, 1, 4, "span", 7);
        ɵngcc0.ɵɵtemplate(8, IgxGridComponent_ng_container_8_Template, 4, 10, "ng-container", 8);
        ɵngcc0.ɵɵtemplate(9, IgxGridComponent_ng_container_9_Template, 5, 4, "ng-container", 8);
        ɵngcc0.ɵɵtemplate(10, IgxGridComponent_ng_container_10_Template, 4, 10, "ng-container", 8);
        ɵngcc0.ɵɵtemplate(11, IgxGridComponent_ng_container_11_Template, 3, 3, "ng-container", 8);
        ɵngcc0.ɵɵtemplate(12, IgxGridComponent_ng_template_12_Template, 1, 6, "ng-template", 9, 10, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵpipe(14, "igxTopLevel");
        ɵngcc0.ɵɵtemplate(15, IgxGridComponent_ng_container_15_Template, 3, 3, "ng-container", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(16, IgxGridComponent_igx_grid_filtering_row_16_Template, 2, 3, "igx-grid-filtering-row", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, IgxGridComponent_span_17_Template, 1, 2, "span", 12);
        ɵngcc0.ɵɵelement(18, "div", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "div", 14);
        ɵngcc0.ɵɵlistener("keydown.control.c", function IgxGridComponent_Template_div_keydown_control_c_19_listener($event) { return ctx.copyHandler($event); })("copy", function IgxGridComponent_Template_div_copy_19_listener($event) { return ctx.copyHandler($event); });
        ɵngcc0.ɵɵelementStart(20, "div", 15, 16);
        ɵngcc0.ɵɵlistener("keydown", function IgxGridComponent_Template_div_keydown_20_listener($event) { return ctx.navigation.handleNavigation($event); })("focus", function IgxGridComponent_Template_div_focus_20_listener($event) { return ctx.navigation.focusTbody($event); })("onDragStop", function IgxGridComponent_Template_div_onDragStop_20_listener($event) { return ctx.selectionService.dragMode = $event; })("scroll", function IgxGridComponent_Template_div_scroll_20_listener($event) { return ctx.preventContainerScroll($event); })("onDragScroll", function IgxGridComponent_Template_div_onDragScroll_20_listener($event) { return ctx.dragScroll($event); });
        ɵngcc0.ɵɵtemplate(22, IgxGridComponent_span_22_Template, 1, 2, "span", 17);
        ɵngcc0.ɵɵtemplate(23, IgxGridComponent_span_23_Template, 1, 4, "span", 7);
        ɵngcc0.ɵɵtemplate(24, IgxGridComponent_ng_container_24_Template, 1, 0, "ng-container", 18);
        ɵngcc0.ɵɵtemplate(25, IgxGridComponent_ng_template_25_Template, 7, 47, "ng-template", null, 19, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(27, IgxGridComponent_ng_template_27_Template, 1, 2, "ng-template", 20, 21, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵpipe(29, "gridAddRow");
        ɵngcc0.ɵɵpipe(30, "gridRowPinning");
        ɵngcc0.ɵɵpipe(31, "gridDetails");
        ɵngcc0.ɵɵpipe(32, "gridSummary");
        ɵngcc0.ɵɵpipe(33, "gridPaging");
        ɵngcc0.ɵɵpipe(34, "gridGroupBy");
        ɵngcc0.ɵɵpipe(35, "gridSort");
        ɵngcc0.ɵɵpipe(36, "gridFiltering");
        ɵngcc0.ɵɵpipe(37, "visibleColumns");
        ɵngcc0.ɵɵpipe(38, "gridTransaction");
        ɵngcc0.ɵɵlistener("onChunkPreload", function IgxGridComponent_Template_ng_template_onChunkPreload_27_listener($event) { return ctx.dataLoading($event); });
        ɵngcc0.ɵɵtemplate(39, IgxGridComponent_ng_container_39_Template, 1, 0, "ng-container", 18);
        ɵngcc0.ɵɵtemplate(40, IgxGridComponent_ng_template_40_Template, 2, 5, "ng-template", null, 22, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(42, IgxGridComponent_ng_template_42_Template, 3, 4, "ng-template", null, 23, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(44, IgxGridComponent_ng_template_44_Template, 2, 3, "ng-template", null, 24, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(46, IgxGridComponent_ng_template_46_Template, 2, 3, "ng-template", null, 25, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(48, IgxGridComponent_ng_template_48_Template, 5, 9, "ng-template", null, 26, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(50, IgxGridComponent_ng_container_50_Template, 1, 0, "ng-container", 18);
        ɵngcc0.ɵɵelement(51, "div", 27, 28);
        ɵngcc0.ɵɵelement(53, "igc-trial-watermark");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(54, "div", null, 29);
        ɵngcc0.ɵɵtemplate(56, IgxGridComponent_igx_circular_bar_56_Template, 1, 1, "igx-circular-bar", 30);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(57, IgxGridComponent_span_57_Template, 1, 2, "span", 12);
        ɵngcc0.ɵɵelementStart(58, "div", 31);
        ɵngcc0.ɵɵlistener("pointerdown", function IgxGridComponent_Template_div_pointerdown_58_listener($event) { return $event.preventDefault(); });
        ɵngcc0.ɵɵelement(59, "div", 32);
        ɵngcc0.ɵɵelementStart(60, "div", 33);
        ɵngcc0.ɵɵtemplate(61, IgxGridComponent_ng_template_61_Template, 0, 0, "ng-template", 34, 35, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(63, "div", 36);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(64, "div", 37);
        ɵngcc0.ɵɵelementStart(65, "igx-snackbar", 38, 39);
        ɵngcc0.ɵɵtext(67);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(68, "div", 40, 41);
        ɵngcc0.ɵɵlistener("focus", function IgxGridComponent_Template_div_focus_68_listener() { return ctx.navigation.focusFirstCell(false); })("keydown", function IgxGridComponent_Template_div_keydown_68_listener($event) { return ctx.navigation.summaryNav($event); });
        ɵngcc0.ɵɵtemplate(70, IgxGridComponent_igx_grid_summary_row_70_Template, 3, 10, "igx-grid-summary-row", 42);
        ɵngcc0.ɵɵelement(71, "div", 43);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(72, "div", 44, 45);
        ɵngcc0.ɵɵlistener("pointerdown", function IgxGridComponent_Template_div_pointerdown_72_listener($event) { return $event.preventDefault(); });
        ɵngcc0.ɵɵelement(74, "div", 46);
        ɵngcc0.ɵɵelementStart(75, "div", 47);
        ɵngcc0.ɵɵtemplate(76, IgxGridComponent_ng_template_76_Template, 0, 0, "ng-template", 34, 48, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(78, "div", 49);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(79, "div", 50, 51);
        ɵngcc0.ɵɵprojection(81);
        ɵngcc0.ɵɵtemplate(82, IgxGridComponent_ng_container_82_Template, 2, 4, "ng-container", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(83, IgxGridComponent_ng_template_83_Template, 1, 5, "ng-template", null, 52, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(85, IgxGridComponent_ng_template_85_Template, 4, 2, "ng-template", null, 53, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(87, IgxGridComponent_ng_template_87_Template, 4, 2, "ng-template", null, 54, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(89, IgxGridComponent_ng_template_89_Template, 2, 1, "ng-template", null, 55, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(91, IgxGridComponent_ng_template_91_Template, 2, 1, "ng-template", null, 56, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(93, IgxGridComponent_ng_template_93_Template, 4, 1, "ng-template", null, 57, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(95, IgxGridComponent_ng_template_95_Template, 2, 3, "ng-template", null, 58, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(97, IgxGridComponent_ng_template_97_Template, 2, 3, "ng-template", null, 59, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(99, IgxGridComponent_div_99_Template, 3, 6, "div", 60);
        ɵngcc0.ɵɵtemplate(100, IgxGridComponent_ng_template_100_Template, 1, 1, "ng-template", null, 61, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(102, IgxGridComponent_ng_template_102_Template, 4, 0, "ng-template", null, 62, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(104, IgxGridComponent_ng_template_104_Template, 4, 5, "ng-template", null, 63, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(106, IgxGridComponent_ng_template_106_Template, 2, 0, "ng-template", null, 64, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(108, IgxGridComponent_ng_template_108_Template, 3, 8, "ng-template", 65, 66, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(110, IgxGridComponent_igx_grid_column_resizer_110_Template, 1, 0, "igx-grid-column-resizer", 8);
        ɵngcc0.ɵɵelement(111, "div", 67, 68);
        ɵngcc0.ɵɵelementStart(113, "div", 69, 70);
        ɵngcc0.ɵɵlistener("keydown", function IgxGridComponent_Template_div_keydown_113_listener($event) { return ctx.gridOutletKeyboardHandler($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r18 = ɵngcc0.ɵɵreference(26);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbar);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showGroupArea && (ctx.groupingExpressions.length > 0 || ctx.hasGroupableColumns));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("width", ctx.calcWidth, "px");
        ɵngcc0.ɵɵclassProp("igx-grid__tr--mrl", ctx.hasColumnLayouts);
        ɵngcc0.ɵɵattribute("aria-activedescendant", ctx.activeDescendant);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("width", ctx.calcWidth, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length <= 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.groupingExpressions.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rowDraggable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showRowSelectors);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pinnedColumns.length > 0 && ctx.isPinningToStart);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpipeBind1(14, 88, ctx.unpinnedColumns))("igxForScrollOrientation", "horizontal")("igxForScrollContainer", ctx.parentVirtDir)("igxForContainerSize", ctx.unpinnedWidth)("igxForTrackBy", ctx.trackColumnChanges)("igxForSizePropName", "calcPixelWidth");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pinnedColumns.length > 0 && !ctx.isPinningToStart);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.filteringService.isFilterRowVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.scrollSize, "px");
        ɵngcc0.ɵɵproperty("hidden", !ctx.hasVerticalScroll());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("height", ctx.totalHeight, "px")("width", ctx.calcWidth || null, "px");
        ɵngcc0.ɵɵproperty("igxGridDragSelect", ctx.selectionService.dragMode);
        ɵngcc0.ɵɵattribute("aria-activedescendant", ctx.activeDescendant);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length <= 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.hasPinnedRecords && ctx.isRowPinningToTop ? _r18 : null);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpipeBind3(29, 90, ɵngcc0.ɵɵpipeBind4(30, 94, ɵngcc0.ɵɵpipeBind4(31, 99, ɵngcc0.ɵɵpipeBindV(32, 104, ɵngcc0.ɵɵpureFunction8(176, _c21, ɵngcc0.ɵɵpipeBindV(33, 113, ɵngcc0.ɵɵpureFunction5(170, _c20, ɵngcc0.ɵɵpipeBindV(34, 119, ɵngcc0.ɵɵpureFunction7(162, _c19, ɵngcc0.ɵɵpipeBindV(35, 127, ɵngcc0.ɵɵpureFunction5(156, _c20, ɵngcc0.ɵɵpipeBindV(36, 133, ɵngcc0.ɵɵpureFunction7(148, _c19, ɵngcc0.ɵɵpipeBind2(37, 141, ɵngcc0.ɵɵpipeBind3(38, 144, ctx.data, ctx.id, ctx.pipeTrigger), ctx.hasVisibleColumns), ctx.filteringExpressionsTree, ctx.filterStrategy, ctx.advancedFilteringExpressionsTree, ctx.id, ctx.pipeTrigger, ctx.filteringPipeTrigger)), ctx.sortingExpressions, ctx.sortStrategy, ctx.id, ctx.pipeTrigger)), ctx.groupingExpressions, ctx.groupingExpansionState, ctx.groupsExpanded, ctx.id, ctx.groupsRecords, ctx.pipeTrigger)), ctx.page, ctx.perPage, ctx.id, ctx.pipeTrigger)), ctx.hasSummarizedColumns, ctx.summaryCalculationMode, ctx.summaryPosition, ctx.id, ctx.showSummaryOnCollapse, ctx.pipeTrigger, ctx.summaryPipeTrigger)), ctx.hasDetails, ctx.expansionStates, ctx.pipeTrigger), ctx.id, false, ctx.pipeTrigger), false, ctx.pipeTrigger))("igxForScrollOrientation", "vertical")("igxForScrollContainer", ctx.verticalScroll)("igxForContainerSize", ctx.calcHeight)("igxForItemSize", ctx.hasColumnLayouts ? ctx.rowHeight * ctx.multiRowLayoutRowSize + 1 : ctx.renderedRowHeight)("igxForTrackBy", ctx.trackChanges);
        ɵngcc0.ɵɵadvance(12);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.hasPinnedRecords && !ctx.isRowPinningToTop ? _r18 : null);
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngIf", ctx.shouldOverlayLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.scrollSize, "px");
        ɵngcc0.ɵɵproperty("hidden", !ctx.hasVerticalScroll());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.isRowPinningToTop ? ctx.pinnedRowHeight : 0, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.calcHeight, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpureFunction0(185, _c22));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("height", !ctx.isRowPinningToTop ? ctx.pinnedRowHeight : 0, "px");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("actionText", ctx.snackbarActionText)("displayTime", ctx.snackbarDisplayTime);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.snackbarLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.summariesHeight, "px");
        ɵngcc0.ɵɵattribute("aria-activedescendant", ctx.activeDescendant);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasSummarizedColumns && ctx.rootSummariesEnabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.summariesHeight, "px")("width", ctx.scrollSize, "px");
        ɵngcc0.ɵɵproperty("hidden", !ctx.hasVerticalScroll());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.scrollSize, "px");
        ɵngcc0.ɵɵproperty("hidden", ctx.isHorizontalScrollHidden);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("width", ctx.isPinningToStart ? ctx.pinnedWidth : ctx.headerFeaturesWidth, "px")("min-width", ctx.isPinningToStart ? ctx.pinnedWidth : ctx.headerFeaturesWidth, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.unpinnedWidth, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpureFunction0(186, _c22));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("float", "right")("width", ctx.pinnedWidth, "px")("min-width", ctx.pinnedWidth, "px");
        ɵngcc0.ɵɵproperty("hidden", ctx.pinnedWidth === 0 || ctx.isPinningToStart);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.paging && ctx.totalRecords);
        ɵngcc0.ɵɵadvance(17);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rowEditable);
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵproperty("ngIf", ctx.colResizingService.showResizer);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.IgxGridForOfDirective, ɵngcc3.IgxGridBodyDirective, ɵngcc4.IgxGridDragSelectDirective, ɵngcc1.NgTemplateOutlet, ɵngcc5.IgxOverlayOutletDirective, ɵngcc6.IgxSnackbarComponent, ɵngcc7.IgxHeadSelectorDirective, ɵngcc8.IgxGridToolbarComponent, ɵngcc9.IgxChipsAreaComponent, ɵngcc1.NgForOf, ɵngcc10.IgxGroupAreaDropDirective, ɵngcc11.IgxChipComponent, ɵngcc12.IgxIconComponent, ɵngcc13.IgxSuffixDirective, ɵngcc14.IgxColumnMovingDropDirective, ɵngcc1.NgClass, ɵngcc15.IgxGridHeaderGroupComponent, ɵngcc16.IgxGridFilteringRowComponent, ɵngcc17.IgxTemplateOutletDirective, ɵngcc18.IgxGridRowComponent, ɵngcc19.IgxGridGroupByRowComponent, ɵngcc20.IgxSummaryRowComponent, ɵngcc21.IgxCircularProgressBarComponent, ɵngcc22.IgxPaginatorComponent, ɵngcc23.IgxButtonDirective, ɵngcc24.IgxRippleDirective, ɵngcc5.IgxToggleDirective, ɵngcc25.IgxRowEditTabStopDirective, ɵngcc26.IgxCheckboxComponent, ɵngcc1.NgStyle, ɵngcc27.IgxGridColumnResizerComponent], pipes: [ɵngcc28.IgxGridTopLevelColumns, ɵngcc28.IgxGridAddRowPipe, ɵngcc28.IgxGridRowPinningPipe, ɵngcc29.IgxGridDetailsPipe, ɵngcc30.IgxGridSummaryPipe, ɵngcc31.IgxGridPagingPipe, ɵngcc31.IgxGridGroupingPipe, ɵngcc31.IgxGridSortingPipe, ɵngcc31.IgxGridFilteringPipe, ɵngcc28.IgxHasVisibleColumnsPipe, ɵngcc28.IgxGridTransactionPipe, ɵngcc32.IgxSummaryDataPipe], encapsulation: 2, changeDetection: 0 });
IgxGridComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    data: [{ type: Input }],
    onDataPreLoad: [{ type: Output }],
    groupingExpressions: [{ type: Input }],
    groupingExpressionsChange: [{ type: Output }],
    groupingExpansionState: [{ type: Input }],
    groupingExpansionStateChange: [{ type: Output }],
    groupsExpanded: [{ type: Input }],
    hideGroupedColumns: [{ type: Input }],
    dropAreaMessage: [{ type: Input }],
    dropAreaTemplate: [{ type: Input }],
    onGroupingDone: [{ type: Output }],
    groupTemplate: [{ type: ContentChild, args: [IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective },] }],
    gridDetailsTemplate: [{ type: ContentChild, args: [IgxGridDetailTemplateDirective, { read: IgxGridDetailTemplateDirective, static: false },] }],
    _groupsRowList: [{ type: ViewChildren, args: [IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent },] }],
    defaultDropAreaTemplate: [{ type: ViewChild, args: ['defaultDropArea', { read: TemplateRef, static: true },] }],
    groupArea: [{ type: ViewChild, args: ['groupArea',] }],
    recordTemplate: [{ type: ViewChild, args: ['record_template', { read: TemplateRef, static: true },] }],
    detailTemplateContainer: [{ type: ViewChild, args: ['detail_template_container', { read: TemplateRef, static: true },] }],
    detailTemplate: [{ type: ContentChild, args: [IgxGridDetailTemplateDirective, { read: TemplateRef, static: false },] }],
    defaultGroupTemplate: [{ type: ViewChild, args: ['group_template', { read: TemplateRef, static: true },] }],
    summaryTemplate: [{ type: ViewChild, args: ['summary_template', { read: TemplateRef, static: true },] }],
    showGroupArea: [{ type: Input }]
};
const ɵIgxGridComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxGridComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                providers: [
                    IgxGridNavigationService,
                    IgxGridSummaryService,
                    IgxGridSelectionService,
                    IgxGridCRUDService,
                    { provide: GridBaseAPIService, useClass: IgxGridAPIService },
                    { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxGridComponent) },
                    IgxFilteringService,
                    IgxColumnResizingService,
                    IgxForOfSyncService,
                    IgxForOfScrollSyncService
                ],
                selector: 'igx-grid',
                template: "<igx-grid-toolbar [style.max-width.px]='outerWidth' [style.flex-basis.px]=\"outerWidth\" role=\"toolbar\" *ngIf=\"showToolbar\" [gridID]=\"id\"\n    [displayDensity]=\"displayDensity\" #toolbar>\n</igx-grid-toolbar>\n\n<div [style.flex-basis.px]='outerWidth' class=\"igx-grid__grouparea\"\n    *ngIf=\"showGroupArea && (groupingExpressions.length > 0 || hasGroupableColumns)\" #groupArea>\n    <igx-chips-area (onReorder)=\"chipsOrderChanged($event)\" (onMoveEnd)=\"chipsMovingEnded()\">\n        <ng-container *ngFor=\"let expr of chipsGoupingExpressions; let last = last;\">\n            <igx-chip [id]=\"expr.fieldName\" [title]=\"getGroupByChipTitle(expr)\"\n                [removable]=\"getColumnGroupable(expr.fieldName)\"\n                [draggable]=\"getColumnGroupable(expr.fieldName)\" [displayDensity]=\"displayDensity\"\n                (onKeyDown)=\"onChipKeyDown($event)\" (onRemove)=\"onChipRemoved($event)\"\n                (onClick)=\"getColumnGroupable(expr.fieldName) ? onChipClicked($event): null\"\n                [disabled]='!getColumnGroupable(expr.fieldName)'>\n                <span>{{ getGroupByChipTitle(expr) }}</span>\n                <igx-icon igxSuffix>{{ expr.dir == 1 ? 'arrow_upward' : 'arrow_downward' }}</igx-icon>\n            </igx-chip>\n            <span class=\"igx-grid__grouparea-connector\">\n                <igx-icon [style.visibility]=\"(!last || dropAreaVisible) ? 'visible' : 'hidden'\">arrow_forward\n                </igx-icon>\n            </span>\n        </ng-container>\n        <div igxGroupAreaDrop [style.visibility]=\"dropAreaVisible ? 'visible' : 'hidden'\" [class]=\"groupAreaHostClass\"\n            [attr.gridId]='this.id'>\n            <ng-container *ngTemplateOutlet=\"dropAreaTemplateResolved\"></ng-container>\n        </div>\n    </igx-chips-area>\n</div>\n\n<div class=\"igx-grid__thead\">\n    <div class=\"igx-grid__thead-wrapper\" [class.igx-grid__tr--mrl]='hasColumnLayouts' role=\"rowgroup\" (focus)=\"navigation.focusFirstCell()\"\n    [style.width.px]='calcWidth' tabindex=\"0\" [attr.aria-activedescendant]=\"activeDescendant\" (keydown)=\"navigation.headerNavigation($event)\" (scroll)=\"preventHeaderScroll($event)\" #theadRow>\n        <div class=\"igx-grid__tr\" role=\"row\" [style.width.px]='calcWidth'>\n            <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\"\n                [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n                class=\"igx-grid__scroll-on-drag-left\" [style.left.px]=\"pinnedWidth\"></span>\n            <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\"\n                [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n                class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n            <ng-container *ngIf=\"groupingExpressions.length > 0\">\n                <div class=\"igx-grid__header-indentation igx-grid__row-indentation--level-{{groupingExpressions.length}}\"\n                    [ngClass]=\"{\n                    'igx-grid__header-indentation--no-border': isRowSelectable || rowDraggable\n                }\" #headerGroupContainer  (click)=\"toggleAllGroupRows()\" (pointerdown)=\"$event.preventDefault()\">\n\n                <ng-container *ngTemplateOutlet=\"iconTemplate; context: { $implicit: this }\"></ng-container>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"rowDraggable\">\n                <div class=\"igx-grid__drag-indicator\" [ngClass]=\"{\n                    'igx-grid__drag-indicator--header': !isRowSelectable\n                }\" (pointerdown)=\"$event.preventDefault()\"  #headerDragContainer>\n                    <div style=\"visibility: hidden;\">\n                        <ng-container\n                            *ngTemplateOutlet=\"this.dragIndicatorIconTemplate ? this.dragIndicatorIconTemplate : dragIndicatorIconBase\">\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"showRowSelectors\">\n                <div class=\"igx-grid__cbx-selection\" (click)=\"onHeaderSelectorClick($event)\" #headerSelectorContainer [ngClass]=\"{\n                    'igx-grid__cbx-selection--push': filteringService.isFilterRowVisible\n                }\" (pointerdown)=\"$event.preventDefault()\">\n                    <ng-template #headSelector\n                        *ngTemplateOutlet=\"\n                        this.headSelectorTemplate ? this.headSelectorTemplate : headSelectorBaseTemplate;\n                        context: { $implicit: {\n                                        selectedCount: this.selectionService.filteredSelectedRowIds.length,\n                                        totalCount: this.totalRowsCountAfterFilter }}\">\n                    </ng-template>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"pinnedColumns.length > 0 && isPinningToStart\">\n                <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxTopLevel\">\n                    <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                        [style.flex-basis]=\"getHeaderGroupWidth(col)\"></igx-grid-header-group>\n                </ng-template>\n            </ng-container>\n            <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxTopLevel\"\n                [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\n                [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges'\n                [igxForSizePropName]='\"calcPixelWidth\"' #hContainer>\n                <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                    [style.flex-basis]=\"getHeaderGroupWidth(col)\"></igx-grid-header-group>\n            </ng-template>\n            <ng-container *ngIf=\"pinnedColumns.length > 0 && !isPinningToStart\">\n                <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxTopLevel\">\n                    <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                        [style.flex-basis]=\"getHeaderGroupWidth(col)\" [style.left]=\"col.rightPinnedOffset\"></igx-grid-header-group>\n                </ng-template>\n            </ng-container>\n        </div>\n        <igx-grid-filtering-row #filteringRow [style.width.px]='calcWidth' *ngIf=\"filteringService.isFilterRowVisible\"\n            [column]=\"filteringService.filteredColumn\"></igx-grid-filtering-row>\n    </div>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div class=\"igx-grid__thead-thumb\" [hidden]='!hasVerticalScroll()' [style.width.px]=\"scrollSize\"></div>\n</div>\n\n<div igxGridBody (keydown.control.c)=\"copyHandler($event)\" (copy)=\"copyHandler($event)\" class=\"igx-grid__tbody\">\n    <div class=\"igx-grid__tbody-content\" tabindex=\"0\" [attr.aria-activedescendant]=\"activeDescendant\" (keydown)=\"navigation.handleNavigation($event)\" (focus)=\"navigation.focusTbody($event)\"\n        role=\"rowgroup\" (onDragStop)=\"selectionService.dragMode = $event\" (scroll)='preventContainerScroll($event)'\n        (onDragScroll)=\"dragScroll($event)\" [igxGridDragSelect]=\"selectionService.dragMode\"\n        [style.height.px]='totalHeight' [style.width.px]='calcWidth || null' #tbody>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n    <ng-container *ngTemplateOutlet=\"hasPinnedRecords && isRowPinningToTop ? pinnedRecordsTemplate : null\">\n    </ng-container>\n    <ng-template #pinnedRecordsTemplate>\n        <ng-container *ngIf='data\n        | gridTransaction:id:pipeTrigger\n        | visibleColumns:hasVisibleColumns\n        | gridRowPinning:id:true:pipeTrigger\n        | gridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger:true\n        | gridSort:sortingExpressions:sortStrategy:id:pipeTrigger:true\n        | gridAddRow:true:pipeTrigger as pinnedData'>\n            <div #pinContainer *ngIf='pinnedData.length > 0'\n                [ngClass]=\"{\n                    'igx-grid__tr--pinned-bottom':  !isRowPinningToTop,\n                    'igx-grid__tr--pinned-top': isRowPinningToTop\n                }\"\n                class='igx-grid__tr--pinned' [style.width.px]='calcWidth'>\n                <ng-container *ngFor=\"let rowData of pinnedData; let rowIndex = index\">\n                    <ng-container *ngTemplateOutlet=\"pinned_record_template; context: getContext(rowData, rowIndex, true)\">\n                    </ng-container>\n                </ng-container>\n            </div>\n        </ng-container>\n    </ng-template>\n        <ng-template igxGridFor let-rowData [igxGridForOf]=\"data\n        | gridTransaction:id:pipeTrigger\n        | visibleColumns:hasVisibleColumns\n        | gridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger\n        | gridSort:sortingExpressions:sortStrategy:id:pipeTrigger\n        | gridGroupBy:groupingExpressions:groupingExpansionState:groupsExpanded:id:groupsRecords:pipeTrigger\n        | gridPaging:page:perPage:id:pipeTrigger\n        | gridSummary:hasSummarizedColumns:summaryCalculationMode:summaryPosition:id:showSummaryOnCollapse:pipeTrigger:summaryPipeTrigger\n        | gridDetails:hasDetails:expansionStates:pipeTrigger\n        | gridRowPinning:id:false:pipeTrigger\n        | gridAddRow:false:pipeTrigger\"\n            let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]='verticalScroll'\n            [igxForContainerSize]='calcHeight'\n            [igxForItemSize]=\"hasColumnLayouts ? rowHeight * multiRowLayoutRowSize + 1 : renderedRowHeight\"\n            [igxForTrackBy]='trackChanges'\n            #verticalScrollContainer (onChunkPreload)=\"dataLoading($event)\">\n            <ng-template\n                [igxTemplateOutlet]='getRowTemplate(rowData)'\n                [igxTemplateOutletContext]='getContext(rowData, rowIndex)'\n                (onCachedViewLoaded)='cachedViewLoaded($event)'\n                (onViewCreated)='viewCreatedHandler($event)'\n                (onViewMoved)='viewMovedHandler($event)'>\n            </ng-template>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"hasPinnedRecords && !isRowPinningToTop ? pinnedRecordsTemplate : null\">\n        </ng-container>\n        <ng-template #record_template let-rowIndex=\"index\" let-rowData let-disabledRow=\"disabled\" let-isAddRow=\"addRow\">\n            <igx-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [rowData]=\"rowData\" [disabled]=\"disabledRow\" [addRow]=\"isAddRow\" #row>\n            </igx-grid-row>\n        </ng-template>\n        <ng-template #pinned_record_template let-rowIndex=\"index\" let-rowData let-isAddRow=\"addRow\">\n            <igx-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [rowData]=\"rowData\" [addRow]=\"isAddRow\" #row #pinnedRow>\n            </igx-grid-row>\n        </ng-template>\n        <ng-template #group_template let-rowIndex=\"index\" let-rowData>\n            <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row>\n            </igx-grid-groupby-row>\n        </ng-template>\n        <ng-template #summary_template let-rowIndex=\"index\" let-rowData>\n            <igx-grid-summary-row [gridID]=\"id\" [summaries]=\"rowData.summaries\" [index]=\"rowIndex\"\n                class=\"igx-grid__summaries--body\" #summaryRow>\n            </igx-grid-summary-row>\n        </ng-template>\n        <ng-template #detail_template_container let-rowIndex=\"index\" let-rowData>\n            <div detail='true' style=\"overflow:auto;width: 100%;\" id=\"{{id}}_{{rowIndex}}\" (pointerdown)='detailsViewFocused(detailsContainer, rowIndex)' #detailsContainer [attr.data-rowindex]='rowIndex'\n                [ngClass]=\"{\n                'igx-grid__tr-container': true,\n                'igx-grid__tr-container--active': isDetailActive(rowIndex)\n            }\">\n                <div class=\"igx-grid__hierarchical-indent\" style='display:flex;'>\n                        <ng-container *ngIf=\"this.groupingExpressions.length > 0\">\n                                <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{groupingExpressions.length}}\"></div>\n                        </ng-container>\n                        <ng-template\n                    [ngTemplateOutlet]='detailTemplate'\n                    [ngTemplateOutletContext]='getDetailsContext(rowData, rowIndex)'>\n                    </ng-template>\n                </div>\n            </div>\n        </ng-template>\n\n        <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n        <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\n        <igc-trial-watermark></igc-trial-watermark>\n    </div>\n    <div #loadingOverlay>\n        <igx-circular-bar [indeterminate]=\"true\" *ngIf='shouldOverlayLoading'>\n        </igx-circular-bar>\n    </div>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div [hidden]='!hasVerticalScroll()' class=\"igx-grid__tbody-scrollbar\" [style.width.px]=\"scrollSize\" (pointerdown)=\"$event.preventDefault()\">\n        <div class=\"igx-grid__tbody-scrollbar-start\" [style.height.px]=' isRowPinningToTop ? pinnedRowHeight : 0'></div>\n        <div class=\"igx-grid__tbody-scrollbar-main\" [style.height.px]='calcHeight'>\n            <ng-template igxGridFor [igxGridForOf]='[]' #verticalScrollHolder></ng-template>\n        </div>\n        <div class=\"igx-grid__tbody-scrollbar-end\" [style.height.px]='!isRowPinningToTop ? pinnedRowHeight : 0'></div>\n    </div>\n\n    <div class=\"igx-grid__addrow-snackbar\">\n        <igx-snackbar #addRowSnackbar [actionText]=\"snackbarActionText\" [displayTime]='snackbarDisplayTime'>{{snackbarLabel}}</igx-snackbar>\n    </div>\n</div>\n\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.height.px]='summariesHeight' tabindex=\"0\" [attr.aria-activedescendant]=\"activeDescendant\"\n(focus)=\"navigation.focusFirstCell(false)\" (keydown)=\"navigation.summaryNav($event)\" #tfoot>\n    <igx-grid-summary-row [style.width.px]='calcWidth'  [style.height.px]='summariesHeight'\n        *ngIf=\"hasSummarizedColumns && rootSummariesEnabled\" [gridID]=\"id\" role=\"row\"\n        [summaries]=\"id | igxGridSummaryDataPipe:summaryService.retriggerRootPipe\" [index]=\"dataView.length\"\n        class=\"igx-grid__summaries\" #summaryRow>\n    </igx-grid-summary-row>\n    <div class=\"igx-grid__tfoot-thumb\" [hidden]='!hasVerticalScroll()' [style.height.px]='summariesHeight'\n        [style.width.px]=\"scrollSize\"></div>\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height.px]=\"scrollSize\" #scr [hidden]=\"isHorizontalScrollHidden\" (pointerdown)=\"$event.preventDefault()\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth' [style.min-width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth'></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #scrollContainer>\n        </ng-template>\n    </div>\n    <div class=\"igx-grid__scroll-end\" [style.float]='\"right\"' [style.width.px]='pinnedWidth' [style.min-width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0 || isPinningToStart\"></div>\n</div>\n\n<div class=\"igx-grid__footer\" #footer>\n    <ng-content select=\"igx-grid-footer\"></ng-content>\n    <ng-container *ngIf=\"paging && totalRecords\">\n        <ng-container\n            *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPaginator; context: {$implicit: this}\">\n        </ng-container>\n    </ng-container>\n</div>\n\n<ng-template #defaultPaginator>\n    <igx-paginator [overlaySettings]=\"paginatorSettings\" [displayDensity]=\"displayDensity\" [(page)]=\"page\" [totalRecords]=\"totalRecords\" [(perPage)]=\"perPage\">\n    </igx-paginator>\n</ng-template>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\">\n        <span>{{emptyFilteredGridMessage}}</span>\n        <span *ngIf='showAddButton'>\n            <ng-container *ngTemplateOutlet='addRowEmptyTemplate || defaultAddRowEmptyTemplate'></ng-container>\n        </span>\n    </span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\">\n        <span>{{emptyGridMessage}}</span>\n        <span *ngIf='showAddButton'>\n            <ng-container *ngTemplateOutlet='addRowEmptyTemplate || defaultAddRowEmptyTemplate'></ng-container>\n        </span>\n    </span>\n</ng-template>\n\n<ng-template #defaultAddRowEmptyTemplate>\n    <button igxButton=\"raised\" igxRipple (click)='beginAddRowByIndex(null, -1)'>\n        {{resourceStrings.igx_grid_add_row_label}}\n    </button>\n</ng-template>\n\n<ng-template #defaultLoadingGrid>\n    <div class=\"igx-grid__loading\">\n        <igx-circular-bar [indeterminate]=\"true\">\n        </igx-circular-bar>\n    </div>\n</ng-template>\n\n<ng-template #defaultDropArea>\n    <igx-icon fontSet=\"material\" class=\"igx-drop-area__icon\">group_work</igx-icon>\n    <span class=\"igx-drop-area__text\">{{dropAreaMessage}}</span>\n</ng-template>\n\n<ng-template #defaultExpandedTemplate>\n    <igx-icon role=\"button\" class=\"igx-grid__group-expand-btn\"\n   [ngClass]=\"{\n    'igx-grid__group-expand-btn--push': filteringService.isFilterRowVisible\n}\">unfold_less</igx-icon>\n</ng-template>\n\n <ng-template #defaultCollapsedTemplate>\n    <igx-icon role=\"button\" class=\"igx-grid__group-expand-btn\"\n    [ngClass]=\"{\n    'igx-grid__group-expand-btn--push': filteringService.isFilterRowVisible\n}\">unfold_more</igx-icon>\n</ng-template>\n\n<div *ngIf=\"rowEditable\" igxToggle>\n    <div [className]=\"bannerClass\">\n        <ng-container\n            *ngTemplateOutlet=\"rowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: endEdit.bind(this) }\">\n        </ng-container>\n    </div>\n</div>\n\n<ng-template #defaultRowEditText>\n    You have {{ rowChangesCount }} changes in this row\n</ng-template>\n\n<ng-template #defaultRowEditActions>\n    <button igxButton igxRowEditTabStop (click)=\"endRowEdit(false, $event)\">Cancel</button>\n    <button igxButton igxRowEditTabStop (click)=\"endRowEdit(true, $event)\">Done</button>\n</ng-template>\n\n<ng-template #defaultRowEditTemplate>\n    <div class=\"igx-banner__message\" *ngIf=\"!this.crudService.row?.isAddRow\">\n        <span class=\"igx-banner__text\">\n            <ng-container\n                *ngTemplateOutlet=\"rowEditText ? rowEditText : defaultRowEditText; context: { $implicit: rowChangesCount }\">\n            </ng-container>\n        </span>\n    </div>\n    <div class=\"igx-banner__actions\">\n        <div class=\"igx-banner__row\">\n            <ng-container\n                *ngTemplateOutlet=\"rowEditActions ? rowEditActions : defaultRowEditActions; context: { $implicit: endEdit.bind(this) }\">\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #dragIndicatorIconBase>\n    <igx-icon fontSet=\"material\">drag_indicator</igx-icon>\n</ng-template>\n\n<ng-template #headSelectorBaseTemplate igxHeadSelector let-context>\n    <div class=\"igx-grid__cbx-padding\">\n        <igx-checkbox\n            [tabindex]=\"-1\"\n            [readonly]=\"true\"\n            [checked]=\"context.selectedCount > 0 && context.totalCount === context.selectedCount\"\n            disableRipple=\"true\"\n            [ngStyle]=\"{'visibility': isMultiRowSelectionEnabled? 'visible' : 'hidden' }\"\n            [indeterminate]=\"context.selectedCount > 0 && context.selectedCount !== context.totalCount\"\n            [aria-label]=\"headSelectorBaseAriaLabel\"\n            #headerCheckbox>\n        </igx-checkbox>\n    </div>\n</ng-template>\n\n<igx-grid-column-resizer *ngIf=\"colResizingService.showResizer\"></igx-grid-column-resizer>\n<div class=\"igx-grid__loading-outlet\" #igxLoadingOverlayOutlet igxOverlayOutlet></div>\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet (keydown)=\"gridOutletKeyboardHandler($event)\"></div>\n"
            }]
    }], null, { onDataPreLoad: [{
            type: Output
        }], groupingExpressionsChange: [{
            type: Output
        }], groupingExpansionStateChange: [{
            type: Output
        }], groupsExpanded: [{
            type: Input
        }], onGroupingDone: [{
            type: Output
        }], detailTemplate: [{
            type: ContentChild,
            args: [IgxGridDetailTemplateDirective, { read: TemplateRef, static: false }]
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], data: [{
            type: Input
        }], groupingExpressions: [{
            type: Input
        }], groupingExpansionState: [{
            type: Input
        }], hideGroupedColumns: [{
            type: Input
        }], dropAreaMessage: [{
            type: Input
        }], showGroupArea: [{
            type: Input
        }], dropAreaTemplate: [{
            type: Input
        }], groupTemplate: [{
            type: ContentChild,
            args: [IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective }]
        }], gridDetailsTemplate: [{
            type: ContentChild,
            args: [IgxGridDetailTemplateDirective, { read: IgxGridDetailTemplateDirective, static: false }]
        }], _groupsRowList: [{
            type: ViewChildren,
            args: [IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent }]
        }], defaultDropAreaTemplate: [{
            type: ViewChild,
            args: ['defaultDropArea', { read: TemplateRef, static: true }]
        }], groupArea: [{
            type: ViewChild,
            args: ['groupArea']
        }], recordTemplate: [{
            type: ViewChild,
            args: ['record_template', { read: TemplateRef, static: true }]
        }], detailTemplateContainer: [{
            type: ViewChild,
            args: ['detail_template_container', { read: TemplateRef, static: true }]
        }], defaultGroupTemplate: [{
            type: ViewChild,
            args: ['group_template', { read: TemplateRef, static: true }]
        }], summaryTemplate: [{
            type: ViewChild,
            args: ['summary_template', { read: TemplateRef, static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,