import { Directive, ElementRef, HostListener } from '@angular/core';
import { GridBaseAPIService } from './api.service';
/** @hidden @internal */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './api.service';
export class IgxRowEditTemplateDirective {
}
IgxRowEditTemplateDirective.ɵfac = function IgxRowEditTemplateDirective_Factory(t) { return new (t || IgxRowEditTemplateDirective)(); };
IgxRowEditTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxRowEditTemplateDirective, selectors: [["", "igxRowEdit", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxRowEditTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxRowEdit]'
            }]
    }], null, null); })();
/** @hidden @internal */
export class IgxRowEditTextDirective {
}
IgxRowEditTextDirective.ɵfac = function IgxRowEditTextDirective_Factory(t) { return new (t || IgxRowEditTextDirective)(); };
IgxRowEditTextDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxRowEditTextDirective, selectors: [["", "igxRowEditText", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxRowEditTextDirective, [{
        type: Directive,
        args: [{
                selector: '[igxRowEditText]'
            }]
    }], null, null); })();
/** @hidden @internal */
export class IgxRowEditActionsDirective {
}
IgxRowEditActionsDirective.ɵfac = function IgxRowEditActionsDirective_Factory(t) { return new (t || IgxRowEditActionsDirective)(); };
IgxRowEditActionsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxRowEditActionsDirective, selectors: [["", "igxRowEditActions", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxRowEditActionsDirective, [{
        type: Directive,
        args: [{
                selector: '[igxRowEditActions]'
            }]
    }], null, null); })();
// TODO: Refactor circular ref, deps and logic
/** @hidden @internal */
export class IgxRowEditTabStopDirective {
    constructor(api, element) {
        this.api = api;
        this.element = element;
    }
    get grid() {
        return this.api.grid;
    }
    handleTab(event) {
        event.stopPropagation();
        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||
            (this.grid.rowEditTabs.first === this && event.shiftKey)) {
            this.move(event);
        }
    }
    handleEscape(event) {
        this.grid.endEdit(false, event);
        this.grid.tbody.nativeElement.focus();
    }
    handleEnter(event) {
        event.stopPropagation();
    }
    /**
     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.
     * If cell is out of view first scrolls to the cell
     * @param event keyboard event containing information about whether SHIFT key was pressed
     */
    move(event) {
        event.preventDefault();
        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;
        this.grid.navigation.activeNode.row = this.grid.rowInEditMode.index;
        this.grid.navigation.activeNode.column = this.currentCellIndex;
        this.grid.navigateTo(this.grid.rowInEditMode.index, this.currentCellIndex, (obj) => {
            obj.target.activate(event);
            this.grid.cdr.detectChanges();
        });
    }
}
IgxRowEditTabStopDirective.ɵfac = function IgxRowEditTabStopDirective_Factory(t) { return new (t || IgxRowEditTabStopDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxRowEditTabStopDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxRowEditTabStopDirective, selectors: [["", "igxRowEditTabStop", ""]], hostBindings: function IgxRowEditTabStopDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.Tab", function IgxRowEditTabStopDirective_keydown_Tab_HostBindingHandler($event) { return ctx.handleTab($event); })("keydown.Shift.Tab", function IgxRowEditTabStopDirective_keydown_Shift_Tab_HostBindingHandler($event) { return ctx.handleTab($event); })("keydown.Escape", function IgxRowEditTabStopDirective_keydown_Escape_HostBindingHandler($event) { return ctx.handleEscape($event); })("keydown.Enter", function IgxRowEditTabStopDirective_keydown_Enter_HostBindingHandler($event) { return ctx.handleEnter($event); });
    } } });
IgxRowEditTabStopDirective.ctorParameters = () => [
    { type: GridBaseAPIService },
    { type: ElementRef }
];
IgxRowEditTabStopDirective.propDecorators = {
    handleTab: [{ type: HostListener, args: ['keydown.Tab', [`$event`],] }, { type: HostListener, args: ['keydown.Shift.Tab', [`$event`],] }],
    handleEscape: [{ type: HostListener, args: ['keydown.Escape', [`$event`],] }],
    handleEnter: [{ type: HostListener, args: ['keydown.Enter', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxRowEditTabStopDirective, [{
        type: Directive,
        args: [{
                selector: `[igxRowEditTabStop]`
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }, { type: ɵngcc0.ElementRef }]; }, { handleTab: [{
            type: HostListener,
            args: ['keydown.Tab', [`$event`]]
        }, {
            type: HostListener,
            args: ['keydown.Shift.Tab', [`$event`]]
        }], handleEscape: [{
            type: HostListener,
            args: ['keydown.Escape', [`$event`]]
        }], handleEnter: [{
            type: HostListener,
            args: ['keydown.Enter', ['$event']]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5yb3dFZGl0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL2dyaWQucm93RWRpdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVEsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCx3QkFBd0I7OztBQUl4QixNQUFNLE9BQU8sMkJBQTJCO0FBQUc7dURBSDFDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsY0FBYyxjQUMzQjs7Ozs7OzswQkFDSTtBQUVMLHdCQUF3QjtBQUl4QixNQUFNLE9BQU8sdUJBQXVCO0FBQUc7bURBSHRDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsa0JBQWtCO0lBQy9COzs7Ozs7MEJBQ0k7QUFFTCx3QkFBd0I7QUFJeEIsTUFBTSxPQUFPLDBCQUEwQjtBQUFHO3NEQUh6QyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtDQUNsQzs7Ozs7OzBCQUNJO0FBR0wsOENBQThDO0FBQzlDLHdCQUF3QjtBQUl4QixNQUFNLE9BQU8sMEJBQTBCO0FBQ3ZDLElBR0ksWUFBbUIsR0FBNEIsRUFBUyxPQUFtQjtBQUFJLFFBQTVELFFBQUcsR0FBSCxHQUFHLENBQXlCO0FBQUMsUUFBUSxZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsSUFBRSxDQUFDO0FBQ25GLElBQ0ksSUFBSSxJQUFJO0FBQ1osUUFBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzdCLElBQUksQ0FBQztBQUNMLElBR1csU0FBUyxDQUFDLEtBQW9CO0FBQUksUUFDckMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2hDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQ3BFLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFDMUQ7QUFDVixZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBRVcsWUFBWSxDQUFDLEtBQW9CO0FBQUksUUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzlDLElBQUksQ0FBQztBQUNMLElBRVcsV0FBVyxDQUFDLEtBQW9CO0FBQUksUUFDdkMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBWSxJQUFJLENBQUMsS0FBb0I7QUFDckMsUUFBUSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDL0IsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztBQUN4SCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0FBQzVFLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7QUFDdkUsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7QUFDM0YsWUFBWSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTDtzREFsREMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxxQkFBcUIsY0FDbEM7OztXQUNJO0FBQUM7QUFDVSxZQTNCUCxrQkFBa0I7QUFBSSxZQURYLFVBQVU7QUFBRztBQUFHO0FBQzdCLHdCQW9DRixZQUFZLFNBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3RDLFlBQVksU0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUM1QywyQkFTQSxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDekMsMEJBS0EsWUFBWSxTQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUN6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3QsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi9hcGkuc2VydmljZSc7XG5cbi8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Um93RWRpdF0nXG59KVxuZXhwb3J0IGNsYXNzIElneFJvd0VkaXRUZW1wbGF0ZURpcmVjdGl2ZSB7IH1cblxuLyoqIEBoaWRkZW4gQGludGVybmFsICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hSb3dFZGl0VGV4dF0nXG59KVxuZXhwb3J0IGNsYXNzIElneFJvd0VkaXRUZXh0RGlyZWN0aXZlIHsgfVxuXG4vKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFJvd0VkaXRBY3Rpb25zXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Um93RWRpdEFjdGlvbnNEaXJlY3RpdmUgeyB9XG5cblxuLy8gVE9ETzogUmVmYWN0b3IgY2lyY3VsYXIgcmVmLCBkZXBzIGFuZCBsb2dpY1xuLyoqIEBoaWRkZW4gQGludGVybmFsICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogYFtpZ3hSb3dFZGl0VGFiU3RvcF1gXG59KVxuZXhwb3J0IGNsYXNzIElneFJvd0VkaXRUYWJTdG9wRGlyZWN0aXZlIHtcbiAgICBwcml2YXRlIGN1cnJlbnRDZWxsSW5kZXg6IG51bWJlcjtcblxuXG4gICAgY29uc3RydWN0b3IocHVibGljIGFwaTogR3JpZEJhc2VBUElTZXJ2aWNlPGFueT4sIHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmKSB7fVxuXG4gICAgZ2V0IGdyaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaS5ncmlkO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uVGFiJywgW2AkZXZlbnRgXSlcbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLlNoaWZ0LlRhYicsIFtgJGV2ZW50YF0pXG4gICAgcHVibGljIGhhbmRsZVRhYihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKCh0aGlzLmdyaWQucm93RWRpdFRhYnMubGFzdCA9PT0gdGhpcyAmJiAhZXZlbnQuc2hpZnRLZXkpIHx8XG4gICAgICAgICAgICAodGhpcy5ncmlkLnJvd0VkaXRUYWJzLmZpcnN0ID09PSB0aGlzICYmIGV2ZW50LnNoaWZ0S2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMubW92ZShldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLkVzY2FwZScsIFtgJGV2ZW50YF0pXG4gICAgcHVibGljIGhhbmRsZUVzY2FwZShldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdyaWQuZW5kRWRpdChmYWxzZSwgZXZlbnQpO1xuICAgICAgICB0aGlzLmdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uRW50ZXInLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBoYW5kbGVFbnRlcihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBmb2N1cyB0byBmaXJzdC9sYXN0IGVkaXRhYmxlIGNlbGwgaW4gdGhlIGVkaXRhYmxlIHJvdyBhbmQgcHV0IHRoZSBjZWxsIGluIGVkaXQgbW9kZS5cbiAgICAgKiBJZiBjZWxsIGlzIG91dCBvZiB2aWV3IGZpcnN0IHNjcm9sbHMgdG8gdGhlIGNlbGxcbiAgICAgKiBAcGFyYW0gZXZlbnQga2V5Ym9hcmQgZXZlbnQgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB3aGV0aGVyIFNISUZUIGtleSB3YXMgcHJlc3NlZFxuICAgICAqL1xuICAgIHByaXZhdGUgbW92ZShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRDZWxsSW5kZXggPSBldmVudC5zaGlmdEtleSA/IHRoaXMuZ3JpZC5sYXN0RWRpdGFibGVDb2x1bW5JbmRleCA6IHRoaXMuZ3JpZC5maXJzdEVkaXRhYmxlQ29sdW1uSW5kZXg7XG4gICAgICAgIHRoaXMuZ3JpZC5uYXZpZ2F0aW9uLmFjdGl2ZU5vZGUucm93ID0gdGhpcy5ncmlkLnJvd0luRWRpdE1vZGUuaW5kZXg7XG4gICAgICAgIHRoaXMuZ3JpZC5uYXZpZ2F0aW9uLmFjdGl2ZU5vZGUuY29sdW1uID0gdGhpcy5jdXJyZW50Q2VsbEluZGV4O1xuICAgICAgICB0aGlzLmdyaWQubmF2aWdhdGVUbyh0aGlzLmdyaWQucm93SW5FZGl0TW9kZS5pbmRleCwgdGhpcy5jdXJyZW50Q2VsbEluZGV4LCAob2JqKSA9PiB7XG4gICAgICAgICAgICBvYmoudGFyZ2V0LmFjdGl2YXRlKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=