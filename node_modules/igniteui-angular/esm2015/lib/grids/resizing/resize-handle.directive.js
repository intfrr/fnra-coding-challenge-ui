import { Directive, ElementRef, Input, NgZone, HostListener } from '@angular/core';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { IgxColumnResizingService } from './resizing.service';
/**
 * @hidden
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './resizing.service';
export class IgxResizeHandleDirective {
    constructor(zone, element, colResizingService) {
        this.zone = zone;
        this.element = element;
        this.colResizingService = colResizingService;
        /**
         * @hidden
         */
        this._dblClick = false;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
        this.DEBOUNCE_TIME = 200;
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        if (!this.column.columnGroup && this.column.resizable) {
            this.zone.runOutsideAngular(() => {
                fromEvent(this.element.nativeElement, 'mousedown').pipe(debounceTime(this.DEBOUNCE_TIME), takeUntil(this.destroy$)).subscribe((event) => {
                    if (this._dblClick) {
                        this._dblClick = false;
                        return;
                    }
                    if (event.button === 0) {
                        this._onResizeAreaMouseDown(event);
                        this.column.grid.resizeLine.resizer.onMousedown(event);
                    }
                });
            });
            fromEvent(this.element.nativeElement, 'mouseup').pipe(debounceTime(this.DEBOUNCE_TIME), takeUntil(this.destroy$)).subscribe(() => {
                this.colResizingService.isColumnResizing = false;
                this.colResizingService.showResizer = false;
                this.column.grid.cdr.detectChanges();
            });
        }
    }
    /**
     * @hidden
     */
    onMouseOver() {
        this.colResizingService.resizeCursor = 'col-resize';
    }
    /**
     * @hidden
     */
    onDoubleClick() {
        this._dblClick = true;
        this.colResizingService.column = this.column;
        this.colResizingService.autosizeColumnOnDblClick();
    }
    /**
     * @hidden
     */
    _onResizeAreaMouseDown(event) {
        this.colResizingService.column = this.column;
        this.colResizingService.isColumnResizing = true;
        this.colResizingService.startResizePos = event.clientX;
        this.colResizingService.showResizer = true;
        this.column.grid.cdr.detectChanges();
    }
}
IgxResizeHandleDirective.ɵfac = function IgxResizeHandleDirective_Factory(t) { return new (t || IgxResizeHandleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxColumnResizingService)); };
IgxResizeHandleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxResizeHandleDirective, selectors: [["", "igxResizeHandle", ""]], hostBindings: function IgxResizeHandleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseover", function IgxResizeHandleDirective_mouseover_HostBindingHandler() { return ctx.onMouseOver(); })("dblclick", function IgxResizeHandleDirective_dblclick_HostBindingHandler() { return ctx.onDoubleClick(); });
    } }, inputs: { column: ["igxResizeHandle", "column"] } });
IgxResizeHandleDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: IgxColumnResizingService }
];
IgxResizeHandleDirective.propDecorators = {
    column: [{ type: Input, args: ['igxResizeHandle',] }],
    onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
    onDoubleClick: [{ type: HostListener, args: ['dblclick',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxResizeHandleDirective, [{
        type: Directive,
        args: [{
                selector: '[igxResizeHandle]'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.IgxColumnResizingService }]; }, { 
    /**
     * @hidden
     */
    onMouseOver: [{
            type: HostListener,
            args: ['mouseover']
        }], 
    /**
     * @hidden
     */
    onDoubleClick: [{
            type: HostListener,
            args: ['dblclick']
        }], column: [{
            type: Input,
            args: ['igxResizeHandle']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,