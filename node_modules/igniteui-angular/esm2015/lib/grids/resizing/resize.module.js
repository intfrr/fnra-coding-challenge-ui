import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IgxColumnResizingService } from './resizing.service';
import { IgxGridColumnResizerComponent } from './resizer.component';
import { IgxResizeHandleDirective } from './resize-handle.directive';
import { IgxColumnResizerDirective } from './resizer.directive';
import * as ɵngcc0 from '@angular/core';
export class IgxGridResizingModule {
}
IgxGridResizingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxGridResizingModule });
IgxGridResizingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxGridResizingModule_Factory(t) { return new (t || IgxGridResizingModule)(); }, providers: [
        IgxColumnResizingService
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxGridResizingModule, { declarations: function () { return [IgxGridColumnResizerComponent,
        IgxResizeHandleDirective,
        IgxColumnResizerDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [IgxGridColumnResizerComponent,
        IgxResizeHandleDirective,
        IgxColumnResizerDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridResizingModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    IgxGridColumnResizerComponent,
                    IgxResizeHandleDirective,
                    IgxColumnResizerDirective
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    IgxGridColumnResizerComponent,
                    IgxResizeHandleDirective,
                    IgxColumnResizerDirective
                ],
                providers: [
                    IgxColumnResizingService
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Jlc2l6aW5nL3Jlc2l6ZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDckUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBcUJoRSxNQUFNLE9BQU8scUJBQXFCO0FBQUc7aURBbEJwQyxRQUFRLFNBQUMsa0JBQ047U0FBWSxFQUFFLHNCQUNWLDZCQUE2QixzQkFDN0Isd0JBQXdCLHNCQUN4Qix5QkFBeUI7TUFDNUIsa0JBQ0QsT0FBTztBQUFFO0dBQ0wsWUFBWTtRQUNmO1dBQ0QsT0FBTyxFQUFFLHNCQUNMLDZCQUE2QixzQkFDN0Isd0JBQXdCLHNCQUN4Qix5QkFBeUIsa0JBQzVCO2dCQUNELFNBQVMsRUFBRTtlQUNQLHdCQUF3QixrQkFDM0IsY0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSWd4Q29sdW1uUmVzaXppbmdTZXJ2aWNlIH0gZnJvbSAnLi9yZXNpemluZy5zZXJ2aWNlJztcbmltcG9ydCB7IElneEdyaWRDb2x1bW5SZXNpemVyQ29tcG9uZW50IH0gZnJvbSAnLi9yZXNpemVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hSZXNpemVIYW5kbGVEaXJlY3RpdmUgfSBmcm9tICcuL3Jlc2l6ZS1oYW5kbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneENvbHVtblJlc2l6ZXJEaXJlY3RpdmUgfSBmcm9tICcuL3Jlc2l6ZXIuZGlyZWN0aXZlJztcblxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBJZ3hHcmlkQ29sdW1uUmVzaXplckNvbXBvbmVudCxcbiAgICAgICAgSWd4UmVzaXplSGFuZGxlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDb2x1bW5SZXNpemVyRGlyZWN0aXZlXG4gICAgXSxcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBJZ3hHcmlkQ29sdW1uUmVzaXplckNvbXBvbmVudCxcbiAgICAgICAgSWd4UmVzaXplSGFuZGxlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDb2x1bW5SZXNpemVyRGlyZWN0aXZlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgSWd4Q29sdW1uUmVzaXppbmdTZXJ2aWNlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkUmVzaXppbmdNb2R1bGUge31cbiJdfQ==