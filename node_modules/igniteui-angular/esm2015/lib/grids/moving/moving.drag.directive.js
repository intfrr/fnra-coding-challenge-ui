import { Directive, Input, ElementRef, ViewContainerRef, NgZone, Renderer2, ChangeDetectorRef } from '@angular/core';
import { IgxDragDirective } from '../../directives/drag-drop/drag-drop.directive';
import { fromEvent } from 'rxjs';
import { IgxColumnMovingService } from './moving.service';
/**
 * @hidden
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './moving.service';
export class IgxColumnMovingDragDirective extends IgxDragDirective {
    constructor(element, viewContainer, zone, renderer, cdr, cms) {
        super(cdr, element, viewContainer, zone, renderer);
        this.element = element;
        this.viewContainer = viewContainer;
        this.zone = zone;
        this.renderer = renderer;
        this.cdr = cdr;
        this.cms = cms;
        this._ghostClass = 'igx-grid__drag-ghost-image';
        this.ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';
        this.ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';
        this.columnSelectedClass = 'igx-grid__th--selected';
    }
    get column() {
        return this.data;
    }
    get draggable() {
        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));
    }
    get icon() {
        return this.cms.icon;
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    onEscape(event) {
        this.cms.cancelDrop = true;
        this.onPointerUp(event);
    }
    onPointerDown(event) {
        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this._removeOnDestroy = false;
        this.cms.column = this.column;
        this.ghostClass = this._ghostClass;
        super.onPointerDown(event);
        this.cms.isColumnMoving = true;
        this.column.grid.cdr.detectChanges();
        const args = {
            source: this.column
        };
        this.column.grid.onColumnMovingStart.emit(args);
        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev) => {
            if (ev.key === "Escape" /* ESCAPE */ || ev.key === "Esc" /* ESCAPE_IE */) {
                this.onEscape(ev);
            }
        });
    }
    onPointerMove(event) {
        event.preventDefault();
        super.onPointerMove(event);
        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {
            this.column.grid.draggedColumn = this.column;
            this.column.grid.cdr.detectChanges();
        }
        if (this.cms.isColumnMoving) {
            const args = {
                source: this.column,
                cancel: false
            };
            this.column.grid.onColumnMoving.emit(args);
            if (args.cancel) {
                this.onEscape(event);
            }
        }
    }
    onPointerUp(event) {
        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.
        this.zone.run(() => {
            super.onPointerUp(event);
            this.cms.isColumnMoving = false;
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        });
        this._unsubscribe();
    }
    createGhost(pageX, pageY) {
        super.createGhost(pageX, pageY);
        this.ghostElement.style.height = null;
        this.ghostElement.style.minWidth = null;
        this.ghostElement.style.flexBasis = null;
        this.ghostElement.style.position = null;
        this.renderer.removeClass(this.ghostElement, this.columnSelectedClass);
        const icon = document.createElement('i');
        const text = document.createTextNode('block');
        icon.appendChild(text);
        icon.classList.add('material-icons');
        this.cms.icon = icon;
        if (!this.column.columnGroup) {
            this.renderer.addClass(icon, this.ghostImgIconClass);
            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);
            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);
            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);
        }
        else {
            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);
            this.renderer.addClass(icon, this.ghostImgIconGroupClass);
            this.ghostElement.children[0].style.paddingLeft = '0px';
            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);
            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);
        }
    }
    _unsubscribe() {
        if (this.subscription$) {
            this.subscription$.unsubscribe();
            this.subscription$ = null;
        }
    }
}
IgxColumnMovingDragDirective.ɵfac = function IgxColumnMovingDragDirective_Factory(t) { return new (t || IgxColumnMovingDragDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxColumnMovingService)); };
IgxColumnMovingDragDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxColumnMovingDragDirective, selectors: [["", "igxColumnMovingDrag", ""]], inputs: { data: ["igxColumnMovingDrag", "data"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IgxColumnMovingDragDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: IgxColumnMovingService }
];
IgxColumnMovingDragDirective.propDecorators = {
    data: [{ type: Input, args: ['igxColumnMovingDrag',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnMovingDragDirective, [{
        type: Directive,
        args: [{
                selector: '[igxColumnMovingDrag]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.IgxColumnMovingService }]; }, { data: [{
            type: Input,
            args: ['igxColumnMovingDrag']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,