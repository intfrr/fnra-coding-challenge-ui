import { Component, forwardRef, Input, ViewChildren, HostBinding, ChangeDetectionStrategy } from '@angular/core';
import { IgxRowDirective } from '../row.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../directives/for-of/for_of.directive';
import * as ɵngcc3 from '../row-drag.directive';
import * as ɵngcc4 from '../cell.component';
import * as ɵngcc5 from './tree-cell.component';
import * as ɵngcc6 from '../../checkbox/checkbox.component';
import * as ɵngcc7 from '../common/pipes';

const _c0 = ["treeCell"];
function IgxTreeGridRowComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridRowComponent_ng_template_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridRowComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵlistener("animationend", function IgxTreeGridRowComponent_ng_template_1_Template_div_animationend_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.animationEndHandler(); });
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridRowComponent_ng_template_1_ng_container_1_Template, 1, 0, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵclassProp("igx-grid__tr--add-animate", ctx_r2.animateAdd);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵlistener("click", function IgxTreeGridRowComponent_ng_template_3_ng_container_0_Template_div_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); return $event.stopPropagation(); });
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridRowComponent_ng_template_3_ng_container_0_ng_container_2_Template, 1, 0, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r8.resolveDragIndicatorClasses);
    ɵngcc0.ɵɵproperty("igxRowDrag", ctx_r8)("ghostTemplate", ctx_r8.grid.getDragGhostCustomTemplate());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r8.grid.dragIndicatorIconTemplate ? ctx_r8.grid.dragIndicatorIconTemplate : ctx_r8.grid.dragIndicatorIconBase);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_container_1_2_ng_template_0_Template(rf, ctx) { }
function IgxTreeGridRowComponent_ng_template_3_ng_container_1_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridRowComponent_ng_template_3_ng_container_1_2_ng_template_0_Template, 0, 0, "ng-template");
} }
const _c1 = function (a0, a1, a2) { return { index: a0, rowID: a1, selected: a2 }; };
const _c2 = function (a0) { return { $implicit: a0 }; };
function IgxTreeGridRowComponent_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵlistener("click", function IgxTreeGridRowComponent_ng_template_3_ng_container_1_Template_div_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.onRowSelectorClick($event); })("pointerdown", function IgxTreeGridRowComponent_ng_template_3_ng_container_1_Template_div_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); return $event.preventDefault(); });
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridRowComponent_ng_template_3_ng_container_1_2_Template, 1, 0, undefined, 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r14 = ɵngcc0.ɵɵreference(8);
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r9.grid.rowSelectorTemplate ? ctx_r9.grid.rowSelectorTemplate : _r14)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(6, _c2, ɵngcc0.ɵɵpureFunction3(2, _c1, ctx_r9.viewIndex, ctx_r9.rowID, ctx_r9.selected)));
} }
function IgxTreeGridRowComponent_ng_template_3_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridRowComponent_ng_template_3_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r16 = ɵngcc0.ɵɵreference(10);
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r16)("ngTemplateOutletContext", ctx_r10);
} }
const _c3 = function (a0, a1, a2, a3, a4, a5, a6) { return [a0, a1, a2, a3, a4, a5, a6]; };
const _c4 = function (a0, a1, a2, a3, a4, a5) { return [a0, a1, a2, a3, a4, a5]; };
function IgxTreeGridRowComponent_ng_template_3_ng_template_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-grid-cell", 14, 15);
    ɵngcc0.ɵɵpipe(2, "transactionState");
    ɵngcc0.ɵɵpipe(3, "igxStringReplace");
    ɵngcc0.ɵɵpipe(4, "igxCellStyleClasses");
    ɵngcc0.ɵɵpipe(5, "igxCellStyles");
    ɵngcc0.ɵɵpipe(6, "dataMapper");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r27 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r30 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("min-height", ctx_r30.cellHeight, "px")("min-width", col_r27.width)("max-width", col_r27.width)("flex-basis", col_r27.width);
    ɵngcc0.ɵɵclassProp("igx-grid__td--edited", ɵngcc0.ɵɵpipeBindV(2, 30, ɵngcc0.ɵɵpureFunction7(60, _c3, ctx_r30.rowID, col_r27.field, ctx_r30.grid.rowEditable, ctx_r30.grid.transactions, ctx_r30.grid.pipeTrigger, ctx_r30.grid.crudService.cell, ctx_r30.grid.crudService.row)))("igx-grid__td--number", col_r27.dataType === "number")("igx-grid__td--bool", col_r27.dataType === "boolean");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBindV(4, 42, ɵngcc0.ɵɵpureFunction6(68, _c4, col_r27.cellClasses, ctx_r30.rowData[col_r27.field], ctx_r30.rowData, col_r27.field, ctx_r30.viewIndex, ctx_r30.grid.pipeTrigger)))("ngStyle", ɵngcc0.ɵɵpipeBindV(5, 49, ɵngcc0.ɵɵpureFunction6(75, _c4, col_r27.cellStyles, ctx_r30.rowData[col_r27.field], ctx_r30.rowData, col_r27.field, ctx_r30.viewIndex, ctx_r30.grid.pipeTrigger)))("editMode", col_r27.editable && ctx_r30.crudService.targetInEdit(ctx_r30.index, col_r27.index))("column", col_r27)("formatter", col_r27.formatter)("row", ctx_r30)("rowData", ctx_r30.rowData)("width", col_r27.getCellWidth())("visibleColumnIndex", col_r27.visibleIndex)("value", ɵngcc0.ɵɵpipeBind3(6, 56, ctx_r30.rowData, col_r27.field, ctx_r30.grid.pipeTrigger))("cellTemplate", col_r27.bodyTemplate)("lastSearchInfo", ctx_r30.grid.lastSearchInfo)("active", ctx_r30.isCellActive(col_r27.visibleIndex))("cellSelectionMode", ctx_r30.grid.cellSelection)("displayPinnedChip", ctx_r30.shouldDisplayPinnedChip(col_r27.visibleIndex));
    ɵngcc0.ɵɵattribute("aria-describedby", ɵngcc0.ɵɵpipeBind3(3, 38, ctx_r30.gridID + "_" + col_r27.field, ".", "_"));
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-tree-grid-cell", 16, 15);
    ɵngcc0.ɵɵpipe(2, "transactionState");
    ɵngcc0.ɵɵpipe(3, "igxStringReplace");
    ɵngcc0.ɵɵpipe(4, "igxCellStyleClasses");
    ɵngcc0.ɵɵpipe(5, "igxCellStyles");
    ɵngcc0.ɵɵpipe(6, "dataMapper");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r27 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r32 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("min-height", ctx_r32.cellHeight, "px")("min-width", col_r27.width)("max-width", col_r27.width)("flex-basis", col_r27.width);
    ɵngcc0.ɵɵclassProp("igx-grid__td--edited", ɵngcc0.ɵɵpipeBindV(2, 32, ɵngcc0.ɵɵpureFunction7(62, _c3, ctx_r32.rowID, col_r27.field, ctx_r32.grid.rowEditable, ctx_r32.grid.transactions, ctx_r32.grid.pipeTrigger, ctx_r32.grid.crudService.cell, ctx_r32.grid.crudService.row)))("igx-grid__td--number", col_r27.dataType === "number" && col_r27.visibleIndex !== 0);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBindV(4, 44, ɵngcc0.ɵɵpureFunction6(70, _c4, col_r27.cellClasses, ctx_r32.rowData[col_r27.field], ctx_r32.rowData, col_r27.field, ctx_r32.viewIndex, ctx_r32.grid.pipeTrigger)))("ngStyle", ɵngcc0.ɵɵpipeBindV(5, 51, ɵngcc0.ɵɵpureFunction6(77, _c4, col_r27.cellStyles, ctx_r32.rowData[col_r27.field], ctx_r32.rowData, col_r27.field, ctx_r32.viewIndex, ctx_r32.grid.pipeTrigger)))("level", ctx_r32.treeRow.level)("expanded", ctx_r32.treeRow.expanded)("showIndicator", ctx_r32.showIndicator)("editMode", col_r27.editable && ctx_r32.crudService.targetInEdit(ctx_r32.index, col_r27.index))("column", col_r27)("formatter", col_r27.formatter)("row", ctx_r32)("rowData", ctx_r32.rowData)("width", col_r27.getCellWidth())("visibleColumnIndex", col_r27.visibleIndex)("value", ɵngcc0.ɵɵpipeBind3(6, 58, ctx_r32.rowData, col_r27.field, ctx_r32.grid.pipeTrigger))("isLoading", ctx_r32.isLoading)("cellTemplate", col_r27.bodyTemplate)("lastSearchInfo", ctx_r32.grid.lastSearchInfo)("active", ctx_r32.isCellActive(col_r27.visibleIndex))("cellSelectionMode", ctx_r32.grid.cellSelection)("displayPinnedChip", ctx_r32.shouldDisplayPinnedChip(col_r27.visibleIndex));
    ɵngcc0.ɵɵattribute("aria-describedby", ɵngcc0.ɵɵpipeBind3(3, 40, ctx_r32.gridID + "_" + col_r27.field, ".", "_"));
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_3_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridRowComponent_ng_template_3_ng_template_3_ng_template_0_Template, 7, 82, "ng-template", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridRowComponent_ng_template_3_ng_template_3_ng_template_2_Template, 7, 84, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, IgxTreeGridRowComponent_ng_template_3_ng_template_3_ng_container_4_Template, 1, 0, "ng-container", 0);
} if (rf & 2) {
    const col_r27 = ctx.$implicit;
    const _r29 = ɵngcc0.ɵɵreference(1);
    const _r31 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", col_r27.visibleIndex === 0 ? _r31 : _r29);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_container_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridRowComponent_ng_template_3_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r16 = ɵngcc0.ɵɵreference(10);
    const ctx_r13 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r16)("ngTemplateOutletContext", ctx_r13);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelement(1, "igx-checkbox", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("tabindex", -1)("readonly", true)("checked", ctx_r15.selected)("disabled", ctx_r15.deleted)("disableTransitions", ctx_r15.grid.disableTransitions)("aria-label", ctx_r15.rowCheckboxAriaLabel);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-grid-cell", 20, 15);
    ɵngcc0.ɵɵpipe(2, "transactionState");
    ɵngcc0.ɵɵpipe(3, "igxStringReplace");
    ɵngcc0.ɵɵpipe(4, "igxCellStyleClasses");
    ɵngcc0.ɵɵpipe(5, "igxCellStyles");
    ɵngcc0.ɵɵpipe(6, "dataMapper");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r41 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r43 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵstyleProp("min-height", ctx_r43.cellHeight, "px")("min-width", col_r41.width)("max-width", col_r41.width)("flex-basis", col_r41.width)("left", col_r41.rightPinnedOffset);
    ɵngcc0.ɵɵclassProp("igx-grid__td--edited", ɵngcc0.ɵɵpipeBindV(2, 32, ɵngcc0.ɵɵpureFunction7(62, _c3, ctx_r43.rowID, col_r41.field, ctx_r43.grid.rowEditable, ctx_r43.grid.transactions, ctx_r43.grid.pipeTrigger, ctx_r43.grid.crudService.cell, ctx_r43.grid.crudService.row)))("igx-grid__td--number", col_r41.dataType === "number");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBindV(4, 44, ɵngcc0.ɵɵpureFunction6(70, _c4, col_r41.cellClasses, ctx_r43.rowData[col_r41.field], ctx_r43.rowData, col_r41.field, ctx_r43.viewIndex, ctx_r43.grid.pipeTrigger)))("ngStyle", ɵngcc0.ɵɵpipeBindV(5, 51, ɵngcc0.ɵɵpureFunction6(77, _c4, col_r41.cellStyles, ctx_r43.rowData[col_r41.field], ctx_r43.rowData, col_r41.field, ctx_r43.viewIndex, ctx_r43.grid.pipeTrigger)))("editMode", col_r41.editable && ctx_r43.crudService.targetInEdit(ctx_r43.index, col_r41.index))("column", col_r41)("formatter", col_r41.formatter)("row", ctx_r43)("firstPinned", col_r41.isFirstPinned)("lastPinned", col_r41.isLastPinned)("rowData", ctx_r43.rowData)("width", col_r41.getCellWidth())("visibleColumnIndex", col_r41.visibleIndex)("value", ɵngcc0.ɵɵpipeBind3(6, 58, ctx_r43.rowData, col_r41.field, ctx_r43.grid.pipeTrigger))("cellTemplate", col_r41.bodyTemplate)("lastSearchInfo", ctx_r43.grid.lastSearchInfo)("active", ctx_r43.isCellActive(col_r41.visibleIndex))("cellSelectionMode", ctx_r43.grid.cellSelection)("displayPinnedChip", ctx_r43.shouldDisplayPinnedChip(col_r41.visibleIndex));
    ɵngcc0.ɵɵattribute("aria-describedby", ɵngcc0.ɵɵpipeBind3(3, 40, ctx_r43.gridID + "_" + col_r41.field, ".", "_"));
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-tree-grid-cell", 21, 15);
    ɵngcc0.ɵɵpipe(2, "transactionState");
    ɵngcc0.ɵɵpipe(3, "igxStringReplace");
    ɵngcc0.ɵɵpipe(4, "igxCellStyleClasses");
    ɵngcc0.ɵɵpipe(5, "igxCellStyles");
    ɵngcc0.ɵɵpipe(6, "dataMapper");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r41 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r45 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵstyleProp("min-height", ctx_r45.cellHeight, "px")("min-width", col_r41.width)("max-width", col_r41.width)("flex-basis", col_r41.width)("left", col_r41.rightPinnedOffset);
    ɵngcc0.ɵɵclassProp("igx-grid__td--edited", ɵngcc0.ɵɵpipeBindV(2, 35, ɵngcc0.ɵɵpureFunction7(65, _c3, ctx_r45.rowID, col_r41.field, ctx_r45.grid.rowEditable, ctx_r45.grid.transactions, ctx_r45.grid.pipeTrigger, ctx_r45.grid.crudService.cell, ctx_r45.grid.crudService.row)))("igx-grid__td--number", col_r41.dataType === "number" && col_r41.visibleIndex !== 0);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBindV(4, 47, ɵngcc0.ɵɵpureFunction6(73, _c4, col_r41.cellClasses, ctx_r45.rowData[col_r41.field], ctx_r45.rowData, col_r41.field, ctx_r45.viewIndex, ctx_r45.grid.pipeTrigger)))("ngStyle", ɵngcc0.ɵɵpipeBindV(5, 54, ɵngcc0.ɵɵpureFunction6(80, _c4, col_r41.cellStyles, ctx_r45.rowData[col_r41.field], ctx_r45.rowData, col_r41.field, ctx_r45.viewIndex, ctx_r45.grid.pipeTrigger)))("level", ctx_r45.treeRow.level)("expanded", ctx_r45.treeRow.expanded)("showIndicator", ctx_r45.showIndicator)("editMode", col_r41.editable && ctx_r45.crudService.targetInEdit(ctx_r45.index, col_r41.index))("column", col_r41)("formatter", col_r41.formatter)("row", ctx_r45)("lastPinned", col_r41.isLastPinned)("rowData", ctx_r45.rowData)("width", col_r41.getCellWidth())("visibleColumnIndex", col_r41.visibleIndex)("value", ɵngcc0.ɵɵpipeBind3(6, 61, ctx_r45.rowData, col_r41.field, ctx_r45.grid.pipeTrigger))("isLoading", ctx_r45.isLoading)("cellTemplate", col_r41.bodyTemplate)("lastSearchInfo", ctx_r45.grid.lastSearchInfo)("active", ctx_r45.isCellActive(col_r41.visibleIndex))("cellSelectionMode", ctx_r45.grid.cellSelection)("displayPinnedChip", ctx_r45.shouldDisplayPinnedChip(col_r41.visibleIndex));
    ɵngcc0.ɵɵattribute("aria-describedby", ɵngcc0.ɵɵpipeBind3(3, 43, ctx_r45.gridID + "_" + col_r41.field, ".", "_"));
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_ng_template_0_Template, 7, 84, "ng-template", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_ng_template_2_Template, 7, 87, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_ng_container_4_Template, 1, 0, "ng-container", 0);
} if (rf & 2) {
    const col_r41 = ctx.$implicit;
    const _r42 = ɵngcc0.ɵɵreference(1);
    const _r44 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", col_r41.visibleIndex === 0 ? _r44 : _r42);
} }
function IgxTreeGridRowComponent_ng_template_3_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridRowComponent_ng_template_3_ng_template_9_ng_template_0_Template, 5, 1, "ng-template", 19);
    ɵngcc0.ɵɵpipe(1, "igxNotGrouped");
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r17.pinnedColumns));
} }
function IgxTreeGridRowComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridRowComponent_ng_template_3_ng_container_0_Template, 3, 5, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridRowComponent_ng_template_3_ng_container_1_Template, 3, 8, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridRowComponent_ng_template_3_ng_container_2_Template, 2, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridRowComponent_ng_template_3_ng_template_3_Template, 5, 1, "ng-template", 5, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵpipe(5, "igxNotGrouped");
    ɵngcc0.ɵɵtemplate(6, IgxTreeGridRowComponent_ng_template_3_ng_container_6_Template, 2, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(7, IgxTreeGridRowComponent_ng_template_3_ng_template_7_Template, 2, 6, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(9, IgxTreeGridRowComponent_ng_template_3_ng_template_9_Template, 2, 3, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.rowDraggable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showRowSelectors);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.pinnedColumns.length > 0 && ctx_r4.grid.isPinningToStart);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpipeBind1(5, 10, ctx_r4.unpinnedColumns))("igxForScrollContainer", ctx_r4.grid.parentVirtDir)("igxForScrollOrientation", "horizontal")("igxForContainerSize", ctx_r4.grid.unpinnedWidth)("igxForSizePropName", "calcPixelWidth")("igxForTrackBy", ctx_r4.grid.trackColumnChanges);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.pinnedColumns.length > 0 && !ctx_r4.grid.isPinningToStart);
} }
export class IgxTreeGridRowComponent extends IgxRowDirective {
    /**
     * The `ITreeGridRecord` passed to the row component.
     *
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * const treeRow = row.treeRow;
     * ```
     */
    get treeRow() {
        return this._treeRow;
    }
    set treeRow(value) {
        if (this._treeRow !== value) {
            this._treeRow = value;
            this.rowData = this._treeRow.data;
        }
    }
    /**
     * Gets whether the row is pinned.
     * ```typescript
     * let isPinned = row.pinned;
     * ```
     */
    get pinned() {
        return this.grid.isRecordPinned(this._treeRow);
    }
    /**
     * @hidden
     */
    get isRoot() {
        let treeRec = this.treeRow;
        const isPinnedArea = this.pinned && !this.disabled;
        if (isPinnedArea) {
            treeRec = this.grid.unpinnedRecords.find(x => x.data === this.rowData);
        }
        return treeRec.level === 0;
    }
    /**
     * @hidden
     */
    get hasChildren() {
        return true;
    }
    /**
     * Sets whether the row is pinned.
     * Default value is `false`.
     * ```typescript
     * this.grid.selectedRows[0].pinned = true;
     * ```
     */
    set pinned(value) {
        if (value) {
            this.grid.pinRow(this.rowID);
        }
        else {
            this.grid.unpinRow(this.rowID);
        }
    }
    /**
     * Returns a value indicating whether the row component is expanded.
     *
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * const expanded = row.expanded;
     * ```
     */
    get expanded() {
        return this._treeRow.expanded;
    }
    /**
     * Sets a value indicating whether the row component is expanded.
     *
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * row.expanded = true;
     * ```
     */
    set expanded(value) {
        this.gridAPI.set_row_expansion_state(this._treeRow.rowID, value);
    }
    /**
     * @hidden
     * @internal
     */
    get viewIndex() {
        return this.index + this.grid.page * this.grid.perPage;
    }
    /**
     * @hidden
     */
    get showIndicator() {
        return this.grid.loadChildrenOnDemand ?
            this.grid.expansionStates.has(this.rowID) ?
                this.treeRow.children && this.treeRow.children.length :
                this.grid.hasChildrenKey ?
                    this.rowData[this.grid.hasChildrenKey] :
                    true :
            this.treeRow.children && this.treeRow.children.length;
    }
    /**
     * @hidden
     */
    resolveClasses() {
        const classes = super.resolveClasses();
        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';
        return `${classes} ${filteredClass}`;
    }
    /**
     * @hidden
     */
    ngDoCheck() {
        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;
        super.ngDoCheck();
    }
    /**
     * Spawns the add child row UI for the specific row.
     * @example
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * row.beginAddChild();
     * ```
     * @param rowID
     */
    beginAddChild() {
        this.grid.beginAddRowByIndex(this.rowID, this.index, true);
    }
}
IgxTreeGridRowComponent.ɵfac = function IgxTreeGridRowComponent_Factory(t) { return ɵIgxTreeGridRowComponent_BaseFactory(t || IgxTreeGridRowComponent); };
IgxTreeGridRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxTreeGridRowComponent, selectors: [["igx-tree-grid-row"]], viewQuery: function IgxTreeGridRowComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._cells = _t);
    } }, hostVars: 1, hostBindings: function IgxTreeGridRowComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.expanded);
    } }, inputs: { treeRow: "treeRow" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 1, consts: [[4, "ngTemplateOutlet"], ["addTemp", ""], ["defaultTemp", ""], [1, "igx-grid__tr--inner", 3, "animationend"], [4, "ngIf"], ["igxGridFor", "", 3, "igxGridForOf", "igxForScrollContainer", "igxForScrollOrientation", "igxForContainerSize", "igxForSizePropName", "igxForTrackBy"], ["igxDirRef", ""], ["rowSelectorBaseTemplate", ""], ["pinnedCellsTemplate", ""], [3, "igxRowDrag", "ghostTemplate", "click"], [1, "igx-grid__cbx-selection", 3, "click", "pointerdown"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["cellTemplate", ""], ["treeCellTemplate", ""], [1, "igx-grid__td", "igx-grid__td--fw", 3, "ngClass", "ngStyle", "editMode", "column", "formatter", "row", "rowData", "width", "visibleColumnIndex", "value", "cellTemplate", "lastSearchInfo", "active", "cellSelectionMode", "displayPinnedChip"], ["treeCell", ""], [1, "igx-grid__td", "igx-grid__td--fw", "igx-grid__td--tree-cell", 3, "ngClass", "ngStyle", "level", "expanded", "showIndicator", "editMode", "column", "formatter", "row", "rowData", "width", "visibleColumnIndex", "value", "isLoading", "cellTemplate", "lastSearchInfo", "active", "cellSelectionMode", "displayPinnedChip"], [1, "igx-grid__cbx-padding"], ["disableRipple", "true", 3, "tabindex", "readonly", "checked", "disabled", "disableTransitions", "aria-label"], ["ngFor", "", 3, "ngForOf"], [1, "igx-grid__td", "igx-grid__td--fw", "igx-grid__td--pinned", 3, "ngClass", "ngStyle", "editMode", "column", "formatter", "row", "firstPinned", "lastPinned", "rowData", "width", "visibleColumnIndex", "value", "cellTemplate", "lastSearchInfo", "active", "cellSelectionMode", "displayPinnedChip"], [1, "igx-grid__td", "igx-grid__td--fw", "igx-grid__td--tree-cell", "igx-grid__td--pinned", 3, "ngClass", "ngStyle", "level", "expanded", "showIndicator", "editMode", "column", "formatter", "row", "lastPinned", "rowData", "width", "visibleColumnIndex", "value", "isLoading", "cellTemplate", "lastSearchInfo", "active", "cellSelectionMode", "displayPinnedChip"]], template: function IgxTreeGridRowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxTreeGridRowComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, IgxTreeGridRowComponent_ng_template_1_Template, 2, 3, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(3, IgxTreeGridRowComponent_ng_template_3_Template, 11, 12, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        const _r3 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.addRow ? _r1 : _r3);
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf, ɵngcc2.IgxGridForOfDirective, ɵngcc3.IgxRowDragDirective, ɵngcc4.IgxGridCellComponent, ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc5.IgxTreeGridCellComponent, ɵngcc6.IgxCheckboxComponent, ɵngcc1.NgForOf], pipes: [ɵngcc7.IgxGridNotGroupedPipe, ɵngcc7.IgxGridTransactionStatePipe, ɵngcc7.IgxStringReplacePipe, ɵngcc7.IgxGridCellStyleClassesPipe, ɵngcc7.IgxGridCellStylesPipe, ɵngcc7.IgxGridDataMapperPipe], encapsulation: 2, changeDetection: 0 });
IgxTreeGridRowComponent.propDecorators = {
    _cells: [{ type: ViewChildren, args: ['treeCell',] }],
    treeRow: [{ type: Input }],
    expanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }]
};
const ɵIgxTreeGridRowComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxTreeGridRowComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTreeGridRowComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'igx-tree-grid-row',
                template: "<ng-container *ngTemplateOutlet='addRow ? addTemp : defaultTemp'></ng-container>\n\n<ng-template #addTemp>\n    <div class='igx-grid__tr--inner' [class.igx-grid__tr--add-animate]='animateAdd' (animationend)='animationEndHandler()'>\n        <ng-container *ngTemplateOutlet='defaultTemp'></ng-container>\n    </div>\n</ng-template>\n<ng-template #defaultTemp>\n<ng-container *ngIf=\"rowDraggable\">\n    <div [class]=\"resolveDragIndicatorClasses\" [igxRowDrag]=\"this\" (click)=\"$event.stopPropagation()\" [ghostTemplate]=\"this.grid.getDragGhostCustomTemplate()\">\n        <ng-container *ngTemplateOutlet=\"this.grid.dragIndicatorIconTemplate ? this.grid.dragIndicatorIconTemplate : this.grid.dragIndicatorIconBase\"></ng-container>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"showRowSelectors\">\n    <div class=\"igx-grid__cbx-selection\" (click)=\"onRowSelectorClick($event)\" (pointerdown)=\"$event.preventDefault()\">\n        <ng-template *ngTemplateOutlet=\"\n            this.grid.rowSelectorTemplate ? this.grid.rowSelectorTemplate : rowSelectorBaseTemplate;\n            context: { $implicit: { index: viewIndex, rowID: rowID, selected: selected }}\">\n        </ng-template>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\n    <ng-container *ngTemplateOutlet=\"pinnedCellsTemplate; context: this\"></ng-container>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForSizePropName]=\"'calcPixelWidth'\" [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <ng-template #cellTemplate>\n        <igx-grid-cell\n            class=\"igx-grid__td igx-grid__td--fw\"\n            [class.igx-grid__td--edited]=\"rowID | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.crudService.cell:grid.crudService.row\"\n            [attr.aria-describedby]=\"gridID + '_' + col.field | igxStringReplace:'.':'_'\"\n            [class.igx-grid__td--number]=\"col.dataType === 'number'\"\n            [class.igx-grid__td--bool]=\"col.dataType === 'boolean'\"\n            [ngClass]=\"col.cellClasses | igxCellStyleClasses:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n            [ngStyle]=\"col.cellStyles | igxCellStyles:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n            [editMode]=\"col.editable && crudService.targetInEdit(index, col.index)\"\n            [column]=\"col\"\n            [formatter]=\"col.formatter\"\n            [row]=\"this\"\n            [style.min-height.px]=\"cellHeight\"\n            [rowData]=\"rowData\"\n            [style.min-width]=\"col.width\"\n            [style.max-width]=\"col.width\"\n            [style.flex-basis]=\"col.width\"\n            [width]=\"col.getCellWidth()\"\n            [visibleColumnIndex]=\"col.visibleIndex\"\n            [value]=\"rowData | dataMapper:col.field:grid.pipeTrigger\"\n            [cellTemplate]=\"col.bodyTemplate\"\n            [lastSearchInfo]=\"grid.lastSearchInfo\"\n            [active]=\"isCellActive(col.visibleIndex)\"\n            [cellSelectionMode]=\"grid.cellSelection\"\n            [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\n            #treeCell>\n        </igx-grid-cell>\n    </ng-template>\n    <ng-template #treeCellTemplate>\n        <igx-tree-grid-cell\n            class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell\"\n            [class.igx-grid__td--edited]=\"rowID | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.crudService.cell:grid.crudService.row\"\n            [attr.aria-describedby]=\"gridID + '_' + col.field | igxStringReplace:'.':'_'\"\n            [class.igx-grid__td--number]=\"col.dataType === 'number' && col.visibleIndex !== 0\"\n            [ngClass]=\"col.cellClasses | igxCellStyleClasses:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n            [ngStyle]=\"col.cellStyles | igxCellStyles:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n            [level]=\"treeRow.level\"\n            [expanded]=\"treeRow.expanded\"\n            [showIndicator]=\"showIndicator\"\n            [editMode]=\"col.editable && crudService.targetInEdit(index, col.index)\"\n            [column]=\"col\"\n            [formatter]=\"col.formatter\"\n            [row]=\"this\"\n            [style.min-height.px]=\"cellHeight\"\n            [rowData]=\"rowData\"\n            [style.min-width]=\"col.width\"\n            [style.max-width]=\"col.width\"\n            [style.flex-basis]=\"col.width\"\n            [width]=\"col.getCellWidth()\"\n            [visibleColumnIndex]=\"col.visibleIndex\"\n            [value]=\"rowData | dataMapper:col.field:grid.pipeTrigger\"\n            [isLoading]=\"isLoading\"\n            [cellTemplate]=\"col.bodyTemplate\"\n            [lastSearchInfo]=\"grid.lastSearchInfo\"\n            [active]=\"isCellActive(col.visibleIndex)\"\n            [cellSelectionMode]=\"grid.cellSelection\"\n            [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\n            #treeCell>\n        </igx-tree-grid-cell>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\n</ng-template>\n<ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\n    <ng-container *ngTemplateOutlet=\"pinnedCellsTemplate; context: this\"></ng-container>\n</ng-container>\n<ng-template #rowSelectorBaseTemplate>\n    <div class=\"igx-grid__cbx-padding\">\n        <igx-checkbox\n            [tabindex]=\"-1\"\n            [readonly]=\"true\"\n            [checked]=\"selected\"\n            [disabled]=\"deleted\"\n            disableRipple=\"true\"\n            [disableTransitions]=\"grid.disableTransitions\"\n            [aria-label]=\"rowCheckboxAriaLabel\">\n        </igx-checkbox>\n    </div>\n</ng-template>\n\n<ng-template #pinnedCellsTemplate let-col>\n    <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxNotGrouped\">\n        <ng-template #cellTemplate>\n            <igx-grid-cell\n                class=\"igx-grid__td igx-grid__td--fw igx-grid__td--pinned\"\n                [class.igx-grid__td--edited]=\"rowID | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.crudService.cell:grid.crudService.row\"\n                [attr.aria-describedby]=\"gridID + '_' + col.field | igxStringReplace:'.':'_'\"\n                [class.igx-grid__td--number]=\"col.dataType === 'number'\"\n                [ngClass]=\"col.cellClasses | igxCellStyleClasses:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n                [ngStyle]=\"col.cellStyles | igxCellStyles:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n                [editMode]=\"col.editable && crudService.targetInEdit(index, col.index)\"\n                [column]=\"col\"\n                [formatter]=\"col.formatter\"\n                [row]=\"this\"\n                [firstPinned]=\"col.isFirstPinned\"\n                [lastPinned]=\"col.isLastPinned\"\n                [style.min-height.px]=\"cellHeight\"\n                [rowData]=\"rowData\"\n                [style.min-width]=\"col.width\"\n                [style.max-width]=\"col.width\"\n                [style.flex-basis]=\"col.width\"\n                [style.left]=\"col.rightPinnedOffset\"\n                [width]=\"col.getCellWidth()\"\n                [visibleColumnIndex]=\"col.visibleIndex\"\n                [value]=\"rowData | dataMapper:col.field:grid.pipeTrigger\"\n                [cellTemplate]=\"col.bodyTemplate\"\n                [lastSearchInfo]=\"grid.lastSearchInfo\"\n                [active]=\"isCellActive(col.visibleIndex)\"\n                [cellSelectionMode]=\"grid.cellSelection\"\n                [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\n                #treeCell>\n            </igx-grid-cell>\n            </ng-template>\n        <ng-template #treeCellTemplate>\n            <igx-tree-grid-cell\n                class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell igx-grid__td--pinned\"\n                [class.igx-grid__td--edited]=\"rowID | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.crudService.cell:grid.crudService.row\"\n                [attr.aria-describedby]=\"gridID + '_' + col.field | igxStringReplace:'.':'_'\"\n                [class.igx-grid__td--number]=\"col.dataType === 'number' && col.visibleIndex !== 0\"\n                [ngClass]=\"col.cellClasses | igxCellStyleClasses:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n                [ngStyle]=\"col.cellStyles | igxCellStyles:rowData[col.field]:rowData:col.field:viewIndex:grid.pipeTrigger\"\n                [level]=\"treeRow.level\"\n                [expanded]=\"treeRow.expanded\"\n                [showIndicator]=\"showIndicator\"\n                [editMode]=\"col.editable && crudService.targetInEdit(index, col.index)\"\n                [column]=\"col\"\n                [formatter]=\"col.formatter\"\n                [row]=\"this\"\n                [lastPinned]=\"col.isLastPinned\"\n                [style.min-height.px]=\"cellHeight\"\n                [rowData]=\"rowData\"\n                [style.min-width]=\"col.width\"\n                [style.max-width]=\"col.width\"\n                [style.flex-basis]=\"col.width\"\n                [style.left]=\"col.rightPinnedOffset\"\n                [width]=\"col.getCellWidth()\"\n                [visibleColumnIndex]=\"col.visibleIndex\"\n                [value]=\"rowData | dataMapper:col.field:grid.pipeTrigger\"\n                [isLoading]=\"isLoading\"\n                [cellTemplate]=\"col.bodyTemplate\"\n                [lastSearchInfo]=\"grid.lastSearchInfo\"\n                [active]=\"isCellActive(col.visibleIndex)\"\n                [cellSelectionMode]=\"grid.cellSelection\"\n                [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\n                #treeCell>\n            </igx-tree-grid-cell>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\n    </ng-template>\n</ng-template>\n</ng-template>",
                providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]
            }]
    }], null, { treeRow: [{
            type: Input
        }], expanded: [{
            type: HostBinding,
            args: ['attr.aria-expanded']
        }], _cells: [{
            type: ViewChildren,
            args: ['treeCell']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,