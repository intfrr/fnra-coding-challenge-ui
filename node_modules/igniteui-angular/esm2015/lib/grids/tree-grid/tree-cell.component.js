import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { HammerGesturesManager } from '../../core/touch';
import { IgxGridExpandableCellComponent } from '../grid/expandable-cell.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../chips/chip.component';
import * as ɵngcc3 from '../../directives/text-highlight/text-highlight.directive';
import * as ɵngcc4 from '../../icon/icon.component';
import * as ɵngcc5 from '../../input-group/input-group.component';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '../../directives/input/input.directive';
import * as ɵngcc8 from '../../directives/focus/focus.directive';
import * as ɵngcc9 from '../../checkbox/checkbox.component';
import * as ɵngcc10 from '../../date-picker/date-picker.component';
import * as ɵngcc11 from '../../progressbar/progressbar.component';
import * as ɵngcc12 from '../common/pipes';

function IgxTreeGridCellComponent_ng_template_0_igx_chip_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-chip", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", true)("displayDensity", "compact");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r14.grid.resourceStrings.igx_grid_pinned_row_indicator);
} }
function IgxTreeGridCellComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridCellComponent_ng_template_0_igx_chip_0_Template, 2, 3, "igx-chip", 8);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.displayPinnedChip);
} }
function IgxTreeGridCellComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵpipe(1, "columnFormatter");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵpipe(3, "date");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "columnFormatter");
    ɵngcc0.ɵɵpipe(6, "number");
    ɵngcc0.ɵɵpipe(7, "date");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("cssClass", ctx_r15.highlightClass)("activeCssClass", ctx_r15.activeHighlightClass)("groupName", ctx_r15.gridID)("value", ctx_r15.formatter ? ɵngcc0.ɵɵpipeBind2(1, 9, ctx_r15.value, ctx_r15.formatter) : ctx_r15.column.dataType === "number" ? ɵngcc0.ɵɵpipeBind3(2, 12, ctx_r15.value, ctx_r15.column.pipeArgs.digitsInfo, ctx_r15.grid.locale) : ctx_r15.column.dataType === "date" ? ɵngcc0.ɵɵpipeBind4(3, 16, ctx_r15.value, ctx_r15.column.pipeArgs.format, ctx_r15.column.pipeArgs.timezone, ctx_r15.grid.locale) : ctx_r15.value)("row", ctx_r15.rowData)("column", ctx_r15.column.field)("containerClass", "igx-grid__td-text")("metadata", ctx_r15.searchMetadata);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r15.formatter ? ɵngcc0.ɵɵpipeBind2(5, 21, ctx_r15.value, ctx_r15.formatter) : ctx_r15.column.dataType === "number" ? ɵngcc0.ɵɵpipeBind3(6, 24, ctx_r15.value, ctx_r15.column.pipeArgs.digitsInfo, ctx_r15.grid.locale) : ctx_r15.column.dataType === "date" ? ɵngcc0.ɵɵpipeBind4(7, 28, ctx_r15.value, ctx_r15.column.pipeArgs.format, ctx_r15.column.pipeArgs.timezone, ctx_r15.grid.locale) : ctx_r15.value);
} }
const _c0 = function (a0, a1) { return { "igx-icon--success": a0, "igx-icon--error": a1 }; };
function IgxTreeGridCellComponent_ng_template_2_igx_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r16.value, !ctx_r16.value));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r16.value ? "check" : "close");
} }
function IgxTreeGridCellComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridCellComponent_ng_template_2_div_0_Template, 8, 33, "div", 10);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridCellComponent_ng_template_2_igx_icon_1_Template, 2, 5, "igx-icon", 11);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.column.dataType !== "boolean");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.column.dataType === "boolean");
} }
function IgxTreeGridCellComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵpipe(1, "columnFormatter");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵpipe(3, "date");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("cssClass", ctx_r5.highlightClass)("activeCssClass", ctx_r5.activeHighlightClass)("groupName", ctx_r5.gridID)("value", ctx_r5.formatter ? ɵngcc0.ɵɵpipeBind2(1, 9, ctx_r5.value, ctx_r5.formatter) : ctx_r5.column.dataType === "number" ? ɵngcc0.ɵɵpipeBind3(2, 12, ctx_r5.value, ctx_r5.column.pipeArgs.digitsInfo, ctx_r5.grid.locale) : ctx_r5.column.dataType === "date" ? ɵngcc0.ɵɵpipeBind4(3, 16, ctx_r5.value, ctx_r5.column.pipeArgs.format, ctx_r5.column.pipeArgs.timezone, ctx_r5.grid.locale) : ctx_r5.value)("row", ctx_r5.rowData)("column", ctx_r5.column.field)("containerClass", "igx-grid__td-text")("metadata", ctx_r5.searchMetadata);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(!ctx_r5.isEmptyAddRowCell ? ctx_r5.value : ctx_r5.column.header || ctx_r5.column.field);
} }
function IgxTreeGridCellComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-input-group", 14);
    ɵngcc0.ɵɵelementStart(2, "input", 15);
    ɵngcc0.ɵɵlistener("ngModelChange", function IgxTreeGridCellComponent_ng_template_6_ng_container_0_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.editValue = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r19.editValue)("igxFocus", true);
} }
function IgxTreeGridCellComponent_ng_template_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-input-group", 14);
    ɵngcc0.ɵɵelementStart(2, "input", 16);
    ɵngcc0.ɵɵlistener("ngModelChange", function IgxTreeGridCellComponent_ng_template_6_ng_container_1_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.editValue = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r20 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r20.editValue)("igxFocus", true);
} }
function IgxTreeGridCellComponent_ng_template_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-checkbox", 17);
    ɵngcc0.ɵɵlistener("change", function IgxTreeGridCellComponent_ng_template_6_ng_container_2_Template_igx_checkbox_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.editValue = $event.checked; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r21 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r21.editValue)("checked", ctx_r21.editValue)("disableRipple", true);
} }
function IgxTreeGridCellComponent_ng_template_6_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-date-picker", 18);
    ɵngcc0.ɵɵlistener("valueChange", function IgxTreeGridCellComponent_ng_template_6_ng_container_3_Template_igx_date_picker_valueChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.editValue = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("width", 100, "%");
    ɵngcc0.ɵɵproperty("outlet", ctx_r22.grid.outlet)("locale", ctx_r22.grid.locale)("value", ctx_r22.editValue)("igxFocus", true)("labelVisibility", false);
} }
function IgxTreeGridCellComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridCellComponent_ng_template_6_ng_container_0_Template, 3, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridCellComponent_ng_template_6_ng_container_1_Template, 3, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridCellComponent_ng_template_6_ng_container_2_Template, 2, 3, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridCellComponent_ng_template_6_ng_container_3_Template, 2, 7, "ng-container", 4);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "string");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "number");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "boolean");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "date");
} }
function IgxTreeGridCellComponent_ng_container_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "div", null, 22);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r31 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("igx-grid__tree-cell--padding-level-", ctx_r31.level, "");
} }
function IgxTreeGridCellComponent_ng_container_8_div_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridCellComponent_ng_container_8_div_2_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c1 = function (a0) { return { visibility: a0 }; };
const _c2 = function (a0) { return { $implicit: a0 }; };
function IgxTreeGridCellComponent_ng_container_8_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 23, 24);
    ɵngcc0.ɵɵlistener("click", function IgxTreeGridCellComponent_ng_container_8_div_2_Template_div_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r41); const ctx_r40 = ɵngcc0.ɵɵnextContext(2); return ctx_r40.toggle($event); })("focus", function IgxTreeGridCellComponent_ng_container_8_div_2_Template_div_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r41); const ctx_r42 = ɵngcc0.ɵɵnextContext(2); return ctx_r42.onIndicatorFocus(); });
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridCellComponent_ng_container_8_div_2_ng_container_2_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridCellComponent_ng_container_8_div_2_ng_container_3_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r32 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx_r32.showIndicator ? "visible" : "hidden"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r32.iconTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(7, _c2, ctx_r32));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r32.pinnedIndicatorTemplate)("ngTemplateOutletContext", ctx_r32.context);
} }
function IgxTreeGridCellComponent_ng_container_8_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridCellComponent_ng_container_8_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵlistener("dblclick", function IgxTreeGridCellComponent_ng_container_8_div_3_Template_div_dblclick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r45); const ctx_r44 = ɵngcc0.ɵɵnextContext(2); return ctx_r44.onLoadingDblClick($event); });
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridCellComponent_ng_container_8_div_3_ng_container_1_Template, 1, 0, "ng-container", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r34 = ɵngcc0.ɵɵreference(5);
    const ctx_r33 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r33.grid.rowLoadingIndicatorTemplate ? ctx_r33.grid.rowLoadingIndicatorTemplate : _r34);
} }
function IgxTreeGridCellComponent_ng_container_8_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-circular-bar", 27);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("indeterminate", true);
} }
function IgxTreeGridCellComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridCellComponent_ng_container_8_ng_container_1_Template, 3, 3, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridCellComponent_ng_container_8_div_2_Template, 4, 9, "div", 19);
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridCellComponent_ng_container_8_div_3_Template, 2, 1, "div", 20);
    ɵngcc0.ɵɵtemplate(4, IgxTreeGridCellComponent_ng_container_8_ng_template_4_Template, 1, 1, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.level > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r8.isLoading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isLoading);
} }
function IgxTreeGridCellComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridCellComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 28);
    ɵngcc0.ɵɵtext(1, "expand_more");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxTreeGridCellComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 28);
    ɵngcc0.ɵɵtext(1, "chevron_right");
    ɵngcc0.ɵɵelementEnd();
} }
export class IgxTreeGridCellComponent extends IgxGridExpandableCellComponent {
    constructor() {
        super(...arguments);
        /**
         * @hidden
         */
        this.level = 0;
        /**
         * @hidden
         */
        this.showIndicator = false;
    }
    get treeGridAPI() {
        return this.gridAPI;
    }
    /**
     * @hidden
     */
    toggle(event) {
        event.stopPropagation();
        this.treeGridAPI.set_row_expansion_state(this.row.rowID, !this.row.expanded, event);
    }
    /**
     * @hidden
     */
    onLoadingDblClick(event) {
        event.stopPropagation();
    }
}
IgxTreeGridCellComponent.ɵfac = function IgxTreeGridCellComponent_Factory(t) { return ɵIgxTreeGridCellComponent_BaseFactory(t || IgxTreeGridCellComponent); };
IgxTreeGridCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxTreeGridCellComponent, selectors: [["igx-tree-grid-cell"]], inputs: { level: "level", showIndicator: "showIndicator", isLoading: "isLoading" }, features: [ɵngcc0.ɵɵProvidersFeature([HammerGesturesManager]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 14, vars: 3, consts: [["defaultPinnedIndicator", ""], ["defaultCell", ""], ["addRowCell", ""], ["inlineEditor", ""], [4, "ngIf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultExpandedTemplate", ""], ["defaultCollapsedTemplate", ""], ["class", "igx-grid__td--pinned-chip", 3, "disabled", "displayDensity", 4, "ngIf"], [1, "igx-grid__td--pinned-chip", 3, "disabled", "displayDensity"], ["igxTextHighlight", "", "class", "igx-grid__td-text", "style", "pointer-events: none;", 3, "cssClass", "activeCssClass", "groupName", "value", "row", "column", "containerClass", "metadata", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], ["igxTextHighlight", "", 1, "igx-grid__td-text", 2, "pointer-events", "none", 3, "cssClass", "activeCssClass", "groupName", "value", "row", "column", "containerClass", "metadata"], [3, "ngClass"], ["displayDensity", "compact"], ["igxInput", "", 3, "ngModel", "igxFocus", "ngModelChange"], ["igxInput", "", "type", "number", 3, "ngModel", "igxFocus", "ngModelChange"], [3, "value", "checked", "disableRipple", "change"], ["mode", "dropdown", 3, "outlet", "locale", "value", "igxFocus", "labelVisibility", "valueChange"], ["class", "igx-grid__tree-grouping-indicator", 3, "ngStyle", "click", "focus", 4, "ngIf"], ["class", "igx-grid__tree-loading-indicator", 3, "dblclick", 4, "ngIf"], ["defaultLoadingIndicatorTemplate", ""], ["indentationDiv", ""], [1, "igx-grid__tree-grouping-indicator", 3, "ngStyle", "click", "focus"], ["indicator", ""], [1, "igx-grid__tree-loading-indicator", 3, "dblclick"], [4, "ngTemplateOutlet"], [3, "indeterminate"], ["fontSet", "material"]], template: function IgxTreeGridCellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxTreeGridCellComponent_ng_template_0_Template, 1, 1, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxTreeGridCellComponent_ng_template_2_Template, 2, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, IgxTreeGridCellComponent_ng_template_4_Template, 5, 21, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, IgxTreeGridCellComponent_ng_template_6_Template, 4, 4, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(8, IgxTreeGridCellComponent_ng_container_8_Template, 6, 3, "ng-container", 4);
        ɵngcc0.ɵɵtemplate(9, IgxTreeGridCellComponent_ng_container_9_Template, 1, 0, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(10, IgxTreeGridCellComponent_ng_template_10_Template, 2, 0, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(12, IgxTreeGridCellComponent_ng_template_12_Template, 2, 0, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.editMode);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ctx.context);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc2.IgxChipComponent, ɵngcc3.IgxTextHighlightDirective, ɵngcc4.IgxIconComponent, ɵngcc1.NgClass, ɵngcc5.IgxInputGroupComponent, ɵngcc6.DefaultValueAccessor, ɵngcc7.IgxInputDirective, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc8.IgxFocusDirective, ɵngcc6.NumberValueAccessor, ɵngcc9.IgxCheckboxComponent, ɵngcc10.IgxDatePickerComponent, ɵngcc1.NgStyle, ɵngcc11.IgxCircularProgressBarComponent], pipes: [ɵngcc12.IgxColumnFormatterPipe, ɵngcc1.DecimalPipe, ɵngcc1.DatePipe], encapsulation: 2, changeDetection: 0 });
IgxTreeGridCellComponent.propDecorators = {
    level: [{ type: Input }],
    showIndicator: [{ type: Input }],
    isLoading: [{ type: Input }]
};
const ɵIgxTreeGridCellComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxTreeGridCellComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTreeGridCellComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'igx-tree-grid-cell',
                template: "<ng-template #defaultPinnedIndicator>\n    <igx-chip\n        *ngIf=\"displayPinnedChip\"\n        class=\"igx-grid__td--pinned-chip\"\n        [disabled]=\"true\"\n        [displayDensity]=\"'compact'\"\n        >{{ grid.resourceStrings.igx_grid_pinned_row_indicator }}</igx-chip\n    >\n</ng-template>\n<ng-template #defaultCell>\n    <div *ngIf=\"column.dataType !== 'boolean'\"\n        igxTextHighlight\n        class=\"igx-grid__td-text\"\n        style=\"pointer-events: none;\"\n        [cssClass]=\"highlightClass\"\n        [activeCssClass]=\"activeHighlightClass\"\n        [groupName]=\"gridID\"\n        [value]=\"\n            formatter\n                ? (value | columnFormatter: formatter)\n                : column.dataType === 'number'\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\n                : column.dataType === 'date'\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\n                : value\n        \"\n        [row]=\"rowData\"\n        [column]=\"this.column.field\"\n        [containerClass]=\"'igx-grid__td-text'\"\n        [metadata]=\"searchMetadata\"\n    >{{\n            formatter\n                ? (value | columnFormatter: formatter)\n                : column.dataType === \"number\"\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\n                : column.dataType === \"date\"\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\n                : value\n        }}</div>\n    <igx-icon\n        *ngIf=\"column.dataType === 'boolean'\"\n        [ngClass]=\"{ 'igx-icon--success': value, 'igx-icon--error': !value }\"\n        >{{ value ? \"check\" : \"close\" }}</igx-icon\n    >\n</ng-template>\n<ng-template #addRowCell let-cell=\"cell\">\n    <div igxTextHighlight class=\"igx-grid__td-text\" style=\"pointer-events: none\"\n    [cssClass]=\"highlightClass\"\n    [activeCssClass]=\"activeHighlightClass\"\n    [groupName]=\"gridID\"\n    [value]=\"formatter ? (value | columnFormatter:formatter) : column.dataType === 'number' ? (value | number:column.pipeArgs.digitsInfo:grid.locale) : column.dataType === 'date' ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale) : value\"\n    [row]=\"rowData\"\n    [column]=\"this.column.field\"\n    [containerClass]=\"'igx-grid__td-text'\"\n    [metadata]=\"searchMetadata\">{{\n        !isEmptyAddRowCell ? value : (column.header || column.field)\n    }}</div>\n</ng-template>\n<ng-template #inlineEditor let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [(ngModel)]=\"editValue\" [igxFocus]=\"true\" />\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input\n                igxInput\n                [(ngModel)]=\"editValue\"\n                [igxFocus]=\"true\"\n                type=\"number\"\n            />\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox\n            (change)=\"editValue = $event.checked\"\n            [value]=\"editValue\"\n            [checked]=\"editValue\"\n            [disableRipple]=\"true\"\n        ></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-date-picker\n            [style.width.%]=\"100\"\n            [outlet]=\"grid.outlet\"\n            mode=\"dropdown\"\n            [locale]=\"grid.locale\"\n            [(value)]=\"editValue\"\n            [igxFocus]=\"true\"\n            [labelVisibility]=\"false\"\n        >\n        </igx-date-picker>\n    </ng-container>\n</ng-template>\n<ng-container *ngIf=\"!editMode\">\n    <ng-container *ngIf=\"level > 0\">\n        <div\n            #indentationDiv\n            class=\"igx-grid__tree-cell--padding-level-{{ level }}\"\n        ></div>\n    </ng-container>\n    <div\n        #indicator\n        *ngIf=\"!isLoading\"\n        class=\"igx-grid__tree-grouping-indicator\"\n        [ngStyle]=\"{ visibility: showIndicator ? 'visible' : 'hidden' }\"\n        (click)=\"toggle($event)\"\n        (focus)=\"onIndicatorFocus()\"\n    >\n        <ng-container\n            *ngTemplateOutlet=\"iconTemplate; context: { $implicit:  this }\"\n        >\n        </ng-container>\n        <ng-container\n            *ngTemplateOutlet=\"pinnedIndicatorTemplate; context: context\"\n        >\n        </ng-container>\n    </div>\n    <div\n        *ngIf=\"isLoading\"\n        (dblclick)=\"onLoadingDblClick($event)\"\n        class=\"igx-grid__tree-loading-indicator\"\n    >\n        <ng-container\n            *ngTemplateOutlet=\"\n                grid.rowLoadingIndicatorTemplate\n                    ? grid.rowLoadingIndicatorTemplate\n                    : defaultLoadingIndicatorTemplate\n            \"\n        >\n        </ng-container>\n    </div>\n    <ng-template #defaultLoadingIndicatorTemplate>\n        <igx-circular-bar [indeterminate]=\"true\"> </igx-circular-bar>\n    </ng-template>\n</ng-container>\n<ng-container *ngTemplateOutlet=\"template; context: context\"> </ng-container>\n<ng-template #defaultExpandedTemplate>\n    <igx-icon fontSet=\"material\">expand_more</igx-icon>\n</ng-template>\n<ng-template #defaultCollapsedTemplate>\n    <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n</ng-template>\n",
                providers: [HammerGesturesManager]
            }]
    }], null, { level: [{
            type: Input
        }], showIndicator: [{
            type: Input
        }], isLoading: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1jZWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3RyZWUtZ3JpZC90cmVlLWNlbGwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULEtBQUssRUFDUixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRbkYsTUFBTSxPQUFPLHdCQUF5QixTQUFRLDhCQUE4QjtBQUM1RSxJQVBBO0FBQ0c7QUFBNkIsUUFXNUI7QUFDSjtBQUNJLFdBQUc7QUFDUCxRQUNJLFVBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUNJO0FBQ0o7QUFDSSxXQUFHO0FBQ1AsUUFDSSxrQkFBYSxHQUFHLEtBQUssQ0FBQztBQUMxQixJQXFCQSxDQUFDO0FBQ0QsSUFyQ0ksSUFBWSxXQUFXO0FBQUssUUFDeEIsT0FBTyxJQUFJLENBQUMsT0FBZ0MsQ0FBQztBQUNyRCxJQUFJLENBQUM7QUFDTCxJQW1CSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsTUFBTSxDQUFDLEtBQVk7QUFDOUIsUUFBUSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDaEMsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUYsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsaUJBQWlCLENBQUMsS0FBWTtBQUN6QyxRQUFRLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNoQyxJQUFJLENBQUM7QUFDTDtvREE1Q0MsU0FBUyxTQUFDLGtCQUNQLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLGtCQUMvQztFQUFRLEVBQUUsb0JBQW9CLGtCQUM5Qjs7Ozs7Ozs7Ozs7Ozs7aWtCQUdDO0FBQUM7QUFBNEMsb0JBUzdDLEtBQUs7QUFDUiw0QkFLRyxLQUFLO0FBQ1Isd0JBS0csS0FBSztBQUNUOzs7Ozs7O3F1Q0F6QjBDLGtCQUN2QyxTQUFTLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxjQUNyQzs7Ozs7Ozs7O29CQXVCRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgSW5wdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZEFQSVNlcnZpY2UgfSBmcm9tICcuL3RyZWUtZ3JpZC1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBIYW1tZXJHZXN0dXJlc01hbmFnZXIgfSBmcm9tICcuLi8uLi9jb3JlL3RvdWNoJztcbmltcG9ydCB7IElneEdyaWRFeHBhbmRhYmxlQ2VsbENvbXBvbmVudCB9IGZyb20gJy4uL2dyaWQvZXhwYW5kYWJsZS1jZWxsLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHNlbGVjdG9yOiAnaWd4LXRyZWUtZ3JpZC1jZWxsJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3RyZWUtY2VsbC5jb21wb25lbnQuaHRtbCcsXG4gICAgcHJvdmlkZXJzOiBbSGFtbWVyR2VzdHVyZXNNYW5hZ2VyXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hUcmVlR3JpZENlbGxDb21wb25lbnQgZXh0ZW5kcyBJZ3hHcmlkRXhwYW5kYWJsZUNlbGxDb21wb25lbnQge1xuXG4gICAgcHJpdmF0ZSBnZXQgdHJlZUdyaWRBUEkoKTogSWd4VHJlZUdyaWRBUElTZXJ2aWNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZEFQSSBhcyBJZ3hUcmVlR3JpZEFQSVNlcnZpY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbGV2ZWwgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0luZGljYXRvciA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGlzTG9hZGluZzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlKGV2ZW50OiBFdmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy50cmVlR3JpZEFQSS5zZXRfcm93X2V4cGFuc2lvbl9zdGF0ZSh0aGlzLnJvdy5yb3dJRCwgIXRoaXMucm93LmV4cGFuZGVkLCBldmVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBvbkxvYWRpbmdEYmxDbGljayhldmVudDogRXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxufVxuIl19