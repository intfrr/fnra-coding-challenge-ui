import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../icon/icon.component';

function IgxSummaryCellComponent_ng_container_0_ng_container_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "div");
    ɵngcc0.ɵɵelementStart(2, "div", 5, 6);
    ɵngcc0.ɵɵelementStart(4, "igx-icon", 7);
    ɵngcc0.ɵɵtext(5, "chevron_right");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("igx-grid__tree-cell--padding-level-", ctx_r3.firstCellIndentation, "");
} }
function IgxSummaryCellComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵtemplate(2, IgxSummaryCellComponent_ng_container_0_ng_container_1_ng_container_2_Template, 6, 3, "ng-container", 0);
    ɵngcc0.ɵɵelementStart(3, "span", 3);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 4);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const summary_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("height", ctx_r1.itemHeight, "px");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.visibleColumnIndex === 0 && ctx_r1.firstCellIndentation >= 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", summary_r2.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.translateSummary(summary_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", summary_r2.summaryResult);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", summary_r2.summaryResult, " ");
} }
function IgxSummaryCellComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxSummaryCellComponent_ng_container_0_ng_container_1_Template, 7, 7, "ng-container", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.summaryResults);
} }
export class IgxSummaryCellComponent {
    constructor(element) {
        this.element = element;
        this.firstCellIndentation = 0;
        this.hasSummary = false;
    }
    get visibleColumnIndex() {
        return this.column.visibleIndex;
    }
    get attrCellID() {
        return `${this.grid.id}_${this.rowIndex}_${this.visibleColumnIndex}`;
    }
    activate() {
        const currNode = this.grid.navigation.activeNode;
        if (currNode && this.rowIndex === currNode.row && this.visibleColumnIndex === currNode.column) {
            return;
        }
        this.grid.navigation.setActiveNode({ row: this.rowIndex, column: this.visibleColumnIndex }, 'summaryCell');
        this.grid.cdr.detectChanges();
    }
    get selectionNode() {
        return {
            row: this.rowIndex,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
            isSummaryRow: true
        };
    }
    get width() {
        return this.column.getCellWidth();
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
    get columnDatatype() {
        return this.column.dataType;
    }
    get itemHeight() {
        return this.column.grid.defaultSummaryHeight;
    }
    /**
     * @hidden
     */
    get grid() {
        return this.column.grid;
    }
    translateSummary(summary) {
        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;
    }
}
IgxSummaryCellComponent.ɵfac = function IgxSummaryCellComponent_Factory(t) { return new (t || IgxSummaryCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxSummaryCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxSummaryCellComponent, selectors: [["igx-grid-summary-cell"]], hostVars: 5, hostBindings: function IgxSummaryCellComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("pointerdown", function IgxSummaryCellComponent_pointerdown_HostBindingHandler() { return ctx.activate(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-visibleIndex", ctx.visibleColumnIndex)("id", ctx.attrCellID)("data-rowIndex", ctx.rowIndex);
        ɵngcc0.ɵɵclassProp("igx-grid-summary--active", ctx.active);
    } }, inputs: { firstCellIndentation: "firstCellIndentation", hasSummary: "hasSummary", summaryResults: "summaryResults", column: "column", density: "density", active: "active", rowIndex: "rowIndex" }, decls: 1, vars: 1, consts: [[4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "igx-grid-summary__item"], [1, "igx-grid-summary__label", 3, "title"], [1, "igx-grid-summary__result", 3, "title"], [1, "igx-grid__tree-grouping-indicator", 2, "visibility", "hidden"], ["indicator", ""], ["fontSet", "material"]], template: function IgxSummaryCellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxSummaryCellComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasSummary);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc2.IgxIconComponent], encapsulation: 2, changeDetection: 0 });
IgxSummaryCellComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxSummaryCellComponent.propDecorators = {
    summaryResults: [{ type: Input }],
    column: [{ type: Input }],
    firstCellIndentation: [{ type: Input }],
    hasSummary: [{ type: Input }],
    density: [{ type: Input }],
    active: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid-summary--active',] }],
    rowIndex: [{ type: Input }, { type: HostBinding, args: ['attr.data-rowIndex',] }],
    visibleColumnIndex: [{ type: HostBinding, args: ['attr.data-visibleIndex',] }],
    attrCellID: [{ type: HostBinding, args: ['attr.id',] }],
    activate: [{ type: HostListener, args: ['pointerdown',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSummaryCellComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-summary-cell',
                template: "<ng-container *ngIf=\"hasSummary\">\n    <ng-container *ngFor=\"let summary of summaryResults\">\n            <div class=\"igx-grid-summary__item\" [style.height.px]=\"itemHeight\">\n\n                <ng-container *ngIf=\"visibleColumnIndex === 0 && firstCellIndentation >= 0\">\n                    <div class=\"igx-grid__tree-cell--padding-level-{{firstCellIndentation}}\"></div>\n\n                    <div #indicator class=\"igx-grid__tree-grouping-indicator\" style=\"visibility: hidden\">\n                        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n                    </div>\n                </ng-container>\n\n                <span class=\"igx-grid-summary__label\" [title]=\"summary.label\">{{ translateSummary(summary) }}</span>\n                <span class=\"igx-grid-summary__result\" [title]=\"summary.summaryResult\">\n                    {{ summary.summaryResult }}\n                </span>\n            </div>\n    </ng-container>\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { firstCellIndentation: [{
            type: Input
        }], hasSummary: [{
            type: Input
        }], visibleColumnIndex: [{
            type: HostBinding,
            args: ['attr.data-visibleIndex']
        }], attrCellID: [{
            type: HostBinding,
            args: ['attr.id']
        }], activate: [{
            type: HostListener,
            args: ['pointerdown']
        }], summaryResults: [{
            type: Input
        }], column: [{
            type: Input
        }], density: [{
            type: Input
        }], active: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.igx-grid-summary--active']
        }], rowIndex: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['attr.data-rowIndex']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyeS1jZWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3N1bW1hcmllcy9zdW1tYXJ5LWNlbGwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlqSCxNQUFNLE9BQU8sdUJBQXVCO0FBQ3BDLElBZ0JJLFlBQW9CLE9BQW1CO0FBQzNDLFFBRHdCLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBQyxRQVJqQyx5QkFBb0IsR0FBRyxDQUFDLENBQUM7QUFDcEMsUUFFVyxlQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzlCLElBS0ksQ0FBQztBQUNMLElBVUksSUFDSSxrQkFBa0I7QUFBSyxRQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO0FBQ3hDLElBQUksQ0FBQztBQUNMLElBQ0ksSUFDVyxVQUFVO0FBQ3pCLFFBQVEsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUssSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDOUUsSUFBSSxDQUFDO0FBQ0wsSUFFVyxRQUFRO0FBQ25CLFFBQVEsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO0FBQ3pELFFBQVEsSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQ3ZHLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFDUSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDakgsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN0QyxJQUFJLENBQUM7QUFDTCxJQUNJLElBQWMsYUFBYTtBQUFLLFFBQzVCLE9BQU87QUFDZixZQUFZLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUTtBQUM5QixZQUFZLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0I7QUFDN0csWUFBWSxZQUFZLEVBQUUsSUFBSTtBQUM5QixTQUFTLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksS0FBSztBQUNiLFFBQVEsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzFDLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxhQUFhO0FBQUssUUFDbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUMxQyxJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksY0FBYztBQUFLLFFBQ25CLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDcEMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFJLFVBQVU7QUFDbEIsUUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO0FBQ3JELElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBLE9BQU87QUFDUCxJQUFJLElBQVcsSUFBSTtBQUNuQixRQUFRLE9BQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFZLENBQUM7QUFDekMsSUFBSSxDQUFDO0FBQ0wsSUFDVyxnQkFBZ0IsQ0FBQyxPQUF5QjtBQUFJLFFBQ2pELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsb0JBQW9CLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDN0YsSUFBSSxDQUFDO0FBQ0w7bURBMUZDLFNBQVMsU0FBQyxrQkFDUCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxrQkFDL0M7R0FBbUIsRUFBRSxLQUFLLGtCQUMxQixRQUFRLEVBQUUsdUJBQXVCLGtCQUNqQzs7Ozs7c2ZBQTRDLGNBQy9DOzs7O3FIQUNJO0FBQUM7QUFHSixZQWY2RSxVQUFVO0FBQUc7QUFBRztBQUN2RSw2QkFhbkIsS0FBSztBQUNSLHFCQUVHLEtBQUs7QUFDUixtQ0FFRyxLQUFLO0FBQ1IseUJBRUcsS0FBSztBQUNSLHNCQUVHLEtBQUs7QUFDUixxQkFNRyxLQUFLLFlBQ0wsV0FBVyxTQUFDLGdDQUFnQztBQUM1Qyx1QkFFQSxLQUFLLFlBQ0wsV0FBVyxTQUFDLG9CQUFvQjtBQUNoQyxpQ0FFQSxXQUFXLFNBQUMsd0JBQXdCO0FBQ3BDLHlCQUlBLFdBQVcsU0FBQyxTQUFTO0FBQ3JCLHVCQUlBLFlBQVksU0FBQyxhQUFhO0FBQzNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneFN1bW1hcnlSZXN1bHQgfSBmcm9tICcuL2dyaWQtc3VtbWFyeSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZGF0YS11dGlsJztcbmltcG9ydCB7IElTZWxlY3Rpb25Ob2RlIH0gZnJvbSAnLi4vc2VsZWN0aW9uL3NlbGVjdGlvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdpZ3gtZ3JpZC1zdW1tYXJ5LWNlbGwnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zdW1tYXJ5LWNlbGwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneFN1bW1hcnlDZWxsQ29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHN1bW1hcnlSZXN1bHRzOiBJZ3hTdW1tYXJ5UmVzdWx0W107XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW46IElneENvbHVtbkNvbXBvbmVudDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGZpcnN0Q2VsbEluZGVudGF0aW9uID0gMDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGhhc1N1bW1hcnkgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGRlbnNpdHk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZ3JpZC1zdW1tYXJ5LS1hY3RpdmUnKVxuICAgIHB1YmxpYyBhY3RpdmU6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXJvd0luZGV4JylcbiAgICBwdWJsaWMgcm93SW5kZXg6IG51bWJlcjtcblxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXZpc2libGVJbmRleCcpXG4gICAgZ2V0IHZpc2libGVDb2x1bW5JbmRleCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4udmlzaWJsZUluZGV4O1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gICAgcHVibGljIGdldCBhdHRyQ2VsbElEKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5ncmlkLmlkfV8ke3RoaXMucm93SW5kZXh9XyR7IHRoaXMudmlzaWJsZUNvbHVtbkluZGV4fWA7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigncG9pbnRlcmRvd24nKVxuICAgIHB1YmxpYyBhY3RpdmF0ZSgpIHtcbiAgICAgICAgY29uc3QgY3Vyck5vZGUgPSB0aGlzLmdyaWQubmF2aWdhdGlvbi5hY3RpdmVOb2RlO1xuICAgICAgICBpZiAoY3Vyck5vZGUgJiYgdGhpcy5yb3dJbmRleCA9PT0gY3Vyck5vZGUucm93ICYmIHRoaXMudmlzaWJsZUNvbHVtbkluZGV4ID09PSBjdXJyTm9kZS5jb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ3JpZC5uYXZpZ2F0aW9uLnNldEFjdGl2ZU5vZGUoe3JvdzogdGhpcy5yb3dJbmRleCwgY29sdW1uOiB0aGlzLnZpc2libGVDb2x1bW5JbmRleH0sICdzdW1tYXJ5Q2VsbCcpO1xuICAgICAgICB0aGlzLmdyaWQuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlbGVjdGlvbk5vZGUoKTogSVNlbGVjdGlvbk5vZGUge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm93OiB0aGlzLnJvd0luZGV4LFxuICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbi5jb2x1bW5MYXlvdXRDaGlsZCA/IHRoaXMuY29sdW1uLnBhcmVudC52aXNpYmxlSW5kZXggOiB0aGlzLnZpc2libGVDb2x1bW5JbmRleCxcbiAgICAgICAgICAgIGlzU3VtbWFyeVJvdzogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLmdldENlbGxXaWR0aCgpO1xuICAgIH1cblxuICAgIGdldCBuYXRpdmVFbGVtZW50KCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXQgY29sdW1uRGF0YXR5cGUoKTogRGF0YVR5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4uZGF0YVR5cGU7XG4gICAgfVxuXG4gICAgZ2V0IGl0ZW1IZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5ncmlkLmRlZmF1bHRTdW1tYXJ5SGVpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGdyaWQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5jb2x1bW4uZ3JpZCBhcyBhbnkpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFuc2xhdGVTdW1tYXJ5KHN1bW1hcnk6IElneFN1bW1hcnlSZXN1bHQpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkLnJlc291cmNlU3RyaW5nc1tgaWd4X2dyaWRfc3VtbWFyeV8ke3N1bW1hcnkua2V5fWBdIHx8IHN1bW1hcnkubGFiZWw7XG4gICAgfVxufVxuIl19