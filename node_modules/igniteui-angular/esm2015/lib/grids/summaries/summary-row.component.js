import { Component, Input, ViewChildren, QueryList, HostBinding, ViewChild, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { IgxSummaryCellComponent } from './summary-cell.component';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
import { GridBaseAPIService } from '../api.service';
import { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../api.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../../directives/for-of/for_of.directive';
import * as ɵngcc4 from './summary-cell.component';
import * as ɵngcc5 from '../common/pipes';

const _c0 = ["igxDirRef"];
function IgxSummaryRowComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵlistener("pointerdown", function IgxSummaryRowComponent_ng_container_0_ng_container_1_Template_div_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); return $event.preventDefault(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("min-width", ctx_r3.grid.summariesMargin, "px")("flex-basis", ctx_r3.grid.summariesMargin, "px");
} }
function IgxSummaryRowComponent_ng_container_0_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxSummaryRowComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxSummaryRowComponent_ng_container_0_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", ctx_r4.getContext(ctx_r4));
} }
function IgxSummaryRowComponent_ng_container_0_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-summary-cell", 6);
    ɵngcc0.ɵɵpipe(1, "igxStringReplace");
} if (rf & 2) {
    const col_r11 = ctx.$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("max-height", ctx_r6.minHeight, "px")("min-height", ctx_r6.minHeight, "px")("min-width", col_r11.getCellWidth())("max-width", col_r11.getCellWidth())("flex-basis", col_r11.getCellWidth());
    ɵngcc0.ɵɵclassProp("igx-grid-summary--cosy", ctx_r6.grid.displayDensity === "cosy")("igx-grid-summary--compact", ctx_r6.grid.displayDensity === "compact")("igx-grid-summary--empty", !col_r11.hasSummary)("igx-grid-summary--pinned-last", col_r11.isLastPinned);
    ɵngcc0.ɵɵproperty("column", col_r11)("rowIndex", ctx_r6.index)("firstCellIndentation", ctx_r6.firstCellIndentation)("summaryResults", ctx_r6.getColumnSummaries(col_r11.field))("hasSummary", col_r11.hasSummary)("density", ctx_r6.grid.displayDensity)("active", ctx_r6.isCellActive(col_r11.visibleIndex));
    ɵngcc0.ɵɵattribute("aria-describedby", ɵngcc0.ɵɵpipeBind3(1, 26, ctx_r6.gridID + "_" + col_r11.field, ".", "_"));
} }
function IgxSummaryRowComponent_ng_container_0_ng_container_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxSummaryRowComponent_ng_container_0_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxSummaryRowComponent_ng_container_0_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", ctx_r7.getContext(ctx_r7));
} }
function IgxSummaryRowComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxSummaryRowComponent_ng_container_0_ng_container_1_Template, 2, 4, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, IgxSummaryRowComponent_ng_container_0_ng_container_2_Template, 2, 2, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(3, IgxSummaryRowComponent_ng_container_0_ng_template_3_Template, 2, 30, "ng-template", 2, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵpipe(5, "igxNotGrouped");
    ɵngcc0.ɵɵtemplate(6, IgxSummaryRowComponent_ng_container_0_ng_container_6_Template, 2, 2, "ng-container", 0);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.grid.summariesMargin);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.pinnedColumns.length > 0 && ctx_r0.grid.isPinningToStart);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpipeBind1(5, 9, ctx_r0.unpinnedColumns))("igxForScrollContainer", ctx_r0.grid.parentVirtDir)("igxForScrollOrientation", "horizontal")("igxForContainerSize", ctx_r0.grid.unpinnedWidth)("igxForTrackBy", ctx_r0.grid.trackColumnChanges)("igxForSizePropName", "calcPixelWidth");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.pinnedColumns.length > 0 && !ctx_r0.grid.isPinningToStart);
} }
function IgxSummaryRowComponent_ng_template_1_igx_grid_summary_cell_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-summary-cell", 8);
    ɵngcc0.ɵɵpipe(1, "igxStringReplace");
} if (rf & 2) {
    const col_r16 = ctx.$implicit;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("max-height", ctx_r15.minHeight, "px")("min-height", ctx_r15.minHeight, "px")("min-width", col_r16.getCellWidth())("max-width", col_r16.getCellWidth())("flex-basis", col_r16.getCellWidth())("left", col_r16.rightPinnedOffset);
    ɵngcc0.ɵɵclassProp("igx-grid-summary--cosy", ctx_r15.grid.displayDensity === "cosy")("igx-grid-summary--compact", ctx_r15.grid.displayDensity === "compact")("igx-grid-summary--empty", !col_r16.hasSummary)("igx-grid-summary--pinned-first", col_r16.isFirstPinned)("igx-grid-summary--pinned-last", col_r16.isLastPinned);
    ɵngcc0.ɵɵproperty("column", col_r16)("firstCellIndentation", ctx_r15.firstCellIndentation)("rowIndex", ctx_r15.index)("summaryResults", ctx_r15.getColumnSummaries(col_r16.field))("hasSummary", col_r16.hasSummary)("density", ctx_r15.grid.displayDensity)("active", ctx_r15.isCellActive(col_r16.visibleIndex));
    ɵngcc0.ɵɵattribute("aria-describedby", ɵngcc0.ɵɵpipeBind3(1, 30, ctx_r15.gridID + "_" + col_r16.field, ".", "_"));
} }
function IgxSummaryRowComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxSummaryRowComponent_ng_template_1_igx_grid_summary_cell_0_Template, 2, 34, "igx-grid-summary-cell", 7);
    ɵngcc0.ɵɵpipe(1, "igxNotGrouped");
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r2.pinnedColumns));
} }
export class IgxSummaryRowComponent {
    constructor(gridAPI, element, cdr) {
        this.gridAPI = gridAPI;
        this.element = element;
        this.cdr = cdr;
        this.firstCellIndentation = -1;
    }
    get dataRowIndex() {
        return this.index;
    }
    get minHeight() {
        return this.grid.summaryService.calcMaxSummaryHeight() - 1;
    }
    get summaryCells() {
        const res = new QueryList();
        if (!this._summaryCells) {
            return res;
        }
        const cList = this._summaryCells.filter(c => c.nativeElement.isConnected);
        res.reset(cList);
        return res;
    }
    set summaryCells(cells) { }
    ngDoCheck() {
        this.cdr.markForCheck();
    }
    get grid() {
        return this.gridAPI.grid;
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
    getColumnSummaries(columnName) {
        if (!this.summaries.get(columnName)) {
            return [];
        }
        return this.summaries.get(columnName);
    }
    /**
     * @hidden
     * @internal
     */
    isCellActive(visibleColumnIndex) {
        const node = this.grid.navigation.activeNode;
        return node ? node.row === this.index && node.column === visibleColumnIndex : false;
    }
    /**
     * @hidden
     */
    get pinnedColumns() {
        return this.grid.pinnedColumns;
    }
    /**
     * @hidden
     */
    get unpinnedColumns() {
        return this.grid.unpinnedColumns;
    }
    getContext(row) {
        return {
            $implicit: row
        };
    }
}
IgxSummaryRowComponent.ɵfac = function IgxSummaryRowComponent_Factory(t) { return new (t || IgxSummaryRowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxSummaryRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxSummaryRowComponent, selectors: [["igx-grid-summary-row"]], viewQuery: function IgxSummaryRowComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, IgxGridForOfDirective);
        ɵngcc0.ɵɵviewQuery(IgxSummaryCellComponent, true, IgxSummaryCellComponent);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtDirRow = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._summaryCells = _t);
    } }, hostVars: 1, hostBindings: function IgxSummaryRowComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-rowIndex", ctx.dataRowIndex);
    } }, inputs: { firstCellIndentation: "firstCellIndentation", summaries: "summaries", gridID: "gridID", index: "index" }, features: [ɵngcc0.ɵɵProvidersFeature([IgxForOfSyncService])], decls: 3, vars: 1, consts: [[4, "ngIf"], ["summaryCellTemplate", ""], ["igxGridFor", "", 3, "igxGridForOf", "igxForScrollContainer", "igxForScrollOrientation", "igxForContainerSize", "igxForTrackBy", "igxForSizePropName"], ["igxDirRef", ""], [1, "igx-grid__summaries-patch", 3, "pointerdown"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["role", "cell", 1, "igx-grid-summary", "igx-grid-summary--fw", 3, "column", "rowIndex", "firstCellIndentation", "summaryResults", "hasSummary", "density", "active"], ["role", "cell", "class", "igx-grid-summary igx-grid-summary--fw igx-grid-summary--pinned", 3, "igx-grid-summary--cosy", "igx-grid-summary--compact", "igx-grid-summary--empty", "igx-grid-summary--pinned-first", "igx-grid-summary--pinned-last", "column", "firstCellIndentation", "rowIndex", "summaryResults", "hasSummary", "density", "active", "max-height", "min-height", "min-width", "max-width", "flex-basis", "left", 4, "ngFor", "ngForOf"], ["role", "cell", 1, "igx-grid-summary", "igx-grid-summary--fw", "igx-grid-summary--pinned", 3, "column", "firstCellIndentation", "rowIndex", "summaryResults", "hasSummary", "density", "active"]], template: function IgxSummaryRowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxSummaryRowComponent_ng_container_0_Template, 7, 11, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, IgxSummaryRowComponent_ng_template_1_Template, 2, 3, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.summaries.size);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.IgxGridForOfDirective, ɵngcc2.NgTemplateOutlet, ɵngcc4.IgxSummaryCellComponent, ɵngcc2.NgForOf], pipes: [ɵngcc5.IgxGridNotGroupedPipe, ɵngcc5.IgxStringReplacePipe], encapsulation: 2, changeDetection: 0 });
IgxSummaryRowComponent.ctorParameters = () => [
    { type: GridBaseAPIService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxSummaryRowComponent.propDecorators = {
    summaries: [{ type: Input }],
    gridID: [{ type: Input }],
    index: [{ type: Input }],
    firstCellIndentation: [{ type: Input }],
    dataRowIndex: [{ type: HostBinding, args: ['attr.data-rowIndex',] }],
    _summaryCells: [{ type: ViewChildren, args: [IgxSummaryCellComponent, { read: IgxSummaryCellComponent },] }],
    virtDirRow: [{ type: ViewChild, args: ['igxDirRef', { read: IgxGridForOfDirective },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSummaryRowComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-summary-row',
                template: "<ng-container *ngIf=\"summaries.size\">\n    <ng-container *ngIf=\"grid.summariesMargin\">\n        <div\n        class=\"igx-grid__summaries-patch\"\n        [style.min-width.px]=\"grid.summariesMargin\"\n        [style.flex-basis.px]=\"grid.summariesMargin\"\n        (pointerdown)=\"$event.preventDefault()\"\n        ></div>\n    </ng-container>\n    <ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\n        <ng-container *ngTemplateOutlet=\"summaryCellTemplate; context: getContext(this)\"></ng-container>\n    </ng-container>\n    <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]=\"grid.unpinnedWidth\" [igxForTrackBy]=\"grid.trackColumnChanges\" [igxForSizePropName]='\"calcPixelWidth\"' #igxDirRef>\n        <igx-grid-summary-cell\n            class=\"igx-grid-summary igx-grid-summary--fw\"\n            [attr.aria-describedby]=\"gridID + '_' + col.field | igxStringReplace:'.':'_'\"\n            role=\"cell\"\n            [class.igx-grid-summary--cosy]=\"grid.displayDensity === 'cosy'\"\n            [class.igx-grid-summary--compact]=\"grid.displayDensity === 'compact'\"\n            [class.igx-grid-summary--empty]=\"!col.hasSummary\"\n            [class.igx-grid-summary--pinned-last]=\"col.isLastPinned\"\n            [column]=\"col\"\n            [rowIndex]=\"index\"\n            [firstCellIndentation]=\"firstCellIndentation\"\n            [summaryResults]=\"getColumnSummaries(col.field)\"\n            [hasSummary]=\"col.hasSummary\"\n            [density]=\"grid.displayDensity\"\n            [active]=\"isCellActive(col.visibleIndex)\"\n            [style.max-height.px]=\"minHeight\"\n            [style.min-height.px]=\"minHeight\"\n            [style.min-width]=\"col.getCellWidth()\"\n            [style.max-width]=\"col.getCellWidth()\"\n            [style.flex-basis]=\"col.getCellWidth()\">\n        </igx-grid-summary-cell>\n    </ng-template>\n    <ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\n        <ng-container *ngTemplateOutlet=\"summaryCellTemplate; context: getContext(this)\"></ng-container>\n    </ng-container>\n</ng-container>\n\n<ng-template #summaryCellTemplate let-col>\n    <igx-grid-summary-cell *ngFor=\"let col of pinnedColumns | igxNotGrouped\"\n            role=\"cell\"\n            [attr.aria-describedby]=\"gridID + '_' + col.field | igxStringReplace:'.':'_'\"\n            class=\"igx-grid-summary igx-grid-summary--fw igx-grid-summary--pinned\"\n            [class.igx-grid-summary--cosy]=\"grid.displayDensity === 'cosy'\"\n            [class.igx-grid-summary--compact]=\"grid.displayDensity === 'compact'\"\n            [class.igx-grid-summary--empty]=\"!col.hasSummary\"\n            [class.igx-grid-summary--pinned-first]=\"col.isFirstPinned\"\n            [class.igx-grid-summary--pinned-last]=\"col.isLastPinned\"\n            [column]=\"col\"\n            [firstCellIndentation]=\"firstCellIndentation\"\n            [rowIndex]=\"index\"\n            [summaryResults]=\"getColumnSummaries(col.field)\"\n            [hasSummary]=\"col.hasSummary\"\n            [density]=\"grid.displayDensity\"\n            [active]=\"isCellActive(col.visibleIndex)\"\n            [style.max-height.px]=\"minHeight\"\n            [style.min-height.px]=\"minHeight\"\n            [style.min-width]=\"col.getCellWidth()\"\n            [style.max-width]=\"col.getCellWidth()\"\n            [style.flex-basis]=\"col.getCellWidth()\"\n            [style.left]=\"col.rightPinnedOffset\">\n        </igx-grid-summary-cell>\n</ng-template>\n",
                providers: [IgxForOfSyncService]
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { firstCellIndentation: [{
            type: Input
        }], dataRowIndex: [{
            type: HostBinding,
            args: ['attr.data-rowIndex']
        }], summaries: [{
            type: Input
        }], gridID: [{
            type: Input
        }], index: [{
            type: Input
        }], _summaryCells: [{
            type: ViewChildren,
            args: [IgxSummaryCellComponent, { read: IgxSummaryCellComponent }]
        }], virtDirRow: [{
            type: ViewChild,
            args: ['igxDirRef', { read: IgxGridForOfDirective }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,