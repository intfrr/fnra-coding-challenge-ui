import { Pipe, Inject } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray, resolveNestedPath } from '../../core/utils';
import { ColumnDisplayOrder } from './enums';
import { IgxColumnActionsComponent } from '../column-actions/column-actions.component';
/**
 * @hidden
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../api.service';
import * as ɵngcc2 from '../column-actions/column-actions.component';
export class IgxGridCellStyleClassesPipe {
    transform(cssClasses, _, data, field, index, __) {
        if (!cssClasses) {
            return '';
        }
        const result = [];
        for (const cssClass of Object.keys(cssClasses)) {
            const callbackOrValue = cssClasses[cssClass];
            const apply = typeof callbackOrValue === 'function' ?
                callbackOrValue(data, field, resolveNestedPath(data, field), index) : callbackOrValue;
            if (apply) {
                result.push(cssClass);
            }
        }
        return result.join(' ');
    }
}
IgxGridCellStyleClassesPipe.ɵfac = function IgxGridCellStyleClassesPipe_Factory(t) { return new (t || IgxGridCellStyleClassesPipe)(); };
IgxGridCellStyleClassesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "igxCellStyleClasses", type: IgxGridCellStyleClassesPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridCellStyleClassesPipe, [{
        type: Pipe,
        args: [{
                name: 'igxCellStyleClasses'
            }]
    }], null, null); })();
/**
 * @hidden
 * @internal
 */
export class IgxGridCellStylesPipe {
    transform(styles, _, data, field, index, __) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const res = styles[prop];
            css[prop] = typeof res === 'function' ? res(data, field, resolveNestedPath(data, field), index) : res;
        }
        return css;
    }
}
IgxGridCellStylesPipe.ɵfac = function IgxGridCellStylesPipe_Factory(t) { return new (t || IgxGridCellStylesPipe)(); };
IgxGridCellStylesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "igxCellStyles", type: IgxGridCellStylesPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridCellStylesPipe, [{
        type: Pipe,
        args: [{
                name: 'igxCellStyles'
            }]
    }], null, null); })();
/**
 * @hidden
 * @internal
 */
export class IgxGridNotGroupedPipe {
    transform(value) {
        return value.filter(item => !item.columnGroup);
    }
}
IgxGridNotGroupedPipe.ɵfac = function IgxGridNotGroupedPipe_Factory(t) { return new (t || IgxGridNotGroupedPipe)(); };
IgxGridNotGroupedPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "igxNotGrouped", type: IgxGridNotGroupedPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridNotGroupedPipe, [{
        type: Pipe,
        args: [{
                name: 'igxNotGrouped'
            }]
    }], null, null); })();
/**
 * @hidden
 * @internal
 */
export class IgxGridTopLevelColumns {
    transform(value) {
        return value.filter(item => item.level === 0);
    }
}
IgxGridTopLevelColumns.ɵfac = function IgxGridTopLevelColumns_Factory(t) { return new (t || IgxGridTopLevelColumns)(); };
IgxGridTopLevelColumns.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "igxTopLevel", type: IgxGridTopLevelColumns, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridTopLevelColumns, [{
        type: Pipe,
        args: [{
                name: 'igxTopLevel'
            }]
    }], null, null); })();
/**
 * @hidden
 * @internal
 */
export class IgxGridFilterConditionPipe {
    transform(value) {
        return value.split(/(?=[A-Z])/).join(' ');
    }
}
IgxGridFilterConditionPipe.ɵfac = function IgxGridFilterConditionPipe_Factory(t) { return new (t || IgxGridFilterConditionPipe)(); };
IgxGridFilterConditionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "filterCondition", type: IgxGridFilterConditionPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridFilterConditionPipe, [{
        type: Pipe,
        args: [{
                name: 'filterCondition',
                pure: true
            }]
    }], null, null); })();
/**
 * @hidden
 * @internal
 */
export class IgxGridTransactionPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, id, pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            const result = DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            return result;
        }
        return collection;
    }
}
IgxGridTransactionPipe.ɵfac = function IgxGridTransactionPipe_Factory(t) { return new (t || IgxGridTransactionPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridTransactionPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridTransaction", type: IgxGridTransactionPipe, pure: true });
IgxGridTransactionPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridTransactionPipe, [{
        type: Pipe,
        args: [{
                name: 'gridTransaction',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();
/**
 * @hidden
 * @internal
 */
export class IgxGridPaginatorOptionsPipe {
    transform(values) {
        return Array.from(new Set([...values])).sort((a, b) => a - b);
    }
}
IgxGridPaginatorOptionsPipe.ɵfac = function IgxGridPaginatorOptionsPipe_Factory(t) { return new (t || IgxGridPaginatorOptionsPipe)(); };
IgxGridPaginatorOptionsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "paginatorOptions", type: IgxGridPaginatorOptionsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridPaginatorOptionsPipe, [{
        type: Pipe,
        args: [{
                name: 'paginatorOptions',
                pure: true
            }]
    }], null, null); })();
/**
 * @hidden
 * @internal
 */
export class IgxHasVisibleColumnsPipe {
    transform(values, hasVisibleColumns) {
        if (!(values && values.length)) {
            return values;
        }
        return hasVisibleColumns ? values : [];
    }
}
IgxHasVisibleColumnsPipe.ɵfac = function IgxHasVisibleColumnsPipe_Factory(t) { return new (t || IgxHasVisibleColumnsPipe)(); };
IgxHasVisibleColumnsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "visibleColumns", type: IgxHasVisibleColumnsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxHasVisibleColumnsPipe, [{
        type: Pipe,
        args: [{
                name: 'visibleColumns',
                pure: true
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class IgxGridRowPinningPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, id, isPinned = false, pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (grid.hasPinnedRecords && isPinned) {
            const result = collection.filter(rec => grid.isRecordPinned(rec));
            result.sort((rec1, rec2) => grid.getInitialPinnedIndex(rec1) - grid.getInitialPinnedIndex(rec2));
            return result;
        }
        grid.unpinnedRecords = collection;
        if (!grid.hasPinnedRecords) {
            grid.pinnedRecords = [];
            return isPinned ? [] : collection;
        }
        return collection.map((rec) => {
            return grid.isRecordPinned(rec) ? { recordRef: rec, ghostRecord: true } : rec;
        });
    }
}
IgxGridRowPinningPipe.ɵfac = function IgxGridRowPinningPipe_Factory(t) { return new (t || IgxGridRowPinningPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridRowPinningPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridRowPinning", type: IgxGridRowPinningPipe, pure: true });
IgxGridRowPinningPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridRowPinningPipe, [{
        type: Pipe,
        args: [{
                name: 'gridRowPinning',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();
export class IgxColumnActionEnabledPipe {
    constructor(columnActions) {
        this.columnActions = columnActions;
    }
    transform(collection, actionFilter, pipeTrigger) {
        if (!collection) {
            return collection;
        }
        let copy = collection.slice(0);
        if (copy.length && copy[0].grid.hasColumnLayouts) {
            copy = copy.filter(c => c.columnLayout);
        }
        if (actionFilter) {
            copy = copy.filter(actionFilter);
        }
        // Preserve the actionable collection for use in the component
        this.columnActions.actionableColumns = copy;
        return copy;
    }
}
IgxColumnActionEnabledPipe.ɵfac = function IgxColumnActionEnabledPipe_Factory(t) { return new (t || IgxColumnActionEnabledPipe)(ɵngcc0.ɵɵdirectiveInject(IgxColumnActionsComponent)); };
IgxColumnActionEnabledPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "columnActionEnabled", type: IgxColumnActionEnabledPipe, pure: true });
IgxColumnActionEnabledPipe.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnActionEnabledPipe, [{
        type: Pipe,
        args: [{
                name: 'columnActionEnabled',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc2.IgxColumnActionsComponent, decorators: [{
                type: Inject,
                args: [IgxColumnActionsComponent]
            }] }]; }, null); })();
export class IgxFilterActionColumnsPipe {
    constructor(columnActions) {
        this.columnActions = columnActions;
    }
    transform(collection, filterCriteria, pipeTrigger) {
        if (!collection) {
            return collection;
        }
        let copy = collection.slice(0);
        if (filterCriteria && filterCriteria.length > 0) {
            const filterFunc = (c) => {
                var _a, _b;
                const filterText = c.header || c.field;
                if (!filterText) {
                    return false;
                }
                return filterText.toLocaleLowerCase().indexOf(filterCriteria.toLocaleLowerCase()) >= 0 ||
                    ((_b = (_a = c.children) === null || _a === void 0 ? void 0 : _a.some(filterFunc)) !== null && _b !== void 0 ? _b : false);
            };
            copy = collection.filter(filterFunc);
        }
        // Preserve the filtered collection for use in the component
        this.columnActions.filteredColumns = copy;
        return copy;
    }
}
IgxFilterActionColumnsPipe.ɵfac = function IgxFilterActionColumnsPipe_Factory(t) { return new (t || IgxFilterActionColumnsPipe)(ɵngcc0.ɵɵdirectiveInject(IgxColumnActionsComponent)); };
IgxFilterActionColumnsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "filterActionColumns", type: IgxFilterActionColumnsPipe, pure: true });
IgxFilterActionColumnsPipe.ctorParameters = () => [
    { type: IgxColumnActionsComponent, decorators: [{ type: Inject, args: [IgxColumnActionsComponent,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxFilterActionColumnsPipe, [{
        type: Pipe,
        args: [{
                name: 'filterActionColumns',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc2.IgxColumnActionsComponent, decorators: [{
                type: Inject,
                args: [IgxColumnActionsComponent]
            }] }]; }, null); })();
export class IgxSortActionColumnsPipe {
    transform(collection, displayOrder, pipeTrigger) {
        if (displayOrder === ColumnDisplayOrder.Alphabetical) {
            return collection.sort((a, b) => (a.header || a.field).localeCompare(b.header || b.field));
        }
        return collection;
    }
}
IgxSortActionColumnsPipe.ɵfac = function IgxSortActionColumnsPipe_Factory(t) { return new (t || IgxSortActionColumnsPipe)(); };
IgxSortActionColumnsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "sortActionColumns", type: IgxSortActionColumnsPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSortActionColumnsPipe, [{
        type: Pipe,
        args: [{
                name: 'sortActionColumns',
                pure: true
            }]
    }], null, null); })();
export class IgxGridDataMapperPipe {
    transform(data, field, _) {
        return resolveNestedPath(data, field);
    }
}
IgxGridDataMapperPipe.ɵfac = function IgxGridDataMapperPipe_Factory(t) { return new (t || IgxGridDataMapperPipe)(); };
IgxGridDataMapperPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataMapper", type: IgxGridDataMapperPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridDataMapperPipe, [{
        type: Pipe,
        args: [{ name: 'dataMapper' }]
    }], null, null); })();
export class IgxStringReplacePipe {
    transform(value, search, replacement) {
        return value.replace(search, replacement);
    }
}
IgxStringReplacePipe.ɵfac = function IgxStringReplacePipe_Factory(t) { return new (t || IgxStringReplacePipe)(); };
IgxStringReplacePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "igxStringReplace", type: IgxStringReplacePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxStringReplacePipe, [{
        type: Pipe,
        args: [{ name: 'igxStringReplace' }]
    }], null, null); })();
export class IgxGridTransactionStatePipe {
    transform(row_id, field, rowEditable, transactions, _, __, ___) {
        var _a;
        if (rowEditable) {
            const rowCurrentState = transactions.getAggregatedValue(row_id, false);
            if (rowCurrentState) {
                const value = resolveNestedPath(rowCurrentState, field);
                return value !== undefined && value !== null;
            }
        }
        else {
            const transaction = transactions.getState(row_id);
            const value = resolveNestedPath((_a = transaction === null || transaction === void 0 ? void 0 : transaction.value) !== null && _a !== void 0 ? _a : {}, field);
            return transaction && transaction.value && (value || value === 0 || value === false);
        }
    }
}
IgxGridTransactionStatePipe.ɵfac = function IgxGridTransactionStatePipe_Factory(t) { return new (t || IgxGridTransactionStatePipe)(); };
IgxGridTransactionStatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "transactionState", type: IgxGridTransactionStatePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridTransactionStatePipe, [{
        type: Pipe,
        args: [{ name: 'transactionState' }]
    }], null, null); })();
export class IgxColumnFormatterPipe {
    transform(value, formatter) {
        return formatter(value);
    }
}
IgxColumnFormatterPipe.ɵfac = function IgxColumnFormatterPipe_Factory(t) { return new (t || IgxColumnFormatterPipe)(); };
IgxColumnFormatterPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "columnFormatter", type: IgxColumnFormatterPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnFormatterPipe, [{
        type: Pipe,
        args: [{ name: 'columnFormatter' }]
    }], null, null); })();
export class IgxGridAddRowPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, isPinned = false, pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (!grid.rowEditable || !grid.addRowParent || grid.cancelAddMode || isPinned !== grid.addRowParent.isPinned) {
            return collection;
        }
        const copy = collection.slice(0);
        const parentIndex = grid.addRowParent.index;
        const row = grid.getEmptyRecordObjectFor(collection[parentIndex]);
        const rec = {
            recordRef: row,
            addRow: true
        };
        copy.splice(parentIndex + 1, 0, rec);
        if (isPinned) {
            grid.pinnedRecords = copy;
        }
        else {
            grid.unpinnedRecords = copy;
        }
        return copy;
    }
}
IgxGridAddRowPipe.ɵfac = function IgxGridAddRowPipe_Factory(t) { return new (t || IgxGridAddRowPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GridBaseAPIService)); };
IgxGridAddRowPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gridAddRow", type: IgxGridAddRowPipe, pure: true });
IgxGridAddRowPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridAddRowPipe, [{
        type: Pipe,
        args: [{
                name: 'gridAddRow',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.GridBaseAPIService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,