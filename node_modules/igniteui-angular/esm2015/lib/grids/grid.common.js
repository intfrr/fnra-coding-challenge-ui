import { Directive } from '@angular/core';
import { ConnectedPositioningStrategy } from '../services/public_api';
import { VerticalAlignment } from '../services/overlay/utilities';
import { scaleInVerBottom, scaleInVerTop } from '../animations/main';
import { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';
import * as ɵngcc0 from '@angular/core';
export class IgxGridBodyDirective {
}
IgxGridBodyDirective.ɵfac = function IgxGridBodyDirective_Factory(t) { return new (t || IgxGridBodyDirective)(); };
IgxGridBodyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxGridBodyDirective, selectors: [["", "igxGridBody", ""]], features: [ɵngcc0.ɵɵProvidersFeature([IgxForOfSyncService])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridBodyDirective, [{
        type: Directive,
        args: [{
                selector: '[igxGridBody]',
                providers: [IgxForOfSyncService]
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class RowEditPositionStrategy extends ConnectedPositioningStrategy {
    constructor() {
        super(...arguments);
        this.isTop = false;
        this.isTopInitialPosition = null;
    }
    position(contentElement, size, document, initialCall, target) {
        const container = this.settings.container; // grid.tbody
        const targetElement = target || this.settings.target; // current grid.row
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.getBoundingClientRect().bottom <
                targetElement.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;
        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.
        contentElement.style.width = targetElement.clientWidth + 'px';
        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;
        super.position(contentElement, { width: targetElement.clientWidth, height: targetElement.clientHeight }, document, initialCall, targetElement);
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21tb24uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9ncmlkLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxpQkFBaUIsRUFBMkIsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMENBQTBDLENBQUM7O0FBUS9FLE1BQU0sT0FBTyxvQkFBb0I7QUFBRztnREFKbkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxlQUFlO1dBQ3pCLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLGNBQ25DOzs7Ozs7OzBCQUNJO0FBa0JMO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsTUFBTSxPQUFPLHVCQUF3QixTQUFRLDRCQUE0QjtBQUN6RSxJQURBO0FBQWdCO0FBQTZCLFFBQ3pDLFVBQUssR0FBRyxLQUFLLENBQUM7QUFDbEIsUUFBSSx5QkFBb0IsR0FBRyxJQUFJLENBQUM7QUFDaEMsSUF1QkEsQ0FBQztBQUNELElBdkJJLFFBQVEsQ0FBQyxjQUEyQixFQUFFLElBQXVDLEVBQUUsUUFBbUIsRUFBRSxXQUFxQixFQUNqSCxNQUE0QjtBQUFJLFFBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYTtBQUNoRSxRQUFRLE1BQU0sYUFBYSxHQUFnQixNQUFNLElBQWlCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsbUJBQW1CO0FBQzNHLFFBQ1Esc0VBQXNFO0FBQzlFLFFBQVEsOEZBQThGO0FBQ3RHLFFBQVEsMEhBQTBIO0FBQ2xJLFFBQVEsMEdBQTBHO0FBQ2xILFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLEtBQUssSUFBSSxDQUFDLENBQUM7QUFDekQsWUFBWSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN2QyxZQUFZLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU07QUFDcEQsZ0JBQWdCLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDN0csUUFDUSwrRkFBK0Y7QUFDdkcsUUFBUSxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUN0RSxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUMzSSxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7QUFDcEYsUUFDUSxLQUFLLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsWUFBWSxFQUFFLEVBQzNGLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDMUQsSUFBSSxDQUFDO0FBQ0wsQ0FBQztBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5IH0gZnJvbSAnLi4vc2VydmljZXMvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBWZXJ0aWNhbEFsaWdubWVudCwgUG9zaXRpb25TZXR0aW5ncywgUG9pbnQgfSBmcm9tICcuLi9zZXJ2aWNlcy9vdmVybGF5L3V0aWxpdGllcyc7XG5pbXBvcnQgeyBzY2FsZUluVmVyQm90dG9tLCBzY2FsZUluVmVyVG9wIH0gZnJvbSAnLi4vYW5pbWF0aW9ucy9tYWluJztcbmltcG9ydCB7IElneEZvck9mU3luY1NlcnZpY2UgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2Zvci1vZi9mb3Jfb2Yuc3luYy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbHVtblBpbm5pbmdQb3NpdGlvbiwgUm93UGlubmluZ1Bvc2l0aW9uIH0gZnJvbSAnLi9jb21tb24vZW51bXMnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEdyaWRCb2R5XScsXG4gICAgcHJvdmlkZXJzOiBbSWd4Rm9yT2ZTeW5jU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZEJvZHlEaXJlY3RpdmUge31cblxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3dFZGl0UG9zaXRpb25TZXR0aW5ncyBleHRlbmRzIFBvc2l0aW9uU2V0dGluZ3Mge1xuICAgIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50O1xufVxuXG4vKipcbiAqIEFuIGludGVyZmFjZSBkZXNjcmliaW5nIHNldHRpbmdzIGZvciByb3cvY29sdW1uIHBpbm5pbmcgcG9zaXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpbm5pbmdDb25maWcge1xuICAgIGNvbHVtbnM/OiBDb2x1bW5QaW5uaW5nUG9zaXRpb247XG4gICAgcm93cz86IFJvd1Bpbm5pbmdQb3NpdGlvbjtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3dFZGl0UG9zaXRpb25TdHJhdGVneSBleHRlbmRzIENvbm5lY3RlZFBvc2l0aW9uaW5nU3RyYXRlZ3kge1xuICAgIGlzVG9wID0gZmFsc2U7XG4gICAgaXNUb3BJbml0aWFsUG9zaXRpb24gPSBudWxsO1xuICAgIHB1YmxpYyBzZXR0aW5nczogUm93RWRpdFBvc2l0aW9uU2V0dGluZ3M7XG4gICAgcG9zaXRpb24oY29udGVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzaXplOiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0sIGRvY3VtZW50PzogRG9jdW1lbnQsIGluaXRpYWxDYWxsPzogYm9vbGVhbixcbiAgICAgICAgICAgIHRhcmdldD86IFBvaW50IHwgSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5zZXR0aW5ncy5jb250YWluZXI7IC8vIGdyaWQudGJvZHlcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IDxIVE1MRWxlbWVudD50YXJnZXQgfHwgPEhUTUxFbGVtZW50PnRoaXMuc2V0dGluZ3MudGFyZ2V0OyAvLyBjdXJyZW50IGdyaWQucm93XG5cbiAgICAgICAgLy8gUG9zaXRpb24gb2YgdGhlIG92ZXJsYXkgZGVwZW5kcyBvbiB0aGUgYXZhaWxhYmxlIHNwYWNlIGluIHRoZSBncmlkLlxuICAgICAgICAvLyBJZiB0aGUgYm90dG9tIHNwYWNlIGlzIG5vdCBlbm91Z2ggdGhlbiB0aGUgdGhlIHJvdyBvdmVybGF5IHdpbGwgc2hvdyBhdCB0aGUgdG9wIG9mIHRoZSByb3cuXG4gICAgICAgIC8vIE9uY2Ugc2hvd24sIGVpdGhlciB0b3Agb3IgYm90dG9tLCB0aGVuIHRoaXMgcG9zaXRpb24gc3RheXMgdW50aWwgdGhlIG92ZXJsYXkgaXMgY2xvc2VkIChpc1RvcEluaXRpYWxQb3NpdGlvbiBwcm9wZXJ0eSksXG4gICAgICAgIC8vIHdoaWNoIG1lYW5zIHRoYXQgd2hlbiBzY3JvbGxpbmcgdGhlbiBvdmVybGF5IG1heSBoaWRlLCB3aGlsZSB0aGUgcm93IGlzIHN0aWxsIHZpc2libGUgKFVYIHJlcXVpcmVtZW50KS5cbiAgICAgICAgdGhpcy5pc1RvcCA9IHRoaXMuaXNUb3BJbml0aWFsUG9zaXRpb24gIT09IG51bGwgP1xuICAgICAgICAgICAgdGhpcy5pc1RvcEluaXRpYWxQb3NpdGlvbiA6XG4gICAgICAgICAgICBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDxcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSArIGNvbnRlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblxuICAgICAgICAvLyBTZXQgd2lkdGggb2YgdGhlIHJvdyBlZGl0aW5nIG92ZXJsYXkgdG8gZXF1YWwgcm93IHdpZHRoLCBvdGhlcndpc2UgaXQgZml0cyAxMDAlIG9mIHRoZSBncmlkLlxuICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS53aWR0aCA9IHRhcmdldEVsZW1lbnQuY2xpZW50V2lkdGggKyAncHgnO1xuICAgICAgICB0aGlzLnNldHRpbmdzLnZlcnRpY2FsU3RhcnRQb2ludCA9IHRoaXMuc2V0dGluZ3MudmVydGljYWxEaXJlY3Rpb24gPSB0aGlzLmlzVG9wID8gVmVydGljYWxBbGlnbm1lbnQuVG9wIDogVmVydGljYWxBbGlnbm1lbnQuQm90dG9tO1xuICAgICAgICB0aGlzLnNldHRpbmdzLm9wZW5BbmltYXRpb24gPSB0aGlzLmlzVG9wID8gc2NhbGVJblZlckJvdHRvbSA6IHNjYWxlSW5WZXJUb3A7XG5cbiAgICAgICAgc3VwZXIucG9zaXRpb24oY29udGVudEVsZW1lbnQsIHsgd2lkdGg6IHRhcmdldEVsZW1lbnQuY2xpZW50V2lkdGgsIGhlaWdodDogdGFyZ2V0RWxlbWVudC5jbGllbnRIZWlnaHQgfSxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQsIGluaXRpYWxDYWxsLCB0YXJnZXRFbGVtZW50KTtcbiAgICB9XG59XG4iXX0=