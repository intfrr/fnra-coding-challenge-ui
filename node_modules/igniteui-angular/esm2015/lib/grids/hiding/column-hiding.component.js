import { __decorate } from "tslib";
import { ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { IgxColumnHidingItemDirective } from './column-hiding-item.directive';
import { ColumnChooserBaseDirective } from '../column-chooser-base';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { DeprecateClass } from '../../core/deprecateDecorators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../directives/button/button.directive';
import * as ɵngcc3 from '../../directives/ripple/ripple.directive';
import * as ɵngcc4 from '../../input-group/input-group.component';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '../../directives/input/input.directive';
import * as ɵngcc7 from '../../checkbox/checkbox.component';

function IgxColumnHidingComponent_h4_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
} }
function IgxColumnHidingComponent_igx_input_group_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 8);
    ɵngcc0.ɵɵelementStart(1, "input", 9);
    ɵngcc0.ɵɵlistener("ngModelChange", function IgxColumnHidingComponent_igx_input_group_2_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.filterCriteria = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filterCriteria)("placeholder", ctx_r1.filterColumnsPrompt);
} }
function IgxColumnHidingComponent_igx_checkbox_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-checkbox", 10);
    ɵngcc0.ɵɵlistener("onColumnVisibilityChanged", function IgxColumnHidingComponent_igx_checkbox_4_Template_igx_checkbox_onColumnVisibilityChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onVisibilityChanged($event); })("change", function IgxColumnHidingComponent_igx_checkbox_4_Template_igx_checkbox_change_0_listener() { const columnItem_r5 = ctx.$implicit; return columnItem_r5.value = !columnItem_r5.value; });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const columnItem_r5 = ctx.$implicit;
    ɵngcc0.ɵɵstyleProp("margin-left", columnItem_r5.calcIndent, "px");
    ɵngcc0.ɵɵproperty("checked", columnItem_r5.value)("disabled", columnItem_r5.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", columnItem_r5.name, " ");
} }
let IgxColumnHidingComponent = class IgxColumnHidingComponent extends ColumnChooserBaseDirective {
    constructor(cdr) {
        super(cdr);
        this.cdr = cdr;
        /**
         * Sets/gets the text of the button that shows all columns if they are hidden.
         * ```typescript
         * let showAllButtonText =  this.columnHiding.showAllText;
         * ```
         *
         * ```html
         * <igx-column-hiding [showAllText] = "'Show Columns'"></igx-column-hiding>
         * ```
         * @memberof IgxColumnHidingComponent
         */
        this.showAllText = 'Show All';
        /**
         * Sets/gets the text of the button that hides all columns if they are shown.
         * ```typescript
         * let hideAllButtonText =  this.columnHiding.hideAllText;
         * ```
         *
         * ```html
         * <igx-column-hiding [hideAllText] = "'Hide Columns'"></igx-column-hiding>
         * ```
         * @memberof IgxColumnHidingComponent
         */
        this.hideAllText = 'Hide All';
        /**
         * An event that is emitted after the columns visibility is changed.
         * Provides references to the `column` and the `newValue` properties as event arguments.
         * ```html
         *  <igx-column-hiding (onColumnVisibilityChanged) = "onColumnVisibilityChanged($event)"></igx-column-hiding>
         * ```
         * @memberof IgxColumnHidingComponent
         */
        this.onColumnVisibilityChanged = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.
     * ```html
     * <igx-column-hiding #columnHidingUI
     *     [columns]="grid.columns" [title]="'Column Hiding'">
     * </igx-column-hiding>
     * ```
     * ```typescript
     * @ViewChild("'columnHidingUI'")
     * public columnHiding: IgxColumnHidingComponent;
     * let isHideAlldisabled =  this.columnHiding.disableHideAll;
     * ```
     * @memberof IgxColumnHidingComponent
     */
    get disableHideAll() {
        if (!this.columnItems || this.columnItems.length < 1 ||
            this.hiddenColumnsCount === this.columns.length) {
            return true;
        }
        else if (this.hidableColumns.length < 1 ||
            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.
     * ```typescript
     * let isShowAlldisabled =  this.columnHiding.disableShowAll;
     * ```
     * @memberof IgxColumnHidingComponent
     */
    get disableShowAll() {
        if (!this.columnItems || this.columnItems.length < 1 ||
            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {
            return true;
        }
        else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Gets the count of the hidden columns.
     * ```typescript
     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;
     * ```
     * @memberof IgxColumnHidingComponent
     */
    get hiddenColumnsCount() {
        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;
    }
    /**
     * @hidden
     */
    get hidableColumns() {
        return this.columnItems.filter((col) => !col.disabled);
    }
    /**
     * @hidden
     */
    createColumnItem(container, column) {
        if (column.grid.hasColumnLayouts && !column.columnLayout) {
            return null;
        }
        const item = new IgxColumnHidingItemDirective();
        item.container = container;
        item.column = column;
        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {
            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });
        });
        return item;
    }
    /**
     * Shows all columns in the grid.
     * ```typescript
     * this.columnHiding.showAllColumns();
     * ```
     * @memberof IgxColumnHidingComponent
     */
    showAllColumns() {
        const collection = this.hidableColumns;
        for (const col of collection) {
            col.value = false;
        }
    }
    /**
     * Hides all columns in the grid.
     * ```typescript
     * this.columnHiding.hideAllColumns();
     * ```
     * @memberof IgxColumnHidingComponent
     */
    hideAllColumns() {
        const collection = this.hidableColumns;
        for (const col of collection) {
            col.value = true;
        }
    }
    /**
     * @hidden
     */
    onVisibilityChanged(args) {
        this.onColumnVisibilityChanged.emit(args);
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
};
IgxColumnHidingComponent.ɵfac = function IgxColumnHidingComponent_Factory(t) { return new (t || IgxColumnHidingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxColumnHidingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxColumnHidingComponent, selectors: [["igx-column-hiding"]], inputs: { showAllText: "showAllText", hideAllText: "hideAllText", disableHideAll: "disableHideAll", disableShowAll: "disableShowAll" }, outputs: { onColumnVisibilityChanged: "onColumnVisibilityChanged" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 9, consts: [[1, "igx-column-actions__header"], ["class", "igx-column-actions__header-title", 4, "ngIf"], ["class", "igx-column-actions__header-input", 4, "ngIf"], [1, "igx-column-actions__columns"], ["class", "igx-column-actions__columns-item", 3, "checked", "disabled", "margin-left", "onColumnVisibilityChanged", "change", 4, "ngFor", "ngForOf"], [1, "igx-column-actions__buttons"], ["igxButton", "", "igxRipple", "", 3, "disabled", "click"], [1, "igx-column-actions__header-title"], [1, "igx-column-actions__header-input"], ["igxInput", "", "type", "text", "autocomplete", "off", 3, "ngModel", "placeholder", "ngModelChange"], [1, "igx-column-actions__columns-item", 3, "checked", "disabled", "onColumnVisibilityChanged", "change"]], template: function IgxColumnHidingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, IgxColumnHidingComponent_h4_1_Template, 2, 1, "h4", 1);
        ɵngcc0.ɵɵtemplate(2, IgxColumnHidingComponent_igx_input_group_2_Template, 2, 2, "igx-input-group", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, IgxColumnHidingComponent_igx_checkbox_4_Template, 2, 5, "igx-checkbox", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵelementStart(6, "button", 6);
        ɵngcc0.ɵɵlistener("click", function IgxColumnHidingComponent_Template_button_click_6_listener() { return ctx.showAllColumns(); });
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "button", 6);
        ɵngcc0.ɵɵlistener("click", function IgxColumnHidingComponent_Template_button_click_8_listener() { return ctx.hideAllColumns(); });
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disableFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("max-height", ctx.columnsAreaMaxHeight);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.hidableColumns);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disableShowAll);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.showAllText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.disableHideAll);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.hideAllText);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc2.IgxButtonDirective, ɵngcc3.IgxRippleDirective, ɵngcc4.IgxInputGroupComponent, ɵngcc5.DefaultValueAccessor, ɵngcc6.IgxInputDirective, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc7.IgxCheckboxComponent], encapsulation: 2 });
IgxColumnHidingComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
IgxColumnHidingComponent.propDecorators = {
    disableHideAll: [{ type: Input }],
    disableShowAll: [{ type: Input }],
    showAllText: [{ type: Input }],
    hideAllText: [{ type: Input }],
    onColumnVisibilityChanged: [{ type: Output }]
};
IgxColumnHidingComponent = __decorate([
    DeprecateClass(`The 'IgxColumnHiding' component is deprecated.
Please use the 'IgxColumnActions' component with the 'IgxColumnHiding' directive instead.`)
], IgxColumnHidingComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnHidingComponent, [{
        type: Component,
        args: [{
                preserveWhitespaces: false,
                selector: 'igx-column-hiding',
                template: "<div class=\"igx-column-actions__header\">\n    <h4 class=\"igx-column-actions__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-actions__header-input\" *ngIf=\"!disableFilter\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-actions__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox\n        *ngFor=\"let columnItem of hidableColumns\"\n        class=\"igx-column-actions__columns-item\"\n        (onColumnVisibilityChanged)=\"onVisibilityChanged($event)\"\n        (change)=\"columnItem.value = !columnItem.value\"\n        [checked]=\"columnItem.value\"\n        [disabled]=\"columnItem.disabled\"\n        [style.margin-left.px]=\"columnItem.calcIndent\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n\n<div class=\"igx-column-actions__buttons\">\n    <button igxButton igxRipple (click)=\"showAllColumns()\" [disabled]=\"disableShowAll\">{{ showAllText }}</button>\n    <button igxButton igxRipple (click)=\"hideAllColumns()\" [disabled]=\"disableHideAll\">{{ hideAllText }}</button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { showAllText: [{
            type: Input
        }], hideAllText: [{
            type: Input
        }], onColumnVisibilityChanged: [{
            type: Output
        }], disableHideAll: [{
            type: Input
        }], disableShowAll: [{
            type: Input
        }] }); })();
export { IgxColumnHidingComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,