import { __decorate } from "tslib";
import { Component, ChangeDetectorRef } from '@angular/core';
import { ColumnChooserBaseDirective } from '../column-chooser-base';
import { IgxColumnPinningItemDirective } from './pinning.directive';
import { DeprecateClass } from '../../core/deprecateDecorators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../input-group/input-group.component';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '../../directives/input/input.directive';
import * as ɵngcc5 from '../../checkbox/checkbox.component';
import * as ɵngcc6 from './pinning.directive';

function IgxColumnPinningComponent_h4_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
} }
function IgxColumnPinningComponent_igx_input_group_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 7);
    ɵngcc0.ɵɵlistener("ngModelChange", function IgxColumnPinningComponent_igx_input_group_2_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.filterCriteria = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filterCriteria)("placeholder", ctx_r1.filterColumnsPrompt);
} }
function IgxColumnPinningComponent_igx_checkbox_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-checkbox", 8);
    ɵngcc0.ɵɵlistener("change", function IgxColumnPinningComponent_igx_checkbox_4_Template_igx_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const columnItem_r5 = ctx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.checkboxValueChange($event, columnItem_r5); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const columnItem_r5 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("checked", columnItem_r5.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", columnItem_r5.name, " ");
} }
let IgxColumnPinningComponent = class IgxColumnPinningComponent extends ColumnChooserBaseDirective {
    constructor(cdr) {
        super(cdr);
        this.cdr = cdr;
    }
    /**
     * @hidden
     */
    createColumnItem(container, column) {
        if (column.level !== 0 || column.disablePinning) {
            return null;
        }
        const item = new IgxColumnPinningItemDirective();
        item.container = container;
        item.column = column;
        return item;
    }
    /**
     * @hidden
     */
    checkboxValueChange(event, columnItem) {
        if (event.checked && !columnItem.pinnable) {
            event.checkbox.checked = false;
            return false;
        }
        columnItem.value = !columnItem.value;
    }
    /**
     * @hidden @internal
     */
    get pinnableColumns() {
        return this.columnItems.filter((col) => !col.pinningDisabled);
    }
};
IgxColumnPinningComponent.ɵfac = function IgxColumnPinningComponent_Factory(t) { return new (t || IgxColumnPinningComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxColumnPinningComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxColumnPinningComponent, selectors: [["igx-column-pinning"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 5, consts: [[1, "igx-column-actions__header"], ["class", "igx-column-actions__header-title", 4, "ngIf"], ["class", "igx-column-actions__header-input", 4, "ngIf"], [1, "igx-column-actions__columns"], ["igxColumnPinningItem", "", "class", "igx-column-actions__columns-item", 3, "checked", "change", 4, "ngFor", "ngForOf"], [1, "igx-column-actions__header-title"], [1, "igx-column-actions__header-input"], ["igxInput", "", "type", "text", "autocomplete", "off", 3, "ngModel", "placeholder", "ngModelChange"], ["igxColumnPinningItem", "", 1, "igx-column-actions__columns-item", 3, "checked", "change"]], template: function IgxColumnPinningComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, IgxColumnPinningComponent_h4_1_Template, 2, 1, "h4", 1);
        ɵngcc0.ɵɵtemplate(2, IgxColumnPinningComponent_igx_input_group_2_Template, 2, 2, "igx-input-group", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, IgxColumnPinningComponent_igx_checkbox_4_Template, 2, 2, "igx-checkbox", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disableFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("max-height", ctx.columnsAreaMaxHeight);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.pinnableColumns);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc2.IgxInputGroupComponent, ɵngcc3.DefaultValueAccessor, ɵngcc4.IgxInputDirective, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc5.IgxCheckboxComponent, ɵngcc6.IgxColumnPinningItemDirective], encapsulation: 2 });
IgxColumnPinningComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
IgxColumnPinningComponent = __decorate([
    DeprecateClass(`The 'IgxColumnPinning' component is deprecated.
Please use the 'IgxColumnActions' component with the 'IgxColumnPinning' directive instead.`)
], IgxColumnPinningComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxColumnPinningComponent, [{
        type: Component,
        args: [{
                preserveWhitespaces: false,
                selector: 'igx-column-pinning',
                template: "\n<div class=\"igx-column-actions__header\">\n    <h4 class=\"igx-column-actions__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-actions__header-input\" *ngIf=\"!disableFilter\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-actions__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox igxColumnPinningItem\n        *ngFor=\"let columnItem of pinnableColumns\"\n        class=\"igx-column-actions__columns-item\"\n        (change)=\"checkboxValueChange($event, columnItem)\"\n        [checked]=\"columnItem.value\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
export { IgxColumnPinningComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXBpbm5pbmcuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvcGlubmluZy9jb2x1bW4tcGlubmluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEUsT0FBTyxFQUFtQixjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ2pGLElBU2EseUJBQXlCLFNBQXpCLHlCQUEwQixTQUFRLDBCQUEwQjtBQUN6RSxJQUNJLFlBQW1CLEdBQXNCO0FBQzdDLFFBQVEsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLFFBRnVCLFFBQUcsR0FBSCxHQUFHLENBQW1CO0FBQUMsSUFFMUMsQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBLE9BQU87QUFDUCxJQUFJLGdCQUFnQixDQUFDLFNBQWMsRUFBRSxNQUFXO0FBQ2hELFFBQVEsSUFBSSxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO0FBQ3pELFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQVEsTUFBTSxJQUFJLEdBQUcsSUFBSSw2QkFBNkIsRUFBRSxDQUFDO0FBQ3pELFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDbkMsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUM3QixRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBLE9BQU87QUFDUCxJQUFXLG1CQUFtQixDQUFDLEtBQUssRUFBRSxVQUF5QztBQUMvRSxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7QUFDbkQsWUFBWSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDM0MsWUFBWSxPQUFPLEtBQUssQ0FBQztBQUN6QixTQUFTO0FBQ1QsUUFBUSxVQUFVLENBQUMsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztBQUM3QyxJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFXLGVBQWU7QUFDOUIsUUFBUSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN0RSxJQUFJLENBQUM7QUFDTCxDQUFDLENBQUE7cURBekNBLFNBQVMsU0FBQyxrQkFDUCxtQkFBbUIsRUFBRSxLQUFLLGtCQUMxQixRQUFRLEVBQUUsb0JBQW9CO0FBQzlCLHkxQkFBOEMsY0FDakQ7Ozs7Ozs7Ozs7Ozs7Ozs7O3lRQUNJO0FBQUM7QUFBbUQsWUFickMsaUJBQWlCO0FBQUc7QUFhM0IseUJBQXlCO0FBQWdCLElBUHJELGNBQWMsQ0FBQztBQUNoQiwyRkFBMkYsQ0FBQztBQUM1RixHQUthLHlCQUF5QixDQW9DckM7Ozs7Ozs7O2tGQUNEO0FBQUMsU0FyQ1kseUJBQXlCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbHVtbkNob29zZXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi4vY29sdW1uLWNob29zZXItYmFzZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vcGlubmluZy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGVwcmVjYXRlTWV0aG9kLCBEZXByZWNhdGVDbGFzcyB9IGZyb20gJy4uLy4uL2NvcmUvZGVwcmVjYXRlRGVjb3JhdG9ycyc7XG5cblxuQERlcHJlY2F0ZUNsYXNzKGBUaGUgJ0lneENvbHVtblBpbm5pbmcnIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkLlxuUGxlYXNlIHVzZSB0aGUgJ0lneENvbHVtbkFjdGlvbnMnIGNvbXBvbmVudCB3aXRoIHRoZSAnSWd4Q29sdW1uUGlubmluZycgZGlyZWN0aXZlIGluc3RlYWQuYClcbkBDb21wb25lbnQoe1xuICAgIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICAgIHNlbGVjdG9yOiAnaWd4LWNvbHVtbi1waW5uaW5nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29sdW1uLXBpbm5pbmcuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtblBpbm5pbmdDb21wb25lbnQgZXh0ZW5kcyBDb2x1bW5DaG9vc2VyQmFzZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihjZHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjcmVhdGVDb2x1bW5JdGVtKGNvbnRhaW5lcjogYW55LCBjb2x1bW46IGFueSkge1xuICAgICAgICBpZiAoY29sdW1uLmxldmVsICE9PSAwIHx8IGNvbHVtbi5kaXNhYmxlUGlubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZSgpO1xuICAgICAgICBpdGVtLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgaXRlbS5jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hlY2tib3hWYWx1ZUNoYW5nZShldmVudCwgY29sdW1uSXRlbTogSWd4Q29sdW1uUGlubmluZ0l0ZW1EaXJlY3RpdmUpIHtcbiAgICAgICAgaWYgKGV2ZW50LmNoZWNrZWQgJiYgIWNvbHVtbkl0ZW0ucGlubmFibGUpIHtcbiAgICAgICAgICAgIGV2ZW50LmNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW5JdGVtLnZhbHVlID0gIWNvbHVtbkl0ZW0udmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHBpbm5hYmxlQ29sdW1ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uSXRlbXMuZmlsdGVyKChjb2wpID0+ICFjb2wucGlubmluZ0Rpc2FibGVkKTtcbiAgICB9XG59XG4iXX0=