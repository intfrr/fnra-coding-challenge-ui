import { Component, Directive, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CheckboxRequiredValidator, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { isIE, mkenum } from '../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/ripple/ripple.directive';

const _c0 = ["checkbox"];
const _c1 = ["label"];
const _c2 = ["placeholderLabel"];
const _c3 = ["*"];
export const SwitchLabelPosition = mkenum({
    BEFORE: 'before',
    AFTER: 'after'
});
const noop = () => { };
const ɵ0 = noop;
let nextId = 0;
/**
 *
 * The Switch component is a binary choice selection component.
 *
 * @igxModule IgxSwitchModule
 *
 * @igxTheme igx-switch-theme, igx-tooltip-theme
 *
 * @igxKeywords switch, states, tooltip
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 *
 * The Ignite UI Switch lets the user toggle between on/off or true/false states.
 *
 * @example
 * ```html
 * <igx-switch [checked]="true">
 *   Simple switch
 * </igx-switch>
 * ```
 */
export class IgxSwitchComponent {
    constructor() {
        /**
         * Sets/gets the `id` of the switch component.
         * If not set, the `id` of the first switch component will be `"igx-switch-0"`.
         *
         * @example
         * ```html
         * <igx-switch id="my-first-switch"></igx-switch>
         * ```
         */
        this.id = `igx-switch-${nextId++}`;
        /**
         * Sets/gets the id of the `label` element of the switch component.
         * If not set, the label of the first switch component will have value `"igx-switch-0-label"`.
         *
         * @example
         * ```html
         * <igx-switch labelId="Label1"></igx-switch>
         * ```
         */
        this.labelId = `${this.id}-label`;
        /**
         * Sets/gets the value of the `tabindex` attribute.
         *
         * @example
         * ```html
         * <igx-switch [tabindex]="1"></igx-switch>
         * ```
         */
        this.tabindex = null;
        /**
         * Sets/gets the position of the `label` in the switch component.
         * If not set, `labelPosition` will have value `"after"`.
         *
         * @example
         * ```html
         * <igx-switch labelPosition="before"></igx-switch>
         * ```
         */
        this.labelPosition = 'after';
        /**
         * Enables/Disables the ripple effect
         * If not set, `disableRipple` will have value `false`.
         *
         * @example
         * ```html
         * <igx-switch [disableRipple]="true"></igx-switch>
         * ```
         */
        this.disableRipple = false;
        /**
         * Sets/gets whether switch is required.
         * If not set, `required` will have value `false`.
         *
         * @example
         * ```html
         * <igx-switch [required]="true"></igx-switch>
         * ```
         */
        this.required = false;
        /**
         * Sets/gets the `aria-labelledBy` attribute.
         * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.
         *
         * @example
         * ```html
         * <igx-switch aria-labelledby = "Label1"></igx-switch>
         * ```
         */
        this.ariaLabelledBy = this.labelId;
        /**
         * Sets/gets the value of the `aria-label` attribute.
         *
         * @example
         * ```html
         * <igx-switch aria-label="Label1"></igx-switch>
         * ```
         */
        this.ariaLabel = null;
        /**
         * An event that is emitted after the switch state is changed.
         * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.
         */
        this.change = new EventEmitter();
        /**
         * @hidden
         * @internal
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         * @internal
         */
        this._onChangeCallback = noop;
        /**
         * Returns the class of the switch component.
         *
         * @example
         * ```typescript
         * let switchClass = this.switch.cssClass;
         * ```
         */
        this.cssClass = 'igx-switch';
        /**
         * Sets/gets whether the switch is on or off.
         * Default value is 'false'.
         *
         * @example
         * ```html
         *  <igx-switch [checked]="true"></igx-switch>
         * ```
         */
        this.checked = false;
        /**
         * Sets/gets the `disabled` attribute.
         * Default value is `false`.
         *
         * @example
         * ```html
         * <igx-switch [disabled]="true"><igx-switch>
         * ```
         */
        this.disabled = false;
        /**
         * Sets/gets whether the switch component is on focus.
         * Default value is `false`.
         *
         * @example
         * ```typescript
         * this.switch.focused = true;
         * ```
         */
        this.focused = false;
        /**
         * @hidden
         * @internal
         */
        this.inputId = `${this.id}-input`;
    }
    /**
     * Toggles the checked state of the switch.
     *
     * @example
     * ```typescript
     * this.switch.toggle();
     * ```
     */
    toggle() {
        if (this.disabled) {
            return;
        }
        this.checked = !this.checked;
        this.focused = false;
        this.change.emit({ checked: this.checked, switch: this });
        this._onChangeCallback(this.checked);
    }
    /**
     * @hidden
     * @internal
     */
    _onSwitchChange(event) {
        event.stopPropagation();
    }
    /**
     * @hidden
     * @internal
     */
    _onSwitchClick(event) {
        event.stopPropagation();
        this.toggle();
        if (isIE()) {
            this.nativeCheckbox.nativeElement.blur();
        }
    }
    /**
     * @hidden
     * @internal
     */
    _onLabelClick(event) {
        this.toggle();
    }
    /**
     * @hidden
     * @internal
     */
    onFocus(event) {
        this.focused = true;
    }
    /**
     * @hidden
     * @internal
     */
    onBlur(event) {
        this.focused = false;
        this._onTouchedCallback();
    }
    /**
     * @hidden
     * @internal
     */
    writeValue(value) {
        this._value = value;
        this.checked = !!this._value;
    }
    /**
     * @hidden
     * @internal
     */
    getEditElement() {
        return this.nativeCheckbox.nativeElement;
    }
    /**
     * @hidden
     * @internal
     */
    get labelClass() {
        switch (this.labelPosition) {
            case SwitchLabelPosition.BEFORE:
                return `${this.cssClass}__label--before`;
            case SwitchLabelPosition.AFTER:
            default:
                return `${this.cssClass}__label`;
        }
    }
    /**
     * @hidden
     * @internal
     */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /**
     * @hidden
     * @internal
     */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
}
IgxSwitchComponent.ɵfac = function IgxSwitchComponent_Factory(t) { return new (t || IgxSwitchComponent)(); };
IgxSwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxSwitchComponent, selectors: [["igx-switch"]], viewQuery: function IgxSwitchComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nativeCheckbox = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nativeLabel = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.placeholderLabel = _t.first);
    } }, hostVars: 9, hostBindings: function IgxSwitchComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵclassProp("igx-switch", ctx.cssClass)("igx-switch--checked", ctx.checked)("igx-switch--disabled", ctx.disabled)("igx-switch--focused", ctx.focused);
    } }, inputs: { id: "id", labelId: "labelId", tabindex: "tabindex", labelPosition: "labelPosition", disableRipple: "disableRipple", required: "required", ariaLabelledBy: ["aria-labelledby", "ariaLabelledBy"], ariaLabel: ["aria-label", "ariaLabel"], checked: "checked", disabled: "disabled", value: "value", name: "name" }, outputs: { change: "change" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }])], ngContentSelectors: _c3, decls: 9, vars: 17, consts: [["type", "checkbox", 1, "igx-switch__input", 3, "id", "name", "value", "tabindex", "disabled", "checked", "required", "change", "click", "focus", "blur"], ["checkbox", ""], ["igxRipple", "", "igxRippleTarget", ".igx-switch__ripple", 1, "igx-switch__composite", 3, "for", "igxRippleDisabled", "igxRippleCentered", "igxRippleDuration"], ["label", ""], [1, "igx-switch__composite-thumb"], [1, "igx-switch__ripple"], [3, "id", "click"], ["placeholderLabel", ""]], template: function IgxSwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "input", 0, 1);
        ɵngcc0.ɵɵlistener("change", function IgxSwitchComponent_Template_input_change_0_listener($event) { return ctx._onSwitchChange($event); })("click", function IgxSwitchComponent_Template_input_click_0_listener($event) { return ctx._onSwitchClick($event); })("focus", function IgxSwitchComponent_Template_input_focus_0_listener($event) { return ctx.onFocus($event); })("blur", function IgxSwitchComponent_Template_input_blur_0_listener($event) { return ctx.onBlur($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "label", 2, 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelement(5, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "span", 6, 7);
        ɵngcc0.ɵɵlistener("click", function IgxSwitchComponent_Template_span_click_6_listener($event) { return ctx._onLabelClick($event); });
        ɵngcc0.ɵɵprojection(8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.inputId)("name", ctx.name)("value", ctx.value)("tabindex", ctx.tabindex)("disabled", ctx.disabled)("checked", ctx.checked)("required", ctx.required);
        ɵngcc0.ɵɵattribute("aria-checked", ctx.checked)("aria-labelledby", ctx.ariaLabelledBy)("aria-label", ctx.ariaLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", ctx.inputId)("igxRippleDisabled", ctx.disableRipple)("igxRippleCentered", true)("igxRippleDuration", 300);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵclassMap(ctx.labelClass);
        ɵngcc0.ɵɵproperty("id", ctx.labelId);
    } }, directives: [ɵngcc1.IgxRippleDirective], encapsulation: 2 });
IgxSwitchComponent.propDecorators = {
    nativeCheckbox: [{ type: ViewChild, args: ['checkbox', { static: true },] }],
    nativeLabel: [{ type: ViewChild, args: ['label', { static: true },] }],
    placeholderLabel: [{ type: ViewChild, args: ['placeholderLabel', { static: true },] }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    labelId: [{ type: Input }],
    value: [{ type: Input }],
    name: [{ type: Input }],
    tabindex: [{ type: Input }],
    labelPosition: [{ type: Input }],
    disableRipple: [{ type: Input }],
    required: [{ type: Input }],
    ariaLabelledBy: [{ type: Input, args: ['aria-labelledby',] }],
    ariaLabel: [{ type: Input, args: ['aria-label',] }],
    change: [{ type: Output }],
    cssClass: [{ type: HostBinding, args: ['class.igx-switch',] }],
    checked: [{ type: HostBinding, args: ['class.igx-switch--checked',] }, { type: Input }],
    disabled: [{ type: HostBinding, args: ['class.igx-switch--disabled',] }, { type: Input }],
    focused: [{ type: HostBinding, args: ['class.igx-switch--focused',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSwitchComponent, [{
        type: Component,
        args: [{
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],
                selector: 'igx-switch',
                template: "<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onSwitchChange($event)\"\n    (click)=\"_onSwitchClick($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<label #label class =\"igx-switch__composite\" [for]=\"inputId\"\n    igxRipple\n    igxRippleTarget=\".igx-switch__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\">\n    <div class=\"igx-switch__composite-thumb\">\n        <div class=\"igx-switch__ripple\"></div>\n    </div>\n</label>\n\n<span #placeholderLabel\n    [class]=\"labelClass\"\n    [id]=\"labelId\"\n    (click)=\"_onLabelClick($event)\">\n    <ng-content></ng-content>\n</span>\n"
            }]
    }], function () { return []; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], labelId: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], labelPosition: [{
            type: Input
        }], disableRipple: [{
            type: Input
        }], required: [{
            type: Input
        }], ariaLabelledBy: [{
            type: Input,
            args: ['aria-labelledby']
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], change: [{
            type: Output
        }], cssClass: [{
            type: HostBinding,
            args: ['class.igx-switch']
        }], checked: [{
            type: HostBinding,
            args: ['class.igx-switch--checked']
        }, {
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: ['class.igx-switch--disabled']
        }, {
            type: Input
        }], focused: [{
            type: HostBinding,
            args: ['class.igx-switch--focused']
        }], nativeCheckbox: [{
            type: ViewChild,
            args: ['checkbox', { static: true }]
        }], nativeLabel: [{
            type: ViewChild,
            args: ['label', { static: true }]
        }], placeholderLabel: [{
            type: ViewChild,
            args: ['placeholderLabel', { static: true }]
        }], value: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();
export const IGX_SWITCH_REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => IgxSwitchRequiredDirective),
    multi: true
};
/* tslint:disable directive-selector */
export class IgxSwitchRequiredDirective extends CheckboxRequiredValidator {
}
IgxSwitchRequiredDirective.ɵfac = function IgxSwitchRequiredDirective_Factory(t) { return ɵIgxSwitchRequiredDirective_BaseFactory(t || IgxSwitchRequiredDirective); };
IgxSwitchRequiredDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxSwitchRequiredDirective, selectors: [["igx-switch", "required", "", "formControlName", ""], ["igx-switch", "required", "", "formControl", ""], ["igx-switch", "required", "", "ngModel", ""]], features: [ɵngcc0.ɵɵProvidersFeature([IGX_SWITCH_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });
const ɵIgxSwitchRequiredDirective_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxSwitchRequiredDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSwitchRequiredDirective, [{
        type: Directive,
        args: [{
                selector: `igx-switch[required][formControlName],
    igx-switch[required][formControl],
    igx-switch[required][ngModel]`,
                providers: [IGX_SWITCH_REQUIRED_VALIDATOR]
            }]
    }], null, null); })();
/**
 * @hidden
 */
export class IgxSwitchModule {
}
IgxSwitchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxSwitchModule });
IgxSwitchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxSwitchModule_Factory(t) { return new (t || IgxSwitchModule)(); }, imports: [[IgxRippleModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxSwitchModule, { declarations: function () { return [IgxSwitchComponent, IgxSwitchRequiredDirective]; }, imports: function () { return [IgxRippleModule]; }, exports: function () { return [IgxSwitchComponent, IgxSwitchRequiredDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSwitchModule, [{
        type: NgModule,
        args: [{
                declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],
                exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],
                imports: [IgxRippleModule]
            }]
    }], null, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,