/**
 * This file contains all the directives used by the @link IgxTimePickerComponent.
 * You should generally not use them directly.
 * @preferred
 */
import { Directive, ElementRef, HostBinding, HostListener, Inject, Input, TemplateRef } from '@angular/core';
import { IGX_TIME_PICKER_COMPONENT } from './time-picker.common';
import { InteractionMode } from '../core/enums';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export class IgxItemListDirective {
    constructor(timePicker, elementRef) {
        this.timePicker = timePicker;
        this.elementRef = elementRef;
        this.tabindex = 0;
    }
    get defaultCSS() {
        return true;
    }
    get hourCSS() {
        return this.type === 'hourList';
    }
    get minuteCSS() {
        return this.type === 'minuteList';
    }
    get secondsCSS() {
        return this.type === 'secondsList';
    }
    get ampmCSS() {
        return this.type === 'ampmList';
    }
    onFocus() {
        this.isActive = true;
    }
    onBlur() {
        this.isActive = false;
    }
    nextItem() {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.nextHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.nextMinute();
                break;
            }
            case 'secondsList': {
                this.timePicker.nextSeconds();
                break;
            }
            case 'ampmList': {
                this.timePicker.nextAmPm();
                break;
            }
        }
    }
    prevItem() {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.prevHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.prevMinute();
                break;
            }
            case 'secondsList': {
                this.timePicker.prevSeconds();
                break;
            }
            case 'ampmList': {
                this.timePicker.prevAmPm();
                break;
            }
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowDown(event) {
        event.preventDefault();
        this.nextItem();
    }
    /**
     * @hidden
     */
    onKeydownArrowUp(event) {
        event.preventDefault();
        this.prevItem();
    }
    /**
     * @hidden
     */
    onKeydownArrowRight(event) {
        event.preventDefault();
        const listName = event.target.className;
        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.secondsList) {
            this.timePicker.secondsList.nativeElement.focus();
        }
        else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1 ||
            listName.indexOf('secondsList') !== -1) && this.timePicker.ampmList) {
            this.timePicker.ampmList.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowLeft(event) {
        event.preventDefault();
        const listName = event.target.className;
        if (listName.indexOf('ampmList') !== -1 && this.timePicker.secondsList) {
            this.timePicker.secondsList.nativeElement.focus();
        }
        else if (listName.indexOf('secondsList') !== -1 && this.timePicker.secondsList
            && listName.indexOf('minutesList') && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('secondsList') !== -1 ||
            listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {
            this.timePicker.hourList.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    onKeydownEnter(event) {
        event.preventDefault();
        if (this.timePicker.mode === InteractionMode.DropDown) {
            this.timePicker.close();
            return;
        }
        this.timePicker.okButtonClick();
    }
    /**
     * @hidden
     */
    onKeydownEscape(event) {
        event.preventDefault();
        this.timePicker.cancelButtonClick();
    }
    /**
     * @hidden
     */
    onHover() {
        this.elementRef.nativeElement.focus();
    }
    /**
     * @hidden
     */
    onScroll(event) {
        event.preventDefault();
        event.stopPropagation();
        if (event.deltaY > 0) {
            this.nextItem();
        }
        else if (event.deltaY < 0) {
            this.prevItem();
        }
    }
    /**
     * @hidden
     */
    onPanMove(event) {
        if (event.deltaY < 0) {
            this.nextItem();
        }
        else if (event.deltaY > 0) {
            this.prevItem();
        }
    }
}
IgxItemListDirective.ɵfac = function IgxItemListDirective_Factory(t) { return new (t || IgxItemListDirective)(ɵngcc0.ɵɵdirectiveInject(IGX_TIME_PICKER_COMPONENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxItemListDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxItemListDirective, selectors: [["", "igxItemList", ""]], hostVars: 11, hostBindings: function IgxItemListDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function IgxItemListDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("blur", function IgxItemListDirective_blur_HostBindingHandler() { return ctx.onBlur(); })("keydown.arrowdown", function IgxItemListDirective_keydown_arrowdown_HostBindingHandler($event) { return ctx.onKeydownArrowDown($event); })("keydown.arrowup", function IgxItemListDirective_keydown_arrowup_HostBindingHandler($event) { return ctx.onKeydownArrowUp($event); })("keydown.arrowright", function IgxItemListDirective_keydown_arrowright_HostBindingHandler($event) { return ctx.onKeydownArrowRight($event); })("keydown.arrowleft", function IgxItemListDirective_keydown_arrowleft_HostBindingHandler($event) { return ctx.onKeydownArrowLeft($event); })("keydown.enter", function IgxItemListDirective_keydown_enter_HostBindingHandler($event) { return ctx.onKeydownEnter($event); })("keydown.escape", function IgxItemListDirective_keydown_escape_HostBindingHandler($event) { return ctx.onKeydownEscape($event); })("mouseover", function IgxItemListDirective_mouseover_HostBindingHandler() { return ctx.onHover(); })("wheel", function IgxItemListDirective_wheel_HostBindingHandler($event) { return ctx.onScroll($event); })("panmove", function IgxItemListDirective_panmove_HostBindingHandler($event) { return ctx.onPanMove($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabindex);
        ɵngcc0.ɵɵclassProp("igx-time-picker__column", ctx.defaultCSS)("igx-time-picker__hourList", ctx.hourCSS)("igx-time-picker__minuteList", ctx.minuteCSS)("igx-time-picker__secondsList", ctx.secondsCSS)("igx-time-picker__ampmList", ctx.ampmCSS);
    } }, inputs: { type: ["igxItemList", "type"] } });
IgxItemListDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: ElementRef }
];
IgxItemListDirective.propDecorators = {
    type: [{ type: Input, args: ['igxItemList',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__column',] }],
    hourCSS: [{ type: HostBinding, args: ['class.igx-time-picker__hourList',] }],
    minuteCSS: [{ type: HostBinding, args: ['class.igx-time-picker__minuteList',] }],
    secondsCSS: [{ type: HostBinding, args: ['class.igx-time-picker__secondsList',] }],
    ampmCSS: [{ type: HostBinding, args: ['class.igx-time-picker__ampmList',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }],
    onKeydownArrowDown: [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
    onKeydownArrowUp: [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] }],
    onKeydownArrowRight: [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] }],
    onKeydownArrowLeft: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }],
    onKeydownEnter: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
    onKeydownEscape: [{ type: HostListener, args: ['keydown.escape', ['$event'],] }],
    onHover: [{ type: HostListener, args: ['mouseover',] }],
    onScroll: [{ type: HostListener, args: ['wheel', ['$event'],] }],
    onPanMove: [{ type: HostListener, args: ['panmove', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxItemListDirective, [{
        type: Directive,
        args: [{
                selector: '[igxItemList]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [IGX_TIME_PICKER_COMPONENT]
            }] }, { type: ɵngcc0.ElementRef }]; }, { tabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], defaultCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__column']
        }], hourCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__hourList']
        }], minuteCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__minuteList']
        }], secondsCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__secondsList']
        }], ampmCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__ampmList']
        }], onFocus: [{
            type: HostListener,
            args: ['focus']
        }], onBlur: [{
            type: HostListener,
            args: ['blur']
        }], 
    /**
     * @hidden
     */
    onKeydownArrowDown: [{
            type: HostListener,
            args: ['keydown.arrowdown', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownArrowUp: [{
            type: HostListener,
            args: ['keydown.arrowup', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownArrowRight: [{
            type: HostListener,
            args: ['keydown.arrowright', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownArrowLeft: [{
            type: HostListener,
            args: ['keydown.arrowleft', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownEnter: [{
            type: HostListener,
            args: ['keydown.enter', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownEscape: [{
            type: HostListener,
            args: ['keydown.escape', ['$event']]
        }], 
    /**
     * @hidden
     */
    onHover: [{
            type: HostListener,
            args: ['mouseover']
        }], 
    /**
     * @hidden
     */
    onScroll: [{
            type: HostListener,
            args: ['wheel', ['$event']]
        }], 
    /**
     * @hidden
     */
    onPanMove: [{
            type: HostListener,
            args: ['panmove', ['$event']]
        }], type: [{
            type: Input,
            args: ['igxItemList']
        }] }); })();
/**
 * @hidden
 */
export class IgxHourItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedHour;
    }
    get activeCSS() {
        return this.isSelectedHour && this.itemList.isActive;
    }
    get isSelectedHour() {
        return this.timePicker.selectedHour === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollHourIntoView(item);
        }
    }
}
IgxHourItemDirective.ɵfac = function IgxHourItemDirective_Factory(t) { return new (t || IgxHourItemDirective)(ɵngcc0.ɵɵdirectiveInject(IGX_TIME_PICKER_COMPONENT), ɵngcc0.ɵɵdirectiveInject(IgxItemListDirective)); };
IgxHourItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxHourItemDirective, selectors: [["", "igxHourItem", ""]], hostVars: 6, hostBindings: function IgxHourItemDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxHourItemDirective_click_HostBindingHandler() { return ctx.onClick(ctx.value); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-time-picker__item", ctx.defaultCSS)("igx-time-picker__item--selected", ctx.selectedCSS)("igx-time-picker__item--active", ctx.activeCSS);
    } }, inputs: { value: ["igxHourItem", "value"] } });
IgxHourItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
IgxHourItemDirective.propDecorators = {
    value: [{ type: Input, args: ['igxHourItem',] }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item',] }],
    selectedCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] }],
    activeCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] }],
    onClick: [{ type: HostListener, args: ['click', ['value'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxHourItemDirective, [{
        type: Directive,
        args: [{
                selector: '[igxHourItem]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [IGX_TIME_PICKER_COMPONENT]
            }] }, { type: IgxItemListDirective }]; }, { defaultCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item']
        }], selectedCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--selected']
        }], activeCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--active']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['value']]
        }], value: [{
            type: Input,
            args: ['igxHourItem']
        }] }); })();
/**
 * @hidden
 */
export class IgxMinuteItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedMinute;
    }
    get activeCSS() {
        return this.isSelectedMinute && this.itemList.isActive;
    }
    get isSelectedMinute() {
        return this.timePicker.selectedMinute === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollMinuteIntoView(item);
        }
    }
}
IgxMinuteItemDirective.ɵfac = function IgxMinuteItemDirective_Factory(t) { return new (t || IgxMinuteItemDirective)(ɵngcc0.ɵɵdirectiveInject(IGX_TIME_PICKER_COMPONENT), ɵngcc0.ɵɵdirectiveInject(IgxItemListDirective)); };
IgxMinuteItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxMinuteItemDirective, selectors: [["", "igxMinuteItem", ""]], hostVars: 6, hostBindings: function IgxMinuteItemDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxMinuteItemDirective_click_HostBindingHandler() { return ctx.onClick(ctx.value); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-time-picker__item", ctx.defaultCSS)("igx-time-picker__item--selected", ctx.selectedCSS)("igx-time-picker__item--active", ctx.activeCSS);
    } }, inputs: { value: ["igxMinuteItem", "value"] } });
IgxMinuteItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
IgxMinuteItemDirective.propDecorators = {
    value: [{ type: Input, args: ['igxMinuteItem',] }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item',] }],
    selectedCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] }],
    activeCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] }],
    onClick: [{ type: HostListener, args: ['click', ['value'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxMinuteItemDirective, [{
        type: Directive,
        args: [{
                selector: '[igxMinuteItem]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [IGX_TIME_PICKER_COMPONENT]
            }] }, { type: IgxItemListDirective }]; }, { defaultCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item']
        }], selectedCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--selected']
        }], activeCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--active']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['value']]
        }], value: [{
            type: Input,
            args: ['igxMinuteItem']
        }] }); })();
/**
 * @hidden
 */
export class IgxSecondsItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedSeconds;
    }
    get activeCSS() {
        return this.isSelectedSeconds && this.itemList.isActive;
    }
    get isSelectedSeconds() {
        return this.timePicker.selectedSeconds === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollSecondsIntoView(item);
        }
    }
}
IgxSecondsItemDirective.ɵfac = function IgxSecondsItemDirective_Factory(t) { return new (t || IgxSecondsItemDirective)(ɵngcc0.ɵɵdirectiveInject(IGX_TIME_PICKER_COMPONENT), ɵngcc0.ɵɵdirectiveInject(IgxItemListDirective)); };
IgxSecondsItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxSecondsItemDirective, selectors: [["", "igxSecondsItem", ""]], hostVars: 6, hostBindings: function IgxSecondsItemDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxSecondsItemDirective_click_HostBindingHandler() { return ctx.onClick(ctx.value); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-time-picker__item", ctx.defaultCSS)("igx-time-picker__item--selected", ctx.selectedCSS)("igx-time-picker__item--active", ctx.activeCSS);
    } }, inputs: { value: ["igxSecondsItem", "value"] } });
IgxSecondsItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
IgxSecondsItemDirective.propDecorators = {
    value: [{ type: Input, args: ['igxSecondsItem',] }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item',] }],
    selectedCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] }],
    activeCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] }],
    onClick: [{ type: HostListener, args: ['click', ['value'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSecondsItemDirective, [{
        type: Directive,
        args: [{
                selector: '[igxSecondsItem]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [IGX_TIME_PICKER_COMPONENT]
            }] }, { type: IgxItemListDirective }]; }, { defaultCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item']
        }], selectedCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--selected']
        }], activeCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--active']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['value']]
        }], value: [{
            type: Input,
            args: ['igxSecondsItem']
        }] }); })();
/**
 * @hidden
 */
export class IgxAmPmItemDirective {
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    get defaultCSS() {
        return true;
    }
    get selectedCSS() {
        return this.isSelectedAmPm;
    }
    get activeCSS() {
        return this.isSelectedAmPm && this.itemList.isActive;
    }
    get isSelectedAmPm() {
        return this.timePicker.selectedAmPm === this.value;
    }
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollAmPmIntoView(item);
        }
    }
}
IgxAmPmItemDirective.ɵfac = function IgxAmPmItemDirective_Factory(t) { return new (t || IgxAmPmItemDirective)(ɵngcc0.ɵɵdirectiveInject(IGX_TIME_PICKER_COMPONENT), ɵngcc0.ɵɵdirectiveInject(IgxItemListDirective)); };
IgxAmPmItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxAmPmItemDirective, selectors: [["", "igxAmPmItem", ""]], hostVars: 6, hostBindings: function IgxAmPmItemDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxAmPmItemDirective_click_HostBindingHandler() { return ctx.onClick(ctx.value); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-time-picker__item", ctx.defaultCSS)("igx-time-picker__item--selected", ctx.selectedCSS)("igx-time-picker__item--active", ctx.activeCSS);
    } }, inputs: { value: ["igxAmPmItem", "value"] } });
IgxAmPmItemDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] },
    { type: IgxItemListDirective }
];
IgxAmPmItemDirective.propDecorators = {
    value: [{ type: Input, args: ['igxAmPmItem',] }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item',] }],
    selectedCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] }],
    activeCSS: [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] }],
    onClick: [{ type: HostListener, args: ['click', ['value'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxAmPmItemDirective, [{
        type: Directive,
        args: [{
                selector: '[igxAmPmItem]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [IGX_TIME_PICKER_COMPONENT]
            }] }, { type: IgxItemListDirective }]; }, { defaultCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item']
        }], selectedCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--selected']
        }], activeCSS: [{
            type: HostBinding,
            args: ['class.igx-time-picker__item--active']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['value']]
        }], value: [{
            type: Input,
            args: ['igxAmPmItem']
        }] }); })();
/**
 * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.
 */
export class IgxTimePickerTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxTimePickerTemplateDirective.ɵfac = function IgxTimePickerTemplateDirective_Factory(t) { return new (t || IgxTimePickerTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxTimePickerTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxTimePickerTemplateDirective, selectors: [["", "igxTimePickerTemplate", ""]] });
IgxTimePickerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTimePickerTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxTimePickerTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * This directive can be used to add custom action buttons to the dropdownb/dialog.
 */
export class IgxTimePickerActionsDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxTimePickerActionsDirective.ɵfac = function IgxTimePickerActionsDirective_Factory(t) { return new (t || IgxTimePickerActionsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxTimePickerActionsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxTimePickerActionsDirective, selectors: [["", "igxTimePickerActions", ""]] });
IgxTimePickerActionsDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTimePickerActionsDirective, [{
        type: Directive,
        args: [{
                selector: '[igxTimePickerActions]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,