import { IgxGridActionButtonComponent } from './grid-action-button.component';
import { Directive, Input, ViewChildren, IterableDiffers } from '@angular/core';
import { IgxRowDirective } from '../../grids/row.directive';
import { IgxIconService } from '../../icon/icon.service';
export class IgxGridActionsBaseDirective {
    constructor(iconService, differs) {
        this.iconService = iconService;
        this.differs = differs;
        /**
         * Gets/Sets if the action buttons will be rendered as menu items. When in menu, items will be rendered with text label.
         * @example
         * ```html
         *  <igx-grid-pinning-actions [asMenuItems]='true'></igx-grid-pinning-actions>
         *  <igx-grid-editing-actions [asMenuItems]='true'></igx-grid-editing-actions>
         * ```
         */
        this.asMenuItems = false;
    }
    /**
     * @hidden
     * @internal
     */
    get grid() {
        return this.strip.context.grid;
    }
    /**
     * @hidden
     * @internal
     */
    ngAfterViewInit() {
        if (this.asMenuItems) {
            this.buttons.changes.subscribe((change) => {
                this.strip.cdr.detectChanges();
            });
        }
    }
    /**
     * Getter to be used in template
     * @hidden
     * @internal
     */
    get isRowContext() {
        return this.isRow(this.strip.context) && !this.strip.context.inEditMode;
    }
    /**
     * Check if the param is a row from a grid
     * @hidden
     * @internal
     * @param context
     */
    isRow(context) {
        return context && context instanceof IgxRowDirective;
    }
}
IgxGridActionsBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGridActionsBase]'
            },] }
];
IgxGridActionsBaseDirective.ctorParameters = () => [
    { type: IgxIconService },
    { type: IterableDiffers }
];
IgxGridActionsBaseDirective.propDecorators = {
    buttons: [{ type: ViewChildren, args: [IgxGridActionButtonComponent,] }],
    asMenuItems: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2FjdGlvbi1zdHJpcC9ncmlkLWFjdGlvbnMvZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUE0QixZQUFZLEVBQzVELGVBQWUsRUFBbUMsTUFBTSxlQUFlLENBQUM7QUFFckYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU16RCxNQUFNLE9BQU8sMkJBQTJCO0lBQ3BDLFlBQXNCLFdBQTJCLEVBQ25DLE9BQXdCO1FBRGhCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUNuQyxZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQU90Qzs7Ozs7OztXQU9HO1FBRUgsZ0JBQVcsR0FBRyxLQUFLLENBQUM7SUFoQnNCLENBQUM7SUFrQjNDOzs7T0FHRztJQUNILElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7O09BR0c7SUFDSCxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBK0MsRUFBRSxFQUFFO2dCQUMzRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztTQUNWO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM1RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDTyxLQUFLLENBQUMsT0FBTztRQUNuQixPQUFPLE9BQU8sSUFBSSxPQUFPLFlBQVksZUFBZSxDQUFDO0lBQ3pELENBQUM7OztZQTVESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7O1lBTFEsY0FBYztZQUhWLGVBQWU7OztzQkFldkIsWUFBWSxTQUFDLDRCQUE0QjswQkFXekMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElneEdyaWRBY3Rpb25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2dyaWQtYWN0aW9uLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QsIElucHV0LCBBZnRlclZpZXdJbml0LCBRdWVyeUxpc3QsIFZpZXdDaGlsZHJlbixcbiAgICAgT25Jbml0LCBJdGVyYWJsZURpZmZlcnMsIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEFjdGlvblN0cmlwQ29tcG9uZW50IH0gZnJvbSAnLi4vYWN0aW9uLXN0cmlwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hSb3dEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9ncmlkcy9yb3cuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneEljb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vaWNvbi9pY29uLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hHcmlkQWN0aW9uc0Jhc2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkQWN0aW9uc0Jhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaWNvblNlcnZpY2U6IElneEljb25TZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKSB7IH1cblxuICAgIHB1YmxpYyBzdHJpcDogSWd4QWN0aW9uU3RyaXBDb21wb25lbnQ7XG5cbiAgICBAVmlld0NoaWxkcmVuKElneEdyaWRBY3Rpb25CdXR0b25Db21wb25lbnQpXG4gICAgcHVibGljIGJ1dHRvbnM6IFF1ZXJ5TGlzdDxJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50PjtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyBpZiB0aGUgYWN0aW9uIGJ1dHRvbnMgd2lsbCBiZSByZW5kZXJlZCBhcyBtZW51IGl0ZW1zLiBXaGVuIGluIG1lbnUsIGl0ZW1zIHdpbGwgYmUgcmVuZGVyZWQgd2l0aCB0ZXh0IGxhYmVsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWdyaWQtcGlubmluZy1hY3Rpb25zIFthc01lbnVJdGVtc109J3RydWUnPjwvaWd4LWdyaWQtcGlubmluZy1hY3Rpb25zPlxuICAgICAqICA8aWd4LWdyaWQtZWRpdGluZy1hY3Rpb25zIFthc01lbnVJdGVtc109J3RydWUnPjwvaWd4LWdyaWQtZWRpdGluZy1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgYXNNZW51SXRlbXMgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgZ3JpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaXAuY29udGV4dC5ncmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmFzTWVudUl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25zLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IFF1ZXJ5TGlzdDxJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJpcC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHRvIGJlIHVzZWQgaW4gdGVtcGxhdGVcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGlzUm93Q29udGV4dCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNSb3codGhpcy5zdHJpcC5jb250ZXh0KSAmJiAhdGhpcy5zdHJpcC5jb250ZXh0LmluRWRpdE1vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIHBhcmFtIGlzIGEgcm93IGZyb20gYSBncmlkXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICovXG4gICAgcHJvdGVjdGVkIGlzUm93KGNvbnRleHQpOiBjb250ZXh0IGlzIElneFJvd0RpcmVjdGl2ZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgJiYgY29udGV4dCBpbnN0YW5jZW9mIElneFJvd0RpcmVjdGl2ZTtcbiAgICB9XG59XG4iXX0=