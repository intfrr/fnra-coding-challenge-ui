import { IgxGridActionButtonComponent } from './grid-action-button.component';
import { Directive, Input, ViewChildren, IterableDiffers } from '@angular/core';
import { IgxRowDirective } from '../../grids/row.directive';
import { IgxIconService } from '../../icon/icon.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../icon/icon.service';
export class IgxGridActionsBaseDirective {
    constructor(iconService, differs) {
        this.iconService = iconService;
        this.differs = differs;
        /**
         * Gets/Sets if the action buttons will be rendered as menu items. When in menu, items will be rendered with text label.
         * @example
         * ```html
         *  <igx-grid-pinning-actions [asMenuItems]='true'></igx-grid-pinning-actions>
         *  <igx-grid-editing-actions [asMenuItems]='true'></igx-grid-editing-actions>
         * ```
         */
        this.asMenuItems = false;
    }
    /**
     * @hidden
     * @internal
     */
    get grid() {
        return this.strip.context.grid;
    }
    /**
     * @hidden
     * @internal
     */
    ngAfterViewInit() {
        if (this.asMenuItems) {
            this.buttons.changes.subscribe((change) => {
                this.strip.cdr.detectChanges();
            });
        }
    }
    /**
     * Getter to be used in template
     * @hidden
     * @internal
     */
    get isRowContext() {
        return this.isRow(this.strip.context) && !this.strip.context.inEditMode;
    }
    /**
     * Check if the param is a row from a grid
     * @hidden
     * @internal
     * @param context
     */
    isRow(context) {
        return context && context instanceof IgxRowDirective;
    }
}
IgxGridActionsBaseDirective.ɵfac = function IgxGridActionsBaseDirective_Factory(t) { return new (t || IgxGridActionsBaseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxIconService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };
IgxGridActionsBaseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxGridActionsBaseDirective, selectors: [["", "igxGridActionsBase", ""]], viewQuery: function IgxGridActionsBaseDirective_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxGridActionButtonComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.buttons = _t);
    } }, inputs: { asMenuItems: "asMenuItems" } });
IgxGridActionsBaseDirective.ctorParameters = () => [
    { type: IgxIconService },
    { type: IterableDiffers }
];
IgxGridActionsBaseDirective.propDecorators = {
    buttons: [{ type: ViewChildren, args: [IgxGridActionButtonComponent,] }],
    asMenuItems: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridActionsBaseDirective, [{
        type: Directive,
        args: [{
                selector: '[igxGridActionsBase]'
            }]
    }], function () { return [{ type: ɵngcc1.IgxIconService }, { type: ɵngcc0.IterableDiffers }]; }, { asMenuItems: [{
            type: Input
        }], buttons: [{
            type: ViewChildren,
            args: [IgxGridActionButtonComponent]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvYWN0aW9uLXN0cmlwL2dyaWQtYWN0aW9ucy9ncmlkLWFjdGlvbnMtYmFzZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDOUUsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQTRCLFlBQVksRUFDNUQsZUFBZSxFQUFtQyxNQUFNLGVBQWUsQ0FBQztBQUVyRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7QUFNekQsTUFBTSxPQUFPLDJCQUEyQjtBQUFHLElBQ3ZDLFlBQXNCLFdBQTJCLEVBQ25DLE9BQXdCO0FBQUksUUFEcEIsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO0FBQUMsUUFDcEMsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7QUFBQyxRQU92QztBQUNKO0FBQ0k7QUFDSTtBQUNJO0FBQ0k7QUFHZjtBQUNFLFdBRkk7QUFDUCxRQUNJLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBakI4QyxDQUFDO0FBQy9DLElBaUJJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQUksSUFBSTtBQUNaLFFBQVEsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxlQUFlO0FBQ25CLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzlCLFlBQWdCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQStDLEVBQUUsRUFBRTtBQUNuRyxnQkFBd0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkQsWUFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDbkIsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFJLFlBQVk7QUFBSyxRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNoRixJQUFJLENBQUM7QUFDTCxJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBYyxLQUFLLENBQUMsT0FBTztBQUFJLFFBQ3ZCLE9BQU8sT0FBTyxJQUFJLE9BQU8sWUFBWSxlQUFlLENBQUM7QUFDN0QsSUFBSSxDQUFDO0FBQ0w7dURBN0RDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsc0JBQXNCLGNBQ25DOzs7Ozs7bURBQ0k7QUFBQztBQUFxRCxZQU5sRCxjQUFjO0FBQUksWUFIZCxlQUFlO0FBQUc7QUFBRztBQUErQyxzQkFlNUUsWUFBWSxTQUFDLDRCQUE0QjtBQUN6QywwQkFVQSxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLWFjdGlvbi1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGRyZW4sXG4gICAgIE9uSW5pdCwgSXRlcmFibGVEaWZmZXJzLCBJdGVyYWJsZUNoYW5nZVJlY29yZCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hBY3Rpb25TdHJpcENvbXBvbmVudCB9IGZyb20gJy4uL2FjdGlvbi1zdHJpcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Um93RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZ3JpZHMvcm93LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hJY29uU2VydmljZSB9IGZyb20gJy4uLy4uL2ljb24vaWNvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4R3JpZEFjdGlvbnNCYXNlXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZEFjdGlvbnNCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGljb25TZXJ2aWNlOiBJZ3hJY29uU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycykgeyB9XG5cbiAgICBwdWJsaWMgc3RyaXA6IElneEFjdGlvblN0cmlwQ29tcG9uZW50O1xuXG4gICAgQFZpZXdDaGlsZHJlbihJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50KVxuICAgIHB1YmxpYyBidXR0b25zOiBRdWVyeUxpc3Q8SWd4R3JpZEFjdGlvbkJ1dHRvbkNvbXBvbmVudD47XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgaWYgdGhlIGFjdGlvbiBidXR0b25zIHdpbGwgYmUgcmVuZGVyZWQgYXMgbWVudSBpdGVtcy4gV2hlbiBpbiBtZW51LCBpdGVtcyB3aWxsIGJlIHJlbmRlcmVkIHdpdGggdGV4dCBsYWJlbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1ncmlkLXBpbm5pbmctYWN0aW9ucyBbYXNNZW51SXRlbXNdPSd0cnVlJz48L2lneC1ncmlkLXBpbm5pbmctYWN0aW9ucz5cbiAgICAgKiAgPGlneC1ncmlkLWVkaXRpbmctYWN0aW9ucyBbYXNNZW51SXRlbXNdPSd0cnVlJz48L2lneC1ncmlkLWVkaXRpbmctYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGFzTWVudUl0ZW1zID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGdyaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwLmNvbnRleHQuZ3JpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBpZiAodGhpcy5hc01lbnVJdGVtcykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5jaGFuZ2VzLnN1YnNjcmliZSgoY2hhbmdlOiBRdWVyeUxpc3Q8SWd4R3JpZEFjdGlvbkJ1dHRvbkNvbXBvbmVudD4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyaXAuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciB0byBiZSB1c2VkIGluIHRlbXBsYXRlXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCBpc1Jvd0NvbnRleHQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzUm93KHRoaXMuc3RyaXAuY29udGV4dCkgJiYgIXRoaXMuc3RyaXAuY29udGV4dC5pbkVkaXRNb2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBwYXJhbSBpcyBhIHJvdyBmcm9tIGEgZ3JpZFxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gY29udGV4dFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpc1Jvdyhjb250ZXh0KTogY29udGV4dCBpcyBJZ3hSb3dEaXJlY3RpdmU8YW55PiB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ICYmIGNvbnRleHQgaW5zdGFuY2VvZiBJZ3hSb3dEaXJlY3RpdmU7XG4gICAgfVxufVxuIl19