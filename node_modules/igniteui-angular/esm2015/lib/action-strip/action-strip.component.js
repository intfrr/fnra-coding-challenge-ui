import { Component, Directive, HostBinding, Input, Renderer2, ViewContainerRef, Optional, Inject, ContentChildren, ViewChild, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { CloseScrollStrategy } from '../services/public_api';
import { IgxGridActionsBaseDirective } from './grid-actions/grid-actions-base.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../drop-down/drop-down.component';
import * as ɵngcc3 from '../directives/button/button.directive';
import * as ɵngcc4 from '../directives/ripple/ripple.directive';
import * as ɵngcc5 from '../directives/toggle/toggle.directive';
import * as ɵngcc6 from '../drop-down/drop-down-navigation.directive';
import * as ɵngcc7 from '../icon/icon.component';
import * as ɵngcc8 from '../drop-down/drop-down-item.component';

const _c0 = ["dropdown"];
function IgxActionStripComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 5);
    ɵngcc0.ɵɵlistener("click", function IgxActionStripComponent_ng_container_2_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(2, "igx-icon");
    ɵngcc0.ɵɵtext(3, "more_vert");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("igxToggleAction", _r1)("overlaySettings", ctx_r0.menuOverlaySettings)("igxDropDownItemNavigation", _r1);
} }
function IgxActionStripComponent_igx_drop_down_item_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c1 = function (a0) { return { $implicit: a0 }; };
function IgxActionStripComponent_igx_drop_down_item_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-drop-down-item", 6);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵtemplate(2, IgxActionStripComponent_igx_drop_down_item_5_ng_container_2_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", item_r5.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c1, item_r5));
} }
const _c2 = ["*"];
export class IgxActionStripMenuItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
IgxActionStripMenuItemDirective.ɵfac = function IgxActionStripMenuItemDirective_Factory(t) { return new (t || IgxActionStripMenuItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxActionStripMenuItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxActionStripMenuItemDirective, selectors: [["", "igxActionStripMenuItem", ""]] });
IgxActionStripMenuItemDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxActionStripMenuItemDirective, [{
        type: Directive,
        args: [{
                selector: '[igxActionStripMenuItem]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * Action Strip provides templatable area for one or more actions.
 *
 * @igxModule IgxActionStripModule
 *
 * @igxTheme igx-action-strip-theme
 *
 * @igxKeywords action, strip, actionStrip, pinning, editing
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 * The Ignite UI Action Strip is a container, overlaying its parent container,
 * and displaying action buttons with action applicable to the parent component the strip is instantiated or shown for.
 *
 * @example
 * ```html
 * <igx-action-strip #actionStrip>
 *     <igx-icon (click)="doSomeAction()"></igx-icon>
 * </igx-action-strip>
 */
export class IgxActionStripComponent extends DisplayDensityBase {
    constructor(_viewContainer, renderer, _displayDensityOptions, cdr) {
        super(_displayDensityOptions);
        this._viewContainer = _viewContainer;
        this.renderer = renderer;
        this._displayDensityOptions = _displayDensityOptions;
        this.cdr = cdr;
        this._hidden = false;
        /**
         * Getter for menu overlay settings
         * @hidden
         * @internal
         */
        this.menuOverlaySettings = { scrollStrategy: new CloseScrollStrategy() };
    }
    /**
     * Getter for the 'display' property of the current `IgxActionStrip`
     * @hidden
     * @internal
     */
    get display() {
        return this._hidden ? 'none' : 'flex';
    }
    /**
     * An @Input property that set the visibility of the Action Strip.
     * Could be used to set if the Action Strip will be initially hidden.
     * @example
     * ```html
     *  <igx-action-strip [hidden]="false">
     * ```
     */
    set hidden(value) {
        this._hidden = value;
    }
    get hidden() {
        return this._hidden;
    }
    /**
     * Host `attr.class` binding.
     * @hidden
     * @internal
     */
    get hostClasses() {
        const classes = [this.getComponentDensityClass('igx-action-strip')];
        // The custom classes should be at the end.
        if (!classes.includes('igx-action-strip')) {
            classes.push('igx-action-strip');
        }
        classes.push(this.hostClass);
        return classes.join(' ');
    }
    /**
     * Menu Items list.
     * @hidden
     * @internal
     */
    get menuItems() {
        const actions = [];
        this.actionButtons.forEach(button => {
            if (button.asMenuItems) {
                const children = button.buttons;
                if (children) {
                    children.toArray().forEach(x => actions.push(x));
                }
            }
        });
        return [...this._menuItems.toArray(), ...actions];
    }
    /**
     * @hidden
     * @internal
     */
    ngAfterContentInit() {
        this.actionButtons.forEach(button => {
            button.strip = this;
        });
        this.actionButtons.changes.subscribe(change => {
            this.actionButtons.forEach(button => {
                button.strip = this;
            });
        });
    }
    ngAfterViewInit() {
        this.menu.onSelection.subscribe(($event) => {
            const newSelection = $event.newSelection.elementRef.nativeElement;
            let allButtons = [];
            this.actionButtons.forEach(actionButtons => {
                if (actionButtons.asMenuItems) {
                    allButtons = [...allButtons, ...actionButtons.buttons.toArray()];
                }
            });
            const button = allButtons.find(x => newSelection.contains(x.container.nativeElement));
            if (button) {
                button.onActionClick.emit();
            }
        });
    }
    /**
     * Showing the Action Strip and appending it the specified context element.
     * @param context
     * @example
     * ```typescript
     * this.actionStrip.show(row);
     * ```
     */
    show(context) {
        this.hidden = false;
        if (!context) {
            return;
        }
        // when shown for different context make sure the menu won't stay opened
        if (this.context !== context) {
            this.closeMenu();
        }
        this.context = context;
        if (this.context && this.context.element) {
            this.renderer.appendChild(context.element.nativeElement, this._viewContainer.element.nativeElement);
        }
        this.cdr.detectChanges();
    }
    /**
     * Hiding the Action Strip and removing it from its current context element.
     * @example
     * ```typescript
     * this.actionStrip.hide();
     * ```
     */
    hide() {
        this.hidden = true;
        this.closeMenu();
        if (this.context && this.context.element) {
            this.renderer.removeChild(this.context.element.nativeElement, this._viewContainer.element.nativeElement);
        }
    }
    /**
     * Close the menu if opened
     * @hidden
     * @internal
     */
    closeMenu() {
        if (this.menu && !this.menu.collapsed) {
            this.menu.close();
        }
    }
}
IgxActionStripComponent.ɵfac = function IgxActionStripComponent_Factory(t) { return new (t || IgxActionStripComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DisplayDensityToken, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxActionStripComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxActionStripComponent, selectors: [["igx-action-strip"]], contentQueries: function IgxActionStripComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxActionStripMenuItemDirective, false);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxGridActionsBaseDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._menuItems = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionButtons = _t);
    } }, viewQuery: function IgxActionStripComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menu = _t.first);
    } }, hostVars: 3, hostBindings: function IgxActionStripComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("class", ctx.hostClasses);
        ɵngcc0.ɵɵstyleProp("display", ctx.display);
    } }, inputs: { hidden: "hidden", context: "context", hostClass: ["class", "hostClass"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 6, vars: 3, consts: [[1, "igx-action-strip__actions"], [4, "ngIf"], [3, "displayDensity"], ["dropdown", ""], ["class", "igx-action-strip__menu-item", 4, "ngFor", "ngForOf"], ["igxButton", "icon", "igxRipple", "", 3, "igxToggleAction", "overlaySettings", "igxDropDownItemNavigation", "click"], [1, "igx-action-strip__menu-item"], [1, "igx-drop-down__item-template"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function IgxActionStripComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1, 0, ["#content", ""]);
        ɵngcc0.ɵɵtemplate(2, IgxActionStripComponent_ng_container_2_Template, 4, 3, "ng-container", 1);
        ɵngcc0.ɵɵelementStart(3, "igx-drop-down", 2, 3);
        ɵngcc0.ɵɵtemplate(5, IgxActionStripComponent_igx_drop_down_item_5_Template, 3, 4, "igx-drop-down-item", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.menuItems.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayDensity", ctx.displayDensity);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.menuItems);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.IgxDropDownComponent, ɵngcc1.NgForOf, ɵngcc3.IgxButtonDirective, ɵngcc4.IgxRippleDirective, ɵngcc5.IgxToggleActionDirective, ɵngcc6.IgxDropDownItemNavigationDirective, ɵngcc7.IgxIconComponent, ɵngcc8.IgxDropDownItemComponent, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
IgxActionStripComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: ChangeDetectorRef }
];
IgxActionStripComponent.propDecorators = {
    display: [{ type: HostBinding, args: ['style.display',] }],
    hidden: [{ type: Input }],
    hostClass: [{ type: Input, args: ['class',] }],
    hostClasses: [{ type: HostBinding, args: ['attr.class',] }],
    context: [{ type: Input }],
    _menuItems: [{ type: ContentChildren, args: [IgxActionStripMenuItemDirective,] }],
    actionButtons: [{ type: ContentChildren, args: [IgxGridActionsBaseDirective,] }],
    menu: [{ type: ViewChild, args: ['dropdown',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxActionStripComponent, [{
        type: Component,
        args: [{
                selector: 'igx-action-strip',
                template: "<div class=\"igx-action-strip__actions\">\n    <ng-content #content></ng-content>\n    <ng-container *ngIf=\"menuItems.length > 0\">\n        <button\n            igxButton=\"icon\"\n            igxRipple\n            [igxToggleAction]=\"dropdown\"\n            [overlaySettings]=\"menuOverlaySettings\"\n            (click)=\"$event.stopPropagation()\"\n            [igxDropDownItemNavigation]=\"dropdown\"\n        >\n            <igx-icon>more_vert</igx-icon>\n        </button>\n    </ng-container>\n    <igx-drop-down #dropdown [displayDensity]=\"displayDensity\">\n        <igx-drop-down-item\n            *ngFor=\"let item of menuItems\"\n            class=\"igx-action-strip__menu-item\"\n        >\n            <div class=\"igx-drop-down__item-template\">\n                <ng-container\n                    *ngTemplateOutlet=\"\n                        item.templateRef;\n                        context: { $implicit: item }\n                    \"\n                ></ng-container>\n            </div>\n        </igx-drop-down-item>\n    </igx-drop-down>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DisplayDensityToken]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { display: [{
            type: HostBinding,
            args: ['style.display']
        }], hidden: [{
            type: Input
        }], hostClasses: [{
            type: HostBinding,
            args: ['attr.class']
        }], context: [{
            type: Input
        }], hostClass: [{
            type: Input,
            args: ['class']
        }], _menuItems: [{
            type: ContentChildren,
            args: [IgxActionStripMenuItemDirective]
        }], actionButtons: [{
            type: ContentChildren,
            args: [IgxGridActionsBaseDirective]
        }], menu: [{
            type: ViewChild,
            args: ['dropdown']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,