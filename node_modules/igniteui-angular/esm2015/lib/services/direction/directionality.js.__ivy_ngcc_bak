import { Injectable, Inject, InjectionToken, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * Injection token is used to inject the document into Directionality
 * which factory could be faked for testing purposes.
 *
 * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule
 * allows override of the default providers, directive, pipes, modules of the test injector
 * which causes errors.
 *
 * @hidden
 */
export const DIR_DOCUMENT = new InjectionToken('dir-doc', {
    providedIn: 'root',
    factory: DIR_DOCUMENT_FACTORY
});
/**
 * @hidden
 */
export function DIR_DOCUMENT_FACTORY() {
    return inject(DOCUMENT);
}
/**
 * @hidden
 *
 * Bidirectional service that extracts the value of the direction attribute on the body or html elements.
 *
 * The dir attribute over the body element takes precedence.
 */
export class IgxDirectionality {
    constructor(document) {
        this._document = document;
        const bodyDir = this._document.body ? this._document.body.dir : null;
        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;
        const extractedDir = bodyDir || htmlDir;
        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';
    }
    get value() {
        return this._dir;
    }
    get document() {
        return this._document;
    }
    get rtl() {
        return this._dir === 'rtl';
    }
}
IgxDirectionality.ɵprov = i0.ɵɵdefineInjectable({ factory: function IgxDirectionality_Factory() { return new IgxDirectionality(i0.ɵɵinject(DIR_DOCUMENT)); }, token: IgxDirectionality, providedIn: "root" });
IgxDirectionality.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IgxDirectionality.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DIR_DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uYWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvZGlyZWN0aW9uL2RpcmVjdGlvbmFsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQU8zQzs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQVcsU0FBUyxFQUFFO0lBQ2hFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxvQkFBb0I7Q0FDaEMsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CO0lBQ2hDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFJSCxNQUFNLE9BQU8saUJBQWlCO0lBZ0IxQixZQUFrQyxRQUFRO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQWEsUUFBUSxDQUFDO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDM0YsTUFBTSxZQUFZLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsWUFBWSxLQUFLLEtBQUssSUFBSSxZQUFZLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzFGLENBQUM7SUFsQkQsSUFBVyxLQUFLO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQVcsR0FBRztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUM7SUFDL0IsQ0FBQzs7OztZQWpCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs0Q0FpQmdCLE1BQU0sU0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdHlwZSBEaXJlY3Rpb24gPSAnbHRyJyB8ICdydGwnO1xuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiBpcyB1c2VkIHRvIGluamVjdCB0aGUgZG9jdW1lbnQgaW50byBEaXJlY3Rpb25hbGl0eVxuICogd2hpY2ggZmFjdG9yeSBjb3VsZCBiZSBmYWtlZCBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAqXG4gKiBXZSBjYW4ndCBwcm92aWRlIGFuZCBtb2NrIHRoZSBET0NVTUVOVCB0b2tlbiBmcm9tIHBsYXRmb3JtLWJyb3dzZXIgYmVjYXVzZSBjb25maWd1cmVUZXN0aW5nTW9kdWxlXG4gKiBhbGxvd3Mgb3ZlcnJpZGUgb2YgdGhlIGRlZmF1bHQgcHJvdmlkZXJzLCBkaXJlY3RpdmUsIHBpcGVzLCBtb2R1bGVzIG9mIHRoZSB0ZXN0IGluamVjdG9yXG4gKiB3aGljaCBjYXVzZXMgZXJyb3JzLlxuICpcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNvbnN0IERJUl9ET0NVTUVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxEb2N1bWVudD4oJ2Rpci1kb2MnLCB7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICAgIGZhY3Rvcnk6IERJUl9ET0NVTUVOVF9GQUNUT1JZXG59KTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBESVJfRE9DVU1FTlRfRkFDVE9SWSgpOiBEb2N1bWVudCB7XG4gICAgcmV0dXJuIGluamVjdChET0NVTUVOVCk7XG59XG5cbi8qKlxuICogQGhpZGRlblxuICpcbiAqIEJpZGlyZWN0aW9uYWwgc2VydmljZSB0aGF0IGV4dHJhY3RzIHRoZSB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uIGF0dHJpYnV0ZSBvbiB0aGUgYm9keSBvciBodG1sIGVsZW1lbnRzLlxuICpcbiAqIFRoZSBkaXIgYXR0cmlidXRlIG92ZXIgdGhlIGJvZHkgZWxlbWVudCB0YWtlcyBwcmVjZWRlbmNlLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIElneERpcmVjdGlvbmFsaXR5IHtcbiAgICBwcml2YXRlIF9kaXI6IERpcmVjdGlvbjtcbiAgICBwcml2YXRlIF9kb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IERpcmVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcnRsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlyID09PSAncnRsJztcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KERJUl9ET0NVTUVOVCkgZG9jdW1lbnQpIHtcbiAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSA8RG9jdW1lbnQ+ZG9jdW1lbnQ7XG4gICAgICAgIGNvbnN0IGJvZHlEaXIgPSB0aGlzLl9kb2N1bWVudC5ib2R5ID8gdGhpcy5fZG9jdW1lbnQuYm9keS5kaXIgOiBudWxsO1xuICAgICAgICBjb25zdCBodG1sRGlyID0gdGhpcy5fZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gdGhpcy5fZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpciA6IG51bGw7XG4gICAgICAgIGNvbnN0IGV4dHJhY3RlZERpciA9IGJvZHlEaXIgfHwgaHRtbERpcjtcbiAgICAgICAgdGhpcy5fZGlyID0gKGV4dHJhY3RlZERpciA9PT0gJ2x0cicgfHwgZXh0cmFjdGVkRGlyID09PSAncnRsJykgPyBleHRyYWN0ZWREaXIgOiAnbHRyJztcbiAgICB9XG59XG4iXX0=