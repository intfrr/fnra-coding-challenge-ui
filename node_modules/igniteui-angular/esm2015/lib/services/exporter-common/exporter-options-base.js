export class IgxExporterOptionsBase {
    constructor(fileName, _fileExtension) {
        this._fileExtension = _fileExtension;
        /**
         * Specifies whether hidden columns should be exported.
         * ```typescript
         * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;
         * this.exportOptions.ignoreColumnsVisibility = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsVisibility = false;
        /**
         * Specifies whether filtered out rows should be exported.
         * ```typescript
         * let ignoreFiltering = this.exportOptions.ignoreFiltering;
         * this.exportOptions.ignoreFiltering = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreFiltering = false;
        /**
         * Specifies if the exporter should ignore the current column order in the IgxGrid.
         * ```typescript
         * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;
         * this.exportOptions.ignoreColumnsOrder = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsOrder = false;
        /**
         * Specifies whether the exported data should be sorted as in the provided IgxGrid.
         * ```typescript
         * let ignoreSorting = this.exportOptions.ignoreSorting;
         * this.exportOptions.ignoreSorting = true;
         * ```
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreSorting = false;
        this.setFileName(fileName);
    }
    setFileName(fileName) {
        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');
    }
    /**
     * Gets the file name which will be used for the exporting operation.
     * ```typescript
     * let fileName = this.exportOptions.fileName;
     * ```
     * @memberof IgxExporterOptionsBase
     */
    get fileName() {
        return this._fileName;
    }
    /**
     * Sets the file name which will be used for the exporting operation.
     * ```typescript
     * this.exportOptions.fileName = 'exportedData01';
     * ```
     * @memberof IgxExporterOptionsBase
     */
    set fileName(value) {
        this.setFileName(value);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0ZXItb3B0aW9ucy1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3NlcnZpY2VzL2V4cG9ydGVyLWNvbW1vbi9leHBvcnRlci1vcHRpb25zLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFnQixzQkFBc0I7SUEyQ3hDLFlBQVksUUFBZ0IsRUFBWSxjQUFzQjtRQUF0QixtQkFBYyxHQUFkLGNBQWMsQ0FBUTtRQXhDOUQ7Ozs7Ozs7V0FPRztRQUNJLDRCQUF1QixHQUFHLEtBQUssQ0FBQztRQUV2Qzs7Ozs7OztXQU9HO1FBQ0ksb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFFL0I7Ozs7Ozs7V0FPRztRQUNJLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUVsQzs7Ozs7OztXQU9HO1FBQ0ksa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFHekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU8sV0FBVyxDQUFDLFFBQWdCO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxJQUFJLFFBQVEsQ0FBQyxLQUFLO1FBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYWJzdHJhY3QgY2xhc3MgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZSB7XG4gICAgcHJpdmF0ZSBfZmlsZU5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIGhpZGRlbiBjb2x1bW5zIHNob3VsZCBiZSBleHBvcnRlZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlnbm9yZUNvbHVtbnNWaXNpYmlsaXR5ID0gdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUNvbHVtbnNWaXNpYmlsaXR5O1xuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVDb2x1bW5zVmlzaWJpbGl0eSA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgaWdub3JlQ29sdW1uc1Zpc2liaWxpdHkgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIGZpbHRlcmVkIG91dCByb3dzIHNob3VsZCBiZSBleHBvcnRlZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlnbm9yZUZpbHRlcmluZyA9IHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVGaWx0ZXJpbmc7XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUZpbHRlcmluZyA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgaWdub3JlRmlsdGVyaW5nID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIGV4cG9ydGVyIHNob3VsZCBpZ25vcmUgdGhlIGN1cnJlbnQgY29sdW1uIG9yZGVyIGluIHRoZSBJZ3hHcmlkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaWdub3JlQ29sdW1uc09yZGVyID0gdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUNvbHVtbnNPcmRlcjtcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlQ29sdW1uc09yZGVyID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZVxuICAgICAqL1xuICAgIHB1YmxpYyBpZ25vcmVDb2x1bW5zT3JkZXIgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBleHBvcnRlZCBkYXRhIHNob3VsZCBiZSBzb3J0ZWQgYXMgaW4gdGhlIHByb3ZpZGVkIElneEdyaWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpZ25vcmVTb3J0aW5nID0gdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZVNvcnRpbmc7XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZVNvcnRpbmcgPSB0cnVlO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgcHVibGljIGlnbm9yZVNvcnRpbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGVOYW1lOiBzdHJpbmcsIHByb3RlY3RlZCBfZmlsZUV4dGVuc2lvbjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2V0RmlsZU5hbWUoZmlsZU5hbWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0RmlsZU5hbWUoZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9maWxlTmFtZSA9IGZpbGVOYW1lICsgKGZpbGVOYW1lLmVuZHNXaXRoKHRoaXMuX2ZpbGVFeHRlbnNpb24pID09PSBmYWxzZSA/IHRoaXMuX2ZpbGVFeHRlbnNpb24gOiAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlsZSBuYW1lIHdoaWNoIHdpbGwgYmUgdXNlZCBmb3IgdGhlIGV4cG9ydGluZyBvcGVyYXRpb24uXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBmaWxlTmFtZSA9IHRoaXMuZXhwb3J0T3B0aW9ucy5maWxlTmFtZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZVxuICAgICAqL1xuICAgIGdldCBmaWxlTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbGVOYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGZpbGUgbmFtZSB3aGljaCB3aWxsIGJlIHVzZWQgZm9yIHRoZSBleHBvcnRpbmcgb3BlcmF0aW9uLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuZmlsZU5hbWUgPSAnZXhwb3J0ZWREYXRhMDEnO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgc2V0IGZpbGVOYW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0RmlsZU5hbWUodmFsdWUpO1xuICAgIH1cblxufVxuIl19