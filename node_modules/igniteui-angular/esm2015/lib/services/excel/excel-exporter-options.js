import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';
/**
 * Objects of this class are used to configure the Excel exporting process.
 */
export class IgxExcelExporterOptions extends IgxExporterOptionsBase {
    constructor(fileName) {
        super(fileName, '.xlsx');
        /**
         * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,
         * this option will always be considered as set to true.
         * ```typescript
         * let ignorePinning = this.exportOptions.ignorePinning;
         * this.exportOptions.ignorePinning = true;
         * ```
         * @memberof IgxExcelExporterOptions
         */
        this.ignorePinning = false;
        /**
         * Specifies whether the exported data should be formatted as Excel table. (True by default)
         * ```typescript
         * let exportAsTable = this.exportOptions.exportAsTable;
         * this.exportOptions.exportAsTable = false;
         * ```
         * @memberof IgxExcelExporterOptions
         */
        this.exportAsTable = true;
    }
    /**
     * Gets the width of the columns in the exported excel file.
     * ```typescript
     * let width = this.exportOptions.columnWidth;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    get columnWidth() {
        return this._columnWidth;
    }
    /**
     * Sets the width of the columns in the exported excel file. If left unspecified,
     * the width of the column or the default width of the excel columns will be used.
     * ```typescript
     * this.exportOptions.columnWidth = 55;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    set columnWidth(value) {
        if (value < 0) {
            throw Error('Invalid value for column width!');
        }
        this._columnWidth = value;
    }
    /**
     * Gets the height of the rows in the exported excel file.
     * ```typescript
     * let height = this.exportOptions.rowHeight;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    get rowHeight() {
        return this._rowHeight;
    }
    /**
     * Sets the height of the rows in the exported excel file. If left unspecified or 0,
     * the default height of the excel rows will be used.
     * ```typescript
     * this.exportOptions.rowHeight = 25;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    set rowHeight(value) {
        if (value < 0) {
            throw Error('Invalid value for row height!');
        }
        this._rowHeight = value;
    }
    /**
     * Gets the name of the worksheet in the exported excel file.
     * ```typescript
     * let worksheetName = this.exportOptions.worksheetName;
     * ```
     * @memberof IgxExcelExporterOptions
     */
    get worksheetName() {
        if (this._worksheetName === undefined || this._worksheetName === null) {
            return 'Sheet1';
        }
        return this._worksheetName;
    }
    /**
     * Sets the name of the worksheet in the exported excel file.
     * ```typescript
     * this.exportOptions.worksheetName = "Worksheet";
     * ```
     * @memberof IgxExcelExporterOptions
     */
    set worksheetName(value) {
        this._worksheetName = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtZXhwb3J0ZXItb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy9leGNlbC9leGNlbC1leHBvcnRlci1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRWxGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF3QixTQUFRLHNCQUFzQjtJQTBCL0QsWUFBWSxRQUFnQjtRQUN4QixLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBdEI3Qjs7Ozs7Ozs7V0FRRztRQUNJLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBRTdCOzs7Ozs7O1dBT0c7UUFDSSxrQkFBYSxHQUFHLElBQUksQ0FBQztJQUk1QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBVyxXQUFXO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQVcsV0FBVyxDQUFDLEtBQWE7UUFDaEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsTUFBTSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxJQUFXLFNBQVM7UUFDaEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBVyxTQUFTLENBQUMsS0FBYTtRQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCxNQUFNLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQVcsYUFBYTtRQUNwQixJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssSUFBSSxFQUFFO1lBQ25FLE9BQU8sUUFBUSxDQUFDO1NBQ25CO1FBRUQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxJQUFXLGFBQWEsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElneEV4cG9ydGVyT3B0aW9uc0Jhc2UgfSBmcm9tICcuLi9leHBvcnRlci1jb21tb24vZXhwb3J0ZXItb3B0aW9ucy1iYXNlJztcblxuLyoqXG4gKiBPYmplY3RzIG9mIHRoaXMgY2xhc3MgYXJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBFeGNlbCBleHBvcnRpbmcgcHJvY2Vzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zIGV4dGVuZHMgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZSB7XG4gICAgcHJpdmF0ZSBfY29sdW1uV2lkdGg6IG51bWJlcjtcbiAgICBwcml2YXRlIF9yb3dIZWlnaHQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF93b3Jrc2hlZXROYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgY29sdW1uIHBpbm5pbmcgc2hvdWxkIGJlIGlnbm9yZWQuIElmIGlnbm9yZUNvbHVtbnNPcmRlciBpcyBzZXQgdG8gdHJ1ZSxcbiAgICAgKiB0aGlzIG9wdGlvbiB3aWxsIGFsd2F5cyBiZSBjb25zaWRlcmVkIGFzIHNldCB0byB0cnVlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaWdub3JlUGlubmluZyA9IHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVQaW5uaW5nO1xuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVQaW5uaW5nID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgaWdub3JlUGlubmluZyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGV4cG9ydGVkIGRhdGEgc2hvdWxkIGJlIGZvcm1hdHRlZCBhcyBFeGNlbCB0YWJsZS4gKFRydWUgYnkgZGVmYXVsdClcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGV4cG9ydEFzVGFibGUgPSB0aGlzLmV4cG9ydE9wdGlvbnMuZXhwb3J0QXNUYWJsZTtcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuZXhwb3J0QXNUYWJsZSA9IGZhbHNlO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBleHBvcnRBc1RhYmxlID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGVOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoZmlsZU5hbWUsICcueGxzeCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW5zIGluIHRoZSBleHBvcnRlZCBleGNlbCBmaWxlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgd2lkdGggPSB0aGlzLmV4cG9ydE9wdGlvbnMuY29sdW1uV2lkdGg7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zXG4gICAgICovXG4gICAgcHVibGljIGdldCBjb2x1bW5XaWR0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uV2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgd2lkdGggb2YgdGhlIGNvbHVtbnMgaW4gdGhlIGV4cG9ydGVkIGV4Y2VsIGZpbGUuIElmIGxlZnQgdW5zcGVjaWZpZWQsXG4gICAgICogdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW4gb3IgdGhlIGRlZmF1bHQgd2lkdGggb2YgdGhlIGV4Y2VsIGNvbHVtbnMgd2lsbCBiZSB1c2VkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuY29sdW1uV2lkdGggPSA1NTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGNvbHVtbldpZHRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIGNvbHVtbiB3aWR0aCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NvbHVtbldpZHRoID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSByb3dzIGluIHRoZSBleHBvcnRlZCBleGNlbCBmaWxlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaGVpZ2h0ID0gdGhpcy5leHBvcnRPcHRpb25zLnJvd0hlaWdodDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHJvd0hlaWdodCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm93SGVpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhlaWdodCBvZiB0aGUgcm93cyBpbiB0aGUgZXhwb3J0ZWQgZXhjZWwgZmlsZS4gSWYgbGVmdCB1bnNwZWNpZmllZCBvciAwLFxuICAgICAqIHRoZSBkZWZhdWx0IGhlaWdodCBvZiB0aGUgZXhjZWwgcm93cyB3aWxsIGJlIHVzZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5yb3dIZWlnaHQgPSAyNTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHJvd0hlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciByb3cgaGVpZ2h0IScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcm93SGVpZ2h0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiB0aGUgd29ya3NoZWV0IGluIHRoZSBleHBvcnRlZCBleGNlbCBmaWxlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgd29ya3NoZWV0TmFtZSA9IHRoaXMuZXhwb3J0T3B0aW9ucy53b3Jrc2hlZXROYW1lO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgd29ya3NoZWV0TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5fd29ya3NoZWV0TmFtZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dvcmtzaGVldE5hbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAnU2hlZXQxJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXROYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5hbWUgb2YgdGhlIHdvcmtzaGVldCBpbiB0aGUgZXhwb3J0ZWQgZXhjZWwgZmlsZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLndvcmtzaGVldE5hbWUgPSBcIldvcmtzaGVldFwiO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgd29ya3NoZWV0TmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3dvcmtzaGVldE5hbWUgPSB2YWx1ZTtcbiAgICB9XG59XG4iXX0=