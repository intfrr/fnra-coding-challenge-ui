import { TransactionType } from './transaction';
import { Injectable } from '@angular/core';
import { IgxTransactionService } from './igx-transaction';
import { DataUtil } from '../../data-operations/data-util';
import { cloneValue } from '../../core/utils';
/** @experimental @hidden */
import * as ɵngcc0 from '@angular/core';
export class IgxHierarchicalTransactionService extends IgxTransactionService {
    getAggregatedChanges(mergeChanges) {
        const result = [];
        this._states.forEach((state, key) => {
            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);
            this.clearArraysFromObject(value);
            result.push({ id: key, path: state.path, newValue: value, type: state.type });
        });
        return result;
    }
    updateState(states, transaction, recordRef) {
        super.updateState(states, transaction, recordRef);
        //  if transaction has no path, e.g. flat data source, get out
        if (!transaction.path) {
            return;
        }
        const currentState = states.get(transaction.id);
        if (currentState) {
            currentState.path = transaction.path;
        }
        //  if transaction has path, Hierarchical data source, and it is DELETE
        //  type transaction for all child rows remove ADD states and update
        //  transaction type and value of UPDATE states
        if (transaction.type === TransactionType.DELETE) {
            states.forEach((v, k) => {
                if (v.path && v.path.indexOf(transaction.id) !== -1) {
                    switch (v.type) {
                        case TransactionType.ADD:
                            states.delete(k);
                            break;
                        case TransactionType.UPDATE:
                            states.get(k).type = TransactionType.DELETE;
                            states.get(k).value = null;
                    }
                }
            });
        }
    }
    commit(data, primaryKeyOrId, childDataKey, id) {
        if (childDataKey !== undefined) {
            let transactions = this.getAggregatedChanges(true);
            if (id !== undefined) {
                transactions = transactions.filter(t => t.id === id);
            }
            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKeyOrId, true);
            this.clear(id);
        }
        else {
            super.commit(data, primaryKeyOrId);
        }
    }
    //  TODO: remove this method. Force cloning to strip child arrays when needed instead
    clearArraysFromObject(obj) {
        if (obj) {
            for (const prop of Object.keys(obj)) {
                if (Array.isArray(obj[prop])) {
                    delete obj[prop];
                }
            }
        }
    }
}
IgxHierarchicalTransactionService.ɵfac = function IgxHierarchicalTransactionService_Factory(t) { return ɵIgxHierarchicalTransactionService_BaseFactory(t || IgxHierarchicalTransactionService); };
IgxHierarchicalTransactionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: IgxHierarchicalTransactionService, factory: IgxHierarchicalTransactionService.ɵfac });
const ɵIgxHierarchicalTransactionService_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxHierarchicalTransactionService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxHierarchicalTransactionService, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,