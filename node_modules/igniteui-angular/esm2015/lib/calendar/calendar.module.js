import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { IgxIconModule } from '../icon/public_api';
import { IgxCalendarComponent } from './calendar.component';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarMonthDirective, IgxCalendarSubheaderTemplateDirective, IgxCalendarYearDirective, IgxCalendarScrollMonthDirective } from './calendar.directives';
import { IgxMonthsViewComponent } from './months-view/months-view.component';
import { IgxYearsViewComponent } from './years-view/years-view.component';
import { IgxDaysViewComponent } from './days-view/days-view.component';
import { IgxDayItemComponent } from './days-view/day-item.component';
import { IgxMonthPickerComponent } from './month-picker/month-picker.component';
import { IgxCalendarBaseDirective } from './calendar-base';
import { IgxMonthPickerBaseDirective } from './month-picker-base';
import { IgxMonthViewSlotsCalendar, IgxGetViewDateCalendar } from './months-view.pipe';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export class IgxCalendarModule {
}
IgxCalendarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxCalendarModule });
IgxCalendarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxCalendarModule_Factory(t) { return new (t || IgxCalendarModule)(); }, imports: [[CommonModule, FormsModule, IgxIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxCalendarModule, { declarations: function () { return [IgxCalendarBaseDirective,
        IgxMonthPickerBaseDirective,
        IgxDayItemComponent,
        IgxDaysViewComponent,
        IgxCalendarComponent,
        IgxCalendarHeaderTemplateDirective,
        IgxCalendarMonthDirective,
        IgxCalendarYearDirective,
        IgxCalendarSubheaderTemplateDirective,
        IgxCalendarScrollMonthDirective,
        IgxMonthsViewComponent,
        IgxYearsViewComponent,
        IgxMonthPickerComponent,
        IgxMonthViewSlotsCalendar,
        IgxGetViewDateCalendar]; }, imports: function () { return [CommonModule, FormsModule, IgxIconModule]; }, exports: function () { return [IgxCalendarComponent,
        IgxDaysViewComponent,
        IgxMonthsViewComponent,
        IgxYearsViewComponent,
        IgxMonthPickerComponent,
        IgxCalendarHeaderTemplateDirective,
        IgxCalendarMonthDirective,
        IgxCalendarYearDirective,
        IgxCalendarSubheaderTemplateDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCalendarModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    IgxCalendarBaseDirective,
                    IgxMonthPickerBaseDirective,
                    IgxDayItemComponent,
                    IgxDaysViewComponent,
                    IgxCalendarComponent,
                    IgxCalendarHeaderTemplateDirective,
                    IgxCalendarMonthDirective,
                    IgxCalendarYearDirective,
                    IgxCalendarSubheaderTemplateDirective,
                    IgxCalendarScrollMonthDirective,
                    IgxMonthsViewComponent,
                    IgxYearsViewComponent,
                    IgxMonthPickerComponent,
                    IgxMonthViewSlotsCalendar,
                    IgxGetViewDateCalendar
                ],
                exports: [
                    IgxCalendarComponent,
                    IgxDaysViewComponent,
                    IgxMonthsViewComponent,
                    IgxYearsViewComponent,
                    IgxMonthPickerComponent,
                    IgxCalendarHeaderTemplateDirective,
                    IgxCalendarMonthDirective,
                    IgxCalendarYearDirective,
                    IgxCalendarSubheaderTemplateDirective
                ],
                imports: [CommonModule, FormsModule, IgxIconModule]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvY2FsZW5kYXIvY2FsZW5kYXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUNILGtDQUFrQyxFQUNsQyx5QkFBeUIsRUFDekIscUNBQXFDLEVBQ3JDLHdCQUF3QixFQUN4QiwrQkFBK0IsRUFDbEMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV2RjtBQUNBO0FBQ0EsR0FBRzs7QUFnQ0gsTUFBTSxPQUFPLGlCQUFpQjtBQUFHOzZDQS9CaEMsUUFBUSxTQUFDO0NBQ04sWUFBWSxFQUFFLHNCQUNWLHdCQUF3QixzQkFDeEIsMkJBQTJCLHNCQUMzQixtQkFBbUIsc0JBQ25CLG9CQUFvQjtlQUNwQixvQkFBb0Isc0JBQ3BCLGtDQUFrQyxzQkFDbEMseUJBQXlCLHNCQUN6QjtTQUF3QixzQkFDeEI7O0VBQXFDLHNCQUNyQzt5QkFBK0I7aUJBQy9CLHNCQUFzQjtpQkFDdEI7R0FBcUIsc0JBQ3JCO2NBQXVCLHNCQUN2QjtjQUF5QixzQkFDekI7aUJBQXNCO0dBQ3pCLGtCQUNELE9BQU8sRUFBRTtxQkFDTDtRQUFvQixzQkFDcEI7ZUFBb0Isc0JBQ3BCLHNCQUFzQixzQkFDdEIscUJBQXFCLHNCQUNyQix1QkFBdUI7R0FDdkI7T0FBa0Msc0JBQ2xDO3NCQUF5QjthQUN6QjtJQUF3QixzQkFDeEI7bUJBQXFDO0VBQ3hDLGtCQUNELE9BQU8sRUFBRSxDQUFDO1FBQVksRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLGNBQ3REOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSWd4SWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vcHVibGljX2FwaSc7XG5pbXBvcnQgeyBJZ3hDYWxlbmRhckNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXIuY29tcG9uZW50JztcbmltcG9ydCB7XG4gICAgSWd4Q2FsZW5kYXJIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hDYWxlbmRhck1vbnRoRGlyZWN0aXZlLFxuICAgIElneENhbGVuZGFyU3ViaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4Q2FsZW5kYXJZZWFyRGlyZWN0aXZlLFxuICAgIElneENhbGVuZGFyU2Nyb2xsTW9udGhEaXJlY3RpdmVcbn0gZnJvbSAnLi9jYWxlbmRhci5kaXJlY3RpdmVzJztcbmltcG9ydCB7IElneE1vbnRoc1ZpZXdDb21wb25lbnQgfSBmcm9tICcuL21vbnRocy12aWV3L21vbnRocy12aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hZZWFyc1ZpZXdDb21wb25lbnQgfSBmcm9tICcuL3llYXJzLXZpZXcveWVhcnMtdmlldy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4RGF5c1ZpZXdDb21wb25lbnQgfSBmcm9tICcuL2RheXMtdmlldy9kYXlzLXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IElneERheUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2RheXMtdmlldy9kYXktaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4TW9udGhQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL21vbnRoLXBpY2tlci9tb250aC1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IElneENhbGVuZGFyQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vY2FsZW5kYXItYmFzZSc7XG5pbXBvcnQgeyBJZ3hNb250aFBpY2tlckJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL21vbnRoLXBpY2tlci1iYXNlJztcbmltcG9ydCB7IElneE1vbnRoVmlld1Nsb3RzQ2FsZW5kYXIsIElneEdldFZpZXdEYXRlQ2FsZW5kYXIgfSBmcm9tICcuL21vbnRocy12aWV3LnBpcGUnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgSWd4Q2FsZW5kYXJCYXNlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hNb250aFBpY2tlckJhc2VEaXJlY3RpdmUsXG4gICAgICAgIElneERheUl0ZW1Db21wb25lbnQsXG4gICAgICAgIElneERheXNWaWV3Q29tcG9uZW50LFxuICAgICAgICBJZ3hDYWxlbmRhckNvbXBvbmVudCxcbiAgICAgICAgSWd4Q2FsZW5kYXJIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FsZW5kYXJNb250aERpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FsZW5kYXJZZWFyRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDYWxlbmRhclNjcm9sbE1vbnRoRGlyZWN0aXZlLFxuICAgICAgICBJZ3hNb250aHNWaWV3Q29tcG9uZW50LFxuICAgICAgICBJZ3hZZWFyc1ZpZXdDb21wb25lbnQsXG4gICAgICAgIElneE1vbnRoUGlja2VyQ29tcG9uZW50LFxuICAgICAgICBJZ3hNb250aFZpZXdTbG90c0NhbGVuZGFyLFxuICAgICAgICBJZ3hHZXRWaWV3RGF0ZUNhbGVuZGFyXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIElneENhbGVuZGFyQ29tcG9uZW50LFxuICAgICAgICBJZ3hEYXlzVmlld0NvbXBvbmVudCxcbiAgICAgICAgSWd4TW9udGhzVmlld0NvbXBvbmVudCxcbiAgICAgICAgSWd4WWVhcnNWaWV3Q29tcG9uZW50LFxuICAgICAgICBJZ3hNb250aFBpY2tlckNvbXBvbmVudCxcbiAgICAgICAgSWd4Q2FsZW5kYXJIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FsZW5kYXJNb250aERpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FsZW5kYXJZZWFyRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlXG4gICAgXSxcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSwgSWd4SWNvbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2FsZW5kYXJNb2R1bGUgeyB9XG4iXX0=