import { Pipe } from '@angular/core';
import { Calendar } from './calendar';
import * as ɵngcc0 from '@angular/core';
export class IgxMonthViewSlotsCalendar {
    transform(monthViews) {
        return new Array(monthViews);
    }
}
IgxMonthViewSlotsCalendar.ɵfac = function IgxMonthViewSlotsCalendar_Factory(t) { return new (t || IgxMonthViewSlotsCalendar)(); };
IgxMonthViewSlotsCalendar.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "IgxMonthViewSlots", type: IgxMonthViewSlotsCalendar, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxMonthViewSlotsCalendar, [{
        type: Pipe,
        args: [{
                name: 'IgxMonthViewSlots'
            }]
    }], null, null); })();
export class IgxGetViewDateCalendar {
    constructor() {
        this.calendar = new Calendar();
    }
    transform(index, viewDate, wholeDate = true) {
        const date = this.calendar.timedelta(viewDate, 'month', index);
        return wholeDate ? date : date.getMonth();
    }
}
IgxGetViewDateCalendar.ɵfac = function IgxGetViewDateCalendar_Factory(t) { return new (t || IgxGetViewDateCalendar)(); };
IgxGetViewDateCalendar.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "IgxGetViewDate", type: IgxGetViewDateCalendar, pure: true });
IgxGetViewDateCalendar.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGetViewDateCalendar, [{
        type: Pipe,
        args: [{
                name: 'IgxGetViewDate'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhzLXZpZXcucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NhbGVuZGFyL21vbnRocy12aWV3LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQzs7QUFLdEMsTUFBTSxPQUFPLHlCQUF5QjtBQUFHLElBQzlCLFNBQVMsQ0FBQyxVQUFrQjtBQUN2QyxRQUFRLE9BQU8sSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckMsSUFBSSxDQUFDO0FBQ0w7cURBUEMsSUFBSSxTQUFDLGtCQUNGLElBQUksRUFBRSxtQkFBbUIsY0FDNUI7Ozs7Ozs7MEJBQ0k7QUFTTCxNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFFbEM7QUFDSixRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUN2QyxJQUFJLENBQUM7QUFDTCxJQUFXLFNBQVMsQ0FBQyxLQUFhLEVBQUUsUUFBYyxFQUFFLFNBQVMsR0FBRyxJQUFJO0FBQ3BFLFFBQVEsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN2RSxRQUFRLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNsRCxJQUFJLENBQUM7QUFDTDtrREFaQyxJQUFJLFNBQUMsa0JBQ0YsSUFBSSxFQUFFLGdCQUFnQixjQUN6Qjt5SEFDSTtBQUFDOzs7Ozs7Z0RBQWlEO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4vY2FsZW5kYXInO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ0lneE1vbnRoVmlld1Nsb3RzJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hNb250aFZpZXdTbG90c0NhbGVuZGFyIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHVibGljIHRyYW5zZm9ybShtb250aFZpZXdzOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheShtb250aFZpZXdzKTtcbiAgICB9XG59XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnSWd4R2V0Vmlld0RhdGUnXG59KVxuZXhwb3J0IGNsYXNzIElneEdldFZpZXdEYXRlQ2FsZW5kYXIgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIGNhbGVuZGFyOiBDYWxlbmRhcjtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IG5ldyBDYWxlbmRhcigpO1xuICAgIH1cbiAgICBwdWJsaWMgdHJhbnNmb3JtKGluZGV4OiBudW1iZXIsIHZpZXdEYXRlOiBEYXRlLCB3aG9sZURhdGUgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLmNhbGVuZGFyLnRpbWVkZWx0YSh2aWV3RGF0ZSwgJ21vbnRoJywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gd2hvbGVEYXRlID8gZGF0ZSA6IGRhdGUuZ2V0TW9udGgoKTtcbiAgICB9XG59XG4iXX0=