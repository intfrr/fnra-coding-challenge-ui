/**
 * This file contains all the directives used by the @link IgxCalendarComponent.
 * Except for the directives which are used for templating the calendar itself
 * you should generally not use them directly.
 * @preferred
 */
import { Directive, EventEmitter, HostBinding, HostListener, Input, Output, TemplateRef, ElementRef, NgZone } from '@angular/core';
import { fromEvent, Subject, interval } from 'rxjs';
import { takeUntil, debounce, tap } from 'rxjs/operators';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export class IgxCalendarYearDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.onYearSelection = new EventEmitter();
    }
    get defaultCSS() {
        return !this.isCurrentYear;
    }
    get currentCSS() {
        return this.isCurrentYear;
    }
    get tabIndex() {
        return this.isCurrentYear ? 0 : -1;
    }
    get isCurrentYear() {
        return this.date.getFullYear() === this.value.getFullYear();
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    onClick() {
        this.onYearSelection.emit(this.value);
    }
}
IgxCalendarYearDirective.ɵfac = function IgxCalendarYearDirective_Factory(t) { return new (t || IgxCalendarYearDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxCalendarYearDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCalendarYearDirective, selectors: [["", "igxCalendarYear", ""]], hostVars: 5, hostBindings: function IgxCalendarYearDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxCalendarYearDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵclassProp("igx-calendar__year", ctx.defaultCSS)("igx-calendar__year--current", ctx.currentCSS);
    } }, inputs: { value: ["igxCalendarYear", "value"], date: "date" }, outputs: { onYearSelection: "onYearSelection" } });
IgxCalendarYearDirective.ctorParameters = () => [
    { type: ElementRef }
];
IgxCalendarYearDirective.propDecorators = {
    value: [{ type: Input, args: ['igxCalendarYear',] }],
    date: [{ type: Input }],
    onYearSelection: [{ type: Output }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-calendar__year',] }],
    currentCSS: [{ type: HostBinding, args: ['class.igx-calendar__year--current',] }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCalendarYearDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCalendarYear]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onYearSelection: [{
            type: Output
        }], defaultCSS: [{
            type: HostBinding,
            args: ['class.igx-calendar__year']
        }], currentCSS: [{
            type: HostBinding,
            args: ['class.igx-calendar__year--current']
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], value: [{
            type: Input,
            args: ['igxCalendarYear']
        }], date: [{
            type: Input
        }] }); })();
export class IgxCalendarMonthDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.onMonthSelection = new EventEmitter();
    }
    get defaultCSS() {
        return !this.isCurrentMonth;
    }
    get currentCSS() {
        return this.isCurrentMonth;
    }
    get isCurrentMonth() {
        return this.date.getMonth() === this.value.getMonth();
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    onClick() {
        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());
        this.onMonthSelection.emit(date);
    }
}
IgxCalendarMonthDirective.ɵfac = function IgxCalendarMonthDirective_Factory(t) { return new (t || IgxCalendarMonthDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxCalendarMonthDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCalendarMonthDirective, selectors: [["", "igxCalendarMonth", ""]], hostVars: 4, hostBindings: function IgxCalendarMonthDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function IgxCalendarMonthDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-calendar__month", ctx.defaultCSS)("igx-calendar__month--current", ctx.currentCSS);
    } }, inputs: { value: ["igxCalendarMonth", "value"], date: "date", index: "index" }, outputs: { onMonthSelection: "onMonthSelection" } });
IgxCalendarMonthDirective.ctorParameters = () => [
    { type: ElementRef }
];
IgxCalendarMonthDirective.propDecorators = {
    value: [{ type: Input, args: ['igxCalendarMonth',] }],
    date: [{ type: Input }],
    index: [{ type: Input }],
    onMonthSelection: [{ type: Output }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-calendar__month',] }],
    currentCSS: [{ type: HostBinding, args: ['class.igx-calendar__month--current',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCalendarMonthDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCalendarMonth]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onMonthSelection: [{
            type: Output
        }], defaultCSS: [{
            type: HostBinding,
            args: ['class.igx-calendar__month']
        }], currentCSS: [{
            type: HostBinding,
            args: ['class.igx-calendar__month--current']
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], value: [{
            type: Input,
            args: ['igxCalendarMonth']
        }], date: [{
            type: Input
        }], index: [{
            type: Input
        }] }); })();
/**
 * @hidden
 */
export class IgxCalendarHeaderTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxCalendarHeaderTemplateDirective.ɵfac = function IgxCalendarHeaderTemplateDirective_Factory(t) { return new (t || IgxCalendarHeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxCalendarHeaderTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCalendarHeaderTemplateDirective, selectors: [["", "igxCalendarHeader", ""]] });
IgxCalendarHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCalendarHeaderTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCalendarHeader]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * @hidden
 */
export class IgxCalendarSubheaderTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxCalendarSubheaderTemplateDirective.ɵfac = function IgxCalendarSubheaderTemplateDirective_Factory(t) { return new (t || IgxCalendarSubheaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxCalendarSubheaderTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCalendarSubheaderTemplateDirective, selectors: [["", "igxCalendarSubheader", ""]] });
IgxCalendarSubheaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCalendarSubheaderTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCalendarSubheader]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * @hidden
 */
export class IgxCalendarScrollMonthDirective {
    constructor(element, zone) {
        this.element = element;
        this.zone = zone;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        fromEvent(this.element.nativeElement, 'keyup').pipe(debounce(() => interval(100)), takeUntil(this.destroy$)).subscribe((event) => {
            this.stopScroll(event);
        });
        this.zone.runOutsideAngular(() => {
            fromEvent(this.element.nativeElement, 'keydown').pipe(tap((event) => {
                if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }), debounce(() => interval(100)), takeUntil(this.destroy$)).subscribe((event) => {
                if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
                    this.zone.run(() => this.startScroll(true));
                }
            });
        });
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden
     */
    onMouseDown() {
        this.startScroll();
    }
    /**
     * @hidden
     */
    onMouseUp(event) {
        this.stopScroll(event);
    }
}
IgxCalendarScrollMonthDirective.ɵfac = function IgxCalendarScrollMonthDirective_Factory(t) { return new (t || IgxCalendarScrollMonthDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
IgxCalendarScrollMonthDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCalendarScrollMonthDirective, selectors: [["", "igxCalendarScrollMonth", ""]], hostBindings: function IgxCalendarScrollMonthDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function IgxCalendarScrollMonthDirective_mousedown_HostBindingHandler() { return ctx.onMouseDown(); })("mouseup", function IgxCalendarScrollMonthDirective_mouseup_HostBindingHandler($event) { return ctx.onMouseUp($event); });
    } }, inputs: { startScroll: "startScroll", stopScroll: "stopScroll" } });
IgxCalendarScrollMonthDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
IgxCalendarScrollMonthDirective.propDecorators = {
    startScroll: [{ type: Input }],
    stopScroll: [{ type: Input }],
    onMouseDown: [{ type: HostListener, args: ['mousedown',] }],
    onMouseUp: [{ type: HostListener, args: ['mouseup', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCalendarScrollMonthDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCalendarScrollMonth]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { 
    /**
     * @hidden
     */
    onMouseDown: [{
            type: HostListener,
            args: ['mousedown']
        }], 
    /**
     * @hidden
     */
    onMouseUp: [{
            type: HostListener,
            args: ['mouseup', ['$event']]
        }], startScroll: [{
            type: Input
        }], stopScroll: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,