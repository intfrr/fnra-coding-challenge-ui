import { Component, HostListener, ViewChild, HostBinding, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { trigger, transition, useAnimation } from '@angular/animations';
import { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';
import { IgxMonthsViewComponent } from '../months-view/months-view.component';
import { IgxMonthPickerBaseDirective, CalendarView } from '../month-picker-base';
import { IgxYearsViewComponent } from '../years-view/years-view.component';
import { IgxDaysViewComponent } from '../days-view/days-view.component';
import { ScrollMonth } from '../calendar-base';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../icon/icon.component';
import * as ɵngcc3 from '../months-view/months-view.component';
import * as ɵngcc4 from '../years-view/years-view.component';

const _c0 = ["months"];
const _c1 = ["decade"];
const _c2 = ["days"];
const _c3 = ["yearsBtn"];
const _c4 = function () { return { "min-width.%": 25, "left": 0 }; };
const _c5 = function () { return { "min-width.%": 25, "right": 0 }; };
function IgxMonthPickerComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵlistener("@animateView.done", function IgxMonthPickerComponent_div_0_Template_div_animation_animateView_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.viewRendered($event); })("swiperight", function IgxMonthPickerComponent_div_0_Template_div_swiperight_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.previousYear(); })("swipeleft", function IgxMonthPickerComponent_div_0_Template_div_swipeleft_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.nextYear(); });
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "div", 4);
    ɵngcc0.ɵɵlistener("click", function IgxMonthPickerComponent_div_0_Template_div_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.previousYear(); })("keydown", function IgxMonthPickerComponent_div_0_Template_div_keydown_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.changeYearKB($event, false); });
    ɵngcc0.ɵɵelementStart(3, "igx-icon", 5);
    ɵngcc0.ɵɵtext(4, "keyboard_arrow_left");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div");
    ɵngcc0.ɵɵelementStart(6, "span", 6, 7);
    ɵngcc0.ɵɵlistener("keydown", function IgxMonthPickerComponent_div_0_Template_span_keydown_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.activeViewDecadeKB($event); })("click", function IgxMonthPickerComponent_div_0_Template_span_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.activeViewDecade(); });
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 8);
    ɵngcc0.ɵɵlistener("click", function IgxMonthPickerComponent_div_0_Template_div_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.nextYear(); })("keydown", function IgxMonthPickerComponent_div_0_Template_div_keydown_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.changeYearKB($event); });
    ɵngcc0.ɵɵelementStart(10, "igx-icon", 5);
    ɵngcc0.ɵɵtext(11, "keyboard_arrow_right");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "igx-months-view", 9, 10);
    ɵngcc0.ɵɵlistener("@animateChange.done", function IgxMonthPickerComponent_div_0_Template_igx_months_view_animation_animateChange_done_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.animationDone($event); })("@animateView.done", function IgxMonthPickerComponent_div_0_Template_igx_months_view_animation_animateView_done_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.viewRendered($event); })("onSelection", function IgxMonthPickerComponent_div_0_Template_igx_months_view_onSelection_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.selectMonth($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@animateView", ctx_r0.activeView);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(11, _c4));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵstyleProp("width", 100, "%");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.formattedYear(ctx_r0.viewDate), " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(12, _c5));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("@animateChange", ctx_r0.yearAction)("date", ctx_r0.viewDate)("locale", ctx_r0.locale)("formatView", ctx_r0.formatViews.month)("monthFormat", ctx_r0.formatOptions.month);
} }
function IgxMonthPickerComponent_igx_years_view_1_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-years-view", 11, 12);
    ɵngcc0.ɵɵlistener("@animateView.done", function IgxMonthPickerComponent_igx_years_view_1_Template_igx_years_view_animation_animateView_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.viewRendered($event); })("onSelection", function IgxMonthPickerComponent_igx_years_view_1_Template_igx_years_view_onSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.selectYear($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@animateView", ctx_r1.activeView)("date", ctx_r1.viewDate)("locale", ctx_r1.locale)("formatView", ctx_r1.formatViews.year)("yearFormat", ctx_r1.formatOptions.year);
} }
let NEXT_ID = 0;
export class IgxMonthPickerComponent extends IgxMonthPickerBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Sets/gets the `id` of the month picker.
         * If not set, the `id` will have value `"igx-month-picker-0"`.
         */
        this.id = `igx-month-picker-${NEXT_ID++}`;
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        /**
         * @hidden
         */
        this.yearAction = '';
    }
    /**
     * @hidden
     */
    animationDone(event) {
        if ((event.fromState === 'void' && event.toState === '') ||
            (event.fromState === '' && (event.toState === ScrollMonth.PREV || event.toState === ScrollMonth.NEXT))) {
            this.viewDateChanged.emit({ previousValue: this.previousViewDate, currentValue: this.viewDate });
        }
        this.yearAction = '';
    }
    /**
     * @hidden
     */
    viewRendered(event) {
        if (event.fromState !== 'void') {
            this.activeViewChanged.emit(this.activeView);
        }
    }
    /**
     * @hidden
     */
    activeViewDecadeKB(event) {
        super.activeViewDecadeKB(event);
        if (event.key === "ArrowRight" /* RIGHT_ARROW */ || event.key === "Right" /* RIGHT_ARROW_IE */) {
            this.nextYear(event);
        }
        if (event.key === "ArrowLeft" /* LEFT_ARROW */ || event.key === "Left" /* LEFT_ARROW_IE */) {
            this.previousYear(event);
        }
        requestAnimationFrame(() => {
            if (this.dacadeView) {
                this.dacadeView.el.nativeElement.focus();
            }
        });
    }
    /**
     * @hidden
     */
    activeViewDecade() {
        super.activeViewDecade();
        requestAnimationFrame(() => {
            this.dacadeView.el.nativeElement.focus();
        });
    }
    /**
     * @hidden
     */
    changeYearKB(event, next = true) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.stopPropagation();
            next ? this.nextYear() : this.previousYear();
        }
    }
    /**
     * @hidden
     */
    selectYear(event) {
        this.previousViewDate = this.viewDate;
        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());
        this.activeView = CalendarView.DEFAULT;
        requestAnimationFrame(() => {
            if (this.yearsBtn) {
                this.yearsBtn.nativeElement.focus();
            }
        });
    }
    /**
     * @hidden
     */
    selectMonth(event) {
        this.selectDate(event);
        this.onSelection.emit(this.selectedDates);
    }
    /**
     * Selects a date.
     * ```typescript
     *  this.monthPicker.selectDate(new Date(`2018-06-12`));
     * ```
     */
    selectDate(value) {
        if (!value) {
            return new Date();
        }
        super.selectDate(value);
        this.viewDate = value;
    }
    /**
     * @hidden
     */
    writeValue(value) {
        if (value) {
            this.viewDate = this.selectedDates = value;
        }
    }
    /**
     * @hidden
     */
    previousYear(event) {
        event === null || event === void 0 ? void 0 : event.preventDefault();
        if (event && this.yearAction === 'next') {
            return;
        }
        this.yearAction = 'prev';
        this.previousViewDate = this.viewDate;
        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);
    }
    /**
     * @hidden
     */
    nextYear(event) {
        event === null || event === void 0 ? void 0 : event.preventDefault();
        if (event && this.yearAction === 'prev') {
            return;
        }
        this.yearAction = 'next';
        this.previousViewDate = this.viewDate;
        this.viewDate = this.calendarModel.getNextYear(this.viewDate);
    }
    /**
     * @hidden
     */
    onKeydownHome(event) {
        if (this.monthsView) {
            this.monthsView.el.nativeElement.focus();
            this.monthsView.onKeydownHome(event);
        }
    }
    /**
     * @hidden
     */
    onKeydownEnd(event) {
        if (this.monthsView) {
            this.monthsView.el.nativeElement.focus();
            this.monthsView.onKeydownEnd(event);
        }
    }
}
IgxMonthPickerComponent.ɵfac = function IgxMonthPickerComponent_Factory(t) { return ɵIgxMonthPickerComponent_BaseFactory(t || IgxMonthPickerComponent); };
IgxMonthPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxMonthPickerComponent, selectors: [["igx-month-picker"]], viewQuery: function IgxMonthPickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, IgxMonthsViewComponent);
        ɵngcc0.ɵɵviewQuery(_c1, true, IgxYearsViewComponent);
        ɵngcc0.ɵɵviewQuery(_c2, true, IgxDaysViewComponent);
        ɵngcc0.ɵɵviewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthsView = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dacadeView = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.daysView = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearsBtn = _t.first);
    } }, hostVars: 3, hostBindings: function IgxMonthPickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.pageup", function IgxMonthPickerComponent_keydown_pageup_HostBindingHandler($event) { return ctx.previousYear($event); })("keydown.pagedown", function IgxMonthPickerComponent_keydown_pagedown_HostBindingHandler($event) { return ctx.nextYear($event); })("keydown.home", function IgxMonthPickerComponent_keydown_home_HostBindingHandler($event) { return ctx.onKeydownHome($event); })("keydown.end", function IgxMonthPickerComponent_keydown_end_HostBindingHandler($event) { return ctx.onKeydownEnd($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵclassProp("igx-calendar", ctx.styleClass);
    } }, inputs: { id: "id" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxMonthPickerComponent
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [["class", "igx-calendar__body", 3, "swiperight", "swipeleft", 4, "ngIf"], [3, "date", "locale", "formatView", "yearFormat", "onSelection", 4, "ngIf"], [1, "igx-calendar__body", 3, "swiperight", "swipeleft"], [1, "igx-calendar-picker"], ["tabindex", "0", 1, "igx-calendar-picker__prev", 3, "ngStyle", "click", "keydown"], ["fontSet", "material"], ["tabindex", "0", 1, "igx-calendar-picker__date", 3, "keydown", "click"], ["yearsBtn", ""], ["tabindex", "0", 1, "igx-calendar-picker__next", 3, "ngStyle", "click", "keydown"], [3, "date", "locale", "formatView", "monthFormat", "onSelection"], ["months", ""], [3, "date", "locale", "formatView", "yearFormat", "onSelection"], ["decade", ""]], template: function IgxMonthPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxMonthPickerComponent_div_0_Template, 14, 13, "div", 0);
        ɵngcc0.ɵɵtemplate(1, IgxMonthPickerComponent_igx_years_view_1_Template, 2, 5, "igx-years-view", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isDefaultView);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isDecadeView);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc2.IgxIconComponent, ɵngcc3.IgxMonthsViewComponent, ɵngcc4.IgxYearsViewComponent], encapsulation: 2, data: { animation: [
            trigger('animateView', [
                transition('void => 0', useAnimation(fadeIn)),
                transition('void => *', useAnimation(scaleInCenter, {
                    params: {
                        duration: '.2s',
                        fromScale: .9
                    }
                }))
            ]),
            trigger('animateChange', [
                transition('* => prev', useAnimation(slideInLeft, {
                    params: {
                        fromPosition: 'translateX(-30%)'
                    }
                })),
                transition('* => next', useAnimation(slideInRight, {
                    params: {
                        fromPosition: 'translateX(30%)'
                    }
                }))
            ])
        ] } });
IgxMonthPickerComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
    monthsView: [{ type: ViewChild, args: ['months', { read: IgxMonthsViewComponent },] }],
    dacadeView: [{ type: ViewChild, args: ['decade', { read: IgxYearsViewComponent },] }],
    daysView: [{ type: ViewChild, args: ['days', { read: IgxDaysViewComponent },] }],
    yearsBtn: [{ type: ViewChild, args: ['yearsBtn',] }],
    previousYear: [{ type: HostListener, args: ['keydown.pageup', ['$event'],] }],
    nextYear: [{ type: HostListener, args: ['keydown.pagedown', ['$event'],] }],
    onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
    onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }]
};
const ɵIgxMonthPickerComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxMonthPickerComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxMonthPickerComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxMonthPickerComponent
                    }
                ],
                animations: [
                    trigger('animateView', [
                        transition('void => 0', useAnimation(fadeIn)),
                        transition('void => *', useAnimation(scaleInCenter, {
                            params: {
                                duration: '.2s',
                                fromScale: .9
                            }
                        }))
                    ]),
                    trigger('animateChange', [
                        transition('* => prev', useAnimation(slideInLeft, {
                            params: {
                                fromPosition: 'translateX(-30%)'
                            }
                        })),
                        transition('* => next', useAnimation(slideInRight, {
                            params: {
                                fromPosition: 'translateX(30%)'
                            }
                        }))
                    ])
                ],
                selector: 'igx-month-picker',
                template: "<div *ngIf=\"isDefaultView\" [@animateView]=\"activeView\" (@animateView.done)=\"viewRendered($event)\" class=\"igx-calendar__body\" (swiperight)=\"previousYear()\" (swipeleft)=\"nextYear()\">\n    <div class=\"igx-calendar-picker\">\n        <div tabindex=\"0\" class=\"igx-calendar-picker__prev\" (click)=\"previousYear()\" (keydown)=\"changeYearKB($event, false)\" [ngStyle]=\"{\n            'min-width.%': 25,\n            'left': 0\n        }\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_left</igx-icon>\n        </div>\n        <div [style.width.%]=\"100\">\n            <span tabindex=\"0\" #yearsBtn (keydown)=\"activeViewDecadeKB($event)\" (click)=\"activeViewDecade()\" class=\"igx-calendar-picker__date\">\n                {{ formattedYear(viewDate) }}\n            </span>\n        </div>\n        <div tabindex=\"0\" class=\"igx-calendar-picker__next\" (click)=\"nextYear()\" (keydown)=\"changeYearKB($event)\" [ngStyle]=\"{\n            'min-width.%': 25,\n            'right': 0\n        }\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_right</igx-icon>\n        </div>\n    </div>\n\n    <igx-months-view [@animateChange]=\"yearAction\" #months\n                     (@animateChange.done)=\"animationDone($event)\"\n                     (@animateView.done)=\"viewRendered($event)\"\n                     [date]=\"viewDate\"\n                     [locale]=\"locale\"\n                     [formatView]=\"formatViews.month\"\n                     [monthFormat]=\"formatOptions.month\"\n                     (onSelection)=\"selectMonth($event)\">\n    </igx-months-view>\n</div>\n<igx-years-view *ngIf=\"isDecadeView\" [@animateView]=\"activeView\" #decade (@animateView.done)=\"viewRendered($event)\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\"\n                (onSelection)=\"selectYear($event)\">\n</igx-years-view>\n"
            }]
    }], null, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], styleClass: [{
            type: HostBinding,
            args: ['class.igx-calendar']
        }], 
    /**
     * @hidden
     */
    previousYear: [{
            type: HostListener,
            args: ['keydown.pageup', ['$event']]
        }], 
    /**
     * @hidden
     */
    nextYear: [{
            type: HostListener,
            args: ['keydown.pagedown', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownHome: [{
            type: HostListener,
            args: ['keydown.home', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownEnd: [{
            type: HostListener,
            args: ['keydown.end', ['$event']]
        }], monthsView: [{
            type: ViewChild,
            args: ['months', { read: IgxMonthsViewComponent }]
        }], dacadeView: [{
            type: ViewChild,
            args: ['decade', { read: IgxYearsViewComponent }]
        }], daysView: [{
            type: ViewChild,
            args: ['days', { read: IgxDaysViewComponent }]
        }], yearsBtn: [{
            type: ViewChild,
            args: ['yearsBtn']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,