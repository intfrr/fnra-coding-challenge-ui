import { Component, Output, EventEmitter, Input, HostListener, ViewChildren, HostBinding } from '@angular/core';
import { isDateInRanges } from '../../calendar/calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxDayItemComponent } from './day-item.component';
import { DateRangeType } from '../../core/dates';
import { IgxCalendarBaseDirective, CalendarSelection } from '../calendar-base';
import { isEqual } from '../../core/utils';
import { IgxDaysViewNavigationService } from '../days-view/daysview-navigation.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../days-view/daysview-navigation.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './day-item.component';

function IgxDaysViewComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2, "Wk");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function IgxDaysViewComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "titlecase");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dayName_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, dayName_r3), " ");
} }
function IgxDaysViewComponent_div_3_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const week_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r7.getWeekNumber(week_r4[0].date), " ");
} }
function IgxDaysViewComponent_div_3_igx_day_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-day-item", 10);
    ɵngcc0.ɵɵlistener("focus", function IgxDaysViewComponent_div_3_igx_day_item_2_Template_igx_day_item_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const day_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.activeDate = day_r10.date.toLocaleDateString(); })("onDateSelection", function IgxDaysViewComponent_div_3_igx_day_item_2_Template_igx_day_item_onDateSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.selectDay($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r10 = ctx.$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("date", day_r10)("selection", ctx_r8.selection)("selected", ctx_r8.isSelected(day_r10))("isLastInRange", ctx_r8.isLastInRange(day_r10))("isFirstInRange", ctx_r8.isFirstInRange(day_r10))("isWithinRange", ctx_r8.isWithinRange(day_r10.date, true))("disabledDates", ctx_r8.disabledDates)("specialDates", ctx_r8.specialDates)("outOfRangeDates", ctx_r8.outOfRangeDates)("hideOutsideDays", ctx_r8.hideOutsideDays);
    ɵngcc0.ɵɵattribute("tabindex", ctx_r8.tabIndex(day_r10));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r8.formattedDate(day_r10.date), " ");
} }
function IgxDaysViewComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 0);
    ɵngcc0.ɵɵtemplate(1, IgxDaysViewComponent_div_3_div_1_Template, 3, 1, "div", 6);
    ɵngcc0.ɵɵtemplate(2, IgxDaysViewComponent_div_3_igx_day_item_2_Template, 2, 12, "igx-day-item", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const week_r4 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", week_r4)("ngForTrackBy", ctx_r2.dateTracker);
} }
let NEXT_ID = 0;
export class IgxDaysViewComponent extends IgxCalendarBaseDirective {
    /**
     * @hidden
     */
    constructor(daysNavService) {
        super();
        this.daysNavService = daysNavService;
        /**
         * Sets/gets the `id` of the days view.
         * If not set, the `id` will have value `"igx-days-view-0"`.
         * ```html
         * <igx-days-view id="my-days-view"></igx-days-view>
         * ```
         * ```typescript
         * let daysViewId =  this.daysView.id;
         * ```
         */
        this.id = `igx-days-view-${NEXT_ID++}`;
        /**
         * @hidden
         */
        this.changeDaysView = false;
        /**
         * @hidden
         */
        this.onDateSelection = new EventEmitter();
        /**
         * @hidden
         */
        this.onViewChanging = new EventEmitter();
        /**
         * @hidden
         */
        this.activeDateChange = new EventEmitter();
        /**
         * @hidden
         */
        this.monthsViewBlur = new EventEmitter();
        /** @hidden */
        this.shouldResetDate = true;
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
    }
    /**
     * @hidden
     * @internal
     */
    set activeDate(value) {
        this._activeDate = value;
        this.activeDateChange.emit(this._activeDate);
    }
    get activeDate() {
        return this._activeDate ? this._activeDate : this.viewDate.toLocaleDateString();
    }
    /**
     * @hidden
     * @internal
     */
    resetActiveMonth() {
        if (this.shouldResetDate) {
            const date = this.dates.find(day => day.selected && day.isCurrentMonth)
                || this.dates.find(day => day.isToday && day.isCurrentMonth) || this.dates.find(d => d.isFocusable);
            if (date) {
                this.activeDate = date.date.date.toLocaleDateString();
            }
            this.monthsViewBlur.emit();
        }
        this.shouldResetDate = true;
    }
    /**
     * @hidden
     * @internal
     */
    pointerDown() {
        this.shouldResetDate = false;
    }
    /**
     * @hidden
     */
    get getCalendarMonth() {
        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.daysNavService.monthView = this;
    }
    /**
     * @hidden
     */
    ngDoCheck() {
        if (!this.changeDaysView && this.dates) {
            this.disableOutOfRangeDates();
        }
    }
    /**
     * @hidden
     * @internal
     */
    tabIndex(day) {
        return this.activeDate && this.activeDate === day.date.toLocaleDateString() && day.isCurrentMonth ? 0 : -1;
    }
    /**
     * Returns the week number by date
     *
     * @hidden
     */
    getWeekNumber(date) {
        return this.calendarModel.getWeekNumber(date);
    }
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     */
    formattedDate(value) {
        if (this.formatViews.day) {
            return this.formatterDay.format(value);
        }
        return `${value.getDate()}`;
    }
    /**
     * @hidden
     */
    generateWeekHeader() {
        const dayNames = [];
        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        for (const day of rv) {
            dayNames.push(this.formatterWeekday.format(day.date));
        }
        return dayNames;
    }
    /**
     * @hidden
     */
    rowTracker(index, item) {
        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;
    }
    /**
     * @hidden
     */
    dateTracker(index, item) {
        return `${item.date.getMonth()}--${item.date.getDate()}`;
    }
    /**
     * @hidden
     */
    isCurrentMonth(value) {
        return this.viewDate.getMonth() === value.getMonth();
    }
    /**
     * @hidden
     */
    isCurrentYear(value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    }
    /**
     * @hidden
     */
    isSelected(date) {
        let selectedDates;
        if (this.isDateDisabled(date.date) || !this.value ||
            (Array.isArray(this.value) && this.value.length === 0)) {
            return false;
        }
        if (this.selection === CalendarSelection.SINGLE) {
            selectedDates = this.value;
            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();
        }
        selectedDates = this.value;
        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {
            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();
        }
        if (this.selection === CalendarSelection.MULTI) {
            const start = this.getDateOnly(selectedDates[0]);
            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);
            if (this.isWithinRange(date.date, false, start, end)) {
                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());
                return !!currentDate;
            }
            else {
                return false;
            }
        }
        else {
            return this.isWithinRange(date.date, true);
        }
    }
    /**
     * @hidden
     */
    isLastInRange(date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        const dates = this.value;
        const lastDate = dates[dates.length - 1];
        return isEqual(lastDate, date.date);
    }
    /**
     * @hidden
     */
    isFirstInRange(date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        return isEqual(this.value[0], date.date);
    }
    /**
     * @hidden
     */
    isWithinRange(date, checkForRange, min, max) {
        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {
            return false;
        }
        min = min ? min : this.value[0];
        max = max ? max : this.value[this.value.length - 1];
        return isDateInRanges(date, [
            {
                type: DateRangeType.Between,
                dateRange: [min, max]
            }
        ]);
    }
    /**
     * @hidden
     */
    focusActiveDate() {
        let date = this.dates.find((d) => d.selected);
        if (!date) {
            date = this.dates.find((d) => d.isToday);
        }
        if (date.isFocusable) {
            date.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    selectDay(event) {
        this.selectDateFromClient(event.date);
        this.onDateSelection.emit(event);
        this.onSelection.emit(this.selectedDates);
    }
    /**
     * @hidden
     */
    disableOutOfRangeDates() {
        const dateRange = [];
        this.dates.toArray().forEach((date) => {
            if (!date.isCurrentMonth) {
                dateRange.push(date.date.date);
            }
        });
        this.outOfRangeDates = [{
                type: DateRangeType.Specific,
                dateRange: dateRange
            }];
    }
    /**
     * @hidden
     */
    getFirstMonthView() {
        let monthView = this;
        while (monthView.prevMonthView) {
            monthView = monthView.prevMonthView;
        }
        return monthView;
    }
    /**
     * @hidden
     */
    getLastMonthView() {
        let monthView = this;
        while (monthView.nextMonthView) {
            monthView = monthView.nextMonthView;
        }
        return monthView;
    }
    /**
     * @hidden
     */
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    /**
     * @hidden
     */
    onKeydownArrow(event) {
        event.preventDefault();
        event.stopPropagation();
        this.shouldResetDate = false;
        this.daysNavService.focusNextDate(event.target, event.key);
    }
    /**
     * @hidden
     */
    onKeydownHome(event) {
        event.preventDefault();
        event.stopPropagation();
        this.shouldResetDate = false;
        this.getFirstMonthView().daysNavService.focusHomeDate();
    }
    /**
     * @hidden
     */
    onKeydownEnd(event) {
        event.preventDefault();
        event.stopPropagation();
        this.shouldResetDate = false;
        this.getLastMonthView().daysNavService.focusEndDate();
    }
}
IgxDaysViewComponent.ɵfac = function IgxDaysViewComponent_Factory(t) { return new (t || IgxDaysViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxDaysViewNavigationService)); };
IgxDaysViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxDaysViewComponent, selectors: [["igx-days-view"]], viewQuery: function IgxDaysViewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxDayItemComponent, true, IgxDayItemComponent);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dates = _t);
    } }, hostVars: 3, hostBindings: function IgxDaysViewComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function IgxDaysViewComponent_focusout_HostBindingHandler() { return ctx.resetActiveMonth(); })("keydown.pagedown", function IgxDaysViewComponent_keydown_pagedown_HostBindingHandler() { return ctx.pointerDown(); })("keydown.pageup", function IgxDaysViewComponent_keydown_pageup_HostBindingHandler() { return ctx.pointerDown(); })("keydown.shift.pagedown", function IgxDaysViewComponent_keydown_shift_pagedown_HostBindingHandler() { return ctx.pointerDown(); })("keydown.shift.pageup", function IgxDaysViewComponent_keydown_shift_pageup_HostBindingHandler() { return ctx.pointerDown(); })("pointerdown", function IgxDaysViewComponent_pointerdown_HostBindingHandler() { return ctx.pointerDown(); })("keydown.arrowleft", function IgxDaysViewComponent_keydown_arrowleft_HostBindingHandler($event) { return ctx.onKeydownArrow($event); })("keydown.arrowright", function IgxDaysViewComponent_keydown_arrowright_HostBindingHandler($event) { return ctx.onKeydownArrow($event); })("keydown.arrowup", function IgxDaysViewComponent_keydown_arrowup_HostBindingHandler($event) { return ctx.onKeydownArrow($event); })("keydown.arrowdown", function IgxDaysViewComponent_keydown_arrowdown_HostBindingHandler($event) { return ctx.onKeydownArrow($event); })("keydown.home", function IgxDaysViewComponent_keydown_home_HostBindingHandler($event) { return ctx.onKeydownHome($event); })("keydown.end", function IgxDaysViewComponent_keydown_end_HostBindingHandler($event) { return ctx.onKeydownEnd($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵclassProp("igx-calendar", ctx.styleClass);
    } }, inputs: { id: "id", changeDaysView: "changeDaysView", activeDate: "activeDate", showWeekNumbers: "showWeekNumbers" }, outputs: { onDateSelection: "onDateSelection", onViewChanging: "onViewChanging", activeDateChange: "activeDateChange", monthsViewBlur: "monthsViewBlur" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxDaysViewComponent
            },
            { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [[1, "igx-calendar__body-row"], ["class", "igx-calendar__label igx-calendar__label--week-number", 4, "ngIf"], ["class", "igx-calendar__label", 4, "ngFor", "ngForOf"], ["class", "igx-calendar__body-row", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "igx-calendar__label", "igx-calendar__label--week-number"], [1, "igx-calendar__label"], ["class", "igx-calendar__date igx-calendar__date--week-number", 4, "ngIf"], [3, "date", "selection", "selected", "isLastInRange", "isFirstInRange", "isWithinRange", "disabledDates", "specialDates", "outOfRangeDates", "hideOutsideDays", "focus", "onDateSelection", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "igx-calendar__date", "igx-calendar__date--week-number"], [1, "igx-calendar__date-content", "igx-calendar__date-content--week-number"], [3, "date", "selection", "selected", "isLastInRange", "isFirstInRange", "isWithinRange", "disabledDates", "specialDates", "outOfRangeDates", "hideOutsideDays", "focus", "onDateSelection"]], template: function IgxDaysViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, IgxDaysViewComponent_div_1_Template, 3, 0, "div", 1);
        ɵngcc0.ɵɵtemplate(2, IgxDaysViewComponent_span_2_Template, 3, 3, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, IgxDaysViewComponent_div_3_Template, 3, 3, "div", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showWeekNumbers);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.generateWeekHeader());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.getCalendarMonth)("ngForTrackBy", ctx.rowTracker);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.IgxDayItemComponent], pipes: [ɵngcc2.TitleCasePipe], encapsulation: 2 });
IgxDaysViewComponent.ctorParameters = () => [
    { type: IgxDaysViewNavigationService }
];
IgxDaysViewComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    changeDaysView: [{ type: Input }],
    showWeekNumbers: [{ type: Input }],
    activeDate: [{ type: Input }],
    onDateSelection: [{ type: Output }],
    onViewChanging: [{ type: Output }],
    activeDateChange: [{ type: Output }],
    monthsViewBlur: [{ type: Output }],
    dates: [{ type: ViewChildren, args: [IgxDayItemComponent, { read: IgxDayItemComponent },] }],
    styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
    resetActiveMonth: [{ type: HostListener, args: ['focusout',] }],
    pointerDown: [{ type: HostListener, args: ['keydown.pagedown',] }, { type: HostListener, args: ['keydown.pageup',] }, { type: HostListener, args: ['keydown.shift.pagedown',] }, { type: HostListener, args: ['keydown.shift.pageup',] }, { type: HostListener, args: ['pointerdown',] }],
    onKeydownArrow: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }, { type: HostListener, args: ['keydown.arrowright', ['$event'],] }, { type: HostListener, args: ['keydown.arrowup', ['$event'],] }, { type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
    onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
    onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDaysViewComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxDaysViewComponent
                    },
                    { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }
                ],
                selector: 'igx-days-view',
                template: "<div class=\"igx-calendar__body-row\">\n    <div *ngIf=\"showWeekNumbers\" class=\"igx-calendar__label igx-calendar__label--week-number\">\n        <span>Wk</span>\n    </div>\n    <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\n        {{ dayName | titlecase }}\n    </span>\n</div>\n\n<div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\"\n    class=\"igx-calendar__body-row\">\n    <div class=\"igx-calendar__date igx-calendar__date--week-number\" *ngIf=\"showWeekNumbers\">\n        <span class=\"igx-calendar__date-content igx-calendar__date-content--week-number\">\n            {{getWeekNumber(week[0].date)}}\n        </span>\n    </div>\n    <!-- <igx-week-number-item *ngIf=\"showWeekNumbers\">{{getWeekNumber(week[0].date)}}</igx-week-number-item> -->\n    <igx-day-item\n        *ngFor=\"let day of week; trackBy: dateTracker\"\n        [date]=\"day\"\n        [selection]=\"selection\"\n        [selected]=\"isSelected(day)\"\n        [isLastInRange]=\"isLastInRange(day)\"\n        [isFirstInRange]=\"isFirstInRange(day)\"\n        [isWithinRange]=\"isWithinRange(day.date, true)\"\n        [disabledDates]=\"disabledDates\"\n        [specialDates]=\"specialDates\"\n        [outOfRangeDates]=\"outOfRangeDates\"\n        [hideOutsideDays]=\"hideOutsideDays\"\n        [attr.tabindex]=\"tabIndex(day)\"\n        (focus)=\"activeDate = day.date.toLocaleDateString()\"\n        (onDateSelection)=\"selectDay($event)\">\n        {{ formattedDate(day.date) }}\n    </igx-day-item>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.IgxDaysViewNavigationService }]; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], changeDaysView: [{
            type: Input
        }], onDateSelection: [{
            type: Output
        }], onViewChanging: [{
            type: Output
        }], activeDateChange: [{
            type: Output
        }], monthsViewBlur: [{
            type: Output
        }], styleClass: [{
            type: HostBinding,
            args: ['class.igx-calendar']
        }], activeDate: [{
            type: Input
        }], 
    /**
     * @hidden
     * @internal
     */
    resetActiveMonth: [{
            type: HostListener,
            args: ['focusout']
        }], 
    /**
     * @hidden
     * @internal
     */
    pointerDown: [{
            type: HostListener,
            args: ['keydown.pagedown']
        }, {
            type: HostListener,
            args: ['keydown.pageup']
        }, {
            type: HostListener,
            args: ['keydown.shift.pagedown']
        }, {
            type: HostListener,
            args: ['keydown.shift.pageup']
        }, {
            type: HostListener,
            args: ['pointerdown']
        }], 
    /**
     * @hidden
     */
    onKeydownArrow: [{
            type: HostListener,
            args: ['keydown.arrowleft', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.arrowright', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.arrowup', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.arrowdown', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownHome: [{
            type: HostListener,
            args: ['keydown.home', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownEnd: [{
            type: HostListener,
            args: ['keydown.end', ['$event']]
        }], showWeekNumbers: [{
            type: Input
        }], dates: [{
            type: ViewChildren,
            args: [IgxDayItemComponent, { read: IgxDayItemComponent }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,