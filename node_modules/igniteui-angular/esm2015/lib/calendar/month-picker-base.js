import { IgxCalendarBaseDirective } from './calendar-base';
import { Directive, ViewChildren, Input } from '@angular/core';
/**
 * Sets the calender view - days, months or years.
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["yearsBtn"];
export var CalendarView;
(function (CalendarView) {
    CalendarView[CalendarView["DEFAULT"] = 0] = "DEFAULT";
    CalendarView[CalendarView["YEAR"] = 1] = "YEAR";
    CalendarView[CalendarView["DECADE"] = 2] = "DECADE";
})(CalendarView || (CalendarView = {}));
export class IgxMonthPickerBaseDirective extends IgxCalendarBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Holds month view index we are operating on.
         */
        this.activeViewIdx = 0;
        /**
         * @hidden
         */
        this._activeView = CalendarView.DEFAULT;
    }
    get activeView() {
        return this._activeView;
    }
    /**
     * Sets the current active view.
     * ```html
     * <igx-calendar [activeView]="1" #calendar></igx-calendar>
     * ```
     * ```typescript
     * calendar.activeView = CalendarView.YEAR;
     * ```
     */
    set activeView(val) {
        this._activeView = val;
    }
    /**
     * @hidden
     */
    get isDefaultView() {
        return this._activeView === CalendarView.DEFAULT;
    }
    /**
     * @hidden
     */
    get isDecadeView() {
        return this._activeView === CalendarView.DECADE;
    }
    /**
     * @hidden
     */
    changeYear(event) {
        this.previousViewDate = this.viewDate;
        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);
        this.activeView = CalendarView.DEFAULT;
        requestAnimationFrame(() => {
            if (this.yearsBtns && this.yearsBtns.length) {
                this.yearsBtns.find((e, idx) => idx === this.activeViewIdx).nativeElement.focus();
            }
        });
    }
    /**
     * @hidden
     */
    activeViewDecade(activeViewIdx = 0) {
        this.activeView = CalendarView.DECADE;
        this.activeViewIdx = activeViewIdx;
    }
    /**
     * @hidden
     */
    activeViewDecadeKB(event, activeViewIdx = 0) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            this.activeViewDecade(activeViewIdx);
        }
    }
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     */
    formattedYear(value) {
        if (this.formatViews.year) {
            return this.formatterYear.format(value);
        }
        return `${value.getFullYear()}`;
    }
}
IgxMonthPickerBaseDirective.ɵfac = function IgxMonthPickerBaseDirective_Factory(t) { return ɵIgxMonthPickerBaseDirective_BaseFactory(t || IgxMonthPickerBaseDirective); };
IgxMonthPickerBaseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxMonthPickerBaseDirective, selectors: [["", "igxMonthPickerBase", ""]], viewQuery: function IgxMonthPickerBaseDirective_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearsBtns = _t);
    } }, inputs: { activeView: "activeView" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IgxMonthPickerBaseDirective.propDecorators = {
    yearsBtns: [{ type: ViewChildren, args: ['yearsBtn',] }],
    activeView: [{ type: Input }]
};
const ɵIgxMonthPickerBaseDirective_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxMonthPickerBaseDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxMonthPickerBaseDirective, [{
        type: Directive,
        args: [{
                selector: '[igxMonthPickerBase]'
            }]
    }], null, { activeView: [{
            type: Input
        }], yearsBtns: [{
            type: ViewChildren,
            args: ['yearsBtn']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcGlja2VyLWJhc2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9jYWxlbmRhci9tb250aC1waWNrZXItYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQWUsU0FBUyxFQUFFLFlBQVksRUFBeUIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25HO0FBQ0E7QUFDQSxHQUFHOzs7O0FBQ0gsTUFBTSxDQUFOLElBQVksWUFJWDtBQUpELFdBQVksWUFBWTtBQUN2QixJQUFHLHFEQUFPLENBQUE7QUFBQyxJQUNSLCtDQUFJLENBQUE7QUFBQyxJQUNMLG1EQUFNLENBQUE7QUFDVixDQUFDLEVBSlcsWUFBWSxLQUFaLFlBQVksUUFJdkI7QUFLRCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsd0JBQXdCO0FBQ3pFLElBSkE7QUFDRztBQUE2QixRQUk1QjtBQUNKO0FBQ0ksV0FBRztBQUNQLFFBQWMsa0JBQWEsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFtREk7QUFDSjtBQUNJLFdBQUc7QUFDUCxRQUFZLGdCQUFXLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUMvQyxJQThDQSxDQUFDO0FBQ0QsSUF6RkksSUFPVyxVQUFVO0FBQUssUUFDdEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQVcsVUFBVSxDQUFDLEdBQWlCO0FBQzNDLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQUksSUFBVyxhQUFhO0FBQUssUUFDekIsT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQyxPQUFPLENBQUM7QUFDekQsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQUksSUFBVyxZQUFZO0FBQUssUUFDeEIsT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQyxNQUFNLENBQUM7QUFDeEQsSUFBSSxDQUFDO0FBQ0wsSUFNSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsVUFBVSxDQUFDLEtBQVc7QUFDakMsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUM5QyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRyxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUMvQyxRQUNRLHFCQUFxQixDQUFDLEdBQUcsRUFBRTtBQUNuQyxZQUFZLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtBQUN6RCxnQkFBZ0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFhLEVBQUUsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN0SCxhQUFhO0FBQ2IsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBLE9BQU87QUFDUCxJQUFXLGdCQUFnQixDQUFDLGFBQWEsR0FBRyxDQUFDO0FBQUksUUFDekMsSUFBSSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQzlDLFFBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDM0MsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0EsT0FBTztBQUNQLElBQVcsa0JBQWtCLENBQUMsS0FBSyxFQUFFLGFBQWEsR0FBRyxDQUFDO0FBQ3RELFFBQVEsSUFBSSxLQUFLLENBQUMsR0FBRyxvQkFBZSxJQUFJLEtBQUssQ0FBQyxHQUFHLDhCQUFrQixJQUFJLEtBQUssQ0FBQyxHQUFHLHdCQUFlLEVBQUU7QUFDakcsWUFBWSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDbkMsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDakQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFXLGFBQWEsQ0FBQyxLQUFXO0FBQUksUUFDaEMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRTtBQUNuQyxZQUFZLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEQsU0FBUztBQUNULFFBQVEsT0FBTyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0FBQ3hDLElBQUksQ0FBQztBQUNMO3VEQTlHQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLHNCQUFzQixjQUNuQzs7Ozs7O2dHQUNJO0FBQUM7QUFBK0Msd0JBVWhELFlBQVksU0FBQyxVQUFVO0FBQ3ZCLHlCQVFBLEtBQUs7QUFDVDs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hDYWxlbmRhckJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2NhbGVuZGFyLWJhc2UnO1xuaW1wb3J0IHsgSG9zdEJpbmRpbmcsIERpcmVjdGl2ZSwgVmlld0NoaWxkcmVuLCBFbGVtZW50UmVmLCBRdWVyeUxpc3QsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLRVlTIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbi8qKlxuICogU2V0cyB0aGUgY2FsZW5kZXIgdmlldyAtIGRheXMsIG1vbnRocyBvciB5ZWFycy5cbiAqL1xuZXhwb3J0IGVudW0gQ2FsZW5kYXJWaWV3IHtcbiAgICBERUZBVUxULFxuICAgIFlFQVIsXG4gICAgREVDQURFXG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneE1vbnRoUGlja2VyQmFzZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneE1vbnRoUGlja2VyQmFzZURpcmVjdGl2ZSBleHRlbmRzIElneENhbGVuZGFyQmFzZURpcmVjdGl2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyBtb250aCB2aWV3IGluZGV4IHdlIGFyZSBvcGVyYXRpbmcgb24uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFjdGl2ZVZpZXdJZHggPSAwO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGRyZW4oJ3llYXJzQnRuJylcbiAgICBwdWJsaWMgeWVhcnNCdG5zOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBwcmV2aW91c1ZpZXdEYXRlOiBEYXRlO1xuXG5cbiAgICBASW5wdXQoKVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuYWN0aXZlVmlldyA9IGNhbGVuZGFyLmFjdGl2ZVZpZXc7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGdldCBhY3RpdmVWaWV3KCk6IENhbGVuZGFyVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FsZW5kYXIgW2FjdGl2ZVZpZXddPVwiMVwiICNjYWxlbmRhcj48L2lneC1jYWxlbmRhcj5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY2FsZW5kYXIuYWN0aXZlVmlldyA9IENhbGVuZGFyVmlldy5ZRUFSO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgYWN0aXZlVmlldyh2YWw6IENhbGVuZGFyVmlldykge1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGlzRGVmYXVsdFZpZXcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3ID09PSBDYWxlbmRhclZpZXcuREVGQVVMVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCBpc0RlY2FkZVZpZXcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3ID09PSBDYWxlbmRhclZpZXcuREVDQURFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFRkFVTFQ7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGNoYW5nZVllYXIoZXZlbnQ6IERhdGUpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c1ZpZXdEYXRlID0gdGhpcy52aWV3RGF0ZTtcbiAgICAgICAgdGhpcy52aWV3RGF0ZSA9IHRoaXMuY2FsZW5kYXJNb2RlbC5nZXRGaXJzdFZpZXdEYXRlKGV2ZW50LCAnbW9udGgnLCB0aGlzLmFjdGl2ZVZpZXdJZHgpO1xuICAgICAgICB0aGlzLmFjdGl2ZVZpZXcgPSBDYWxlbmRhclZpZXcuREVGQVVMVDtcblxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMueWVhcnNCdG5zICYmIHRoaXMueWVhcnNCdG5zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMueWVhcnNCdG5zLmZpbmQoKGU6IEVsZW1lbnRSZWYsIGlkeDogbnVtYmVyKSA9PiBpZHggPT09IHRoaXMuYWN0aXZlVmlld0lkeCkubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGFjdGl2ZVZpZXdEZWNhZGUoYWN0aXZlVmlld0lkeCA9IDApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFQ0FERTtcbiAgICAgICAgdGhpcy5hY3RpdmVWaWV3SWR4ID0gYWN0aXZlVmlld0lkeDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGFjdGl2ZVZpZXdEZWNhZGVLQihldmVudCwgYWN0aXZlVmlld0lkeCA9IDApIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gS0VZUy5TUEFDRSB8fCBldmVudC5rZXkgPT09IEtFWVMuU1BBQ0VfSUUgfHwgZXZlbnQua2V5ID09PSBLRVlTLkVOVEVSKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVWaWV3RGVjYWRlKGFjdGl2ZVZpZXdJZHgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbG9jYWxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB5ZWFyIGluIHRoZSB5ZWFyIHZpZXcgaWYgZW5hYmxlZCxcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgZGVmYXVsdCBgRGF0ZS5nZXRGdWxsWWVhcigpYCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZm9ybWF0dGVkWWVhcih2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdFZpZXdzLnllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlclllYXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dmFsdWUuZ2V0RnVsbFllYXIoKX1gO1xuICAgIH1cbn1cbiJdfQ==