import { Directive } from '@angular/core';
/**
 * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbFromTemplateDirective {
}
IgxThumbFromTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbFrom]'
            },] }
];
/**
 * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbToTemplateDirective {
}
IgxThumbToTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderThumbTo]'
            },] }
];
/**
 * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}
 *
 * @context {@link IgxTicksComponent.context}
 */
export class IgxTickLabelTemplateDirective {
}
IgxTickLabelTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxSliderTickLabel]'
            },] }
];
export var IgxSliderType;
(function (IgxSliderType) {
    /**
     * Slider with single thumb.
     */
    IgxSliderType[IgxSliderType["SLIDER"] = 0] = "SLIDER";
    /**
     *  Range slider with multiple thumbs, that can mark the range.
     */
    IgxSliderType[IgxSliderType["RANGE"] = 1] = "RANGE";
})(IgxSliderType || (IgxSliderType = {}));
export var SliderHandle;
(function (SliderHandle) {
    SliderHandle[SliderHandle["FROM"] = 0] = "FROM";
    SliderHandle[SliderHandle["TO"] = 1] = "TO";
})(SliderHandle || (SliderHandle = {}));
/**
 * Slider Tick labels Orientation
 */
export var TickLabelsOrientation;
(function (TickLabelsOrientation) {
    TickLabelsOrientation[TickLabelsOrientation["Horizontal"] = 0] = "Horizontal";
    TickLabelsOrientation[TickLabelsOrientation["TopToBottom"] = 1] = "TopToBottom";
    TickLabelsOrientation[TickLabelsOrientation["BottomToTop"] = 2] = "BottomToTop";
})(TickLabelsOrientation || (TickLabelsOrientation = {}));
/**
 * Slider Ticks orientation
 */
export var TicksOrientation;
(function (TicksOrientation) {
    TicksOrientation[TicksOrientation["Top"] = 0] = "Top";
    TicksOrientation[TicksOrientation["Bottom"] = 1] = "Bottom";
    TicksOrientation[TicksOrientation["Mirror"] = 2] = "Mirror";
})(TicksOrientation || (TicksOrientation = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zbGlkZXIvc2xpZGVyLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzFDOzs7Ozs7Ozs7O0dBVUc7QUFJSCxNQUFNLE9BQU8sNkJBQTZCOzs7WUFIekMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7YUFDbkM7O0FBR0Q7Ozs7Ozs7Ozs7R0FVRztBQUlILE1BQU0sT0FBTywyQkFBMkI7OztZQUh2QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjthQUNqQzs7QUFHRDs7OztHQUlHO0FBSUgsTUFBTSxPQUFPLDZCQUE2Qjs7O1lBSHpDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOztBQWFELE1BQU0sQ0FBTixJQUFZLGFBU1g7QUFURCxXQUFZLGFBQWE7SUFDckI7O09BRUc7SUFDSCxxREFBTSxDQUFBO0lBQ047O09BRUc7SUFDSCxtREFBSyxDQUFBO0FBQ1QsQ0FBQyxFQVRXLGFBQWEsS0FBYixhQUFhLFFBU3hCO0FBRUQsTUFBTSxDQUFOLElBQVksWUFHWDtBQUhELFdBQVksWUFBWTtJQUNwQiwrQ0FBSSxDQUFBO0lBQ0osMkNBQUUsQ0FBQTtBQUNOLENBQUMsRUFIVyxZQUFZLEtBQVosWUFBWSxRQUd2QjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVkscUJBSVg7QUFKRCxXQUFZLHFCQUFxQjtJQUM3Qiw2RUFBVSxDQUFBO0lBQ1YsK0VBQVcsQ0FBQTtJQUNYLCtFQUFXLENBQUE7QUFDZixDQUFDLEVBSlcscUJBQXFCLEtBQXJCLHFCQUFxQixRQUloQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksZ0JBSVg7QUFKRCxXQUFZLGdCQUFnQjtJQUN4QixxREFBRyxDQUFBO0lBQ0gsMkRBQU0sQ0FBQTtJQUNOLDJEQUFNLENBQUE7QUFDVixDQUFDLEVBSlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUkzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUJhc2VFdmVudEFyZ3MgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcblxuLyoqXG4gKiBUZW1wbGF0ZSBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgeW91IHRvIHNldCBhIGN1c3RvbSB0ZW1wbGF0ZSByZXByZXNlbnRpbmcgdGhlIGxvd2VyIGxhYmVsIHZhbHVlIG9mIHRoZSB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50fVxuICpcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtc2xpZGVyPlxuICogIDxuZy10ZW1wbGF0ZSBpZ3hTbGlkZXJUaHVtYkZyb20gbGV0LXZhbHVlIGxldC1sYWJlbHM+e3t2YWx1ZX19PC9uZy10ZW1wbGF0ZT5cbiAqIDwvaWd4LXNsaWRlcj5cbiAqIGBgYFxuICpcbiAqIEBjb250ZXh0IHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnQuY29udGV4dH1cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4U2xpZGVyVGh1bWJGcm9tXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGh1bWJGcm9tVGVtcGxhdGVEaXJlY3RpdmUge31cblxuLyoqXG4gKiBUZW1wbGF0ZSBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgeW91IHRvIHNldCBhIGN1c3RvbSB0ZW1wbGF0ZSByZXByZXNlbnRpbmcgdGhlIHVwcGVyIGxhYmVsIHZhbHVlIG9mIHRoZSB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50fVxuICpcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtc2xpZGVyPlxuICogIDxuZy10ZW1wbGF0ZSBpZ3hTbGlkZXJUaHVtYlRvIGxldC12YWx1ZSBsZXQtbGFiZWxzPnt7dmFsdWV9fTwvbmctdGVtcGxhdGU+XG4gKiA8L2lneC1zbGlkZXI+XG4gKiBgYGBcbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50LmNvbnRleHR9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFNsaWRlclRodW1iVG9dJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hUaHVtYlRvVGVtcGxhdGVEaXJlY3RpdmUge31cblxuLyoqXG4gKiBUZW1wbGF0ZSBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgeW91IHRvIHNldCBhIGN1c3RvbSB0ZW1wbGF0ZSwgcmVwcmVzZXRpbmcgcHJpbWFyeS9zZWNvbmRhcnkgdGljayBsYWJlbHMgb2YgdGhlIHtAbGluayBJZ3hTbGlkZXJDb21wb25lbnR9XG4gKlxuICogQGNvbnRleHQge0BsaW5rIElneFRpY2tzQ29tcG9uZW50LmNvbnRleHR9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFNsaWRlclRpY2tMYWJlbF0nXG59KVxuZXhwb3J0IGNsYXNzIElneFRpY2tMYWJlbFRlbXBsYXRlRGlyZWN0aXZlIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJhbmdlU2xpZGVyVmFsdWUge1xuICAgIGxvd2VyOiBudW1iZXI7XG4gICAgdXBwZXI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2xpZGVyVmFsdWVDaGFuZ2VFdmVudEFyZ3Mge1xuICAgIG9sZFZhbHVlOiBudW1iZXIgfCBJUmFuZ2VTbGlkZXJWYWx1ZTtcbiAgICB2YWx1ZTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWU7XG59XG5cbmV4cG9ydCBlbnVtIElneFNsaWRlclR5cGUge1xuICAgIC8qKlxuICAgICAqIFNsaWRlciB3aXRoIHNpbmdsZSB0aHVtYi5cbiAgICAgKi9cbiAgICBTTElERVIsXG4gICAgLyoqXG4gICAgICogIFJhbmdlIHNsaWRlciB3aXRoIG11bHRpcGxlIHRodW1icywgdGhhdCBjYW4gbWFyayB0aGUgcmFuZ2UuXG4gICAgICovXG4gICAgUkFOR0Vcbn1cblxuZXhwb3J0IGVudW0gU2xpZGVySGFuZGxlIHtcbiAgICBGUk9NLFxuICAgIFRPXG59XG5cbi8qKlxuICogU2xpZGVyIFRpY2sgbGFiZWxzIE9yaWVudGF0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIFRpY2tMYWJlbHNPcmllbnRhdGlvbiB7XG4gICAgSG9yaXpvbnRhbCxcbiAgICBUb3BUb0JvdHRvbSxcbiAgICBCb3R0b21Ub1RvcFxufVxuXG4vKipcbiAqIFNsaWRlciBUaWNrcyBvcmllbnRhdGlvblxuICovXG5leHBvcnQgZW51bSBUaWNrc09yaWVudGF0aW9uIHtcbiAgICBUb3AsXG4gICAgQm90dG9tLFxuICAgIE1pcnJvclxufVxuIl19