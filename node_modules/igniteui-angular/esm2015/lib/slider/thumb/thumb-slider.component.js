import { Component, Input, HostListener, ElementRef, HostBinding, Output, EventEmitter } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { SliderHandle } from '../slider.common';
import { Subject } from 'rxjs';
import { IgxDirectionality } from '../../services/direction/directionality';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/direction/directionality';
export class IgxSliderThumbComponent {
    constructor(_elementRef, _dir) {
        this._elementRef = _elementRef;
        this._dir = _dir;
        this._isActive = false;
        this._isPressed = false;
        this._destroy$ = new Subject();
        this.isActive = false;
        this.onThumbValueChange = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onHoverChange = new EventEmitter();
        this.tabindex = 0;
        this.zIndex = 0;
    }
    get thumbPositionX() {
        const thumbBounderies = this.nativeElement.getBoundingClientRect();
        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;
        return thumbBounderies.left + thumbCenter;
    }
    get thumbFromClass() {
        return this.type === SliderHandle.FROM;
    }
    get thumbToClass() {
        return this.type === SliderHandle.TO;
    }
    get thumbFromActiveClass() {
        return this.type === SliderHandle.FROM && this._isActive;
    }
    get thumbToActiveClass() {
        return this.type === SliderHandle.TO && this._isActive;
    }
    get thumbPressedClass() {
        return this.isActive && this._isPressed;
    }
    get nativeElement() {
        return this._elementRef.nativeElement;
    }
    get destroy() {
        return this._destroy$;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.onPan
            .pipe(takeUntil(this._destroy$))
            .subscribe(mouseX => this.updateThumbValue(mouseX));
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    onPinterEnter() {
        this.onHoverChange.emit(true);
    }
    onPointerLeave() {
        this.onHoverChange.emit(false);
    }
    onKeyDown(event) {
        if (this.disabled) {
            return;
        }
        let increment = 0;
        if (event.key.endsWith('Left')) {
            increment = this.step * -1;
        }
        else if (event.key.endsWith('Right')) {
            increment = this.step;
        }
        else {
            return;
        }
        this.onChange.emit();
        this.onThumbValueChange.emit(increment);
    }
    onBlur() {
        this.isActive = false;
        this.zIndex = 0;
    }
    onFocusListener() {
        this.isActive = true;
        this.zIndex = 1;
    }
    /**
     * Show thumb label and ripple.
     */
    showThumbIndicators() {
        this.toggleThumbIndicators(true);
    }
    /**
     * Hide thumb label and ripple.
     */
    hideThumbIndicators() {
        this.toggleThumbIndicators(false);
    }
    updateThumbValue(mouseX) {
        const updateValue = this.calculateTrackUpdate(mouseX);
        if (this.isActive && updateValue !== 0) {
            this.onThumbValueChange.emit(updateValue);
        }
    }
    calculateTrackUpdate(mouseX) {
        const scaleX = this._dir.rtl ? this.thumbPositionX - mouseX : mouseX - this.thumbPositionX;
        const stepDistanceCenter = this.stepDistance / 2;
        // If the thumb scale range (slider update) is less thàn a half step,
        // the position stays the same.
        const scaleXPositive = Math.abs(scaleX);
        if (scaleXPositive < stepDistanceCenter) {
            return 0;
        }
        return this.stepToProceed(scaleX, this.stepDistance);
    }
    stepToProceed(scaleX, stepDist) {
        return Math.round(scaleX / stepDist) * this.step;
    }
    toggleThumbIndicators(visible) {
        this._isPressed = visible;
        if (this.continuous || this.deactiveState) {
            this._isActive = false;
        }
        else {
            this._isActive = visible;
        }
    }
}
IgxSliderThumbComponent.ɵfac = function IgxSliderThumbComponent_Factory(t) { return new (t || IgxSliderThumbComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxDirectionality)); };
IgxSliderThumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxSliderThumbComponent, selectors: [["igx-thumb"]], hostVars: 12, hostBindings: function IgxSliderThumbComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("pointerenter", function IgxSliderThumbComponent_pointerenter_HostBindingHandler() { return ctx.onPinterEnter(); })("pointerleave", function IgxSliderThumbComponent_pointerleave_HostBindingHandler() { return ctx.onPointerLeave(); })("keydown", function IgxSliderThumbComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })("blur", function IgxSliderThumbComponent_blur_HostBindingHandler() { return ctx.onBlur(); })("focus", function IgxSliderThumbComponent_focus_HostBindingHandler() { return ctx.onFocusListener(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabindex)("z-index", ctx.zIndex);
        ɵngcc0.ɵɵclassProp("igx-slider__thumb-from", ctx.thumbFromClass)("igx-slider__thumb-to", ctx.thumbToClass)("igx-slider__thumb-from--active", ctx.thumbFromActiveClass)("igx-slider__thumb-to--active", ctx.thumbToActiveClass)("igx-slider__thumb--pressed", ctx.thumbPressedClass);
    } }, inputs: { value: "value", continuous: "continuous", thumbLabelVisibilityDuration: "thumbLabelVisibilityDuration", disabled: "disabled", onPan: "onPan", stepDistance: "stepDistance", step: "step", templateRef: "templateRef", context: "context", type: "type", deactiveState: "deactiveState" }, outputs: { onThumbValueChange: "onThumbValueChange", onChange: "onChange", onHoverChange: "onHoverChange" }, decls: 1, vars: 0, consts: [[1, "dot"]], template: function IgxSliderThumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } }, encapsulation: 2 });
IgxSliderThumbComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IgxDirectionality }
];
IgxSliderThumbComponent.propDecorators = {
    value: [{ type: Input }],
    continuous: [{ type: Input }],
    thumbLabelVisibilityDuration: [{ type: Input }],
    disabled: [{ type: Input }],
    onPan: [{ type: Input }],
    stepDistance: [{ type: Input }],
    step: [{ type: Input }],
    templateRef: [{ type: Input }],
    context: [{ type: Input }],
    type: [{ type: Input }],
    deactiveState: [{ type: Input }],
    onThumbValueChange: [{ type: Output }],
    onChange: [{ type: Output }],
    onHoverChange: [{ type: Output }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    zIndex: [{ type: HostBinding, args: ['attr.z-index',] }],
    thumbFromClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from',] }],
    thumbToClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to',] }],
    thumbFromActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from--active',] }],
    thumbToActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to--active',] }],
    thumbPressedClass: [{ type: HostBinding, args: ['class.igx-slider__thumb--pressed',] }],
    onPinterEnter: [{ type: HostListener, args: ['pointerenter',] }],
    onPointerLeave: [{ type: HostListener, args: ['pointerleave',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['blur',] }],
    onFocusListener: [{ type: HostListener, args: ['focus',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSliderThumbComponent, [{
        type: Component,
        args: [{
                selector: 'igx-thumb',
                template: "<div class=\"dot\"></div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.IgxDirectionality }]; }, { onThumbValueChange: [{
            type: Output
        }], onChange: [{
            type: Output
        }], onHoverChange: [{
            type: Output
        }], tabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], zIndex: [{
            type: HostBinding,
            args: ['attr.z-index']
        }], thumbFromClass: [{
            type: HostBinding,
            args: ['class.igx-slider__thumb-from']
        }], thumbToClass: [{
            type: HostBinding,
            args: ['class.igx-slider__thumb-to']
        }], thumbFromActiveClass: [{
            type: HostBinding,
            args: ['class.igx-slider__thumb-from--active']
        }], thumbToActiveClass: [{
            type: HostBinding,
            args: ['class.igx-slider__thumb-to--active']
        }], thumbPressedClass: [{
            type: HostBinding,
            args: ['class.igx-slider__thumb--pressed']
        }], onPinterEnter: [{
            type: HostListener,
            args: ['pointerenter']
        }], onPointerLeave: [{
            type: HostListener,
            args: ['pointerleave']
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onBlur: [{
            type: HostListener,
            args: ['blur']
        }], onFocusListener: [{
            type: HostListener,
            args: ['focus']
        }], value: [{
            type: Input
        }], continuous: [{
            type: Input
        }], thumbLabelVisibilityDuration: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onPan: [{
            type: Input
        }], stepDistance: [{
            type: Input
        }], step: [{
            type: Input
        }], templateRef: [{
            type: Input
        }], context: [{
            type: Input
        }], type: [{
            type: Input
        }], deactiveState: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,