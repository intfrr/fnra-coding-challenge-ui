import { Directive, TemplateRef } from '@angular/core';
/**
 * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.
 *
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export class IgxDatePickerTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxDatePickerTemplateDirective.ɵfac = function IgxDatePickerTemplateDirective_Factory(t) { return new (t || IgxDatePickerTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxDatePickerTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxDatePickerTemplateDirective, selectors: [["", "igxDatePickerTemplate", ""]] });
IgxDatePickerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDatePickerTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxDatePickerTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.
 */
export class IgxDatePickerActionsDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxDatePickerActionsDirective.ɵfac = function IgxDatePickerActionsDirective_Factory(t) { return new (t || IgxDatePickerActionsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxDatePickerActionsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxDatePickerActionsDirective, selectors: [["", "igxDatePickerActions", ""]] });
IgxDatePickerActionsDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDatePickerActionsDirective, [{
        type: Directive,
        args: [{
                selector: '[igxDatePickerActions]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuZGlyZWN0aXZlcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLmRpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUNILE1BQU0sT0FBTyw4QkFBOEI7QUFDM0MsSUFBSSxZQUFtQixRQUEwQjtBQUFJLFFBQTlCLGFBQVEsR0FBUixRQUFRLENBQWtCO0FBQUMsSUFBRyxDQUFDO0FBQ3REOzBEQVhDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUseUJBQXlCLGNBQ3RDO3lKQUdEO0FBQUM7QUFBd0QsWUFQckMsV0FBVztBQUFHOzs7Ozs7NEVBQUU7QUFlcEM7QUFDQTtBQUNBLEdBQUc7QUFJSCxNQUFNLE9BQU8sNkJBQTZCO0FBQzFDLElBQUksWUFBbUIsUUFBMEI7QUFBSSxRQUE5QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtBQUFDLElBQUcsQ0FBQztBQUN0RDt5REFMQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLHdCQUF3QixjQUNyQztzSkFDSTtBQUFDO0FBQ1UsWUF0QkksV0FBVztBQUFHOzs7Ozs7NEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGF0ZVBpY2tlclRlbXBsYXRlXSdcbn0pXG5cbi8qKlxuICogSWd4RGF0ZVBpY2tlclRlbXBsYXRlRGlyZWN0aXZlIGNhbiBiZSB1c2VkIHRvIHJlLXRlbXBsYXRlIHRoZSBkYXRlLXBpY2tlciBpbnB1dC1ncm91cC5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBJZ3hEYXRlUGlja2VyVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbi8qKlxuICogSWd4RGF0ZVBpY2tlckFjdGlvbnNEaXJlY3RpdmUgY2FuIGJlIHVzZWQgdG8gcmUtdGVtcGxhdGUgdGhlIGRyb3Bkb3duL2RpYWxvZyBhY3Rpb24gYnV0dG9ucy5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGF0ZVBpY2tlckFjdGlvbnNdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hEYXRlUGlja2VyQWN0aW9uc0RpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cbiJdfQ==