import { __decorate } from "tslib";
import { CommonModule, formatDate } from '@angular/common';
import { Component, ContentChild, EventEmitter, HostBinding, Input, NgModule, Output, ViewChild, ElementRef, TemplateRef, Inject, ChangeDetectorRef, HostListener, NgModuleRef, Injector, ContentChildren, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl, NG_VALIDATORS } from '@angular/forms';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarModule, IgxCalendarSubheaderTemplateDirective, WEEKDAYS, isDateInRanges } from '../calendar/public_api';
import { IgxIconModule } from '../icon/public_api';
import { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent, IgxInputState, IgxLabelDirective } from '../input-group/public_api';
import { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';
import { filter, takeUntil, throttle } from 'rxjs/operators';
import { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';
import { IgxOverlayService, AbsoluteScrollStrategy, AutoPositionStrategy } from '../services/public_api';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxMaskModule } from '../directives/mask/mask.directive';
import { DatePickerUtil } from './date-picker.utils';
import { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';
import { isIE, isEqual, mkenum } from '../core/utils';
import { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';
import { IgxCalendarContainerComponent } from './calendar-container.component';
import { InteractionMode } from '../core/enums';
import { fadeIn, fadeOut } from '../animations/fade';
import { DeprecateProperty } from '../core/deprecateDecorators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../input-group/input-group.component';
import * as ɵngcc3 from '../directives/prefix/prefix.directive';
import * as ɵngcc4 from '../icon/icon.component';
import * as ɵngcc5 from '../directives/input/input.directive';
import * as ɵngcc6 from '../directives/label/label.directive';
import * as ɵngcc7 from '../directives/mask/mask.directive';
import * as ɵngcc8 from '../directives/text-selection/text-selection.directive';
import * as ɵngcc9 from '../directives/suffix/suffix.directive';
import * as ɵngcc10 from '../services/public_api';

const _c0 = ["readOnlyDatePickerTemplate"];
const _c1 = ["editableDatePickerTemplate"];
function IgxDatePickerComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
function IgxDatePickerComponent_ng_template_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 8);
} }
function IgxDatePickerComponent_ng_template_2_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r8.label);
} }
function IgxDatePickerComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 4);
    ɵngcc0.ɵɵlistener("click", function IgxDatePickerComponent_ng_template_2_Template_igx_input_group_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.openDialog(); });
    ɵngcc0.ɵɵtemplate(1, IgxDatePickerComponent_ng_template_2_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementStart(2, "igx-prefix");
    ɵngcc0.ɵɵelementStart(3, "igx-icon");
    ɵngcc0.ɵɵtext(4, "today");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, IgxDatePickerComponent_ng_template_2_label_5_Template, 2, 1, "label", 6);
    ɵngcc0.ɵɵelementStart(6, "input", 7);
    ɵngcc0.ɵɵlistener("blur", function IgxDatePickerComponent_ng_template_2_Template_input_blur_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onBlur($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.labelVisibility && !ctx_r3._labelDirectiveUserTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r3.displayData || "")("disabled", ctx_r3.disabled)("tabindex", ctx_r3.editorTabIndex);
} }
function IgxDatePickerComponent_ng_template_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 8);
} }
function IgxDatePickerComponent_ng_template_4_label_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r14.label);
} }
function IgxDatePickerComponent_ng_template_4_igx_suffix_8_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-suffix", 4);
    ɵngcc0.ɵɵlistener("click", function IgxDatePickerComponent_ng_template_4_igx_suffix_8_Template_igx_suffix_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.clear(); });
    ɵngcc0.ɵɵelementStart(1, "igx-icon");
    ɵngcc0.ɵɵtext(2, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function IgxDatePickerComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", null, 10);
    ɵngcc0.ɵɵtemplate(2, IgxDatePickerComponent_ng_template_4_ng_container_2_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵelementStart(3, "igx-prefix", 4);
    ɵngcc0.ɵɵlistener("click", function IgxDatePickerComponent_ng_template_4_Template_igx_prefix_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onOpenClick($event); });
    ɵngcc0.ɵɵelementStart(4, "igx-icon");
    ɵngcc0.ɵɵtext(5, "today");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, IgxDatePickerComponent_ng_template_4_label_6_Template, 2, 1, "label", 6);
    ɵngcc0.ɵɵelementStart(7, "input", 11);
    ɵngcc0.ɵɵlistener("blur", function IgxDatePickerComponent_ng_template_4_Template_input_blur_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onBlur($event); })("wheel", function IgxDatePickerComponent_ng_template_4_Template_input_wheel_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onWheel($event); })("input", function IgxDatePickerComponent_ng_template_4_Template_input_input_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onInput($event); })("focus", function IgxDatePickerComponent_ng_template_4_Template_input_focus_7_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.onFocus(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, IgxDatePickerComponent_ng_template_4_igx_suffix_8_Template, 3, 0, "igx-suffix", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.labelVisibility && !ctx_r5._labelDirectiveUserTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r5.transformedDate)("igxMask", ctx_r5.inputMask)("placeholder", ctx_r5.mask)("igxTextSelection", true)("disabled", ctx_r5.disabled)("displayValuePipe", ctx_r5.displayValuePipe)("focusedValuePipe", ctx_r5.inputValuePipe)("tabindex", ctx_r5.editorTabIndex);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isEmpty);
} }
function IgxDatePickerComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c2 = [[["", "igxLabel", ""]]];
const _c3 = ["[igxLabel]"];
let NEXT_ID = 0;
/**
 * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.
 * 'https://angular.io/api/common/DatePipe'
 * 'shortDate': equivalent to 'M/d/yy' (6/15/15).
 * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).
 * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).
 * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).
 */
export const PredefinedFormatOptions = mkenum({
    ShortDate: 'shortDate',
    MediumDate: 'mediumDate',
    LongDate: 'longDate',
    FullDate: 'fullDate'
});
const noop = () => { };
const ɵ0 = noop;
/**
 * Date Picker displays a popup calendar that lets users select a single date.
 * @igxModule IgxDatePickerModule
 * @igxTheme igx-calendar-theme, igx-icon-theme
 * @igxGroup Scheduling
 * @igxKeywords  datepicker, calendar, schedule, date
 * @example
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
export class IgxDatePickerComponent {
    constructor(_overlayService, element, _cdr, _moduleRef, _injector, _renderer) {
        this._overlayService = _overlayService;
        this.element = element;
        this._cdr = _cdr;
        this._moduleRef = _moduleRef;
        this._injector = _injector;
        this._renderer = _renderer;
        /**
         * Gets/Sets the `IgxDatePickerComponent` label.
         * @remarks
         * The default label is 'Date'.
         * @example
         * ```html
         * <igx-date-picker [label]="Calendar"></igx-date-picker>
         * ```
         * @deprecated Use igxLabel inside the date picker to change the label:
         * ````html
         * <igx-date-picker>
         *      <label igxLabel>Custom label</label>
         * </igx-date-picker>
         * ````
         * to set a custom label.
         */
        this.label = 'Date';
        /**
         * Gets/Sets the `IgxDatePickerComponent` label visibility.
         * @remarks
         * By default the visibility is set to true.
         * @example
         * <igx-date-picker [labelVisibility]="false"></igx-date-picker>
         */
        this.labelVisibility = true;
        /**
         * Gets/Sets on which day the week starts.
         * @example
         * ```html
         * <igx-date-picker [weekStart]="WEEKDAYS.FRIDAY" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * Gets/Sets the number of month views displayed.
         * @remarks
         * Default value is `1`.
         * @example
         * ```html
         * <igx-date-picker [monthsViewNumber]="2"></igx-date-picker>
         * ```
         * @example
         * ```typescript
         * let monthViewsDisplayed = this.datePicker.monthsViewNumber;
         * ```
         */
        this.monthsViewNumber = 1;
        /**
         * Gets/Sets the value of `id` attribute.
         * @remarks If not provided it will be automatically generated.
         * @example
         * ```html
         * <igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.id = `igx-date-picker-${NEXT_ID++}`;
        /**
         * Gets/Sets the orientation of the `IgxDatePickerComponent` header.
         *  @example
         * ```html
         * <igx-date-picker [vertical]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.vertical = false;
        /**
         * Gets/Sets the interaction mode - dialog or drop down.
         *  @example
         * ```html
         * <igx-date-picker mode="dropdown"></igx-date-picker>
         * ```
         */
        this.mode = InteractionMode.Dialog;
        /**
         * Gets/Sets whether date should spin continuously or stop when min/max is reached.
         *  @example
         * ```html
         * <igx-date-picker [isSpinLoop]="false"></igx-date-picker>
         * ```
         */
        this.isSpinLoop = true;
        /**
         * Emitted when the `IgxDatePickerComponent` calendar is opened.
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted after the `IgxDatePickerComponent` is closed.
         */
        this.onClosed = new EventEmitter();
        /**
         * Emitted when the `IgxDatePickerComponent` is being closed.
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted when selection is made in the calendar.
         *  @example
         * ```html
         * <igx-date-picker (onSelection)="selection($event)"></igx-date-picker>
         * ```
         */
        this.onSelection = new EventEmitter();
        /**
         * Emitted when date picker value is changed.
         * @example
         * ```html
         * <igx-date-picker (valueChange)="valueChanged($event)" mode="dropdown"></igx-date-picker>
         * ```
         */
        this.valueChange = new EventEmitter();
        /**
         * Emitted when the user types/spins to a disabled date in the date-picker editor.
         *  @example
         * ```html
         * <igx-date-picker (onDisabledDate)="onDisabledDate($event)"></igx-date-picker>
         * ```
         */
        this.onDisabledDate = new EventEmitter();
        /**
         * Emitted when the user types/spins invalid date in the date-picker editor.
         *  @example
         * ```html
         * <igx-date-picker (onValidationFailed)="onValidationFailed($event)"></igx-date-picker>
         * ```
         */
        this.onValidationFailed = new EventEmitter();
        /** @hidden @internal */
        this.hasHeader = true;
        /** @hidden @internal */
        this.collapsed = true;
        /** @hidden @internal */
        this.displayValuePipe = new DatePickerDisplayValuePipe(this);
        /** @hidden @internal */
        this.inputValuePipe = new DatePickerInputValuePipe(this);
        /** @hidden @internal */
        this.dateFormatParts = [];
        /** @hidden @internal */
        this.isEmpty = true;
        /** @hidden @internal */
        this.invalidDate = '';
        this.spinDelta = 1;
        this.defaultLocale = 'en';
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        this._destroy$ = new Subject();
        this._disabledDates = null;
        this._specialDates = null;
        this._onOpen = new EventEmitter();
        this._onClose = new EventEmitter();
        this._ngControl = null;
        //#region ControlValueAccessor
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
        this._onValidatorChange = () => { };
    }
    /**
     * Gets the format options of the `IgxDatePickerComponent`.
     * @example
     * ```typescript
     * let formatOptions = this.datePicker.formatOptions;
     * ```
     */
    get formatOptions() {
        return this._formatOptions;
    }
    /**
     * Sets the format options of the `IgxDatePickerComponent`.
     * @example
     * ```typescript
     * this.datePicker.formatOptions = {  day: "numeric",  month: "long", weekday: "long", year: "numeric"};
     * ```
     */
    set formatOptions(formatOptions) {
        this._formatOptions = Object.assign(this._formatOptions, formatOptions);
    }
    /**
     * Gets/Sets the date display format of the `IgxDatePickerComponent` in dropdown mode.
     * @example
     * ```typescript
     * let format = this.datePicker.format;
     * this.datePicker.format = 'yyyy-M-d';
     * ```
     */
    get format() {
        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;
    }
    set format(format) {
        this._format = format;
    }
    /**
     * Gets/Sets the format views of the `IgxDatePickerComponent`.
     * @example
     * ```typescript
     * let formatViews = this.datePicker.formatViews;
     *  this.datePicker.formatViews = {day:false, month: false, year:false};
     * ```
     */
    get formatViews() {
        return this._formatViews;
    }
    set formatViews(formatViews) {
        this._formatViews = Object.assign(this._formatViews, formatViews);
    }
    /**
     * Gets/Sets the disabled dates descriptors.
     * @example
     * ```typescript
     * let disabledDates = this.datepicker.disabledDates;
     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];
     * ```
     */
    get disabledDates() {
        return this._disabledDates;
    }
    set disabledDates(value) {
        this._disabledDates = value;
        this._onValidatorChange();
    }
    /**
     * Gets/Sets the special dates descriptors.
     * @example
     * ```typescript
     * let specialDates = this.datepicker.specialDates;
     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];
     * ```
     */
    get specialDates() {
        return this._specialDates;
    }
    set specialDates(value) {
        this._specialDates = value;
    }
    /**
     * Gets/Sets the modal overlay settings.
     */
    get modalOverlaySettings() {
        return this._modalOverlay;
    }
    set modalOverlaySettings(value) {
        this._modalOverlay = value;
    }
    /**
     * Gets/Sets the drop-down overlay settings.
     */
    get dropDownOverlaySettings() {
        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;
    }
    set dropDownOverlaySettings(value) {
        this._dropDownOverlaySettings = value;
    }
    /**
     * Gets the formatted date when `IgxDatePickerComponent` is in dialog mode.
     *  @example
     * ```typescript
     * let selectedDate = this.datePicker.displayData;
     * ```
     */
    get displayData() {
        if (this.value) {
            return this._customFormatChecker(this.formatter, this.value);
        }
        return '';
    }
    /** @hidden @internal */
    get transformedDate() {
        if (this._value) {
            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);
            this.isEmpty = false;
        }
        else {
            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';
        }
        return this._transformedDate;
    }
    /** @hidden @internal */
    set transformedDate(value) {
        this._transformedDate = value;
    }
    /**
     * Gets the input group template.
     * @example
     * ```typescript
     * let template = this.template();
     * ```
     */
    get template() {
        if (this.datePickerTemplateDirective) {
            return this.datePickerTemplateDirective.template;
        }
        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;
    }
    /**
     * Gets the context passed to the input group template.
     */
    get context() {
        return {
            disabled: this.disabled,
            disabledDates: this.disabledDates,
            displayData: this.displayData,
            format: this.format,
            isSpinLoop: this.isSpinLoop,
            label: this.label,
            labelVisibility: this.labelVisibility,
            locale: this.locale,
            mask: this.mask,
            mode: this.mode,
            specialDates: this.specialDates,
            value: this.value,
            openDialog: () => this.openDialog()
        };
    }
    get required() {
        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this._ngControl.control.validator({});
            return error && error.required;
        }
        return false;
    }
    /**
     * Gets/Sets the selected date.
     *  @example
     * ```html
     * <igx-date-picker [value]="date"></igx-date-picker>
     * ```
     */
    get value() {
        return this._value;
    }
    set value(date) {
        this._value = date;
        this._onChangeCallback(date);
    }
    /** @hidden @internal */
    writeValue(value) {
        this._value = value;
        // TODO: do we need next call
        this._cdr.markForCheck();
    }
    /** @hidden @internal */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /** @hidden @internal */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
    /** @hidden @internal */
    setDisabledState(isDisabled) { this.disabled = isDisabled; }
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this._onValidatorChange = fn;
    }
    /** @hidden @internal */
    validate() {
        if (!!this.value && this.disabledDates && isDateInRanges(this.value, this.disabledDates)) {
            return { dateIsDisabled: true };
        }
        return null;
    }
    //#endregion
    /**
     * @hidden
     */
    onSpaceClick(event) {
        this.openDialog();
        event.preventDefault();
    }
    /** @hidden */
    getEditElement() {
        const inputDirectiveElementRef = this._inputElementRef || this._inputUserTemplateElementRef;
        return (inputDirectiveElementRef) ? inputDirectiveElementRef.nativeElement : null;
    }
    /** @hidden @internal */
    get inputGroupElement() {
        var _a;
        return (_a = this.inputGroup) === null || _a === void 0 ? void 0 : _a.element.nativeElement;
    }
    /** @hidden @internal */
    get inputGroup() {
        return this._inputGroup || this._inputGroupUserTemplate || null;
    }
    /** @hidden @internal */
    get inputDirective() {
        return this._inputDirective || this._inputDirectiveUserTemplates.first || null;
    }
    /** @hidden @internal */
    get labelDirective() {
        return this._labelDirective || this._labelDirectiveUserTemplate || null;
    }
    /** @hidden @internal */
    ngOnInit() {
        this._positionSettings = {
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        this._defaultDropDownOverlaySettings = {
            target: this.inputGroupElement,
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy(this._positionSettings),
            outlet: this.outlet
        };
        this._modalOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true,
            closeOnEscape: true,
            outlet: this.outlet
        };
        this._overlayService.onOpening.pipe(filter((overlay) => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe((eventArgs) => {
            this._onOpening(eventArgs);
        });
        this._overlayService.onOpened.pipe(filter((overlay) => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe(() => {
            this._onOpened();
        });
        this._overlayService.onClosed.pipe(filter(overlay => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe(() => {
            this._onClosed();
        });
        this._overlayService.onClosing.pipe(filter(overlay => overlay.id === this._componentID), takeUntil(this._destroy$)).subscribe((event) => {
            this.onClosing.emit(event);
            // If canceled in a user onClosing handler
            if (event.cancel) {
                return;
            }
            // Do not focus the input if clicking outside in dropdown mode
            const input = this.getEditElement();
            if (input && !(event.event && this.mode === InteractionMode.DropDown)) {
                input.focus();
            }
            else {
                // outside click
                this._updateValidityOnBlur();
            }
        });
        if (this.mode === InteractionMode.DropDown) {
            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);
            if (this.mask === undefined) {
                this.mask = DatePickerUtil.getMask(this.dateFormatParts);
            }
            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);
        }
        this._ngControl = this._injector.get(NgControl, null);
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {
            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(throttle(() => interval(0, animationFrameScheduler)), takeUntil(this._destroy$)).subscribe((res) => this.onKeyDown(res));
        }
        if (this._ngControl) {
            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
        this._inputDirectiveUserTemplates.changes.subscribe(() => {
            this.attachTemplateBlur();
        });
        this.attachTemplateBlur();
    }
    attachTemplateBlur() {
        if (this._templateInputBlur$) {
            this._templateInputBlur$.unsubscribe();
        }
        if (this._inputDirectiveUserTemplates.first) {
            const directive = this._inputDirectiveUserTemplates.first;
            this._templateInputBlur$ = fromEvent(directive.nativeElement, 'blur').pipe(takeUntil(this._destroy$)).subscribe((res) => {
                this.rawDateString = res.target.value;
                this.onBlur(res, false);
            });
            // TODO: Refactor custom template handling.
            // Revise blur handling when custom template is passed
        }
    }
    ngAfterViewChecked() {
        // If one sets mode at run time this forces initialization of new igxInputGroup
        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of
        // the new directive isRequired of the igxInputGroup is set again. However
        // ngAfterViewInit of date picker is not called again and we may finish with wrong
        // isRequired in igxInputGroup. This is why we should set it her, only when needed
        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {
            this.inputGroup.isRequired = this.required;
            this._cdr.detectChanges();
        }
        // TODO: persist validation state when dynamically changing 'dropdown' to 'dialog' ot vice versa.
        // For reference -> it is currently persisted if a user template is passed (as template is not recreated)
        if (this.labelDirective) {
            this._renderer.setAttribute(this.inputDirective.nativeElement, 'aria-labelledby', this.labelDirective.id);
        }
    }
    onStatusChanged() {
        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&
            (this.inputDirective && this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {
            if (this.inputGroup.isFocused) {
                this.inputDirective.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
            }
            else {
                this.inputDirective.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
            }
        }
        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {
            this.inputGroup.isRequired = this.required;
        }
    }
    /** @hidden @internal */
    ngOnDestroy() {
        if (this._componentID) {
            this._overlayService.hide(this._componentID);
        }
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    /**
     * Selects today's date from calendar.
     *  @remarks
     * Changes the input field value, @calendar.viewDate and @calendar.value.
     *  @example
     * ```typescript
     * this.datePicker.triggerTodaySelection();
     * ```
     */
    triggerTodaySelection() {
        const today = new Date(Date.now());
        this.handleSelection(today);
    }
    /**
     * Change the calendar selection.
     * @remarks
     * Calling this method will emit the @calendar.onSelection event,
     * which will fire @handleSelection method.
     * @example
     * ```typescript
     * this.datePicker.selectDate(this.date);
     * ```
     * @param date passed date that has to be set to the calendar.
     */
    selectDate(date) {
        const oldValue = this.value;
        this.value = date;
        this.emitValueChangeEvent(oldValue, this.value);
        this.onSelection.emit(date);
    }
    /**
     * Deselects the calendar date.
     * @example
     * ```typescript
     * this.datePicker.deselectDate();
     * ```
     */
    deselectDate() {
        const oldValue = this.value;
        this.value = null;
        this.emitValueChangeEvent(oldValue, this.value);
        if (this.calendar) {
            this.calendar.deselectDate();
        }
    }
    /**
     * Opens the date picker drop down or dialog.
     * @param target HTMLElement - the target element to use for positioning the drop down container according to
     * @example
     * ```typescript
     * this.datePicker.openDialog(target);
     * ```
     */
    openDialog() {
        if (!this.collapsed || this.disabled) {
            return;
        }
        switch (this.mode) {
            case InteractionMode.Dialog: {
                this.hasHeader = true;
                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;
                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);
                this._overlayService.show(this._componentID);
                break;
            }
            case InteractionMode.DropDown: {
                this.hasHeader = false;
                const target = this.inputGroupElement;
                if (target) {
                    this.dropDownOverlaySettings.target = target;
                }
                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, this.dropDownOverlaySettings, this._moduleRef);
                this._overlayService.show(this._componentID);
                break;
            }
        }
    }
    /**
     * Close the calendar.
     *
     * @hidden @internal
     */
    closeCalendar() {
        this._overlayService.hide(this._componentID);
    }
    /**
     * Clear the input field, date picker value and calendar selection.
     *
     * @hidden @internal
     */
    clear() {
        if (!this.disabled) {
            this.isEmpty = true;
            this.invalidDate = '';
            this.deselectDate();
            this._setCursorPosition(0);
        }
    }
    /**
     * Evaluates when @calendar.onSelection event was fired
     * and update the input value.
     *
     * @param event selected value from calendar.
     *
     * @hidden @internal
     */
    handleSelection(date) {
        if (this.value) {
            date.setHours(this.value.getHours());
            date.setMinutes(this.value.getMinutes());
            date.setSeconds(this.value.getSeconds());
            date.setMilliseconds(this.value.getMilliseconds());
        }
        const oldValue = this.value;
        this.value = date;
        this.emitValueChangeEvent(oldValue, this.value);
        this.calendar.viewDate = date;
        this.closeCalendar();
        this.onSelection.emit(date);
    }
    /** @hidden @internal */
    onOpenClick(event) {
        event.stopPropagation();
        this.openDialog();
    }
    /** @hidden @internal */
    onBlur(event, calcDate = true) {
        this._isInEditMode = false;
        if (this.mode === InteractionMode.DropDown && calcDate) {
            this.calculateDate(event.target.value, event.type);
        }
        if (this.collapsed) {
            this._updateValidityOnBlur();
        }
    }
    /** @hidden @internal */
    onFocus() {
        this._isInEditMode = true;
        if (this.value && this.invalidDate === '') {
            this._transformedDate = this._getEditorDate(this.value);
        }
    }
    /** @hidden @internal */
    onKeyDown(event) {
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                event.preventDefault();
                event.stopPropagation();
                this.spinValue(event.target.value, 1, event.type);
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                if (event.altKey) {
                    this.openDialog();
                }
                else {
                    event.preventDefault();
                    event.stopPropagation();
                    this.spinValue(event.target.value, -1, event.type);
                }
                break;
            default:
                break;
        }
    }
    /** @hidden @internal */
    onWheel(event) {
        if (this._isInEditMode) {
            event.preventDefault();
            event.stopPropagation();
            const sign = (event.deltaY > 0) ? -1 : 1;
            this.spinValue(event.target.value, sign, event.type);
        }
    }
    /** @hidden @internal */
    onInput(event) {
        /**
         * Fix for #8165 until refactoring (#6483).
         * The IgxDateTimeEditor will be used to handle all inputs, i.e. this handler will be removed.
         * It extends the IgxMaskDirective which contains logic that handles this issue.
         */
        if (isIE() && !this._isInEditMode && !this.inputGroup.isFocused) {
            return;
        }
        const targetValue = event.target.value;
        const cursorPosition = this._getCursorPosition();
        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);
        this._isInEditMode = true;
        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {
            this.isEmpty = false;
        }
        // If all date parts are completed, change the date-picker value, stay in edit mode
        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {
            this._transformedDate = targetValue;
            this.calculateDate(targetValue, event.type);
            this._setCursorPosition(cursorPosition);
        }
        else if (checkInput === 'partial') {
            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.
            this.deselectDate();
            requestAnimationFrame(() => {
                this.getEditElement().value = targetValue;
                this._setCursorPosition(cursorPosition);
            });
        }
        else if (checkInput === 'empty') {
            // Total clean-up as input is deleted.
            this.isEmpty = true;
            this.deselectDate();
        }
    }
    emitValueChangeEvent(oldValue, newValue) {
        if (!isEqual(oldValue, newValue)) {
            this.valueChange.emit(newValue);
        }
    }
    calculateDate(dateString, invokedByEvent) {
        if (dateString !== '') {
            const prevDateValue = this.value;
            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;
            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);
            if (newDateArray.state === "valid" /* Valid */) {
                const newValue = newDateArray.date;
                // Restore the time part if any
                if (prevDateValue) {
                    newValue.setHours(prevDateValue.getHours());
                    newValue.setMinutes(prevDateValue.getMinutes());
                    newValue.setSeconds(prevDateValue.getSeconds());
                    newValue.setMilliseconds(prevDateValue.getMilliseconds());
                }
                if (this.disabledDates === null
                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {
                    const oldValue = this.value;
                    this.value = newValue;
                    this.emitValueChangeEvent(oldValue, this.value);
                    this.invalidDate = '';
                }
                else {
                    const args = {
                        datePicker: this,
                        currentValue: newValue,
                    };
                    this.onDisabledDate.emit(args);
                }
            }
            else {
                const args = {
                    datePicker: this,
                    prevValue: prevDateValue
                };
                this.invalidDate = dateString;
                this.onValidationFailed.emit(args);
            }
        }
    }
    spinValue(inputValue, sign, eventType) {
        this._isInEditMode = true;
        this.isEmpty = false;
        const cursorPosition = this._getCursorPosition();
        const modifiedInputValue = DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);
        this.getEditElement().value = modifiedInputValue;
        this._setCursorPosition(cursorPosition);
        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);
        if (checkInput === 'complete') {
            this._isInEditMode = true;
            this.calculateDate(modifiedInputValue, eventType);
            this._setCursorPosition(cursorPosition);
        }
    }
    _onOpening(event) {
        this._initializeCalendarContainer(event.componentRef.instance);
        this.collapsed = false;
    }
    _onOpened() {
        this.onOpened.emit(this);
        if (this.calendar) {
            this._focusCalendarDate();
        }
    }
    _onClosed() {
        this.collapsed = true;
        this._componentID = null;
        this.onClosed.emit(this);
    }
    _initializeCalendarContainer(componentInstance) {
        this.calendar = componentInstance.calendar;
        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);
        this.calendar.hasHeader = this.hasHeader;
        this.calendar.formatOptions = this.formatOptions;
        this.calendar.formatViews = this.formatViews;
        this.calendar.locale = this.locale;
        this.calendar.vertical = isVertical;
        this.calendar.weekStart = this.weekStart;
        this.calendar.specialDates = this.specialDates;
        this.calendar.disabledDates = this.disabledDates;
        this.calendar.headerTemplate = this.headerTemplate;
        this.calendar.subheaderTemplate = this.subheaderTemplate;
        this.calendar.hideOutsideDays = this.hideOutsideDays;
        this.calendar.monthsViewNumber = this.monthsViewNumber;
        this.calendar.showWeekNumbers = this.showWeekNumbers;
        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev) => this.handleSelection(ev));
        if (this.value) {
            this.calendar.value = this.value;
            this.calendar.viewDate = this.value;
        }
        componentInstance.mode = this.mode;
        componentInstance.vertical = isVertical;
        componentInstance.cancelButtonLabel = this.cancelButtonLabel;
        componentInstance.todayButtonLabel = this.todayButtonLabel;
        componentInstance.datePickerActions = this.datePickerActionsDirective;
        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());
        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());
    }
    // Focus a date, after the calendar appearance into DOM.
    _focusCalendarDate() {
        requestAnimationFrame(() => {
            this.calendar.daysView.focusActiveDate();
        });
    }
    _setLocaleToDate(value) {
        if (isIE()) {
            // this is a workaround fixing the following IE11 issue:
            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that
            // precedes each portion that comprises the total date... For more information read this article:
            // tslint:disable-next-line: max-line-length
            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/
            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());
            return localeDateStrIE.toLocaleDateString(this.locale);
        }
        return value.toLocaleDateString(this.locale);
    }
    _getCursorPosition() {
        return this.getEditElement().selectionStart;
    }
    _setCursorPosition(start, end = start) {
        requestAnimationFrame(() => {
            this.getEditElement().setSelectionRange(start, end);
        });
    }
    /**
     * Apply custom user formatter upon date.
     * @param formatter custom formatter function.
     * @param date passed date
     */
    _customFormatChecker(formatter, date) {
        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);
    }
    /*
    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode
    * using @angular/common formatDate method: https://angular.io/api/common/formatDate
    * @param  value: string | number | Date
    * @returns formatted string
    */
    _getDisplayDate(value) {
        if (this.format && !this.formatter) {
            const locale = this.locale || this.defaultLocale;
            return formatDate(value, this.format, locale);
        }
        else {
            return this._customFormatChecker(this.formatter, value);
        }
    }
    _getEditorDate(value) {
        const locale = this.locale || this.defaultLocale;
        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';
        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);
    }
    _updateValidityOnBlur() {
        this._onTouchedCallback();
        const input = this.inputDirective;
        if (input && this._ngControl && !this._ngControl.valid) {
            input.valid = IgxInputState.INVALID;
        }
        else {
            input.valid = IgxInputState.INITIAL;
        }
    }
}
IgxDatePickerComponent.ɵfac = function IgxDatePickerComponent_Factory(t) { return new (t || IgxDatePickerComponent)(ɵngcc0.ɵɵdirectiveInject(IgxOverlayService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgModuleRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
IgxDatePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxDatePickerComponent, selectors: [["igx-date-picker"]], contentQueries: function IgxDatePickerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxInputGroupComponent, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxInputDirective, true, ElementRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxLabelDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxDatePickerTemplateDirective, true, IgxDatePickerTemplateDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxCalendarHeaderTemplateDirective, true, IgxCalendarHeaderTemplateDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxCalendarSubheaderTemplateDirective, true, IgxCalendarSubheaderTemplateDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxDatePickerActionsDirective, true, IgxDatePickerActionsDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxInputDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputGroupUserTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputUserTemplateElementRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelDirectiveUserTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datePickerTemplateDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.subheaderTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datePickerActionsDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputDirectiveUserTemplates = _t);
    } }, viewQuery: function IgxDatePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵviewQuery(IgxInputGroupComponent, true);
        ɵngcc0.ɵɵviewQuery(IgxInputDirective, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(IgxInputDirective, true);
        ɵngcc0.ɵɵviewQuery(IgxLabelDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.readOnlyDatePickerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.editableDatePickerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputGroup = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElementRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelDirective = _t.first);
    } }, hostVars: 1, hostBindings: function IgxDatePickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.spacebar", function IgxDatePickerComponent_keydown_spacebar_HostBindingHandler($event) { return ctx.onSpaceClick($event); })("keydown.space", function IgxDatePickerComponent_keydown_space_HostBindingHandler($event) { return ctx.onSpaceClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
    } }, inputs: { label: "label", labelVisibility: "labelVisibility", weekStart: "weekStart", monthsViewNumber: "monthsViewNumber", id: "id", vertical: "vertical", mode: "mode", isSpinLoop: "isSpinLoop", formatOptions: "formatOptions", format: "format", formatViews: "formatViews", disabledDates: "disabledDates", specialDates: "specialDates", modalOverlaySettings: "modalOverlaySettings", dropDownOverlaySettings: "dropDownOverlaySettings", value: "value", disabled: "disabled", mask: "mask", locale: "locale", editorTabIndex: "editorTabIndex", hideOutsideDays: "hideOutsideDays", showWeekNumbers: "showWeekNumbers", formatter: "formatter", todayButtonLabel: "todayButtonLabel", cancelButtonLabel: "cancelButtonLabel", outlet: "outlet" }, outputs: { onOpened: "onOpened", onClosed: "onClosed", onClosing: "onClosing", onSelection: "onSelection", valueChange: "valueChange", onDisabledDate: "onDisabledDate", onValidationFailed: "onValidationFailed" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxDatePickerComponent,
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: IgxDatePickerComponent,
                multi: true
            }])], ngContentSelectors: _c3, decls: 7, vars: 2, consts: [["labelTemplate", ""], ["readOnlyDatePickerTemplate", ""], ["editableDatePickerTemplate", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "click"], ["ngProjectAs", "[igxLabel]", 5, ["", "igxLabel", ""], 4, "ngTemplateOutlet"], ["igxLabel", "", 4, "ngIf"], ["igxInput", "", "readonly", "", 1, "igx-date-picker__input-date", 3, "value", "disabled", "tabindex", "blur"], ["ngProjectAs", "[igxLabel]", 5, ["", "igxLabel", ""]], ["igxLabel", ""], ["editableInputGroup", ""], ["igxInput", "", "type", "text", 1, "igx-date-picker__input-date", 3, "value", "igxMask", "placeholder", "igxTextSelection", "disabled", "displayValuePipe", "focusedValuePipe", "tabindex", "blur", "wheel", "input", "focus"], [3, "click", 4, "ngIf"]], template: function IgxDatePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c2);
        ɵngcc0.ɵɵtemplate(0, IgxDatePickerComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxDatePickerComponent_ng_template_2_Template, 7, 5, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, IgxDatePickerComponent_ng_template_4_Template, 9, 11, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, IgxDatePickerComponent_ng_container_6_Template, 1, 0, "ng-container", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ctx.context);
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc2.IgxInputGroupComponent, ɵngcc3.IgxPrefixDirective, ɵngcc4.IgxIconComponent, ɵngcc1.NgIf, ɵngcc5.IgxInputDirective, ɵngcc6.IgxLabelDirective, ɵngcc7.IgxMaskDirective, ɵngcc8.IgxTextSelectionDirective, ɵngcc9.IgxSuffixDirective], styles: ["[_nghost-%COMP%] {\n            display: block;\n        }"] });
IgxDatePickerComponent.ctorParameters = () => [
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgModuleRef },
    { type: Injector },
    { type: Renderer2 }
];
IgxDatePickerComponent.propDecorators = {
    label: [{ type: Input }],
    labelVisibility: [{ type: Input }],
    locale: [{ type: Input }],
    editorTabIndex: [{ type: Input }],
    weekStart: [{ type: Input }],
    formatOptions: [{ type: Input }],
    hideOutsideDays: [{ type: Input }],
    monthsViewNumber: [{ type: Input }],
    showWeekNumbers: [{ type: Input }],
    format: [{ type: Input }],
    mask: [{ type: Input }],
    formatViews: [{ type: Input }],
    disabledDates: [{ type: Input }],
    specialDates: [{ type: Input }],
    modalOverlaySettings: [{ type: Input }],
    dropDownOverlaySettings: [{ type: Input }],
    value: [{ type: Input }],
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    formatter: [{ type: Input }],
    disabled: [{ type: Input }],
    vertical: [{ type: Input }],
    todayButtonLabel: [{ type: Input }],
    cancelButtonLabel: [{ type: Input }],
    mode: [{ type: Input }],
    isSpinLoop: [{ type: Input }],
    outlet: [{ type: Input }],
    onOpened: [{ type: Output }],
    onClosed: [{ type: Output }],
    onClosing: [{ type: Output }],
    onSelection: [{ type: Output }],
    valueChange: [{ type: Output }],
    onDisabledDate: [{ type: Output }],
    onValidationFailed: [{ type: Output }],
    readOnlyDatePickerTemplate: [{ type: ViewChild, args: ['readOnlyDatePickerTemplate', { read: TemplateRef, static: true },] }],
    editableDatePickerTemplate: [{ type: ViewChild, args: ['editableDatePickerTemplate', { read: TemplateRef, static: true },] }],
    _inputGroup: [{ type: ViewChild, args: [IgxInputGroupComponent,] }],
    _inputGroupUserTemplate: [{ type: ContentChild, args: [IgxInputGroupComponent,] }],
    _inputElementRef: [{ type: ViewChild, args: [IgxInputDirective, { read: ElementRef },] }],
    _inputUserTemplateElementRef: [{ type: ContentChild, args: [IgxInputDirective, { read: ElementRef },] }],
    _inputDirective: [{ type: ViewChild, args: [IgxInputDirective,] }],
    _inputDirectiveUserTemplates: [{ type: ContentChildren, args: [IgxInputDirective, { descendants: true },] }],
    _labelDirective: [{ type: ViewChild, args: [IgxLabelDirective,] }],
    _labelDirectiveUserTemplate: [{ type: ContentChild, args: [IgxLabelDirective,] }],
    datePickerTemplateDirective: [{ type: ContentChild, args: [IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective },] }],
    headerTemplate: [{ type: ContentChild, args: [IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective },] }],
    subheaderTemplate: [{ type: ContentChild, args: [IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective },] }],
    datePickerActionsDirective: [{ type: ContentChild, args: [IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective },] }],
    onSpaceClick: [{ type: HostListener, args: ['keydown.spacebar', ['$event'],] }, { type: HostListener, args: ['keydown.space', ['$event'],] }]
};
__decorate([
    DeprecateProperty(`Use igxLabel inside the date picker to change the label:
    <igx-date-picker>
        <label igxLabel>Custom label</label>
    </igx-date-picker> `)
], IgxDatePickerComponent.prototype, "label", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDatePickerComponent, [{
        type: Component,
        args: [{
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxDatePickerComponent,
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: IgxDatePickerComponent,
                        multi: true
                    }],
                // tslint:disable-next-line:component-selector
                selector: 'igx-date-picker',
                template: "<ng-template #labelTemplate>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #readOnlyDatePickerTemplate>\n    <igx-input-group (click)=\"openDialog()\">\n        <ng-container ngProjectAs=\"[igxLabel]\" *ngTemplateOutlet=\"labelTemplate\"></ng-container>\n        <igx-prefix>\n            <igx-icon>today</igx-icon>\n        </igx-prefix>\n        <label *ngIf=\"labelVisibility&&!_labelDirectiveUserTemplate\" igxLabel>{{label}}</label>\n        <input\n            class=\"igx-date-picker__input-date\"\n            igxInput\n            [value]=\"displayData || ''\"\n            [disabled]=\"disabled\"\n            (blur)=\"onBlur($event)\"\n            [tabindex]='editorTabIndex'\n            readonly\n        />\n    </igx-input-group>\n</ng-template>\n\n<ng-template #editableDatePickerTemplate>\n    <igx-input-group #editableInputGroup>\n        <ng-container ngProjectAs=\"[igxLabel]\" *ngTemplateOutlet=\"labelTemplate\"></ng-container>\n        <igx-prefix (click)=\"onOpenClick($event)\">\n            <igx-icon>today</igx-icon>\n        </igx-prefix>\n        <label *ngIf=\"labelVisibility&&!_labelDirectiveUserTemplate\" igxLabel>{{label}}</label>\n        <input\n            class=\"igx-date-picker__input-date\"\n            igxInput\n            type=\"text\"\n            [value]=\"transformedDate\"\n            [igxMask]=\"inputMask\"\n            [placeholder]=\"mask\"\n            [igxTextSelection]=\"true\"\n            [disabled]=\"disabled\"\n            [displayValuePipe]=\"displayValuePipe\"\n            [focusedValuePipe]=\"inputValuePipe\"\n            (blur)=\"onBlur($event)\"\n            (wheel)=\"onWheel($event)\"\n            (input)=\"onInput($event)\"\n            (focus)=\"onFocus()\"\n            [tabindex]='editorTabIndex'\n        />\n        <igx-suffix *ngIf=\"!isEmpty\" (click)=\"clear()\">\n            <igx-icon>clear</igx-icon>\n        </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n",
                styles: [`
        :host {
            display: block;
        }
    `]
            }]
    }], function () { return [{ type: ɵngcc10.IgxOverlayService, decorators: [{
                type: Inject,
                args: [IgxOverlayService]
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgModuleRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.Renderer2 }]; }, { label: [{
            type: Input
        }], labelVisibility: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], monthsViewNumber: [{
            type: Input
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], vertical: [{
            type: Input
        }], mode: [{
            type: Input
        }], isSpinLoop: [{
            type: Input
        }], onOpened: [{
            type: Output
        }], onClosed: [{
            type: Output
        }], onClosing: [{
            type: Output
        }], onSelection: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], onDisabledDate: [{
            type: Output
        }], onValidationFailed: [{
            type: Output
        }], formatOptions: [{
            type: Input
        }], format: [{
            type: Input
        }], formatViews: [{
            type: Input
        }], disabledDates: [{
            type: Input
        }], specialDates: [{
            type: Input
        }], modalOverlaySettings: [{
            type: Input
        }], dropDownOverlaySettings: [{
            type: Input
        }], value: [{
            type: Input
        }], disabled: [{
            type: Input
        }], 
    //#endregion
    /**
     * @hidden
     */
    onSpaceClick: [{
            type: HostListener,
            args: ['keydown.spacebar', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.space', ['$event']]
        }], mask: [{
            type: Input
        }], locale: [{
            type: Input
        }], editorTabIndex: [{
            type: Input
        }], hideOutsideDays: [{
            type: Input
        }], showWeekNumbers: [{
            type: Input
        }], formatter: [{
            type: Input
        }], todayButtonLabel: [{
            type: Input
        }], cancelButtonLabel: [{
            type: Input
        }], outlet: [{
            type: Input
        }], readOnlyDatePickerTemplate: [{
            type: ViewChild,
            args: ['readOnlyDatePickerTemplate', { read: TemplateRef, static: true }]
        }], editableDatePickerTemplate: [{
            type: ViewChild,
            args: ['editableDatePickerTemplate', { read: TemplateRef, static: true }]
        }], _inputGroup: [{
            type: ViewChild,
            args: [IgxInputGroupComponent]
        }], _inputGroupUserTemplate: [{
            type: ContentChild,
            args: [IgxInputGroupComponent]
        }], _inputElementRef: [{
            type: ViewChild,
            args: [IgxInputDirective, { read: ElementRef }]
        }], _inputUserTemplateElementRef: [{
            type: ContentChild,
            args: [IgxInputDirective, { read: ElementRef }]
        }], _inputDirective: [{
            type: ViewChild,
            args: [IgxInputDirective]
        }], _inputDirectiveUserTemplates: [{
            type: ContentChildren,
            args: [IgxInputDirective, { descendants: true }]
        }], _labelDirective: [{
            type: ViewChild,
            args: [IgxLabelDirective]
        }], _labelDirectiveUserTemplate: [{
            type: ContentChild,
            args: [IgxLabelDirective]
        }], datePickerTemplateDirective: [{
            type: ContentChild,
            args: [IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective }]
        }], headerTemplate: [{
            type: ContentChild,
            args: [IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective }]
        }], subheaderTemplate: [{
            type: ContentChild,
            args: [IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective }]
        }], datePickerActionsDirective: [{
            type: ContentChild,
            args: [IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective }]
        }] }); })();
/**
 * @hidden
 */
export class IgxDatePickerModule {
}
IgxDatePickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxDatePickerModule });
IgxDatePickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxDatePickerModule_Factory(t) { return new (t || IgxDatePickerModule)(); }, imports: [[
            CommonModule,
            IgxIconModule,
            IgxInputGroupModule,
            IgxCalendarModule,
            IgxButtonModule,
            IgxRippleModule,
            IgxMaskModule,
            IgxTextSelectionModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxDatePickerModule, { declarations: function () { return [IgxDatePickerComponent, IgxCalendarContainerComponent,
        IgxDatePickerActionsDirective,
        IgxDatePickerTemplateDirective,
        DatePickerDisplayValuePipe,
        DatePickerInputValuePipe]; }, imports: function () { return [CommonModule,
        IgxIconModule,
        IgxInputGroupModule,
        IgxCalendarModule,
        IgxButtonModule,
        IgxRippleModule,
        IgxMaskModule,
        IgxTextSelectionModule]; }, exports: function () { return [IgxDatePickerComponent, IgxDatePickerTemplateDirective,
        IgxDatePickerActionsDirective,
        DatePickerDisplayValuePipe,
        DatePickerInputValuePipe]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDatePickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    IgxDatePickerComponent,
                    IgxCalendarContainerComponent,
                    IgxDatePickerActionsDirective,
                    IgxDatePickerTemplateDirective,
                    DatePickerDisplayValuePipe,
                    DatePickerInputValuePipe
                ],
                entryComponents: [
                    IgxCalendarContainerComponent
                ],
                exports: [
                    IgxDatePickerComponent,
                    IgxDatePickerTemplateDirective,
                    IgxDatePickerActionsDirective,
                    DatePickerDisplayValuePipe,
                    DatePickerInputValuePipe
                ],
                imports: [
                    CommonModule,
                    IgxIconModule,
                    IgxInputGroupModule,
                    IgxCalendarModule,
                    IgxButtonModule,
                    IgxRippleModule,
                    IgxMaskModule,
                    IgxTextSelectionModule
                ]
            }]
    }], null, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,