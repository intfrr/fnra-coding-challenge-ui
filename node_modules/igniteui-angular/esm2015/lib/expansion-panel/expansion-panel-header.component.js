import { Component, ChangeDetectorRef, ElementRef, HostBinding, HostListener, Input, Host, EventEmitter, Output, ContentChild, Inject, ViewChild } from '@angular/core';
import { IgxExpansionPanelIconDirective } from './expansion-panel.directives';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
import { mkenum } from '../core/utils';
import { IgxIconComponent } from '../icon/public_api';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../icon/icon.component';

function IgxExpansionPanelHeaderComponent_ng_content_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 3, ["*ngIf", "iconTemplate"]);
} }
function IgxExpansionPanelHeaderComponent_igx_icon_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.panel.collapsed ? "expand_more" : "expand_less", " ");
} }
const _c0 = [[["igx-expansion-panel-title"]], [["igx-expansion-panel-description"]], "*", [["igx-expansion-panel-icon"]]];
const _c1 = ["igx-expansion-panel-title", "igx-expansion-panel-description", "*", "igx-expansion-panel-icon"];
export const ICON_POSITION = mkenum({
    LEFT: 'left',
    NONE: 'none',
    RIGHT: 'right'
});
export class IgxExpansionPanelHeaderComponent {
    constructor(panel, cdr, elementRef) {
        this.panel = panel;
        this.cdr = cdr;
        this.elementRef = elementRef;
        // properties section
        this._iconTemplate = false;
        /**
         * Sets/gets the `id` of the expansion panel header.
         * ```typescript
         * let panelHeaderId =  this.panel.header.id;
         * ```
         * @memberof IgxExpansionPanelComponent
         */
        this.id = '';
        /**
         * Gets/sets the `aria-level` attribute of the header
         * Get
         * ```typescript
         *  const currentAriaLevel = this.panel.header.lv;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.lv = '5';
         * ```
         * ```html
         *  <igx-expansion-panel-header [lv]="myCustomLevel"></igx-expansion-panel-header>
         * ```
         */
        this.lv = '3';
        /**
         * Gets/sets the `role` attribute of the header
         * Get
         * ```typescript
         *  const currentRole = this.panel.header.role;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.role = '5';
         * ```
         * ```html
         *  <igx-expansion-panel-header [role]="'custom'"></igx-expansion-panel-header>
         * ```
         */
        this.role = 'heading';
        /**
         * Gets/sets the position of the expansion-panel-header expand/collapse icon
         * Accepts `left`, `right` or `none`
         * ```typescript
         *  const currentIconPosition = this.panel.header.iconPosition;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.iconPosition = 'left';
         * ```
         * ```html
         *  <igx-expansion-panel-header [iconPosition]="'right'"></igx-expansion-panel-header>
         * ```
         */
        this.iconPosition = ICON_POSITION.LEFT;
        /**
         * Emitted whenever a user interacts with the header host
         * ```typescript
         *  handleInteraction(event: IExpansionPanelCancelableEventArgs) {
         *  ...
         * }
         * ```
         * ```html
         *  <igx-expansion-panel-header (onInteraction)="handleInteraction($event)">
         *      ...
         *  </igx-expansion-panel-header>
         * ```
         */
        this.onInteraction = new EventEmitter();
        /**
         * @hidden
         */
        this.cssClass = 'igx-expansion-panel__header';
        /**
         * Gets/sets the whether the header is disabled
         * When disabled, the header will not handle user events and will stop their propagation
         *
         * ```typescript
         *  const isDisabled = this.panel.header.disabled;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.disabled = true;
         * ```
         * ```html
         *  <igx-expansion-panel-header [disabled]="true">
         *     ...
         *  </igx-expansion-panel-header>
         * ```
         */
        this.disabled = false;
        this.id = `${this.panel.id}-header`;
    }
    /**
     * Returns a reference to the `igx-expansion-panel-icon` element;
     * If `iconPosition` is `NONE` - return null;
     */
    get iconRef() {
        var _a;
        const renderedTemplate = (_a = this.customIconRef) !== null && _a !== void 0 ? _a : this.defaultIconRef;
        return this.iconPosition !== ICON_POSITION.NONE ? renderedTemplate : null;
    }
    /**
     * @hidden
     */
    set iconTemplate(val) {
        this._iconTemplate = val;
    }
    /**
     * @hidden
     */
    get iconTemplate() {
        return this._iconTemplate;
    }
    /**
     * @hidden
     */
    get controls() {
        return this.panel.id;
    }
    /**
     * @hidden
     */
    get isExpanded() {
        return !this.panel.collapsed;
    }
    /**
     * @hidden
     */
    onAction(evt) {
        if (this.disabled) {
            evt.stopPropagation();
            return;
        }
        const eventArgs = { event: evt, panel: this.panel, owner: this.panel, cancel: false };
        this.onInteraction.emit(eventArgs);
        if (eventArgs.cancel === true) {
            return;
        }
        this.panel.toggle(evt);
        evt.preventDefault();
    }
    /** @hidden @internal */
    openPanel(event) {
        if (event.altKey) {
            const eventArgs = { event, panel: this.panel, owner: this.panel, cancel: false };
            this.onInteraction.emit(eventArgs);
            if (eventArgs.cancel === true) {
                return;
            }
            this.panel.expand(event);
        }
    }
    /** @hidden @internal */
    closePanel(event) {
        if (event.altKey) {
            const eventArgs = { event, panel: this.panel, owner: this.panel, cancel: false };
            this.onInteraction.emit(eventArgs);
            if (eventArgs.cancel === true) {
                return;
            }
            this.panel.collapse(event);
        }
    }
    /**
     * @hidden
     */
    get iconPositionClass() {
        switch (this.iconPosition) {
            case (ICON_POSITION.LEFT):
                return `igx-expansion-panel__header-icon--start`;
            case (ICON_POSITION.RIGHT):
                return `igx-expansion-panel__header-icon--end`;
            case (ICON_POSITION.NONE):
                return `igx-expansion-panel__header-icon--none`;
            default:
                return '';
        }
    }
}
IgxExpansionPanelHeaderComponent.ɵfac = function IgxExpansionPanelHeaderComponent_Factory(t) { return new (t || IgxExpansionPanelHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(IGX_EXPANSION_PANEL_COMPONENT, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxExpansionPanelHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxExpansionPanelHeaderComponent, selectors: [["igx-expansion-panel-header"]], contentQueries: function IgxExpansionPanelHeaderComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxExpansionPanelIconDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxExpansionPanelIconDirective, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customIconRef = _t.first);
    } }, viewQuery: function IgxExpansionPanelHeaderComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxIconComponent, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultIconRef = _t.first);
    } }, hostVars: 8, hostBindings: function IgxExpansionPanelHeaderComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.Enter", function IgxExpansionPanelHeaderComponent_keydown_Enter_HostBindingHandler($event) { return ctx.onAction($event); })("keydown.Space", function IgxExpansionPanelHeaderComponent_keydown_Space_HostBindingHandler($event) { return ctx.onAction($event); })("keydown.Spacebar", function IgxExpansionPanelHeaderComponent_keydown_Spacebar_HostBindingHandler($event) { return ctx.onAction($event); })("click", function IgxExpansionPanelHeaderComponent_click_HostBindingHandler($event) { return ctx.onAction($event); })("keydown.Alt.ArrowDown", function IgxExpansionPanelHeaderComponent_keydown_Alt_ArrowDown_HostBindingHandler($event) { return ctx.openPanel($event); })("keydown.Alt.ArrowUp", function IgxExpansionPanelHeaderComponent_keydown_Alt_ArrowUp_HostBindingHandler($event) { return ctx.closePanel($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-level", ctx.lv)("role", ctx.role);
        ɵngcc0.ɵɵclassProp("igx-expansion-panel__header", ctx.cssClass)("igx-expansion-panel--disabled", ctx.disabled)("igx-expansion-panel__header--expanded", ctx.isExpanded);
    } }, inputs: { lv: "lv", role: "role", iconPosition: "iconPosition", disabled: "disabled" }, outputs: { onInteraction: "onInteraction" }, ngContentSelectors: _c1, decls: 8, vars: 8, consts: [["tabindex", "0", "role", "button", 1, "igx-expansion-panel__header-inner"], [1, "igx-expansion-panel__title-wrapper"], [4, "ngIf"], ["fontSet", "material", 4, "ngIf"], ["fontSet", "material"]], template: function IgxExpansionPanelHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵprojection(3, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(4, 2);
        ɵngcc0.ɵɵelementStart(5, "div");
        ɵngcc0.ɵɵtemplate(6, IgxExpansionPanelHeaderComponent_ng_content_6_Template, 1, 0, "ng-content", 2);
        ɵngcc0.ɵɵtemplate(7, IgxExpansionPanelHeaderComponent_igx_icon_7_Template, 2, 1, "igx-icon", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id)("aria-disabled", ctx.disabled)("aria-expanded", ctx.isExpanded)("aria-controls", ctx.controls);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵclassMap(ctx.iconPositionClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.iconTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.iconTemplate);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.IgxIconComponent], encapsulation: 2 });
IgxExpansionPanelHeaderComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Host }, { type: Inject, args: [IGX_EXPANSION_PANEL_COMPONENT,] }] },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
IgxExpansionPanelHeaderComponent.propDecorators = {
    customIconRef: [{ type: ContentChild, args: [IgxExpansionPanelIconDirective, { read: ElementRef },] }],
    defaultIconRef: [{ type: ViewChild, args: [IgxIconComponent, { read: ElementRef },] }],
    iconTemplate: [{ type: ContentChild, args: [IgxExpansionPanelIconDirective,] }],
    lv: [{ type: HostBinding, args: ['attr.aria-level',] }, { type: Input }],
    role: [{ type: HostBinding, args: ['attr.role',] }, { type: Input }],
    iconPosition: [{ type: Input }],
    onInteraction: [{ type: Output }],
    cssClass: [{ type: HostBinding, args: ['class.igx-expansion-panel__header',] }],
    isExpanded: [{ type: HostBinding, args: ['class.igx-expansion-panel__header--expanded',] }],
    disabled: [{ type: Input }, { type: HostBinding, args: ['class.igx-expansion-panel--disabled',] }],
    onAction: [{ type: HostListener, args: ['keydown.Enter', ['$event'],] }, { type: HostListener, args: ['keydown.Space', ['$event'],] }, { type: HostListener, args: ['keydown.Spacebar', ['$event'],] }, { type: HostListener, args: ['click', ['$event'],] }],
    openPanel: [{ type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] }],
    closePanel: [{ type: HostListener, args: ['keydown.Alt.ArrowUp', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxExpansionPanelHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'igx-expansion-panel-header',
                template: "<div class=\"igx-expansion-panel__header-inner\" tabindex=\"0\" role=\"button\" [attr.id]=\"id\"\n[attr.aria-disabled]=\"disabled\" [attr.aria-expanded]=\"isExpanded\" [attr.aria-controls]=\"controls\">\n    <div class=\"igx-expansion-panel__title-wrapper\">\n        <ng-content select=\"igx-expansion-panel-title\"></ng-content>\n        <ng-content select=\"igx-expansion-panel-description\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <div [class]=\"iconPositionClass\">\n        <ng-content *ngIf=\"iconTemplate\" select=\"igx-expansion-panel-icon\"></ng-content>\n        <igx-icon *ngIf=\"!iconTemplate\" fontSet=\"material\">\n            {{panel.collapsed? 'expand_more':'expand_less'}}\n        </igx-icon>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Host
            }, {
                type: Inject,
                args: [IGX_EXPANSION_PANEL_COMPONENT]
            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { lv: [{
            type: HostBinding,
            args: ['attr.aria-level']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }, {
            type: Input
        }], iconPosition: [{
            type: Input
        }], onInteraction: [{
            type: Output
        }], cssClass: [{
            type: HostBinding,
            args: ['class.igx-expansion-panel__header']
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.igx-expansion-panel--disabled']
        }], iconTemplate: [{
            type: ContentChild,
            args: [IgxExpansionPanelIconDirective]
        }], isExpanded: [{
            type: HostBinding,
            args: ['class.igx-expansion-panel__header--expanded']
        }], 
    /**
     * @hidden
     */
    onAction: [{
            type: HostListener,
            args: ['keydown.Enter', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.Space', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.Spacebar', ['$event']]
        }, {
            type: HostListener,
            args: ['click', ['$event']]
        }], 
    /** @hidden @internal */
    openPanel: [{
            type: HostListener,
            args: ['keydown.Alt.ArrowDown', ['$event']]
        }], 
    /** @hidden @internal */
    closePanel: [{
            type: HostListener,
            args: ['keydown.Alt.ArrowUp', ['$event']]
        }], customIconRef: [{
            type: ContentChild,
            args: [IgxExpansionPanelIconDirective, { read: ElementRef }]
        }], defaultIconRef: [{
            type: ViewChild,
            args: [IgxIconComponent, { read: ElementRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,