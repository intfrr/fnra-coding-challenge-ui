import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class IgxExpansionPanelBodyComponent {
    constructor(panel, element, cdr) {
        this.panel = panel;
        this.element = element;
        this.cdr = cdr;
        this._labelledBy = '';
        this._label = '';
        /**
         * @hidden
         */
        this.cssClass = `igx-expansion-panel__body`;
        /**
         * Gets/sets the `role` attribute of the panel body
         * Default is 'region';
         * Get
         * ```typescript
         *  const currentRole = this.panel.body.role;
         * ```
         * Set
         * ```typescript
         *  this.panel.body.role = 'content';
         * ```
         * ```html
         *  <igx-expansion-panel-body [role]="'custom'"></igx-expansion-panel-body>
         * ```
         */
        this.role = 'region';
    }
    /**
     * Gets the `aria-label` attribute of the panel body
     * Defaults to the panel id with '-region' in the end;
     * Get
     * ```typescript
     *  const currentLabel = this.panel.body.label;
     * ```
     */
    get label() {
        return this._label || this.panel.id + '-region';
    }
    /**
     * Sets the `aria-label` attribute of the panel body
     * ```typescript
     *  this.panel.body.label = 'my-custom-label';
     * ```
     * ```html
     *  <igx-expansion-panel-body [label]="'my-custom-label'"></igx-expansion-panel-body>
     * ```
     */
    set label(val) {
        this._label = val;
    }
    /**
     * Gets the `aria-labelledby` attribute of the panel body
     * Defaults to the panel header id;
     * Get
     * ```typescript
     *  const currentLabel = this.panel.body.labelledBy;
     * ```
     */
    get labelledBy() {
        return this._labelledBy;
    }
    /**
     * Sets the `aria-labelledby` attribute of the panel body
     * ```typescript
     *  this.panel.body.labelledBy = 'my-custom-id';
     * ```
     * ```html
     *  <igx-expansion-panel-body [labelledBy]="'my-custom-id'"></igx-expansion-panel-body>
     * ```
     */
    set labelledBy(val) {
        this._labelledBy = val;
    }
}
IgxExpansionPanelBodyComponent.ɵfac = function IgxExpansionPanelBodyComponent_Factory(t) { return new (t || IgxExpansionPanelBodyComponent)(ɵngcc0.ɵɵdirectiveInject(IGX_EXPANSION_PANEL_COMPONENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxExpansionPanelBodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxExpansionPanelBodyComponent, selectors: [["igx-expansion-panel-body"]], hostVars: 5, hostBindings: function IgxExpansionPanelBodyComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-label", ctx.label)("aria-labelledby", ctx.labelledBy);
        ɵngcc0.ɵɵclassProp("igx-expansion-panel__body", ctx.cssClass);
    } }, inputs: { role: "role", label: "label", labelledBy: "labelledBy" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function IgxExpansionPanelBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
IgxExpansionPanelBodyComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [IGX_EXPANSION_PANEL_COMPONENT,] }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxExpansionPanelBodyComponent.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-expansion-panel__body',] }],
    label: [{ type: Input }, { type: HostBinding, args: ['attr.aria-label',] }],
    labelledBy: [{ type: Input }, { type: HostBinding, args: ['attr.aria-labelledby',] }],
    role: [{ type: Input }, { type: HostBinding, args: ['attr.role',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxExpansionPanelBodyComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'igx-expansion-panel-body',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [IGX_EXPANSION_PANEL_COMPONENT]
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-expansion-panel__body']
        }], role: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['attr.role']
        }], label: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['attr.aria-label']
        }], labelledBy: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['attr.aria-labelledby']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZXhwYW5zaW9uLXBhbmVsL2V4cGFuc2lvbi1wYW5lbC1ib2R5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQXlCLDZCQUE2QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFPaEcsTUFBTSxPQUFPLDhCQUE4QjtBQUMzQyxJQUVJLFlBQ2tELEtBQTRCLEVBQ25FLE9BQW1CLEVBQVMsR0FBc0I7QUFDakUsUUFGc0QsVUFBSyxHQUFMLEtBQUssQ0FBdUI7QUFBQyxRQUNwRSxZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsUUFBUSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtBQUFDLFFBSnRELGdCQUFXLEdBQUcsRUFBRSxDQUFDO0FBQzdCLFFBQVksV0FBTSxHQUFHLEVBQUUsQ0FBQztBQUN4QixRQUlJO0FBQ0o7QUFDSSxXQUFHO0FBQ1AsUUFDVyxhQUFRLEdBQUcsMkJBQTJCLENBQUM7QUFDbEQsUUFxREk7QUFDSjtBQUNJO0FBQ0k7QUFDSTtBQUNJO0FBRVA7QUFDSTtBQUNOO0FBQXlCO0FBR3RCO0FBQWU7QUFBbUI7QUFJNUI7QUFDZixXQUhNO0FBQ1AsUUFFVyxTQUFJLEdBQUcsUUFBUSxDQUFDO0FBQzNCLElBN0VJLENBQUM7QUFDTCxJQU1JO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksSUFFVyxLQUFLO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztBQUN4RCxJQUFJLENBQUM7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFXLEtBQUssQ0FBQyxHQUFXO0FBQ2hDLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDMUIsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBRVcsVUFBVTtBQUFLLFFBQ3RCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUNoQyxJQUFJLENBQUM7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxJQUFXLFVBQVUsQ0FBQyxHQUFXO0FBQ3JDLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0w7MERBckVDLFNBQVMsU0FBQyxrQkFDUCw4Q0FBOEMsaUJBQzlDLFFBQVEsRUFBRSwwQkFBMEIsa0JBQ3BDLFFBQVEsRUFBRSwyQkFBMkIsY0FDeEM7Ozs7Ozs7NkJBQ0k7QUFBQztBQUNVLDRDQUdQLE1BQU0sU0FBQyw2QkFBNkI7QUFBUyxZQVpyQixVQUFVO0FBQUksWUFBSyxpQkFBaUI7QUFBRztBQUFHO0FBQ3BELHVCQWlCbEIsV0FBVyxTQUFDLGlDQUFpQztBQUM3QyxvQkFVQSxLQUFLLFlBQ0wsV0FBVyxTQUFDLGlCQUFpQjtBQUM3Qix5QkF3QkEsS0FBSyxZQUNMLFdBQVcsU0FBQyxzQkFBc0I7QUFDbEMsbUJBK0JBLEtBQUssWUFDTCxXQUFXLFNBQUMsV0FBVztBQUN4Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYsIElucHV0LCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hFeHBhbnNpb25QYW5lbEJhc2UsIElHWF9FWFBBTlNJT05fUEFORUxfQ09NUE9ORU5UIH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwuY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaWd4LWV4cGFuc2lvbi1wYW5lbC1ib2R5JyxcbiAgICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gXG59KVxuZXhwb3J0IGNsYXNzIElneEV4cGFuc2lvblBhbmVsQm9keUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfbGFiZWxsZWRCeSA9ICcnO1xuICAgIHByaXZhdGUgX2xhYmVsID0gJyc7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoSUdYX0VYUEFOU0lPTl9QQU5FTF9DT01QT05FTlQpIHB1YmxpYyBwYW5lbDogSWd4RXhwYW5zaW9uUGFuZWxCYXNlLFxuICAgICAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZiwgcHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWV4cGFuc2lvbi1wYW5lbF9fYm9keScpXG4gICAgcHVibGljIGNzc0NsYXNzID0gYGlneC1leHBhbnNpb24tcGFuZWxfX2JvZHlgO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYGFyaWEtbGFiZWxgIGF0dHJpYnV0ZSBvZiB0aGUgcGFuZWwgYm9keVxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBwYW5lbCBpZCB3aXRoICctcmVnaW9uJyBpbiB0aGUgZW5kO1xuICAgICAqIEdldFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgY29uc3QgY3VycmVudExhYmVsID0gdGhpcy5wYW5lbC5ib2R5LmxhYmVsO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtbGFiZWwnKVxuICAgIHB1YmxpYyBnZXQgbGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsIHx8IHRoaXMucGFuZWwuaWQgKyAnLXJlZ2lvbic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBhcmlhLWxhYmVsYCBhdHRyaWJ1dGUgb2YgdGhlIHBhbmVsIGJvZHlcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIHRoaXMucGFuZWwuYm9keS5sYWJlbCA9ICdteS1jdXN0b20tbGFiZWwnO1xuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1leHBhbnNpb24tcGFuZWwtYm9keSBbbGFiZWxdPVwiJ215LWN1c3RvbS1sYWJlbCdcIj48L2lneC1leHBhbnNpb24tcGFuZWwtYm9keT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGxhYmVsKHZhbDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2xhYmVsID0gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGBhcmlhLWxhYmVsbGVkYnlgIGF0dHJpYnV0ZSBvZiB0aGUgcGFuZWwgYm9keVxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBwYW5lbCBoZWFkZXIgaWQ7XG4gICAgICogR2V0XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBjb25zdCBjdXJyZW50TGFiZWwgPSB0aGlzLnBhbmVsLmJvZHkubGFiZWxsZWRCeTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWxhYmVsbGVkYnknKVxuICAgIHB1YmxpYyBnZXQgbGFiZWxsZWRCeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWxsZWRCeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlIG9mIHRoZSBwYW5lbCBib2R5XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICB0aGlzLnBhbmVsLmJvZHkubGFiZWxsZWRCeSA9ICdteS1jdXN0b20taWQnO1xuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1leHBhbnNpb24tcGFuZWwtYm9keSBbbGFiZWxsZWRCeV09XCInbXktY3VzdG9tLWlkJ1wiPjwvaWd4LWV4cGFuc2lvbi1wYW5lbC1ib2R5PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgbGFiZWxsZWRCeSh2YWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYWJlbGxlZEJ5ID0gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMvc2V0cyB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBvZiB0aGUgcGFuZWwgYm9keVxuICAgICAqIERlZmF1bHQgaXMgJ3JlZ2lvbic7XG4gICAgICogR2V0XG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBjb25zdCBjdXJyZW50Um9sZSA9IHRoaXMucGFuZWwuYm9keS5yb2xlO1xuICAgICAqIGBgYFxuICAgICAqIFNldFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgdGhpcy5wYW5lbC5ib2R5LnJvbGUgPSAnY29udGVudCc7XG4gICAgICogYGBgXG4gICAgICogYGBgaHRtbFxuICAgICAqICA8aWd4LWV4cGFuc2lvbi1wYW5lbC1ib2R5IFtyb2xlXT1cIidjdXN0b20nXCI+PC9pZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHk+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gICAgcHVibGljIHJvbGUgPSAncmVnaW9uJztcbn1cbiJdfQ==