import { FilteringLogic } from './filtering-expression.interface';
import { FilteringExpressionsTree } from './filtering-expressions-tree';
import { resolveNestedPath, parseDate } from '../core/utils';
const DateType = 'date';
export class NoopFilteringStrategy {
    constructor() { }
    static instance() {
        return this._instance || (this._instance = new NoopFilteringStrategy());
    }
    filter(data, expressionsTree, advancedExpressionsTree) {
        return data;
    }
}
NoopFilteringStrategy._instance = null;
export class BaseFilteringStrategy {
    findMatchByExpression(rec, expr, isDate) {
        const cond = expr.condition;
        const val = this.getFieldValue(rec, expr.fieldName, isDate);
        return cond.logic(val, expr.searchVal, expr.ignoreCase);
    }
    matchRecord(rec, expressions, grid) {
        if (expressions) {
            if (expressions instanceof FilteringExpressionsTree) {
                const expressionsTree = expressions;
                const operator = expressionsTree.operator;
                let matchOperand, operand;
                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {
                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {
                        operand = expressionsTree.filteringOperands[i];
                        matchOperand = this.matchRecord(rec, operand, grid);
                        // Return false if at least one operand does not match and the filtering logic is And
                        if (!matchOperand && operator === FilteringLogic.And) {
                            return false;
                        }
                        // Return true if at least one operand matches and the filtering logic is Or
                        if (matchOperand && operator === FilteringLogic.Or) {
                            return true;
                        }
                    }
                    return matchOperand;
                }
                return true;
            }
            else {
                const expression = expressions;
                const isDate = grid && grid.getColumnByName(expression.fieldName) ?
                    grid.getColumnByName(expression.fieldName).dataType === DateType : false;
                return this.findMatchByExpression(rec, expression, isDate);
            }
        }
        return true;
    }
}
export class FilteringStrategy extends BaseFilteringStrategy {
    constructor() { super(); }
    static instance() {
        return this._instace || (this._instace = new this());
    }
    filter(data, expressionsTree, advancedExpressionsTree, grid) {
        let i;
        let rec;
        const len = data.length;
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = data[i];
            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {
                res.push(rec);
            }
        }
        return res;
    }
    getFieldValue(rec, fieldName, isDate = false) {
        let value = resolveNestedPath(rec, fieldName);
        value = value && isDate ? parseDate(value) : value;
        return value;
    }
}
FilteringStrategy._instace = null;
//# sourceMappingURL=data:application/json;base64,