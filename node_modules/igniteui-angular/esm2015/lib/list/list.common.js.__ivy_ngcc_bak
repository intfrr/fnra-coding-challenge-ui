import { Directive, TemplateRef, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
/** @hidden */
export class IgxListBaseDirective extends DisplayDensityBase {
    constructor(_displayDensityOptions) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
    }
}
IgxListBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListBase]'
            },] }
];
IgxListBaseDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
export class IgxEmptyListTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxEmptyListTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxEmptyList]'
            },] }
];
IgxEmptyListTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxDataLoadingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxDataLoadingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDataLoading]'
            },] }
];
IgxDataLoadingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemLeftPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemLeftPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemLeftPanning]'
            },] }
];
IgxListItemLeftPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
export class IgxListItemRightPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemRightPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemRightPanning]'
            },] }
];
IgxListItemRightPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvbGlzdC9saXN0LmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBMkIsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsa0JBQWtCLEVBQTBCLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFRbEcsY0FBYztBQUlkLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxrQkFBa0I7SUFZeEQsWUFBK0Qsc0JBQThDO1FBQ3pHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRDZCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7SUFFN0csQ0FBQzs7O1lBakJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZUFBZTthQUM1Qjs7OzRDQWFnQixRQUFRLFlBQUksTUFBTSxTQUFDLG1CQUFtQjs7QUFLdkQsTUFBTSxDQUFOLElBQVksZUFBcUM7QUFBakQsV0FBWSxlQUFlO0lBQUcscURBQUksQ0FBQTtJQUFFLHFEQUFJLENBQUE7SUFBRSx1REFBSyxDQUFBO0FBQUMsQ0FBQyxFQUFyQyxlQUFlLEtBQWYsZUFBZSxRQUFzQjtBQUtqRCxNQUFNLE9BQU8sNkJBQTZCO0lBQ3RDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzdCOzs7WUFsQ21CLFdBQVc7O0FBMEMvQixNQUFNLE9BQU8sK0JBQStCO0lBQ3hDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2FBQy9COzs7WUF6Q21CLFdBQVc7O0FBaUQvQixNQUFNLE9BQU8sdUNBQXVDO0lBQ2hELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2FBQ3ZDOzs7WUFoRG1CLFdBQVc7O0FBd0QvQixNQUFNLE9BQU8sd0NBQXdDO0lBQ2pELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMkJBQTJCO2FBQ3hDOzs7WUF2RG1CLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlzcGxheURlbnNpdHlCYXNlLCBJRGlzcGxheURlbnNpdHlPcHRpb25zLCBEaXNwbGF5RGVuc2l0eVRva2VuIH0gZnJvbSAnLi4vY29yZS9kZW5zaXR5JztcbmltcG9ydCB7IEN1cnJlbnRSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuLi9jb3JlL2kxOG4vcmVzb3VyY2VzJztcbmltcG9ydCB7IElMaXN0UmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi4vY29yZS9pMThuL2xpc3QtcmVzb3VyY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBJTGlzdENoaWxkIHtcbiAgICBpbmRleDogbnVtYmVyO1xufVxuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEJhc2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0QmFzZURpcmVjdGl2ZSBleHRlbmRzIERpc3BsYXlEZW5zaXR5QmFzZSB7XG4gICAgb25JdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWxsb3dMZWZ0UGFubmluZzogYm9vbGVhbjtcbiAgICBhbGxvd1JpZ2h0UGFubmluZzogYm9vbGVhbjtcbiAgICBwYW5FbmRUcmlnZ2VyaW5nVGhyZXNob2xkOiBudW1iZXI7XG4gICAgb25MZWZ0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblJpZ2h0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblBhblN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjaGlsZHJlbjogUXVlcnlMaXN0PGFueT47XG4gICAgbGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlOiBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgbGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZTogSWd4TGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoRGlzcGxheURlbnNpdHlUb2tlbikgcHJvdGVjdGVkIF9kaXNwbGF5RGVuc2l0eU9wdGlvbnM6IElEaXNwbGF5RGVuc2l0eU9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoX2Rpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBJZ3hMaXN0UGFuU3RhdGUgeyBOT05FLCBMRUZULCBSSUdIVCB9XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEVtcHR5TGlzdF0nXG59KVxuZXhwb3J0IGNsYXNzIElneEVtcHR5TGlzdFRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hEYXRhTG9hZGluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneERhdGFMb2FkaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RJdGVtTGVmdFBhbm5pbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RJdGVtUmlnaHRQYW5uaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cbiJdfQ==