import { Directive, TemplateRef, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export class IgxListBaseDirective extends DisplayDensityBase {
    constructor(_displayDensityOptions) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
    }
}
IgxListBaseDirective.ɵfac = function IgxListBaseDirective_Factory(t) { return new (t || IgxListBaseDirective)(ɵngcc0.ɵɵdirectiveInject(DisplayDensityToken, 8)); };
IgxListBaseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxListBaseDirective, selectors: [["", "igxListBase", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
IgxListBaseDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxListBaseDirective, [{
        type: Directive,
        args: [{
                selector: '[igxListBase]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DisplayDensityToken]
            }] }]; }, null); })();
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
export class IgxEmptyListTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxEmptyListTemplateDirective.ɵfac = function IgxEmptyListTemplateDirective_Factory(t) { return new (t || IgxEmptyListTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxEmptyListTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxEmptyListTemplateDirective, selectors: [["", "igxEmptyList", ""]] });
IgxEmptyListTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxEmptyListTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxEmptyList]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
export class IgxDataLoadingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxDataLoadingTemplateDirective.ɵfac = function IgxDataLoadingTemplateDirective_Factory(t) { return new (t || IgxDataLoadingTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxDataLoadingTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxDataLoadingTemplateDirective, selectors: [["", "igxDataLoading", ""]] });
IgxDataLoadingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDataLoadingTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxDataLoading]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
export class IgxListItemLeftPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemLeftPanningTemplateDirective.ɵfac = function IgxListItemLeftPanningTemplateDirective_Factory(t) { return new (t || IgxListItemLeftPanningTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxListItemLeftPanningTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxListItemLeftPanningTemplateDirective, selectors: [["", "igxListItemLeftPanning", ""]] });
IgxListItemLeftPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxListItemLeftPanningTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxListItemLeftPanning]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
export class IgxListItemRightPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxListItemRightPanningTemplateDirective.ɵfac = function IgxListItemRightPanningTemplateDirective_Factory(t) { return new (t || IgxListItemRightPanningTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxListItemRightPanningTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxListItemRightPanningTemplateDirective, selectors: [["", "igxListItemRightPanning", ""]] });
IgxListItemRightPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxListItemRightPanningTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxListItemRightPanning]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9saXN0L2xpc3QuY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUEyQixRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxrQkFBa0IsRUFBMEIsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVFsRyxjQUFjOztBQUlkLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxrQkFBa0I7QUFDNUQsSUFXSSxZQUErRCxzQkFBOEM7QUFDakgsUUFBUSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN0QyxRQUZtRSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO0FBQUMsSUFFOUcsQ0FBQztBQUNMO2dEQWxCQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLGVBQWUsY0FDNUI7MEtBQ0k7QUFBQztBQUE4Qyw0Q0FZbkMsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7QUFBUTs7Ozs7Ozs7Ozs7a0NBQUU7QUFLakUsTUFBTSxDQUFOLElBQVksZUFBcUM7QUFBakQsV0FBWSxlQUFlO0FBQUksSUFBRCxxREFBSSxDQUFBO0FBQUMsSUFBQyxxREFBSSxDQUFBO0FBQUMsSUFBQyx1REFBSyxDQUFBO0FBQUMsQ0FBQyxFQUFyQyxlQUFlLEtBQWYsZUFBZSxRQUFzQjtBQUtqRCxNQUFNLE9BQU8sNkJBQTZCO0FBQzFDLElBQUksWUFBbUIsUUFBMEI7QUFBSSxRQUE5QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtBQUFDLElBQUcsQ0FBQztBQUN0RDt5REFMQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLGdCQUFnQixjQUM3Qjs4SUFDSTtBQUFDO0FBQ1UsWUFwQ0ksV0FBVztBQUFHOzs7Ozs7NEVBQUU7QUEwQ3BDLE1BQU0sT0FBTywrQkFBK0I7QUFDNUMsSUFBSSxZQUFtQixRQUEwQjtBQUFJLFFBQTlCLGFBQVEsR0FBUixRQUFRLENBQWtCO0FBQUMsSUFBRyxDQUFDO0FBQ3REOzJEQUxDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsa0JBQWtCLGNBQy9CO29KQUNJO0FBQUM7QUFDVSxZQTNDSSxXQUFXO0FBQUc7Ozs7Ozs0RUFBRTtBQWlEcEMsTUFBTSxPQUFPLHVDQUF1QztBQUNwRCxJQUFJLFlBQW1CLFFBQTBCO0FBQUksUUFBOUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7QUFBQyxJQUFHLENBQUM7QUFDdEQ7bUVBTEMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSwwQkFBMEIsY0FDdkM7NEtBQ0k7QUFBQztBQUNVLFlBbERJLFdBQVc7QUFBRzs7Ozs7OzRFQUFFO0FBd0RwQyxNQUFNLE9BQU8sd0NBQXdDO0FBQ3JELElBQUksWUFBbUIsUUFBMEI7QUFBSSxRQUE5QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtBQUFDLElBQUcsQ0FBQztBQUN0RDtvRUFMQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLDJCQUEyQixjQUN4QzsrS0FDSTtBQUFDO0FBQ1UsWUF6REksV0FBVztBQUFHOzs7Ozs7NEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaXNwbGF5RGVuc2l0eUJhc2UsIElEaXNwbGF5RGVuc2l0eU9wdGlvbnMsIERpc3BsYXlEZW5zaXR5VG9rZW4gfSBmcm9tICcuLi9jb3JlL2RlbnNpdHknO1xuaW1wb3J0IHsgQ3VycmVudFJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4uL2NvcmUvaTE4bi9yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUxpc3RSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuLi9jb3JlL2kxOG4vbGlzdC1yZXNvdXJjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0Q2hpbGQge1xuICAgIGluZGV4OiBudW1iZXI7XG59XG5cbi8qKiBAaGlkZGVuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0QmFzZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RCYXNlRGlyZWN0aXZlIGV4dGVuZHMgRGlzcGxheURlbnNpdHlCYXNlIHtcbiAgICBvbkl0ZW1DbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBhbGxvd0xlZnRQYW5uaW5nOiBib29sZWFuO1xuICAgIGFsbG93UmlnaHRQYW5uaW5nOiBib29sZWFuO1xuICAgIHBhbkVuZFRyaWdnZXJpbmdUaHJlc2hvbGQ6IG51bWJlcjtcbiAgICBvbkxlZnRQYW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUmlnaHRQYW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUGFuU3RhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNoaWxkcmVuOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBsaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGU6IElneExpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBsaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlOiBJZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChEaXNwbGF5RGVuc2l0eVRva2VuKSBwcm90ZWN0ZWQgX2Rpc3BsYXlEZW5zaXR5T3B0aW9uczogSURpc3BsYXlEZW5zaXR5T3B0aW9ucykge1xuICAgICAgICBzdXBlcihfZGlzcGxheURlbnNpdHlPcHRpb25zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBlbnVtIElneExpc3RQYW5TdGF0ZSB7IE5PTkUsIExFRlQsIFJJR0hUIH1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RW1wdHlMaXN0XSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RW1wdHlMaXN0VGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneERhdGFMb2FkaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RGF0YUxvYWRpbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEl0ZW1MZWZ0UGFubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEl0ZW1SaWdodFBhbm5pbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuIl19