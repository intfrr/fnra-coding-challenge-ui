import { Directive, HostBinding, TemplateRef } from '@angular/core';
import { IgxTabsBase } from './tabs.common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tabs.common';
var ButtonStyle;
(function (ButtonStyle) {
    ButtonStyle["VISIBLE"] = "visible";
    ButtonStyle["HIDDEN"] = "hidden";
    ButtonStyle["NOT_DISPLAYED"] = "not_displayed";
})(ButtonStyle || (ButtonStyle = {}));
export class IgxRightButtonStyleDirective {
    constructor(tabs) {
        this.tabs = tabs;
    }
    get visibleCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
    }
    get hiddenCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
    }
    get notDisplayedCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
    }
    getRightButtonStyle() {
        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        let itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const offset = this.tabs.offset;
        const total = offset + viewPortWidth;
        // Fix for IE 11, a difference is accumulated from the widths calculations.
        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {
            return ButtonStyle.NOT_DISPLAYED;
        }
        if (itemsContainerWidth > total) {
            return ButtonStyle.VISIBLE;
        }
        else {
            return ButtonStyle.HIDDEN;
        }
    }
}
IgxRightButtonStyleDirective.ɵfac = function IgxRightButtonStyleDirective_Factory(t) { return new (t || IgxRightButtonStyleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxTabsBase)); };
IgxRightButtonStyleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxRightButtonStyleDirective, selectors: [["", "igxRightButtonStyle", ""]], hostVars: 6, hostBindings: function IgxRightButtonStyleDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-tabs__header-button", ctx.visibleCSS)("igx-tabs__header-button--hidden", ctx.hiddenCSS)("igx-tabs__header-button--none", ctx.notDisplayedCSS);
    } } });
IgxRightButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsBase }
];
IgxRightButtonStyleDirective.propDecorators = {
    visibleCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button',] }],
    hiddenCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] }],
    notDisplayedCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxRightButtonStyleDirective, [{
        type: Directive,
        args: [{
                selector: '[igxRightButtonStyle]'
            }]
    }], function () { return [{ type: ɵngcc1.IgxTabsBase }]; }, { visibleCSS: [{
            type: HostBinding,
            args: ['class.igx-tabs__header-button']
        }], hiddenCSS: [{
            type: HostBinding,
            args: ['class.igx-tabs__header-button--hidden']
        }], notDisplayedCSS: [{
            type: HostBinding,
            args: ['class.igx-tabs__header-button--none']
        }] }); })();
export class IgxLeftButtonStyleDirective {
    constructor(tabs) {
        this.tabs = tabs;
    }
    get visibleCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
    }
    get hiddenCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
    }
    get notDisplayedCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
    }
    getLeftButtonStyle() {
        // We use this hacky way to get the width of the itemsContainer,
        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.
        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;
        let itemsContainerWidth = 0;
        if (itemsContainerChildrenCount > 1) {
            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];
            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;
        }
        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const offset = this.tabs.offset;
        if (offset === 0) {
            // Fix for IE 11, a difference is accumulated from the widths calculations.
            if (itemsContainerWidth - headerContainerWidth <= 1) {
                return ButtonStyle.NOT_DISPLAYED;
            }
            return ButtonStyle.HIDDEN;
        }
        else {
            return ButtonStyle.VISIBLE;
        }
    }
}
IgxLeftButtonStyleDirective.ɵfac = function IgxLeftButtonStyleDirective_Factory(t) { return new (t || IgxLeftButtonStyleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxTabsBase)); };
IgxLeftButtonStyleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxLeftButtonStyleDirective, selectors: [["", "igxLeftButtonStyle", ""]], hostVars: 6, hostBindings: function IgxLeftButtonStyleDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-tabs__header-button", ctx.visibleCSS)("igx-tabs__header-button--hidden", ctx.hiddenCSS)("igx-tabs__header-button--none", ctx.notDisplayedCSS);
    } } });
IgxLeftButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsBase }
];
IgxLeftButtonStyleDirective.propDecorators = {
    visibleCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button',] }],
    hiddenCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] }],
    notDisplayedCSS: [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxLeftButtonStyleDirective, [{
        type: Directive,
        args: [{
                selector: '[igxLeftButtonStyle]'
            }]
    }], function () { return [{ type: ɵngcc1.IgxTabsBase }]; }, { visibleCSS: [{
            type: HostBinding,
            args: ['class.igx-tabs__header-button']
        }], hiddenCSS: [{
            type: HostBinding,
            args: ['class.igx-tabs__header-button--hidden']
        }], notDisplayedCSS: [{
            type: HostBinding,
            args: ['class.igx-tabs__header-button--none']
        }] }); })();
export class IgxTabItemTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxTabItemTemplateDirective.ɵfac = function IgxTabItemTemplateDirective_Factory(t) { return new (t || IgxTabItemTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxTabItemTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxTabItemTemplateDirective, selectors: [["", "igxTab", ""]] });
IgxTabItemTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTabItemTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxTab]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,